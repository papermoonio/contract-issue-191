{"id":"e459681a152a43d97ce9be30ddc43c6c","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/governance/utils/IVotes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n */\ninterface IVotes {\n    /**\n     * @dev The signature used has expired.\n     */\n    error VotesExpiredSignature(uint256 expiry);\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     */\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\n}\n"},"@openzeppelin/contracts/governance/utils/Votes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (governance/utils/Votes.sol)\npragma solidity ^0.8.20;\n\nimport {IERC5805} from \"../../interfaces/IERC5805.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Nonces} from \"../../utils/Nonces.sol\";\nimport {EIP712} from \"../../utils/cryptography/EIP712.sol\";\nimport {Checkpoints} from \"../../utils/structs/Checkpoints.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {ECDSA} from \"../../utils/cryptography/ECDSA.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\n * \"representative\" that will pool delegated voting units from different accounts and can then use it to vote in\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\n *\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\n * example, see {ERC721Votes}.\n *\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\n * cost of this history tracking optional.\n *\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\n * previous example, it would be included in {ERC721-_update}).\n */\nabstract contract Votes is Context, EIP712, Nonces, IERC5805 {\n    using Checkpoints for Checkpoints.Trace208;\n\n    bytes32 private constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address account => address) private _delegatee;\n\n    mapping(address delegatee => Checkpoints.Trace208) private _delegateCheckpoints;\n\n    Checkpoints.Trace208 private _totalCheckpoints;\n\n    /**\n     * @dev The clock was incorrectly modified.\n     */\n    error ERC6372InconsistentClock();\n\n    /**\n     * @dev Lookup to future votes is not available.\n     */\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\n\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\n     */\n    function clock() public view virtual returns (uint48) {\n        return Time.blockNumber();\n    }\n\n    /**\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual returns (string memory) {\n        // Check that the clock was not modified\n        if (clock() != Time.blockNumber()) {\n            revert ERC6372InconsistentClock();\n        }\n        return \"mode=blocknumber&from=default\";\n    }\n\n    /**\n     * @dev Validate that a timepoint is in the past, and return it as a uint48.\n     */\n    function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        return SafeCast.toUint48(timepoint);\n    }\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].latest();\n    }\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\n    }\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\n        return _totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint));\n    }\n\n    /**\n     * @dev Returns the current total supply of votes.\n     */\n    function _getTotalSupply() internal view virtual returns (uint256) {\n        return _totalCheckpoints.latest();\n    }\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        address account = _msgSender();\n        _delegate(account, delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > expiry) {\n            revert VotesExpiredSignature(expiry);\n        }\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        _useCheckedNonce(signer, nonce);\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n    function _delegate(address account, address delegatee) internal virtual {\n        address oldDelegate = delegates(account);\n        _delegatee[account] = delegatee;\n\n        emit DelegateChanged(account, oldDelegate, delegatee);\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\n    }\n\n    /**\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\n     */\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\n        if (from == address(0)) {\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\n        }\n        if (to == address(0)) {\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\n        }\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Moves delegated votes from one delegate to another.\n     */\n    function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\n        if (from != to && amount > 0) {\n            if (from != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[from],\n                    _subtract,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(from, oldValue, newValue);\n            }\n            if (to != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[to],\n                    _add,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(to, oldValue, newValue);\n            }\n        }\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function _checkpoints(\n        address account,\n        uint32 pos\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _delegateCheckpoints[account].at(pos);\n    }\n\n    function _push(\n        Checkpoints.Trace208 storage store,\n        function(uint208, uint208) view returns (uint208) op,\n        uint208 delta\n    ) private returns (uint208 oldValue, uint208 newValue) {\n        return store.push(clock(), op(store.latest(), delta));\n    }\n\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\n        return a + b;\n    }\n\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\n        return a - b;\n    }\n\n    /**\n     * @dev Must return the voting units held by an account.\n     */\n    function _getVotingUnits(address) internal view virtual returns (uint256);\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts/interfaces/IERC5805.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\n\npragma solidity ^0.8.20;\n\nimport {IVotes} from \"../governance/utils/IVotes.sol\";\nimport {IERC6372} from \"./IERC6372.sol\";\n\ninterface IERC5805 is IERC6372, IVotes {}\n"},"@openzeppelin/contracts/interfaces/IERC6372.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC6372 {\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() external view returns (uint48);\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Votes} from \"../../../governance/utils/Votes.sol\";\nimport {Checkpoints} from \"../../../utils/structs/Checkpoints.sol\";\n\n/**\n * @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\n * power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n */\nabstract contract ERC20Votes is ERC20, Votes {\n    /**\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\n     */\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\n     *\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\n     * returned.\n     */\n    function _maxSupply() internal view virtual returns (uint256) {\n        return type(uint208).max;\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n        if (from == address(0)) {\n            uint256 supply = totalSupply();\n            uint256 cap = _maxSupply();\n            if (supply > cap) {\n                revert ERC20ExceededSafeSupply(supply, cap);\n            }\n        }\n        _transferVotingUnits(from, to, value);\n    }\n\n    /**\n     * @dev Returns the voting units of an `account`.\n     *\n     * WARNING: Overriding this function may compromise the internal vote accounting.\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\n     */\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return _numCheckpoints(account);\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _checkpoints(account, pos);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    // slither-disable-next-line constable-states\n    string private _nameFallback;\n    // slither-disable-next-line constable-states\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @inheritdoc IERC5267\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Nonces.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ShortStrings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        assembly (\"memory-safe\") {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {toShortStringWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {toShortStringWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(buffer, add(0x20, offset)))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/Checkpoints.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/structs/Checkpoints.sol)\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n */\nlibrary Checkpoints {\n    /**\n     * @dev A value was attempted to be inserted on a past checkpoint.\n     */\n    error CheckpointUnorderedInsertion();\n\n    struct Trace224 {\n        Checkpoint224[] _checkpoints;\n    }\n\n    struct Checkpoint224 {\n        uint32 _key;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\n     * library.\n     */\n    function push(\n        Trace224 storage self,\n        uint32 key,\n        uint224 value\n    ) internal returns (uint224 oldValue, uint224 newValue) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace224 storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint224 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoints.\n     */\n    function length(Trace224 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint224 value\n    ) private returns (uint224 oldValue, uint224 newValue) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            Checkpoint224 storage last = _unsafeAccess(self, pos - 1);\n            uint32 lastKey = last._key;\n            uint224 lastValue = last._value;\n\n            // Checkpoint keys must be non-decreasing.\n            if (lastKey > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (lastKey == key) {\n                last._value = value;\n            } else {\n                self.push(Checkpoint224({_key: key, _value: value}));\n            }\n            return (lastValue, value);\n        } else {\n            self.push(Checkpoint224({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint224[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint224 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace208 {\n        Checkpoint208[] _checkpoints;\n    }\n\n    struct Checkpoint208 {\n        uint48 _key;\n        uint208 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\n     * library.\n     */\n    function push(\n        Trace208 storage self,\n        uint48 key,\n        uint208 value\n    ) internal returns (uint208 oldValue, uint208 newValue) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace208 storage self) internal view returns (uint208) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint208 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoints.\n     */\n    function length(Trace208 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint208 value\n    ) private returns (uint208 oldValue, uint208 newValue) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            Checkpoint208 storage last = _unsafeAccess(self, pos - 1);\n            uint48 lastKey = last._key;\n            uint208 lastValue = last._value;\n\n            // Checkpoint keys must be non-decreasing.\n            if (lastKey > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (lastKey == key) {\n                last._value = value;\n            } else {\n                self.push(Checkpoint208({_key: key, _value: value}));\n            }\n            return (lastValue, value);\n        } else {\n            self.push(Checkpoint208({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint208[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint208 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace160 {\n        Checkpoint160[] _checkpoints;\n    }\n\n    struct Checkpoint160 {\n        uint96 _key;\n        uint160 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\n     * library.\n     */\n    function push(\n        Trace160 storage self,\n        uint96 key,\n        uint160 value\n    ) internal returns (uint160 oldValue, uint160 newValue) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace160 storage self) internal view returns (uint160) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint160 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoints.\n     */\n    function length(Trace160 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint160 value\n    ) private returns (uint160 oldValue, uint160 newValue) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            Checkpoint160 storage last = _unsafeAccess(self, pos - 1);\n            uint96 lastKey = last._key;\n            uint160 lastValue = last._value;\n\n            // Checkpoint keys must be non-decreasing.\n            if (lastKey > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (lastKey == key) {\n                last._value = value;\n            } else {\n                self.push(Checkpoint160({_key: key, _value: value}));\n            }\n            return (lastValue, value);\n        } else {\n            self.push(Checkpoint160({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint160[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint160 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/types/Time.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/types/Time.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\n\n/**\n * @dev This library provides helpers for manipulating time-related objects.\n *\n * It uses the following types:\n * - `uint48` for timepoints\n * - `uint32` for durations\n *\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n * - additional helper functions\n */\nlibrary Time {\n    using Time for *;\n\n    /**\n     * @dev Get the block timestamp as a Timepoint.\n     */\n    function timestamp() internal view returns (uint48) {\n        return SafeCast.toUint48(block.timestamp);\n    }\n\n    /**\n     * @dev Get the block number as a Timepoint.\n     */\n    function blockNumber() internal view returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    // ==================================================== Delay =====================================================\n    /**\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\n     * future. The \"effect\" timepoint describes when the transitions happens from the \"old\" value to the \"new\" value.\n     * This allows updating the delay applied to some operation while keeping some guarantees.\n     *\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\n     * still apply for some time.\n     *\n     *\n     * The `Delay` type is 112 bits long, and packs the following:\n     *\n     * ```\n     *   | [uint48]: effect date (timepoint)\n     *   |           | [uint32]: value before (duration)\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\n     * ```\n     *\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\n     * supported.\n     */\n    type Delay is uint112;\n\n    /**\n     * @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature\n     */\n    function toDelay(uint32 duration) internal pure returns (Delay) {\n        return Delay.wrap(duration);\n    }\n\n    /**\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\n     */\n    function _getFullAt(\n        Delay self,\n        uint48 timepoint\n    ) private pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        (valueBefore, valueAfter, effect) = self.unpack();\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n     * effect timepoint is 0, then the pending value should not be considered.\n     */\n    function getFull(Delay self) internal view returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        return _getFullAt(self, timestamp());\n    }\n\n    /**\n     * @dev Get the current value.\n     */\n    function get(Delay self) internal view returns (uint32) {\n        (uint32 delay, , ) = self.getFull();\n        return delay;\n    }\n\n    /**\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n     * new delay becomes effective.\n     */\n    function withUpdate(\n        Delay self,\n        uint32 newValue,\n        uint32 minSetback\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\n        uint32 value = self.get();\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\n        effect = timestamp() + setback;\n        return (pack(value, newValue, effect), effect);\n    }\n\n    /**\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\n     */\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        uint112 raw = Delay.unwrap(self);\n\n        valueAfter = uint32(raw);\n        valueBefore = uint32(raw >> 32);\n        effect = uint48(raw >> 64);\n\n        return (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev pack the components into a Delay object.\n     */\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\n    }\n}\n"},"contracts/PVMERC20Votes.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/governance/utils/Votes.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\n\ncontract PVMERC20Votes is ERC20Votes {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply,\n        string memory name2,\n        string memory version\n    ) ERC20(name, symbol) ERC20Votes() EIP712(name2, version) {\n        _mint(_msgSender(), totalSupply);\n    }\n\n    function _update(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._update(from, to, amount);\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":null,"formattedMessage":"\nWarning: It looks like you are using 'ecrecover' to validate a signature of a user account.\nPolkadot comes with native account abstraction support, therefore it is highly recommended NOT\nto rely on the fact that the account has an ECDSA private key attached to it since accounts might\nimplement other signature schemes.\n\n--> @openzeppelin/contracts/utils/cryptography/ECDSA.sol\n","message":"\nWarning: It looks like you are using 'ecrecover' to validate a signature of a user account.\nPolkadot comes with native account abstraction support, therefore it is highly recommended NOT\nto rely on the fact that the account has an ECDSA private key attached to it since accounts might\nimplement other signature schemes.\n","severity":"warning","sourceLocation":{"file":"16","start":6541,"end":6565},"type":"Warning"}],"version":"0.8.28","long_version":"0.8.28+commit.7893614a.Emscripten.clang","revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","sources":{"@openzeppelin/contracts/governance/utils/IVotes.sol":{"id":0,"ast":{"absolutePath":"@openzeppelin/contracts/governance/utils/IVotes.sol","exportedSymbols":{"IVotes":[82]},"id":83,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"110:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IVotes","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"136:102:0","text":" @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts."},"fullyImplemented":false,"id":82,"linearizedBaseContracts":[82],"name":"IVotes","nameLocation":"249:6:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"262:55:0","text":" @dev The signature used has expired."},"errorSelector":"4683af0e","id":7,"name":"VotesExpiredSignature","nameLocation":"328:21:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"expiry","nameLocation":"358:6:0","nodeType":"VariableDeclaration","scope":7,"src":"350:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"349:16:0"},"src":"322:44:0"},{"anonymous":false,"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"372:71:0","text":" @dev Emitted when an account changes their delegate."},"eventSelector":"3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f","id":16,"name":"DelegateChanged","nameLocation":"454:15:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"indexed":true,"mutability":"mutable","name":"delegator","nameLocation":"486:9:0","nodeType":"VariableDeclaration","scope":16,"src":"470:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"470:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"fromDelegate","nameLocation":"513:12:0","nodeType":"VariableDeclaration","scope":16,"src":"497:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"497:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"toDelegate","nameLocation":"543:10:0","nodeType":"VariableDeclaration","scope":16,"src":"527:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"527:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"469:85:0"},"src":"448:107:0"},{"anonymous":false,"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"561:131:0","text":" @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units."},"eventSelector":"dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724","id":25,"name":"DelegateVotesChanged","nameLocation":"703:20:0","nodeType":"EventDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"indexed":true,"mutability":"mutable","name":"delegate","nameLocation":"740:8:0","nodeType":"VariableDeclaration","scope":25,"src":"724:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"724:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":21,"indexed":false,"mutability":"mutable","name":"previousVotes","nameLocation":"758:13:0","nodeType":"VariableDeclaration","scope":25,"src":"750:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"750:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":23,"indexed":false,"mutability":"mutable","name":"newVotes","nameLocation":"781:8:0","nodeType":"VariableDeclaration","scope":25,"src":"773:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"773:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"723:67:0"},"src":"697:94:0"},{"documentation":{"id":26,"nodeType":"StructuredDocumentation","src":"797:79:0","text":" @dev Returns the current amount of votes that `account` has."},"functionSelector":"9ab24eb0","id":33,"implemented":false,"kind":"function","modifiers":[],"name":"getVotes","nameLocation":"890:8:0","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"account","nameLocation":"907:7:0","nodeType":"VariableDeclaration","scope":33,"src":"899:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":27,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:17:0"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":33,"src":"939:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":30,"name":"uint256","nodeType":"ElementaryTypeName","src":"939:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"938:9:0"},"scope":82,"src":"881:67:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":34,"nodeType":"StructuredDocumentation","src":"954:230:0","text":" @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n configured to use block numbers, this will return the value at the end of the corresponding block."},"functionSelector":"3a46b1a8","id":43,"implemented":false,"kind":"function","modifiers":[],"name":"getPastVotes","nameLocation":"1198:12:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"account","nameLocation":"1219:7:0","nodeType":"VariableDeclaration","scope":43,"src":"1211:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":35,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"timepoint","nameLocation":"1236:9:0","nodeType":"VariableDeclaration","scope":43,"src":"1228:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"1228:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:36:0"},"returnParameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43,"src":"1270:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:9:0"},"scope":82,"src":"1189:90:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":44,"nodeType":"StructuredDocumentation","src":"1285:481:0","text":" @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n configured to use block numbers, this will return the value at the end of the corresponding block.\n NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n Votes that have not been delegated are still part of total supply, even though they would not participate in a\n vote."},"functionSelector":"8e539e8c","id":51,"implemented":false,"kind":"function","modifiers":[],"name":"getPastTotalSupply","nameLocation":"1780:18:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46,"mutability":"mutable","name":"timepoint","nameLocation":"1807:9:0","nodeType":"VariableDeclaration","scope":51,"src":"1799:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1798:19:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51,"src":"1841:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48,"name":"uint256","nodeType":"ElementaryTypeName","src":"1841:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1840:9:0"},"scope":82,"src":"1771:79:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"1856:71:0","text":" @dev Returns the delegate that `account` has chosen."},"functionSelector":"587cde1e","id":59,"implemented":false,"kind":"function","modifiers":[],"name":"delegates","nameLocation":"1941:9:0","nodeType":"FunctionDefinition","parameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"account","nameLocation":"1959:7:0","nodeType":"VariableDeclaration","scope":59,"src":"1951:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"1951:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1950:17:0"},"returnParameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":59,"src":"1991:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"1991:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1990:9:0"},"scope":82,"src":"1932:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"2006:71:0","text":" @dev Delegates votes from the sender to `delegatee`."},"functionSelector":"5c19a95c","id":65,"implemented":false,"kind":"function","modifiers":[],"name":"delegate","nameLocation":"2091:8:0","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"delegatee","nameLocation":"2108:9:0","nodeType":"VariableDeclaration","scope":65,"src":"2100:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"2100:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2099:19:0"},"returnParameters":{"id":64,"nodeType":"ParameterList","parameters":[],"src":"2127:0:0"},"scope":82,"src":"2082:46:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"2134:67:0","text":" @dev Delegates votes from signer to `delegatee`."},"functionSelector":"c3cda520","id":81,"implemented":false,"kind":"function","modifiers":[],"name":"delegateBySig","nameLocation":"2215:13:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"delegatee","nameLocation":"2237:9:0","nodeType":"VariableDeclaration","scope":81,"src":"2229:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"2229:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":70,"mutability":"mutable","name":"nonce","nameLocation":"2256:5:0","nodeType":"VariableDeclaration","scope":81,"src":"2248:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"expiry","nameLocation":"2271:6:0","nodeType":"VariableDeclaration","scope":81,"src":"2263:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"2263:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"v","nameLocation":"2285:1:0","nodeType":"VariableDeclaration","scope":81,"src":"2279:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":73,"name":"uint8","nodeType":"ElementaryTypeName","src":"2279:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"r","nameLocation":"2296:1:0","nodeType":"VariableDeclaration","scope":81,"src":"2288:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":75,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2288:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":78,"mutability":"mutable","name":"s","nameLocation":"2307:1:0","nodeType":"VariableDeclaration","scope":81,"src":"2299:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2299:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2228:81:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"2318:0:0"},"scope":82,"src":"2206:113:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":83,"src":"239:2082:0","usedErrors":[7],"usedEvents":[16,25]}],"src":"110:2212:0"}},"@openzeppelin/contracts/governance/utils/Votes.sol":{"id":1,"ast":{"absolutePath":"@openzeppelin/contracts/governance/utils/Votes.sol","exportedSymbols":{"Checkpoints":[9229],"Context":[1594],"ECDSA":[3805],"EIP712":[4032],"IERC5805":[661],"Nonces":[1662],"SafeCast":[7504],"Time":[9503],"Votes":[625]},"id":626,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":84,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:1"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5805.sol","file":"../../interfaces/IERC5805.sol","id":86,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":662,"src":"135:55:1","symbolAliases":[{"foreign":{"id":85,"name":"IERC5805","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"143:8:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":88,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":1595,"src":"191:48:1","symbolAliases":[{"foreign":{"id":87,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"199:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Nonces.sol","file":"../../utils/Nonces.sol","id":90,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":1663,"src":"240:46:1","symbolAliases":[{"foreign":{"id":89,"name":"Nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"248:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"../../utils/cryptography/EIP712.sol","id":92,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":4033,"src":"287:59:1","symbolAliases":[{"foreign":{"id":91,"name":"EIP712","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4032,"src":"295:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/Checkpoints.sol","file":"../../utils/structs/Checkpoints.sol","id":94,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":9230,"src":"347:64:1","symbolAliases":[{"foreign":{"id":93,"name":"Checkpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9229,"src":"355:11:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"../../utils/math/SafeCast.sol","id":96,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":7505,"src":"412:55:1","symbolAliases":[{"foreign":{"id":95,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"420:8:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"../../utils/cryptography/ECDSA.sol","id":98,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":3806,"src":"468:57:1","symbolAliases":[{"foreign":{"id":97,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3805,"src":"476:5:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","file":"../../utils/types/Time.sol","id":100,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":626,"sourceUnit":9504,"src":"526:48:1","symbolAliases":[{"foreign":{"id":99,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"534:4:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":102,"name":"Context","nameLocations":["1919:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1594,"src":"1919:7:1"},"id":103,"nodeType":"InheritanceSpecifier","src":"1919:7:1"},{"baseName":{"id":104,"name":"EIP712","nameLocations":["1928:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":4032,"src":"1928:6:1"},"id":105,"nodeType":"InheritanceSpecifier","src":"1928:6:1"},{"baseName":{"id":106,"name":"Nonces","nameLocations":["1936:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1662,"src":"1936:6:1"},"id":107,"nodeType":"InheritanceSpecifier","src":"1936:6:1"},{"baseName":{"id":108,"name":"IERC5805","nameLocations":["1944:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":661,"src":"1944:8:1"},"id":109,"nodeType":"InheritanceSpecifier","src":"1944:8:1"}],"canonicalName":"Votes","contractDependencies":[],"contractKind":"contract","documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"576:1315:1","text":" @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\n transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\n \"representative\" that will pool delegated voting units from different accounts and can then use it to vote in\n decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\n delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\n This contract is often combined with a token contract such that voting units correspond to token units. For an\n example, see {ERC721Votes}.\n The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\n at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\n cost of this history tracking optional.\n When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\n {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\n previous example, it would be included in {ERC721-_update})."},"fullyImplemented":false,"id":625,"internalFunctionIDs":{"602":1,"616":2},"linearizedBaseContracts":[625,661,82,676,1662,4032,650,1594],"name":"Votes","nameLocation":"1910:5:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":113,"libraryName":{"id":110,"name":"Checkpoints","nameLocations":["1965:11:1"],"nodeType":"IdentifierPath","referencedDeclaration":9229,"src":"1965:11:1"},"nodeType":"UsingForDirective","src":"1959:43:1","typeName":{"id":112,"nodeType":"UserDefinedTypeName","pathNode":{"id":111,"name":"Checkpoints.Trace208","nameLocations":["1981:11:1","1993:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"1981:20:1"},"referencedDeclaration":8185,"src":"1981:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}}},{"constant":true,"id":118,"mutability":"constant","name":"DELEGATION_TYPEHASH","nameLocation":"2033:19:1","nodeType":"VariableDeclaration","scope":625,"src":"2008:126:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2008:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"44656c65676174696f6e28616464726573732064656c6567617465652c75696e74323536206e6f6e63652c75696e743235362065787069727929","id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2073:60:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_e48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf","typeString":"literal_string \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\""},"value":"Delegation(address delegatee,uint256 nonce,uint256 expiry)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf","typeString":"literal_string \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\""}],"id":115,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"2063:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2063:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":122,"mutability":"mutable","name":"_delegatee","nameLocation":"2185:10:1","nodeType":"VariableDeclaration","scope":625,"src":"2141:54:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":121,"keyName":"account","keyNameLocation":"2157:7:1","keyType":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2141:35:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"2168:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":127,"mutability":"mutable","name":"_delegateCheckpoints","nameLocation":"2261:20:1","nodeType":"VariableDeclaration","scope":625,"src":"2202:79:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208)"},"typeName":{"id":126,"keyName":"delegatee","keyNameLocation":"2218:9:1","keyType":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:50:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":125,"nodeType":"UserDefinedTypeName","pathNode":{"id":124,"name":"Checkpoints.Trace208","nameLocations":["2231:11:1","2243:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"2231:20:1"},"referencedDeclaration":8185,"src":"2231:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}}},"visibility":"private"},{"constant":false,"id":130,"mutability":"mutable","name":"_totalCheckpoints","nameLocation":"2317:17:1","nodeType":"VariableDeclaration","scope":625,"src":"2288:46:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":129,"nodeType":"UserDefinedTypeName","pathNode":{"id":128,"name":"Checkpoints.Trace208","nameLocations":["2288:11:1","2300:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"2288:20:1"},"referencedDeclaration":8185,"src":"2288:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"private"},{"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"2341:59:1","text":" @dev The clock was incorrectly modified."},"errorSelector":"6ff07140","id":133,"name":"ERC6372InconsistentClock","nameLocation":"2411:24:1","nodeType":"ErrorDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[],"src":"2435:2:1"},"src":"2405:33:1"},{"documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"2444:64:1","text":" @dev Lookup to future votes is not available."},"errorSelector":"ecd3f81e","id":140,"name":"ERC5805FutureLookup","nameLocation":"2519:19:1","nodeType":"ErrorDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"timepoint","nameLocation":"2547:9:1","nodeType":"VariableDeclaration","scope":140,"src":"2539:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"2539:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"clock","nameLocation":"2565:5:1","nodeType":"VariableDeclaration","scope":140,"src":"2558:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":137,"name":"uint48","nodeType":"ElementaryTypeName","src":"2558:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2538:33:1"},"src":"2513:59:1"},{"baseFunctions":[669],"body":{"id":150,"nodeType":"Block","src":"2843:42:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":146,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"2860:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$9503_$","typeString":"type(library Time)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:11:1","memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":9264,"src":"2860:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2860:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":145,"id":149,"nodeType":"Return","src":"2853:25:1"}]},"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"2578:206:1","text":" @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\n checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match."},"functionSelector":"91ddadf4","id":151,"implemented":true,"kind":"function","modifiers":[],"name":"clock","nameLocation":"2798:5:1","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[],"src":"2803:2:1"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":151,"src":"2835:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":143,"name":"uint48","nodeType":"ElementaryTypeName","src":"2835:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2834:8:1"},"scope":625,"src":"2789:96:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[675],"body":{"id":170,"nodeType":"Block","src":"3106:206:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":157,"name":"clock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"3169:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3169:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":159,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"3180:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$9503_$","typeString":"type(library Time)"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3185:11:1","memberName":"blockNumber","nodeType":"MemberAccess","referencedDeclaration":9264,"src":"3180:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3180:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"3169:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":167,"nodeType":"IfStatement","src":"3165:93:1","trueBody":{"id":166,"nodeType":"Block","src":"3200:58:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":163,"name":"ERC6372InconsistentClock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3221:24:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3221:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":165,"nodeType":"RevertStatement","src":"3214:33:1"}]}},{"expression":{"hexValue":"6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3274:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f79d44e499ce83a99049e0b7ebf2d6f56e249303be3c14798235137af5ea536","typeString":"literal_string \"mode=blocknumber&from=default\""},"value":"mode=blocknumber&from=default"},"functionReturnParameters":156,"id":169,"nodeType":"Return","src":"3267:38:1"}]},"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"2891:91:1","text":" @dev Machine-readable description of the clock as specified in ERC-6372."},"functionSelector":"4bf5d7e9","id":171,"implemented":true,"kind":"function","modifiers":[],"name":"CLOCK_MODE","nameLocation":"3049:10:1","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[],"src":"3059:2:1"},"returnParameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":171,"src":"3091:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":154,"name":"string","nodeType":"ElementaryTypeName","src":"3091:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3090:15:1"},"scope":625,"src":"3040:272:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":198,"nodeType":"Block","src":"3493:195:1","statements":[{"assignments":[180],"declarations":[{"constant":false,"id":180,"mutability":"mutable","name":"currentTimepoint","nameLocation":"3510:16:1","nodeType":"VariableDeclaration","scope":198,"src":"3503:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":179,"name":"uint48","nodeType":"ElementaryTypeName","src":"3503:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":183,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":181,"name":"clock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"3529:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3529:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"3503:33:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":184,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"3550:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":185,"name":"currentTimepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"3563:16:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"3550:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":192,"nodeType":"IfStatement","src":"3546:90:1","trueBody":{"errorCall":{"arguments":[{"id":188,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"3608:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":189,"name":"currentTimepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"3619:16:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":187,"name":"ERC5805FutureLookup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"3588:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint48_$returns$_t_error_$","typeString":"function (uint256,uint48) pure returns (error)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3588:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":191,"nodeType":"RevertStatement","src":"3581:55:1"}},{"expression":{"arguments":[{"id":195,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"3671:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":193,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"3653:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3662:8:1","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":6494,"src":"3653:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3653:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":178,"id":197,"nodeType":"Return","src":"3646:35:1"}]},"documentation":{"id":172,"nodeType":"StructuredDocumentation","src":"3318:92:1","text":" @dev Validate that a timepoint is in the past, and return it as a uint48."},"id":199,"implemented":true,"kind":"function","modifiers":[],"name":"_validateTimepoint","nameLocation":"3424:18:1","nodeType":"FunctionDefinition","parameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"timepoint","nameLocation":"3451:9:1","nodeType":"VariableDeclaration","scope":199,"src":"3443:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173,"name":"uint256","nodeType":"ElementaryTypeName","src":"3443:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3442:19:1"},"returnParameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":199,"src":"3485:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":176,"name":"uint48","nodeType":"ElementaryTypeName","src":"3485:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"3484:8:1"},"scope":625,"src":"3415:273:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[33],"body":{"id":213,"nodeType":"Block","src":"3851:62:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":207,"name":"_delegateCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"3868:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208 storage ref)"}},"id":209,"indexExpression":{"id":208,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"3889:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3868:29:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},"id":210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3898:6:1","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":8410,"src":"3868:36:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$returns$_t_uint208_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer) view returns (uint208)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3868:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":206,"id":212,"nodeType":"Return","src":"3861:45:1"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"3694:79:1","text":" @dev Returns the current amount of votes that `account` has."},"functionSelector":"9ab24eb0","id":214,"implemented":true,"kind":"function","modifiers":[],"name":"getVotes","nameLocation":"3787:8:1","nodeType":"FunctionDefinition","parameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"account","nameLocation":"3804:7:1","nodeType":"VariableDeclaration","scope":214,"src":"3796:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"3796:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3795:17:1"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":214,"src":"3842:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":204,"name":"uint256","nodeType":"ElementaryTypeName","src":"3842:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3841:9:1"},"scope":625,"src":"3778:135:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[43],"body":{"id":233,"nodeType":"Block","src":"4394:102:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":229,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4478:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":228,"name":"_validateTimepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4459:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) view returns (uint48)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4459:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"expression":{"baseExpression":{"id":224,"name":"_delegateCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"4411:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208 storage ref)"}},"id":226,"indexExpression":{"id":225,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"4432:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4411:29:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},"id":227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4441:17:1","memberName":"upperLookupRecent","nodeType":"MemberAccess","referencedDeclaration":8380,"src":"4411:47:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$_t_uint48_$returns$_t_uint208_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,uint48) view returns (uint208)"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4411:78:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":223,"id":232,"nodeType":"Return","src":"4404:85:1"}]},"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"3919:374:1","text":" @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n configured to use block numbers, this will return the value at the end of the corresponding block.\n Requirements:\n - `timepoint` must be in the past. If operating using block numbers, the block must be already mined."},"functionSelector":"3a46b1a8","id":234,"implemented":true,"kind":"function","modifiers":[],"name":"getPastVotes","nameLocation":"4307:12:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"mutability":"mutable","name":"account","nameLocation":"4328:7:1","nodeType":"VariableDeclaration","scope":234,"src":"4320:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"4320:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":219,"mutability":"mutable","name":"timepoint","nameLocation":"4345:9:1","nodeType":"VariableDeclaration","scope":234,"src":"4337:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"4337:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4319:36:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":234,"src":"4385:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":221,"name":"uint256","nodeType":"ElementaryTypeName","src":"4385:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4384:9:1"},"scope":625,"src":"4298:198:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[51],"body":{"id":249,"nodeType":"Block","src":"5217:90:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":245,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"5289:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":244,"name":"_validateTimepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"5270:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) view returns (uint48)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5270:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"expression":{"id":242,"name":"_totalCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"5234:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},"id":243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5252:17:1","memberName":"upperLookupRecent","nodeType":"MemberAccess","referencedDeclaration":8380,"src":"5234:35:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$_t_uint48_$returns$_t_uint208_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,uint48) view returns (uint208)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5234:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":241,"id":248,"nodeType":"Return","src":"5227:73:1"}]},"documentation":{"id":235,"nodeType":"StructuredDocumentation","src":"4502:625:1","text":" @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n configured to use block numbers, this will return the value at the end of the corresponding block.\n NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n Votes that have not been delegated are still part of total supply, even though they would not participate in a\n vote.\n Requirements:\n - `timepoint` must be in the past. If operating using block numbers, the block must be already mined."},"functionSelector":"8e539e8c","id":250,"implemented":true,"kind":"function","modifiers":[],"name":"getPastTotalSupply","nameLocation":"5141:18:1","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"timepoint","nameLocation":"5168:9:1","nodeType":"VariableDeclaration","scope":250,"src":"5160:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"5160:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5159:19:1"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":250,"src":"5208:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":239,"name":"uint256","nodeType":"ElementaryTypeName","src":"5208:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5207:9:1"},"scope":625,"src":"5132:175:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":260,"nodeType":"Block","src":"5451:50:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":256,"name":"_totalCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"5468:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},"id":257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5486:6:1","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":8410,"src":"5468:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$returns$_t_uint208_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer) view returns (uint208)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5468:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":255,"id":259,"nodeType":"Return","src":"5461:33:1"}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"5313:66:1","text":" @dev Returns the current total supply of votes."},"id":261,"implemented":true,"kind":"function","modifiers":[],"name":"_getTotalSupply","nameLocation":"5393:15:1","nodeType":"FunctionDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[],"src":"5408:2:1"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":261,"src":"5442:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"5442:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5441:9:1"},"scope":625,"src":"5384:117:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[59],"body":{"id":273,"nodeType":"Block","src":"5657:43:1","statements":[{"expression":{"baseExpression":{"id":269,"name":"_delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"5674:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":271,"indexExpression":{"id":270,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"5685:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5674:19:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":268,"id":272,"nodeType":"Return","src":"5667:26:1"}]},"documentation":{"id":262,"nodeType":"StructuredDocumentation","src":"5507:71:1","text":" @dev Returns the delegate that `account` has chosen."},"functionSelector":"587cde1e","id":274,"implemented":true,"kind":"function","modifiers":[],"name":"delegates","nameLocation":"5592:9:1","nodeType":"FunctionDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"account","nameLocation":"5610:7:1","nodeType":"VariableDeclaration","scope":274,"src":"5602:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"5602:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5601:17:1"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":274,"src":"5648:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":266,"name":"address","nodeType":"ElementaryTypeName","src":"5648:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5647:9:1"},"scope":625,"src":"5583:117:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[65],"body":{"id":290,"nodeType":"Block","src":"5834:86:1","statements":[{"assignments":[281],"declarations":[{"constant":false,"id":281,"mutability":"mutable","name":"account","nameLocation":"5852:7:1","nodeType":"VariableDeclaration","scope":290,"src":"5844:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"5844:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":284,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":282,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"5862:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5862:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5844:30:1"},{"expression":{"arguments":[{"id":286,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"5894:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":287,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"5903:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":285,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"5884:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5884:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":289,"nodeType":"ExpressionStatement","src":"5884:29:1"}]},"documentation":{"id":275,"nodeType":"StructuredDocumentation","src":"5706:71:1","text":" @dev Delegates votes from the sender to `delegatee`."},"functionSelector":"5c19a95c","id":291,"implemented":true,"kind":"function","modifiers":[],"name":"delegate","nameLocation":"5791:8:1","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"delegatee","nameLocation":"5808:9:1","nodeType":"VariableDeclaration","scope":291,"src":"5800:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"5800:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5799:19:1"},"returnParameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"5834:0:1"},"scope":625,"src":"5782:138:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[81],"body":{"id":347,"nodeType":"Block","src":"6171:381:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":307,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"6185:5:1","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6191:9:1","memberName":"timestamp","nodeType":"MemberAccess","src":"6185:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":309,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"6203:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6185:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":316,"nodeType":"IfStatement","src":"6181:91:1","trueBody":{"id":315,"nodeType":"Block","src":"6211:61:1","statements":[{"errorCall":{"arguments":[{"id":312,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"6254:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":311,"name":"VotesExpiredSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"6232:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6232:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":314,"nodeType":"RevertStatement","src":"6225:36:1"}]}},{"assignments":[318],"declarations":[{"constant":false,"id":318,"mutability":"mutable","name":"signer","nameLocation":"6289:6:1","nodeType":"VariableDeclaration","scope":347,"src":"6281:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":317,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":336,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":325,"name":"DELEGATION_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"6363:19:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":326,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"6384:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":327,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"6395:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":328,"name":"expiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"6402:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":323,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"6352:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6356:6:1","memberName":"encode","nodeType":"MemberAccess","src":"6352:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6352:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":322,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"6342:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6342:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":321,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3965,"src":"6325:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6325:86:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":332,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"6425:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":333,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"6440:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":334,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"6455:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":319,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3805,"src":"6298:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3805_$","typeString":"type(library ECDSA)"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6304:7:1","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3755,"src":"6298:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:168:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:185:1"},{"expression":{"arguments":[{"id":338,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"6493:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":339,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"6501:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":337,"name":"_useCheckedNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"6476:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6476:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"ExpressionStatement","src":"6476:31:1"},{"expression":{"arguments":[{"id":343,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"6527:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":344,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"6535:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":342,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"6517:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6517:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":346,"nodeType":"ExpressionStatement","src":"6517:28:1"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"5926:67:1","text":" @dev Delegates votes from signer to `delegatee`."},"functionSelector":"c3cda520","id":348,"implemented":true,"kind":"function","modifiers":[],"name":"delegateBySig","nameLocation":"6007:13:1","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"delegatee","nameLocation":"6038:9:1","nodeType":"VariableDeclaration","scope":348,"src":"6030:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"6030:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"nonce","nameLocation":"6065:5:1","nodeType":"VariableDeclaration","scope":348,"src":"6057:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"6057:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"expiry","nameLocation":"6088:6:1","nodeType":"VariableDeclaration","scope":348,"src":"6080:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"6080:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":300,"mutability":"mutable","name":"v","nameLocation":"6110:1:1","nodeType":"VariableDeclaration","scope":348,"src":"6104:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":299,"name":"uint8","nodeType":"ElementaryTypeName","src":"6104:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":302,"mutability":"mutable","name":"r","nameLocation":"6129:1:1","nodeType":"VariableDeclaration","scope":348,"src":"6121:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6121:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":304,"mutability":"mutable","name":"s","nameLocation":"6148:1:1","nodeType":"VariableDeclaration","scope":348,"src":"6140:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6140:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6020:135:1"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[],"src":"6171:0:1"},"scope":625,"src":"5998:554:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":382,"nodeType":"Block","src":"6802:240:1","statements":[{"assignments":[357],"declarations":[{"constant":false,"id":357,"mutability":"mutable","name":"oldDelegate","nameLocation":"6820:11:1","nodeType":"VariableDeclaration","scope":382,"src":"6812:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":356,"name":"address","nodeType":"ElementaryTypeName","src":"6812:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":361,"initialValue":{"arguments":[{"id":359,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6844:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":358,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"6834:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6834:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6812:40:1"},{"expression":{"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":362,"name":"_delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"6862:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":364,"indexExpression":{"id":363,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6873:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6862:19:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":365,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"6884:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6862:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":367,"nodeType":"ExpressionStatement","src":"6862:31:1"},{"eventCall":{"arguments":[{"id":369,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"6925:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":370,"name":"oldDelegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"6934:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":371,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"6947:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":368,"name":"DelegateChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"6909:15:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address,address)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6909:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"EmitStatement","src":"6904:53:1"},{"expression":{"arguments":[{"id":375,"name":"oldDelegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"6986:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":376,"name":"delegatee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"6999:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":378,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"7026:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":377,"name":"_getVotingUnits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"7010:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7010:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":374,"name":"_moveDelegateVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"6967:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6967:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"6967:68:1"}]},"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"6558:167:1","text":" @dev Delegate all of `account`'s voting units to `delegatee`.\n Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}."},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"_delegate","nameLocation":"6739:9:1","nodeType":"FunctionDefinition","parameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"account","nameLocation":"6757:7:1","nodeType":"VariableDeclaration","scope":383,"src":"6749:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"6749:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"delegatee","nameLocation":"6774:9:1","nodeType":"VariableDeclaration","scope":383,"src":"6766:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"6766:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6748:36:1"},"returnParameters":{"id":355,"nodeType":"ParameterList","parameters":[],"src":"6802:0:1"},"scope":625,"src":"6730:312:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":437,"nodeType":"Block","src":"7365:310:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":393,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7379:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7395:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7387:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":394,"name":"address","nodeType":"ElementaryTypeName","src":"7387:7:1","typeDescriptions":{}}},"id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7387:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7379:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":409,"nodeType":"IfStatement","src":"7375:107:1","trueBody":{"id":408,"nodeType":"Block","src":"7399:83:1","statements":[{"expression":{"arguments":[{"id":400,"name":"_totalCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"7419:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},{"id":401,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"7438:4:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"}},{"arguments":[{"id":404,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"7463:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":402,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"7444:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7453:9:1","memberName":"toUint208","nodeType":"MemberAccess","referencedDeclaration":5934,"src":"7444:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint208_$","typeString":"function (uint256) pure returns (uint208)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7444:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"},{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":399,"name":"_push","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"7413:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Trace208_$8185_storage_ptr_$_t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$_$_t_uint208_$returns$_t_uint208_$_t_uint208_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,function (uint208,uint208) view returns (uint208),uint208) returns (uint208,uint208)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7413:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"id":407,"nodeType":"ExpressionStatement","src":"7413:58:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":410,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"7495:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7509:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7501:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:1","typeDescriptions":{}}},"id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7501:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7495:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":426,"nodeType":"IfStatement","src":"7491:110:1","trueBody":{"id":425,"nodeType":"Block","src":"7513:88:1","statements":[{"expression":{"arguments":[{"id":417,"name":"_totalCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"7533:17:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},{"id":418,"name":"_subtract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"7552:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"}},{"arguments":[{"id":421,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"7582:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":419,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"7563:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7572:9:1","memberName":"toUint208","nodeType":"MemberAccess","referencedDeclaration":5934,"src":"7563:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint208_$","typeString":"function (uint256) pure returns (uint208)"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7563:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"},{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":416,"name":"_push","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"7527:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Trace208_$8185_storage_ptr_$_t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$_$_t_uint208_$returns$_t_uint208_$_t_uint208_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,function (uint208,uint208) view returns (uint208),uint208) returns (uint208,uint208)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7527:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"id":424,"nodeType":"ExpressionStatement","src":"7527:63:1"}]}},{"expression":{"arguments":[{"arguments":[{"id":429,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"7639:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":428,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"7629:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7629:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":432,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"7656:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":431,"name":"delegates","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"7646:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7646:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":434,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"7661:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":427,"name":"_moveDelegateVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"7610:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7610:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":436,"nodeType":"ExpressionStatement","src":"7610:58:1"}]},"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"7048:223:1","text":" @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n should be zero. Total supply of voting units will be adjusted with mints and burns."},"id":438,"implemented":true,"kind":"function","modifiers":[],"name":"_transferVotingUnits","nameLocation":"7285:20:1","nodeType":"FunctionDefinition","parameters":{"id":391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"from","nameLocation":"7314:4:1","nodeType":"VariableDeclaration","scope":438,"src":"7306:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"7306:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"to","nameLocation":"7328:2:1","nodeType":"VariableDeclaration","scope":438,"src":"7320:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"7320:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"amount","nameLocation":"7340:6:1","nodeType":"VariableDeclaration","scope":438,"src":"7332:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7305:42:1"},"returnParameters":{"id":392,"nodeType":"ParameterList","parameters":[],"src":"7365:0:1"},"scope":625,"src":"7276:399:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":515,"nodeType":"Block","src":"7848:702:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"7862:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":449,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"7870:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7862:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":451,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"7876:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7885:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7876:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7862:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":514,"nodeType":"IfStatement","src":"7858:686:1","trueBody":{"id":513,"nodeType":"Block","src":"7888:656:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":455,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"7906:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7922:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7914:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"7914:7:1","typeDescriptions":{}}},"id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7914:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7906:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"IfStatement","src":"7902:315:1","trueBody":{"id":482,"nodeType":"Block","src":"7926:291:1","statements":[{"assignments":[462,464],"declarations":[{"constant":false,"id":462,"mutability":"mutable","name":"oldValue","nameLocation":"7953:8:1","nodeType":"VariableDeclaration","scope":482,"src":"7945:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"newValue","nameLocation":"7971:8:1","nodeType":"VariableDeclaration","scope":482,"src":"7963:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"7963:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":475,"initialValue":{"arguments":[{"baseExpression":{"id":466,"name":"_delegateCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"8010:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208 storage ref)"}},"id":468,"indexExpression":{"id":467,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"8031:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8010:26:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},{"id":469,"name":"_subtract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"8058:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"}},{"arguments":[{"id":472,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"8108:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":470,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"8089:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8098:9:1","memberName":"toUint208","nodeType":"MemberAccess","referencedDeclaration":5934,"src":"8089:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint208_$","typeString":"function (uint256) pure returns (uint208)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8089:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"},{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":465,"name":"_push","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"7983:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Trace208_$8185_storage_ptr_$_t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$_$_t_uint208_$returns$_t_uint208_$_t_uint208_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,function (uint208,uint208) view returns (uint208),uint208) returns (uint208,uint208)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7983:150:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"nodeType":"VariableDeclarationStatement","src":"7944:189:1"},{"eventCall":{"arguments":[{"id":477,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"8177:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":478,"name":"oldValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8183:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":479,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8193:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":476,"name":"DelegateVotesChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"8156:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8156:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":481,"nodeType":"EmitStatement","src":"8151:51:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":484,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"8234:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8248:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8240:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"8240:7:1","typeDescriptions":{}}},"id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8240:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8234:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"8230:304:1","trueBody":{"id":511,"nodeType":"Block","src":"8252:282:1","statements":[{"assignments":[491,493],"declarations":[{"constant":false,"id":491,"mutability":"mutable","name":"oldValue","nameLocation":"8279:8:1","nodeType":"VariableDeclaration","scope":511,"src":"8271:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint256","nodeType":"ElementaryTypeName","src":"8271:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"newValue","nameLocation":"8297:8:1","nodeType":"VariableDeclaration","scope":511,"src":"8289:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":492,"name":"uint256","nodeType":"ElementaryTypeName","src":"8289:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":504,"initialValue":{"arguments":[{"baseExpression":{"id":495,"name":"_delegateCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"8336:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208 storage ref)"}},"id":497,"indexExpression":{"id":496,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"8357:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8336:24:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},{"id":498,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"8382:4:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"}},{"arguments":[{"id":501,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"8427:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":499,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"8408:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8417:9:1","memberName":"toUint208","nodeType":"MemberAccess","referencedDeclaration":5934,"src":"8408:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint208_$","typeString":"function (uint256) pure returns (uint208)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8408:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"},{"typeIdentifier":"t_function_internal_pure$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) pure returns (uint208)"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":494,"name":"_push","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"8309:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Trace208_$8185_storage_ptr_$_t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$_$_t_uint208_$returns$_t_uint208_$_t_uint208_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,function (uint208,uint208) view returns (uint208),uint208) returns (uint208,uint208)"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8309:143:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"nodeType":"VariableDeclarationStatement","src":"8270:182:1"},{"eventCall":{"arguments":[{"id":506,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"8496:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":507,"name":"oldValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"8500:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":508,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"8510:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":505,"name":"DelegateVotesChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"8475:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8475:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":510,"nodeType":"EmitStatement","src":"8470:49:1"}]}}]}}]},"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"7681:75:1","text":" @dev Moves delegated votes from one delegate to another."},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"_moveDelegateVotes","nameLocation":"7770:18:1","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"from","nameLocation":"7797:4:1","nodeType":"VariableDeclaration","scope":516,"src":"7789:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"7789:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"to","nameLocation":"7811:2:1","nodeType":"VariableDeclaration","scope":516,"src":"7803:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":442,"name":"address","nodeType":"ElementaryTypeName","src":"7803:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":445,"mutability":"mutable","name":"amount","nameLocation":"7823:6:1","nodeType":"VariableDeclaration","scope":516,"src":"7815:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":444,"name":"uint256","nodeType":"ElementaryTypeName","src":"7815:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7788:42:1"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[],"src":"7848:0:1"},"scope":625,"src":"7761:789:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":533,"nodeType":"Block","src":"8706:81:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":526,"name":"_delegateCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"8741:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208 storage ref)"}},"id":528,"indexExpression":{"id":527,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8762:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8741:29:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},"id":529,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8771:6:1","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":8473,"src":"8741:36:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer) view returns (uint256)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8741:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":524,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"8723:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8732:8:1","memberName":"toUint32","nodeType":"MemberAccess","referencedDeclaration":6550,"src":"8723:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint32_$","typeString":"function (uint256) pure returns (uint32)"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8723:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":523,"id":532,"nodeType":"Return","src":"8716:64:1"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"8556:64:1","text":" @dev Get number of checkpoints for `account`."},"id":534,"implemented":true,"kind":"function","modifiers":[],"name":"_numCheckpoints","nameLocation":"8634:15:1","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"account","nameLocation":"8658:7:1","nodeType":"VariableDeclaration","scope":534,"src":"8650:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":518,"name":"address","nodeType":"ElementaryTypeName","src":"8650:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:17:1"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":534,"src":"8698:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":521,"name":"uint32","nodeType":"ElementaryTypeName","src":"8698:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8697:8:1"},"scope":625,"src":"8625:162:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":552,"nodeType":"Block","src":"9002:61:1","statements":[{"expression":{"arguments":[{"id":549,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"9052:3:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"baseExpression":{"id":545,"name":"_delegateCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"9019:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Trace208_$8185_storage_$","typeString":"mapping(address => struct Checkpoints.Trace208 storage ref)"}},"id":547,"indexExpression":{"id":546,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"9040:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9019:29:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage","typeString":"struct Checkpoints.Trace208 storage ref"}},"id":548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9049:2:1","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":8491,"src":"9019:32:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$_t_uint32_$returns$_t_struct$_Checkpoint208_$8190_memory_ptr_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,uint32) view returns (struct Checkpoints.Checkpoint208 memory)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9019:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208 memory"}},"functionReturnParameters":544,"id":551,"nodeType":"Return","src":"9012:44:1"}]},"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"8793:66:1","text":" @dev Get the `pos`-th checkpoint for `account`."},"id":553,"implemented":true,"kind":"function","modifiers":[],"name":"_checkpoints","nameLocation":"8873:12:1","nodeType":"FunctionDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"account","nameLocation":"8903:7:1","nodeType":"VariableDeclaration","scope":553,"src":"8895:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"8895:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"pos","nameLocation":"8927:3:1","nodeType":"VariableDeclaration","scope":553,"src":"8920:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":538,"name":"uint32","nodeType":"ElementaryTypeName","src":"8920:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8885:51:1"},"returnParameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":553,"src":"8968:32:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208"},"typeName":{"id":542,"nodeType":"UserDefinedTypeName","pathNode":{"id":541,"name":"Checkpoints.Checkpoint208","nameLocations":["8968:11:1","8980:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"8968:25:1"},"referencedDeclaration":8190,"src":"8968:25:1","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"visibility":"internal"}],"src":"8967:34:1"},"scope":625,"src":"8864:199:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":587,"nodeType":"Block","src":"9272:70:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":577,"name":"clock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"9300:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9300:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":580,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"9312:5:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":581,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9318:6:1","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":8410,"src":"9312:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Trace208_$8185_storage_ptr_$returns$_t_uint208_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer) view returns (uint208)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9312:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},{"id":583,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"9328:5:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint208","typeString":"uint208"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":579,"name":"op","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"9309:2:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) view returns (uint208)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9309:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"expression":{"id":575,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"9289:5:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":576,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9295:4:1","memberName":"push","nodeType":"MemberAccess","referencedDeclaration":8213,"src":"9289:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Trace208_$8185_storage_ptr_$_t_uint48_$_t_uint208_$returns$_t_uint208_$_t_uint208_$attached_to$_t_struct$_Trace208_$8185_storage_ptr_$","typeString":"function (struct Checkpoints.Trace208 storage pointer,uint48,uint208) returns (uint208,uint208)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9289:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"functionReturnParameters":574,"id":586,"nodeType":"Return","src":"9282:53:1"}]},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"_push","nameLocation":"9078:5:1","nodeType":"FunctionDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"store","nameLocation":"9122:5:1","nodeType":"VariableDeclaration","scope":588,"src":"9093:34:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":555,"nodeType":"UserDefinedTypeName","pathNode":{"id":554,"name":"Checkpoints.Trace208","nameLocations":["9093:11:1","9105:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"9093:20:1"},"referencedDeclaration":8185,"src":"9093:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"op","nameLocation":"9187:2:1","nodeType":"VariableDeclaration","scope":588,"src":"9137:52:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) view returns (uint208)"},"typeName":{"id":565,"nodeType":"FunctionTypeName","parameterTypes":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":565,"src":"9146:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":557,"name":"uint208","nodeType":"ElementaryTypeName","src":"9146:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":565,"src":"9155:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":559,"name":"uint208","nodeType":"ElementaryTypeName","src":"9155:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9145:18:1"},"returnParameterTypes":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":565,"src":"9178:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":562,"name":"uint208","nodeType":"ElementaryTypeName","src":"9178:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9177:9:1"},"src":"9137:52:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint208_$_t_uint208_$returns$_t_uint208_$","typeString":"function (uint208,uint208) view returns (uint208)"},"visibility":"internal"},"visibility":"internal"},{"constant":false,"id":568,"mutability":"mutable","name":"delta","nameLocation":"9207:5:1","nodeType":"VariableDeclaration","scope":588,"src":"9199:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":567,"name":"uint208","nodeType":"ElementaryTypeName","src":"9199:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9083:135:1"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"oldValue","nameLocation":"9244:8:1","nodeType":"VariableDeclaration","scope":588,"src":"9236:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":570,"name":"uint208","nodeType":"ElementaryTypeName","src":"9236:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"newValue","nameLocation":"9262:8:1","nodeType":"VariableDeclaration","scope":588,"src":"9254:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":572,"name":"uint208","nodeType":"ElementaryTypeName","src":"9254:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9235:36:1"},"scope":625,"src":"9069:273:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":601,"nodeType":"Block","src":"9415:29:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint208","typeString":"uint208"},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":597,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"9432:1:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":598,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"9436:1:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"9432:5:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":596,"id":600,"nodeType":"Return","src":"9425:12:1"}]},"id":602,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"9357:4:1","nodeType":"FunctionDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"a","nameLocation":"9370:1:1","nodeType":"VariableDeclaration","scope":602,"src":"9362:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":589,"name":"uint208","nodeType":"ElementaryTypeName","src":"9362:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"b","nameLocation":"9381:1:1","nodeType":"VariableDeclaration","scope":602,"src":"9373:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":591,"name":"uint208","nodeType":"ElementaryTypeName","src":"9373:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9361:22:1"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":602,"src":"9406:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":594,"name":"uint208","nodeType":"ElementaryTypeName","src":"9406:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9405:9:1"},"scope":625,"src":"9348:96:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":615,"nodeType":"Block","src":"9522:29:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint208","typeString":"uint208"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":611,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"9539:1:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":612,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"9543:1:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"9539:5:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":610,"id":614,"nodeType":"Return","src":"9532:12:1"}]},"id":616,"implemented":true,"kind":"function","modifiers":[],"name":"_subtract","nameLocation":"9459:9:1","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"a","nameLocation":"9477:1:1","nodeType":"VariableDeclaration","scope":616,"src":"9469:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":603,"name":"uint208","nodeType":"ElementaryTypeName","src":"9469:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"b","nameLocation":"9488:1:1","nodeType":"VariableDeclaration","scope":616,"src":"9480:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":605,"name":"uint208","nodeType":"ElementaryTypeName","src":"9480:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9468:22:1"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":616,"src":"9513:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":608,"name":"uint208","nodeType":"ElementaryTypeName","src":"9513:7:1","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9512:9:1"},"scope":625,"src":"9450:101:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"9557:72:1","text":" @dev Must return the voting units held by an account."},"id":624,"implemented":false,"kind":"function","modifiers":[],"name":"_getVotingUnits","nameLocation":"9643:15:1","nodeType":"FunctionDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":624,"src":"9659:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"9659:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9658:9:1"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":624,"src":"9699:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"9699:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9698:9:1"},"scope":625,"src":"9634:74:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":626,"src":"1892:7818:1","usedErrors":[7,133,140,1604,1728,1730,3468,3473,3478,5749,7656],"usedEvents":[16,25,630]}],"src":"109:9602:1"}},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"id":2,"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","exportedSymbols":{"IERC5267":[650]},"id":651,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":627,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":650,"linearizedBaseContracts":[650],"name":"IERC5267","nameLocation":"143:8:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":628,"nodeType":"StructuredDocumentation","src":"158:84:2","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":630,"name":"EIP712DomainChanged","nameLocation":"253:19:2","nodeType":"EventDefinition","parameters":{"id":629,"nodeType":"ParameterList","parameters":[],"src":"272:2:2"},"src":"247:28:2"},{"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"281:140:2","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":649,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"435:12:2","nodeType":"FunctionDefinition","parameters":{"id":632,"nodeType":"ParameterList","parameters":[],"src":"447:2:2"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"fields","nameLocation":"517:6:2","nodeType":"VariableDeclaration","scope":649,"src":"510:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":633,"name":"bytes1","nodeType":"ElementaryTypeName","src":"510:6:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"name","nameLocation":"551:4:2","nodeType":"VariableDeclaration","scope":649,"src":"537:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":635,"name":"string","nodeType":"ElementaryTypeName","src":"537:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"version","nameLocation":"583:7:2","nodeType":"VariableDeclaration","scope":649,"src":"569:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":637,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"chainId","nameLocation":"612:7:2","nodeType":"VariableDeclaration","scope":649,"src":"604:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"verifyingContract","nameLocation":"641:17:2","nodeType":"VariableDeclaration","scope":649,"src":"633:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"salt","nameLocation":"680:4:2","nodeType":"VariableDeclaration","scope":649,"src":"672:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"672:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"extensions","nameLocation":"715:10:2","nodeType":"VariableDeclaration","scope":649,"src":"698:27:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":645,"name":"uint256","nodeType":"ElementaryTypeName","src":"698:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":646,"nodeType":"ArrayTypeName","src":"698:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"496:239:2"},"scope":650,"src":"426:310:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":651,"src":"133:605:2","usedErrors":[],"usedEvents":[630]}],"src":"107:632:2"}},"@openzeppelin/contracts/interfaces/IERC5805.sol":{"id":3,"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5805.sol","exportedSymbols":{"IERC5805":[661],"IERC6372":[676],"IVotes":[82]},"id":662,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":652,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:3"},{"absolutePath":"@openzeppelin/contracts/governance/utils/IVotes.sol","file":"../governance/utils/IVotes.sol","id":654,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":662,"sourceUnit":83,"src":"133:54:3","symbolAliases":[{"foreign":{"id":653,"name":"IVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"141:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC6372.sol","file":"./IERC6372.sol","id":656,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":662,"sourceUnit":677,"src":"188:40:3","symbolAliases":[{"foreign":{"id":655,"name":"IERC6372","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"196:8:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":657,"name":"IERC6372","nameLocations":["252:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":676,"src":"252:8:3"},"id":658,"nodeType":"InheritanceSpecifier","src":"252:8:3"},{"baseName":{"id":659,"name":"IVotes","nameLocations":["262:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":82,"src":"262:6:3"},"id":660,"nodeType":"InheritanceSpecifier","src":"262:6:3"}],"canonicalName":"IERC5805","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":661,"linearizedBaseContracts":[661,82,676],"name":"IERC5805","nameLocation":"240:8:3","nodeType":"ContractDefinition","nodes":[],"scope":662,"src":"230:41:3","usedErrors":[7],"usedEvents":[16,25]}],"src":"107:165:3"}},"@openzeppelin/contracts/interfaces/IERC6372.sol":{"id":4,"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC6372.sol","exportedSymbols":{"IERC6372":[676]},"id":677,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":663,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC6372","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":676,"linearizedBaseContracts":[676],"name":"IERC6372","nameLocation":"143:8:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":664,"nodeType":"StructuredDocumentation","src":"158:133:4","text":" @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting)."},"functionSelector":"91ddadf4","id":669,"implemented":false,"kind":"function","modifiers":[],"name":"clock","nameLocation":"305:5:4","nodeType":"FunctionDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[],"src":"310:2:4"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":669,"src":"336:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":666,"name":"uint48","nodeType":"ElementaryTypeName","src":"336:6:4","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"335:8:4"},"scope":676,"src":"296:48:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"350:48:4","text":" @dev Description of the clock"},"functionSelector":"4bf5d7e9","id":675,"implemented":false,"kind":"function","modifiers":[],"name":"CLOCK_MODE","nameLocation":"465:10:4","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"475:2:4"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":675,"src":"501:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":672,"name":"string","nodeType":"ElementaryTypeName","src":"501:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"500:15:4"},"scope":676,"src":"456:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":677,"src":"133:385:4","usedErrors":[],"usedEvents":[]}],"src":"107:412:4"}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"id":5,"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[813],"IERC20Errors":[718],"IERC721Errors":[766]},"id":814,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":678,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"138:141:5","text":" @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."},"fullyImplemented":true,"id":718,"linearizedBaseContracts":[718],"name":"IERC20Errors","nameLocation":"290:12:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"309:309:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":688,"name":"ERC20InsufficientBalance","nameLocation":"629:24:5","nodeType":"ErrorDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"sender","nameLocation":"662:6:5","nodeType":"VariableDeclaration","scope":688,"src":"654:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":681,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"balance","nameLocation":"678:7:5","nodeType":"VariableDeclaration","scope":688,"src":"670:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"needed","nameLocation":"695:6:5","nodeType":"VariableDeclaration","scope":688,"src":"687:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"687:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"653:49:5"},"src":"623:80:5"},{"documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"709:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":693,"name":"ERC20InvalidSender","nameLocation":"872:18:5","nodeType":"ErrorDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"sender","nameLocation":"899:6:5","nodeType":"VariableDeclaration","scope":693,"src":"891:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:16:5"},"src":"866:41:5"},{"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"913:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":698,"name":"ERC20InvalidReceiver","nameLocation":"1083:20:5","nodeType":"ErrorDefinition","parameters":{"id":697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"mutability":"mutable","name":"receiver","nameLocation":"1112:8:5","nodeType":"VariableDeclaration","scope":698,"src":"1104:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":695,"name":"address","nodeType":"ElementaryTypeName","src":"1104:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1103:18:5"},"src":"1077:45:5"},{"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"1128:345:5","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":707,"name":"ERC20InsufficientAllowance","nameLocation":"1484:26:5","nodeType":"ErrorDefinition","parameters":{"id":706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"spender","nameLocation":"1519:7:5","nodeType":"VariableDeclaration","scope":707,"src":"1511:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"1511:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":703,"mutability":"mutable","name":"allowance","nameLocation":"1536:9:5","nodeType":"VariableDeclaration","scope":707,"src":"1528:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":705,"mutability":"mutable","name":"needed","nameLocation":"1555:6:5","nodeType":"VariableDeclaration","scope":707,"src":"1547:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1510:52:5"},"src":"1478:85:5"},{"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"1569:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":712,"name":"ERC20InvalidApprover","nameLocation":"1754:20:5","nodeType":"ErrorDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"approver","nameLocation":"1783:8:5","nodeType":"VariableDeclaration","scope":712,"src":"1775:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":709,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1774:18:5"},"src":"1748:45:5"},{"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"1799:195:5","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":717,"name":"ERC20InvalidSpender","nameLocation":"2005:19:5","nodeType":"ErrorDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"spender","nameLocation":"2033:7:5","nodeType":"VariableDeclaration","scope":717,"src":"2025:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":714,"name":"address","nodeType":"ElementaryTypeName","src":"2025:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2024:17:5"},"src":"1999:43:5"}],"scope":814,"src":"280:1764:5","usedErrors":[688,693,698,707,712,717],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":719,"nodeType":"StructuredDocumentation","src":"2046:143:5","text":" @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."},"fullyImplemented":true,"id":766,"linearizedBaseContracts":[766],"name":"IERC721Errors","nameLocation":"2200:13:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":720,"nodeType":"StructuredDocumentation","src":"2220:219:5","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":724,"name":"ERC721InvalidOwner","nameLocation":"2450:18:5","nodeType":"ErrorDefinition","parameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"owner","nameLocation":"2477:5:5","nodeType":"VariableDeclaration","scope":724,"src":"2469:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":721,"name":"address","nodeType":"ElementaryTypeName","src":"2469:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2468:15:5"},"src":"2444:40:5"},{"documentation":{"id":725,"nodeType":"StructuredDocumentation","src":"2490:132:5","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":729,"name":"ERC721NonexistentToken","nameLocation":"2633:22:5","nodeType":"ErrorDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"tokenId","nameLocation":"2664:7:5","nodeType":"VariableDeclaration","scope":729,"src":"2656:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":726,"name":"uint256","nodeType":"ElementaryTypeName","src":"2656:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2655:17:5"},"src":"2627:46:5"},{"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"2679:289:5","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":738,"name":"ERC721IncorrectOwner","nameLocation":"2979:20:5","nodeType":"ErrorDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"sender","nameLocation":"3008:6:5","nodeType":"VariableDeclaration","scope":738,"src":"3000:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":731,"name":"address","nodeType":"ElementaryTypeName","src":"3000:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"tokenId","nameLocation":"3024:7:5","nodeType":"VariableDeclaration","scope":738,"src":"3016:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":733,"name":"uint256","nodeType":"ElementaryTypeName","src":"3016:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"owner","nameLocation":"3041:5:5","nodeType":"VariableDeclaration","scope":738,"src":"3033:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"3033:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2999:48:5"},"src":"2973:75:5"},{"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"3054:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":743,"name":"ERC721InvalidSender","nameLocation":"3217:19:5","nodeType":"ErrorDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"sender","nameLocation":"3245:6:5","nodeType":"VariableDeclaration","scope":743,"src":"3237:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"3237:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3236:16:5"},"src":"3211:42:5"},{"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"3259:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":748,"name":"ERC721InvalidReceiver","nameLocation":"3429:21:5","nodeType":"ErrorDefinition","parameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"receiver","nameLocation":"3459:8:5","nodeType":"VariableDeclaration","scope":748,"src":"3451:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":745,"name":"address","nodeType":"ElementaryTypeName","src":"3451:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3450:18:5"},"src":"3423:46:5"},{"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"3475:247:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":755,"name":"ERC721InsufficientApproval","nameLocation":"3733:26:5","nodeType":"ErrorDefinition","parameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"operator","nameLocation":"3768:8:5","nodeType":"VariableDeclaration","scope":755,"src":"3760:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":750,"name":"address","nodeType":"ElementaryTypeName","src":"3760:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":753,"mutability":"mutable","name":"tokenId","nameLocation":"3786:7:5","nodeType":"VariableDeclaration","scope":755,"src":"3778:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":752,"name":"uint256","nodeType":"ElementaryTypeName","src":"3778:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3759:35:5"},"src":"3727:68:5"},{"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"3801:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":760,"name":"ERC721InvalidApprover","nameLocation":"3986:21:5","nodeType":"ErrorDefinition","parameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"approver","nameLocation":"4016:8:5","nodeType":"VariableDeclaration","scope":760,"src":"4008:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4007:18:5"},"src":"3980:46:5"},{"documentation":{"id":761,"nodeType":"StructuredDocumentation","src":"4032:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":765,"name":"ERC721InvalidOperator","nameLocation":"4240:21:5","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"operator","nameLocation":"4270:8:5","nodeType":"VariableDeclaration","scope":765,"src":"4262:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"4262:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4261:18:5"},"src":"4234:46:5"}],"scope":814,"src":"2190:2092:5","usedErrors":[724,729,738,743,748,755,760,765],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":767,"nodeType":"StructuredDocumentation","src":"4284:145:5","text":" @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."},"fullyImplemented":true,"id":813,"linearizedBaseContracts":[813],"name":"IERC1155Errors","nameLocation":"4440:14:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"4461:361:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":778,"name":"ERC1155InsufficientBalance","nameLocation":"4833:26:5","nodeType":"ErrorDefinition","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"sender","nameLocation":"4868:6:5","nodeType":"VariableDeclaration","scope":778,"src":"4860:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"4860:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"balance","nameLocation":"4884:7:5","nodeType":"VariableDeclaration","scope":778,"src":"4876:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"4876:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"needed","nameLocation":"4901:6:5","nodeType":"VariableDeclaration","scope":778,"src":"4893:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"4893:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"tokenId","nameLocation":"4917:7:5","nodeType":"VariableDeclaration","scope":778,"src":"4909:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"4909:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4859:66:5"},"src":"4827:99:5"},{"documentation":{"id":779,"nodeType":"StructuredDocumentation","src":"4932:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":783,"name":"ERC1155InvalidSender","nameLocation":"5095:20:5","nodeType":"ErrorDefinition","parameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"sender","nameLocation":"5124:6:5","nodeType":"VariableDeclaration","scope":783,"src":"5116:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":780,"name":"address","nodeType":"ElementaryTypeName","src":"5116:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5115:16:5"},"src":"5089:43:5"},{"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"5138:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":788,"name":"ERC1155InvalidReceiver","nameLocation":"5308:22:5","nodeType":"ErrorDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"receiver","nameLocation":"5339:8:5","nodeType":"VariableDeclaration","scope":788,"src":"5331:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":785,"name":"address","nodeType":"ElementaryTypeName","src":"5331:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5330:18:5"},"src":"5302:47:5"},{"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"5355:256:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":795,"name":"ERC1155MissingApprovalForAll","nameLocation":"5622:28:5","nodeType":"ErrorDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"operator","nameLocation":"5659:8:5","nodeType":"VariableDeclaration","scope":795,"src":"5651:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"5651:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":793,"mutability":"mutable","name":"owner","nameLocation":"5677:5:5","nodeType":"VariableDeclaration","scope":795,"src":"5669:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":792,"name":"address","nodeType":"ElementaryTypeName","src":"5669:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5650:33:5"},"src":"5616:68:5"},{"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"5690:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":800,"name":"ERC1155InvalidApprover","nameLocation":"5875:22:5","nodeType":"ErrorDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"approver","nameLocation":"5906:8:5","nodeType":"VariableDeclaration","scope":800,"src":"5898:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5897:18:5"},"src":"5869:47:5"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"5922:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":805,"name":"ERC1155InvalidOperator","nameLocation":"6130:22:5","nodeType":"ErrorDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"operator","nameLocation":"6161:8:5","nodeType":"VariableDeclaration","scope":805,"src":"6153:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"6153:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6152:18:5"},"src":"6124:47:5"},{"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"6177:280:5","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":812,"name":"ERC1155InvalidArrayLength","nameLocation":"6468:25:5","nodeType":"ErrorDefinition","parameters":{"id":811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"idsLength","nameLocation":"6502:9:5","nodeType":"VariableDeclaration","scope":812,"src":"6494:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"6494:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"valuesLength","nameLocation":"6521:12:5","nodeType":"VariableDeclaration","scope":812,"src":"6513:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":809,"name":"uint256","nodeType":"ElementaryTypeName","src":"6513:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6493:41:5"},"src":"6462:73:5"}],"scope":814,"src":"4430:2107:5","usedErrors":[778,783,788,795,800,805,812],"usedEvents":[]}],"src":"112:6426:5"}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"id":6,"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1594],"ERC20":[1328],"IERC20":[1406],"IERC20Errors":[718],"IERC20Metadata":[1564]},"id":1329,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":815,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":817,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1329,"sourceUnit":1407,"src":"131:36:6","symbolAliases":[{"foreign":{"id":816,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"139:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1329,"sourceUnit":1565,"src":"168:63:6","symbolAliases":[{"foreign":{"id":818,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"176:14:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":821,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1329,"sourceUnit":1595,"src":"232:48:6","symbolAliases":[{"foreign":{"id":820,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"240:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1329,"sourceUnit":814,"src":"281:65:6","symbolAliases":[{"foreign":{"id":822,"name":"IERC20Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"289:12:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":825,"name":"Context","nameLocations":["1133:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1594,"src":"1133:7:6"},"id":826,"nodeType":"InheritanceSpecifier","src":"1133:7:6"},{"baseName":{"id":827,"name":"IERC20","nameLocations":["1142:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1406,"src":"1142:6:6"},"id":828,"nodeType":"InheritanceSpecifier","src":"1142:6:6"},{"baseName":{"id":829,"name":"IERC20Metadata","nameLocations":["1150:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":1564,"src":"1150:14:6"},"id":830,"nodeType":"InheritanceSpecifier","src":"1150:14:6"},{"baseName":{"id":831,"name":"IERC20Errors","nameLocations":["1166:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":718,"src":"1166:12:6"},"id":832,"nodeType":"InheritanceSpecifier","src":"1166:12:6"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":824,"nodeType":"StructuredDocumentation","src":"348:757:6","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."},"fullyImplemented":true,"id":1328,"linearizedBaseContracts":[1328,718,1564,1406,1594],"name":"ERC20","nameLocation":"1124:5:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":836,"mutability":"mutable","name":"_balances","nameLocation":"1229:9:6","nodeType":"VariableDeclaration","scope":1328,"src":"1185:53:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":835,"keyName":"account","keyNameLocation":"1201:7:6","keyType":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1185:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":834,"name":"uint256","nodeType":"ElementaryTypeName","src":"1212:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":842,"mutability":"mutable","name":"_allowances","nameLocation":"1317:11:6","nodeType":"VariableDeclaration","scope":1328,"src":"1245:83:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":841,"keyName":"account","keyNameLocation":"1261:7:6","keyType":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1245:63:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":840,"keyName":"spender","keyNameLocation":"1288:7:6","keyType":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1272:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"1299:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":844,"mutability":"mutable","name":"_totalSupply","nameLocation":"1351:12:6","nodeType":"VariableDeclaration","scope":1328,"src":"1335:28:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":843,"name":"uint256","nodeType":"ElementaryTypeName","src":"1335:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":846,"mutability":"mutable","name":"_name","nameLocation":"1385:5:6","nodeType":"VariableDeclaration","scope":1328,"src":"1370:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":845,"name":"string","nodeType":"ElementaryTypeName","src":"1370:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":848,"mutability":"mutable","name":"_symbol","nameLocation":"1411:7:6","nodeType":"VariableDeclaration","scope":1328,"src":"1396:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":847,"name":"string","nodeType":"ElementaryTypeName","src":"1396:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":864,"nodeType":"Block","src":"1638:57:6","statements":[{"expression":{"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":856,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"1648:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":857,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1656:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1648:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":859,"nodeType":"ExpressionStatement","src":"1648:13:6"},{"expression":{"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":860,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":861,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"1681:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1671:17:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":863,"nodeType":"ExpressionStatement","src":"1671:17:6"}]},"documentation":{"id":849,"nodeType":"StructuredDocumentation","src":"1425:152:6","text":" @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."},"id":865,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"name_","nameLocation":"1608:5:6","nodeType":"VariableDeclaration","scope":865,"src":"1594:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":850,"name":"string","nodeType":"ElementaryTypeName","src":"1594:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"symbol_","nameLocation":"1629:7:6","nodeType":"VariableDeclaration","scope":865,"src":"1615:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":852,"name":"string","nodeType":"ElementaryTypeName","src":"1615:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1593:44:6"},"returnParameters":{"id":855,"nodeType":"ParameterList","parameters":[],"src":"1638:0:6"},"scope":1328,"src":"1582:113:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1551],"body":{"id":873,"nodeType":"Block","src":"1820:29:6","statements":[{"expression":{"id":871,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"1837:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":870,"id":872,"nodeType":"Return","src":"1830:12:6"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"1701:54:6","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":874,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"1769:4:6","nodeType":"FunctionDefinition","parameters":{"id":867,"nodeType":"ParameterList","parameters":[],"src":"1773:2:6"},"returnParameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":874,"src":"1805:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":868,"name":"string","nodeType":"ElementaryTypeName","src":"1805:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1804:15:6"},"scope":1328,"src":"1760:89:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1557],"body":{"id":882,"nodeType":"Block","src":"2024:31:6","statements":[{"expression":{"id":880,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"2041:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":879,"id":881,"nodeType":"Return","src":"2034:14:6"}]},"documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"1855:102:6","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":883,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1971:6:6","nodeType":"FunctionDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[],"src":"1977:2:6"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":883,"src":"2009:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":877,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2008:15:6"},"scope":1328,"src":"1962:93:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1563],"body":{"id":891,"nodeType":"Block","src":"2744:26:6","statements":[{"expression":{"hexValue":"3138","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2761:2:6","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":888,"id":890,"nodeType":"Return","src":"2754:9:6"}]},"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"2061:622:6","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":892,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"2697:8:6","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[],"src":"2705:2:6"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":892,"src":"2737:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":886,"name":"uint8","nodeType":"ElementaryTypeName","src":"2737:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2736:7:6"},"scope":1328,"src":"2688:82:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1355],"body":{"id":900,"nodeType":"Block","src":"2891:36:6","statements":[{"expression":{"id":898,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"2908:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":897,"id":899,"nodeType":"Return","src":"2901:19:6"}]},"documentation":{"id":893,"nodeType":"StructuredDocumentation","src":"2776:49:6","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":901,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2839:11:6","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[],"src":"2850:2:6"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":901,"src":"2882:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"2882:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2881:9:6"},"scope":1328,"src":"2830:97:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1363],"body":{"id":913,"nodeType":"Block","src":"3059:42:6","statements":[{"expression":{"baseExpression":{"id":909,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"3076:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":911,"indexExpression":{"id":910,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"3086:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3076:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":908,"id":912,"nodeType":"Return","src":"3069:25:6"}]},"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"2933:47:6","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":914,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2994:9:6","nodeType":"FunctionDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":904,"mutability":"mutable","name":"account","nameLocation":"3012:7:6","nodeType":"VariableDeclaration","scope":914,"src":"3004:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":903,"name":"address","nodeType":"ElementaryTypeName","src":"3004:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3003:17:6"},"returnParameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":914,"src":"3050:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"3050:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3049:9:6"},"scope":1328,"src":"2985:116:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1373],"body":{"id":937,"nodeType":"Block","src":"3371:103:6","statements":[{"assignments":[925],"declarations":[{"constant":false,"id":925,"mutability":"mutable","name":"owner","nameLocation":"3389:5:6","nodeType":"VariableDeclaration","scope":937,"src":"3381:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":924,"name":"address","nodeType":"ElementaryTypeName","src":"3381:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":928,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":926,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"3397:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3397:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3381:28:6"},{"expression":{"arguments":[{"id":930,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"3429:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":931,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"3436:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"3440:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":929,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"3419:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3419:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":934,"nodeType":"ExpressionStatement","src":"3419:27:6"},{"expression":{"hexValue":"74727565","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3463:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":923,"id":936,"nodeType":"Return","src":"3456:11:6"}]},"documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"3107:184:6","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."},"functionSelector":"a9059cbb","id":938,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3305:8:6","nodeType":"FunctionDefinition","parameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":917,"mutability":"mutable","name":"to","nameLocation":"3322:2:6","nodeType":"VariableDeclaration","scope":938,"src":"3314:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":916,"name":"address","nodeType":"ElementaryTypeName","src":"3314:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":919,"mutability":"mutable","name":"value","nameLocation":"3334:5:6","nodeType":"VariableDeclaration","scope":938,"src":"3326:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":918,"name":"uint256","nodeType":"ElementaryTypeName","src":"3326:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3313:27:6"},"returnParameters":{"id":923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":938,"src":"3365:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":921,"name":"bool","nodeType":"ElementaryTypeName","src":"3365:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3364:6:6"},"scope":1328,"src":"3296:178:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1383],"body":{"id":954,"nodeType":"Block","src":"3621:51:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":948,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"3638:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":950,"indexExpression":{"id":949,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"3650:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3638:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":952,"indexExpression":{"id":951,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"3657:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3638:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":947,"id":953,"nodeType":"Return","src":"3631:34:6"}]},"documentation":{"id":939,"nodeType":"StructuredDocumentation","src":"3480:47:6","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":955,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3541:9:6","nodeType":"FunctionDefinition","parameters":{"id":944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"owner","nameLocation":"3559:5:6","nodeType":"VariableDeclaration","scope":955,"src":"3551:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":940,"name":"address","nodeType":"ElementaryTypeName","src":"3551:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":943,"mutability":"mutable","name":"spender","nameLocation":"3574:7:6","nodeType":"VariableDeclaration","scope":955,"src":"3566:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":942,"name":"address","nodeType":"ElementaryTypeName","src":"3566:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3550:32:6"},"returnParameters":{"id":947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":955,"src":"3612:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"3612:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3611:9:6"},"scope":1328,"src":"3532:140:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1393],"body":{"id":978,"nodeType":"Block","src":"4058:107:6","statements":[{"assignments":[966],"declarations":[{"constant":false,"id":966,"mutability":"mutable","name":"owner","nameLocation":"4076:5:6","nodeType":"VariableDeclaration","scope":978,"src":"4068:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":969,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":967,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"4084:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4084:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4068:28:6"},{"expression":{"arguments":[{"id":971,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"4115:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":972,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"4122:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"4131:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":970,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1219,1279],"referencedDeclaration":1219,"src":"4106:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4106:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":975,"nodeType":"ExpressionStatement","src":"4106:31:6"},{"expression":{"hexValue":"74727565","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4154:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":964,"id":977,"nodeType":"Return","src":"4147:11:6"}]},"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"3678:296:6","text":" @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":979,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3988:7:6","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"spender","nameLocation":"4004:7:6","nodeType":"VariableDeclaration","scope":979,"src":"3996:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"3996:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"4021:5:6","nodeType":"VariableDeclaration","scope":979,"src":"4013:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"4013:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3995:32:6"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":979,"src":"4052:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":962,"name":"bool","nodeType":"ElementaryTypeName","src":"4052:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4051:6:6"},"scope":1328,"src":"3979:186:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1405],"body":{"id":1010,"nodeType":"Block","src":"4850:151:6","statements":[{"assignments":[992],"declarations":[{"constant":false,"id":992,"mutability":"mutable","name":"spender","nameLocation":"4868:7:6","nodeType":"VariableDeclaration","scope":1010,"src":"4860:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"4860:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":995,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":993,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"4878:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4878:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4860:30:6"},{"expression":{"arguments":[{"id":997,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"4916:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":998,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"4922:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"4931:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":996,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"4900:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4900:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1001,"nodeType":"ExpressionStatement","src":"4900:37:6"},{"expression":{"arguments":[{"id":1003,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":982,"src":"4957:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1004,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"4963:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1005,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"4967:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1002,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"4947:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4947:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"4947:26:6"},{"expression":{"hexValue":"74727565","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4990:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":990,"id":1009,"nodeType":"Return","src":"4983:11:6"}]},"documentation":{"id":980,"nodeType":"StructuredDocumentation","src":"4171:581:6","text":" @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."},"functionSelector":"23b872dd","id":1011,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4766:12:6","nodeType":"FunctionDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"from","nameLocation":"4787:4:6","nodeType":"VariableDeclaration","scope":1011,"src":"4779:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":981,"name":"address","nodeType":"ElementaryTypeName","src":"4779:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":984,"mutability":"mutable","name":"to","nameLocation":"4801:2:6","nodeType":"VariableDeclaration","scope":1011,"src":"4793:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":983,"name":"address","nodeType":"ElementaryTypeName","src":"4793:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":986,"mutability":"mutable","name":"value","nameLocation":"4813:5:6","nodeType":"VariableDeclaration","scope":1011,"src":"4805:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":985,"name":"uint256","nodeType":"ElementaryTypeName","src":"4805:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4778:41:6"},"returnParameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1011,"src":"4844:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":988,"name":"bool","nodeType":"ElementaryTypeName","src":"4844:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4843:6:6"},"scope":1328,"src":"4757:244:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1057,"nodeType":"Block","src":"5443:231:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"5457:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5473:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5465:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1022,"name":"address","nodeType":"ElementaryTypeName","src":"5465:7:6","typeDescriptions":{}}},"id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5465:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5457:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1035,"nodeType":"IfStatement","src":"5453:86:6","trueBody":{"id":1034,"nodeType":"Block","src":"5477:62:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5525:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5517:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"5517:7:6","typeDescriptions":{}}},"id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5517:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1027,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"5498:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1033,"nodeType":"RevertStatement","src":"5491:37:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1036,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"5552:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5566:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5558:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1037,"name":"address","nodeType":"ElementaryTypeName","src":"5558:7:6","typeDescriptions":{}}},"id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5558:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5552:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1050,"nodeType":"IfStatement","src":"5548:86:6","trueBody":{"id":1049,"nodeType":"Block","src":"5570:64:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5620:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5612:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"5612:7:6","typeDescriptions":{}}},"id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5612:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1042,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"5591:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5591:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1048,"nodeType":"RevertStatement","src":"5584:39:6"}]}},{"expression":{"arguments":[{"id":1052,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"5651:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1053,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"5657:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1054,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"5661:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1051,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"5643:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5643:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1056,"nodeType":"ExpressionStatement","src":"5643:24:6"}]},"documentation":{"id":1012,"nodeType":"StructuredDocumentation","src":"5007:362:6","text":" @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":1058,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"5383:9:6","nodeType":"FunctionDefinition","parameters":{"id":1019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1014,"mutability":"mutable","name":"from","nameLocation":"5401:4:6","nodeType":"VariableDeclaration","scope":1058,"src":"5393:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"5393:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1016,"mutability":"mutable","name":"to","nameLocation":"5415:2:6","nodeType":"VariableDeclaration","scope":1058,"src":"5407:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1015,"name":"address","nodeType":"ElementaryTypeName","src":"5407:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1018,"mutability":"mutable","name":"value","nameLocation":"5427:5:6","nodeType":"VariableDeclaration","scope":1058,"src":"5419:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1017,"name":"uint256","nodeType":"ElementaryTypeName","src":"5419:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5392:41:6"},"returnParameters":{"id":1020,"nodeType":"ParameterList","parameters":[],"src":"5443:0:6"},"scope":1328,"src":"5374:300:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"6064:1032:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1068,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"6078:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6094:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6086:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"6086:7:6","typeDescriptions":{}}},"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6086:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6078:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1105,"nodeType":"Block","src":"6252:362:6","statements":[{"assignments":[1080],"declarations":[{"constant":false,"id":1080,"mutability":"mutable","name":"fromBalance","nameLocation":"6274:11:6","nodeType":"VariableDeclaration","scope":1105,"src":"6266:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1079,"name":"uint256","nodeType":"ElementaryTypeName","src":"6266:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1084,"initialValue":{"baseExpression":{"id":1081,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"6288:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1083,"indexExpression":{"id":1082,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"6298:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6288:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6266:37:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1085,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"6321:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"6335:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6321:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1095,"nodeType":"IfStatement","src":"6317:115:6","trueBody":{"id":1094,"nodeType":"Block","src":"6342:90:6","statements":[{"errorCall":{"arguments":[{"id":1089,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"6392:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1090,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"6398:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"6411:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1088,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6367:24:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6367:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1093,"nodeType":"RevertStatement","src":"6360:57:6"}]}},{"id":1104,"nodeType":"UncheckedBlock","src":"6445:159:6","statements":[{"expression":{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1096,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"6552:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1098,"indexExpression":{"id":1097,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"6562:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6552:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"6570:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"6584:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6570:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6552:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1103,"nodeType":"ExpressionStatement","src":"6552:37:6"}]}]},"id":1106,"nodeType":"IfStatement","src":"6074:540:6","trueBody":{"id":1078,"nodeType":"Block","src":"6098:148:6","statements":[{"expression":{"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1074,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"6214:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"6230:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6214:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1077,"nodeType":"ExpressionStatement","src":"6214:21:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"6628:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6642:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6634:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:6","typeDescriptions":{}}},"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6634:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6628:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1126,"nodeType":"Block","src":"6843:206:6","statements":[{"id":1125,"nodeType":"UncheckedBlock","src":"6857:182:6","statements":[{"expression":{"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1119,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7002:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1121,"indexExpression":{"id":1120,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"7012:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7002:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"7019:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7002:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1124,"nodeType":"ExpressionStatement","src":"7002:22:6"}]}]},"id":1127,"nodeType":"IfStatement","src":"6624:425:6","trueBody":{"id":1118,"nodeType":"Block","src":"6646:191:6","statements":[{"id":1117,"nodeType":"UncheckedBlock","src":"6660:167:6","statements":[{"expression":{"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1113,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"6791:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"6807:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6791:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1116,"nodeType":"ExpressionStatement","src":"6791:21:6"}]}]}},{"eventCall":{"arguments":[{"id":1129,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"7073:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1130,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"7079:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1131,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"7083:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1128,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"7064:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7064:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1133,"nodeType":"EmitStatement","src":"7059:30:6"}]},"documentation":{"id":1059,"nodeType":"StructuredDocumentation","src":"5680:304:6","text":" @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"5998:7:6","nodeType":"FunctionDefinition","parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1061,"mutability":"mutable","name":"from","nameLocation":"6014:4:6","nodeType":"VariableDeclaration","scope":1135,"src":"6006:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1060,"name":"address","nodeType":"ElementaryTypeName","src":"6006:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1063,"mutability":"mutable","name":"to","nameLocation":"6028:2:6","nodeType":"VariableDeclaration","scope":1135,"src":"6020:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1062,"name":"address","nodeType":"ElementaryTypeName","src":"6020:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"value","nameLocation":"6040:5:6","nodeType":"VariableDeclaration","scope":1135,"src":"6032:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"6032:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6005:41:6"},"returnParameters":{"id":1067,"nodeType":"ParameterList","parameters":[],"src":"6064:0:6"},"scope":1328,"src":"5989:1107:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1167,"nodeType":"Block","src":"7495:152:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"7509:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7528:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7520:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"7520:7:6","typeDescriptions":{}}},"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7520:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7509:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1157,"nodeType":"IfStatement","src":"7505:91:6","trueBody":{"id":1156,"nodeType":"Block","src":"7532:64:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7582:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7574:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1150,"name":"address","nodeType":"ElementaryTypeName","src":"7574:7:6","typeDescriptions":{}}},"id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7574:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1149,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"7553:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7553:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1155,"nodeType":"RevertStatement","src":"7546:39:6"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7621:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7613:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"7613:7:6","typeDescriptions":{}}},"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1163,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"7625:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"7634:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1158,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"7605:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7605:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1166,"nodeType":"ExpressionStatement","src":"7605:35:6"}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"7102:332:6","text":" @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":1168,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"7448:5:6","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"account","nameLocation":"7462:7:6","nodeType":"VariableDeclaration","scope":1168,"src":"7454:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"7454:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"value","nameLocation":"7479:5:6","nodeType":"VariableDeclaration","scope":1168,"src":"7471:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"7471:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7453:32:6"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[],"src":"7495:0:6"},"scope":1328,"src":"7439:208:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1200,"nodeType":"Block","src":"8021:150:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1176,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8035:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8054:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8046:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1177,"name":"address","nodeType":"ElementaryTypeName","src":"8046:7:6","typeDescriptions":{}}},"id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8046:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8035:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1190,"nodeType":"IfStatement","src":"8031:89:6","trueBody":{"id":1189,"nodeType":"Block","src":"8058:62:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8106:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8098:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"8098:7:6","typeDescriptions":{}}},"id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8098:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1182,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"8079:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8079:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1188,"nodeType":"RevertStatement","src":"8072:37:6"}]}},{"expression":{"arguments":[{"id":1192,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8137:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8154:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8146:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1193,"name":"address","nodeType":"ElementaryTypeName","src":"8146:7:6","typeDescriptions":{}}},"id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8146:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"8158:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1191,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"8129:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8129:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1199,"nodeType":"ExpressionStatement","src":"8129:35:6"}]},"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"7653:307:6","text":" @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"},"id":1201,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"7974:5:6","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"account","nameLocation":"7988:7:6","nodeType":"VariableDeclaration","scope":1201,"src":"7980:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"7980:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"value","nameLocation":"8005:5:6","nodeType":"VariableDeclaration","scope":1201,"src":"7997:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"7997:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7979:32:6"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[],"src":"8021:0:6"},"scope":1328,"src":"7965:206:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1218,"nodeType":"Block","src":"8781:54:6","statements":[{"expression":{"arguments":[{"id":1212,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"8800:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1213,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"8807:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8816:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8823:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1211,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1219,1279],"referencedDeclaration":1279,"src":"8791:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8791:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1217,"nodeType":"ExpressionStatement","src":"8791:37:6"}]},"documentation":{"id":1202,"nodeType":"StructuredDocumentation","src":"8177:525:6","text":" @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1219,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"8716:8:6","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"owner","nameLocation":"8733:5:6","nodeType":"VariableDeclaration","scope":1219,"src":"8725:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"8725:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"spender","nameLocation":"8748:7:6","nodeType":"VariableDeclaration","scope":1219,"src":"8740:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"8740:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"value","nameLocation":"8765:5:6","nodeType":"VariableDeclaration","scope":1219,"src":"8757:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"8757:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8724:47:6"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"8781:0:6"},"scope":1328,"src":"8707:128:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1278,"nodeType":"Block","src":"9780:334:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"9794:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9811:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9803:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1232,"name":"address","nodeType":"ElementaryTypeName","src":"9803:7:6","typeDescriptions":{}}},"id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9803:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9794:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1245,"nodeType":"IfStatement","src":"9790:89:6","trueBody":{"id":1244,"nodeType":"Block","src":"9815:64:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9865:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9857:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"9857:7:6","typeDescriptions":{}}},"id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9857:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1237,"name":"ERC20InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"9836:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9836:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1243,"nodeType":"RevertStatement","src":"9829:39:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1246,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"9892:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9911:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9903:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"9903:7:6","typeDescriptions":{}}},"id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9903:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9892:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1260,"nodeType":"IfStatement","src":"9888:90:6","trueBody":{"id":1259,"nodeType":"Block","src":"9915:63:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9964:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9956:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1253,"name":"address","nodeType":"ElementaryTypeName","src":"9956:7:6","typeDescriptions":{}}},"id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9956:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1252,"name":"ERC20InvalidSpender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"9936:19:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9936:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1258,"nodeType":"RevertStatement","src":"9929:38:6"}]}},{"expression":{"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1261,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"9987:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1264,"indexExpression":{"id":1262,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"9999:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9987:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1265,"indexExpression":{"id":1263,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"10006:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9987:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"10017:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9987:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1268,"nodeType":"ExpressionStatement","src":"9987:35:6"},{"condition":{"id":1269,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"10036:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1277,"nodeType":"IfStatement","src":"10032:76:6","trueBody":{"id":1276,"nodeType":"Block","src":"10047:61:6","statements":[{"eventCall":{"arguments":[{"id":1271,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"10075:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1272,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"10082:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1273,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"10091:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1270,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"10066:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10066:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"EmitStatement","src":"10061:36:6"}]}}]},"documentation":{"id":1220,"nodeType":"StructuredDocumentation","src":"8841:836:6","text":" @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."},"id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"9691:8:6","nodeType":"FunctionDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"owner","nameLocation":"9708:5:6","nodeType":"VariableDeclaration","scope":1279,"src":"9700:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"9700:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1224,"mutability":"mutable","name":"spender","nameLocation":"9723:7:6","nodeType":"VariableDeclaration","scope":1279,"src":"9715:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1223,"name":"address","nodeType":"ElementaryTypeName","src":"9715:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"value","nameLocation":"9740:5:6","nodeType":"VariableDeclaration","scope":1279,"src":"9732:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"9732:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"emitEvent","nameLocation":"9752:9:6","nodeType":"VariableDeclaration","scope":1279,"src":"9747:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1227,"name":"bool","nodeType":"ElementaryTypeName","src":"9747:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9699:63:6"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[],"src":"9780:0:6"},"scope":1328,"src":"9682:432:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1326,"nodeType":"Block","src":"10485:387:6","statements":[{"assignments":[1290],"declarations":[{"constant":false,"id":1290,"mutability":"mutable","name":"currentAllowance","nameLocation":"10503:16:6","nodeType":"VariableDeclaration","scope":1326,"src":"10495:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"10495:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1295,"initialValue":{"arguments":[{"id":1292,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"10532:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1293,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"10539:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1291,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"10522:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10522:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10495:52:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1296,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"10561:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10585:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"10585:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1297,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"10580:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10580:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10594:3:6","memberName":"max","nodeType":"MemberAccess","src":"10580:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10561:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1325,"nodeType":"IfStatement","src":"10557:309:6","trueBody":{"id":1324,"nodeType":"Block","src":"10599:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1303,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"10617:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"10636:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10617:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1313,"nodeType":"IfStatement","src":"10613:130:6","trueBody":{"id":1312,"nodeType":"Block","src":"10643:100:6","statements":[{"errorCall":{"arguments":[{"id":1307,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"10695:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1308,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"10704:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"10722:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1306,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"10668:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10668:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1311,"nodeType":"RevertStatement","src":"10661:67:6"}]}},{"id":1323,"nodeType":"UncheckedBlock","src":"10756:100:6","statements":[{"expression":{"arguments":[{"id":1315,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"10793:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1316,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"10800:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"10809:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"10828:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10809:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10835:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1314,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1219,1279],"referencedDeclaration":1279,"src":"10784:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10784:57:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1322,"nodeType":"ExpressionStatement","src":"10784:57:6"}]}]}}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"10120:271:6","text":" @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."},"id":1327,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"10405:15:6","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"owner","nameLocation":"10429:5:6","nodeType":"VariableDeclaration","scope":1327,"src":"10421:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"10421:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"spender","nameLocation":"10444:7:6","nodeType":"VariableDeclaration","scope":1327,"src":"10436:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1283,"name":"address","nodeType":"ElementaryTypeName","src":"10436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"value","nameLocation":"10461:5:6","nodeType":"VariableDeclaration","scope":1327,"src":"10453:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"10453:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10420:47:6"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[],"src":"10485:0:6"},"scope":1328,"src":"10396:476:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1329,"src":"1106:9768:6","usedErrors":[688,693,698,707,712,717],"usedEvents":[1340,1349]}],"src":"105:10770:6"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"id":7,"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1406]},"id":1407,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1330,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1331,"nodeType":"StructuredDocumentation","src":"132:71:7","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":1406,"linearizedBaseContracts":[1406],"name":"IERC20","nameLocation":"214:6:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1332,"nodeType":"StructuredDocumentation","src":"227:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1340,"name":"Transfer","nameLocation":"396:8:7","nodeType":"EventDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:7","nodeType":"VariableDeclaration","scope":1340,"src":"405:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1333,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1336,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:7","nodeType":"VariableDeclaration","scope":1340,"src":"427:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1335,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1338,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:7","nodeType":"VariableDeclaration","scope":1340,"src":"447:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:7"},"src":"390:72:7"},{"anonymous":false,"documentation":{"id":1341,"nodeType":"StructuredDocumentation","src":"468:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1349,"name":"Approval","nameLocation":"627:8:7","nodeType":"EventDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:7","nodeType":"VariableDeclaration","scope":1349,"src":"636:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1342,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1345,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:7","nodeType":"VariableDeclaration","scope":1349,"src":"659:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1344,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1347,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:7","nodeType":"VariableDeclaration","scope":1349,"src":"684:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:7"},"src":"621:78:7"},{"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"705:65:7","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":1355,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:7","nodeType":"FunctionDefinition","parameters":{"id":1351,"nodeType":"ParameterList","parameters":[],"src":"795:2:7"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1355,"src":"821:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:7"},"scope":1406,"src":"775:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"836:71:7","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":1363,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:7","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1358,"mutability":"mutable","name":"account","nameLocation":"939:7:7","nodeType":"VariableDeclaration","scope":1363,"src":"931:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1357,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:7"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"971:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:7"},"scope":1406,"src":"912:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"986:213:7","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1373,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:7","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"to","nameLocation":"1230:2:7","nodeType":"VariableDeclaration","scope":1373,"src":"1222:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"value","nameLocation":"1242:5:7","nodeType":"VariableDeclaration","scope":1373,"src":"1234:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:7"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1373,"src":"1267:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1370,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:7"},"scope":1406,"src":"1204:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1374,"nodeType":"StructuredDocumentation","src":"1279:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1383,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:7","nodeType":"FunctionDefinition","parameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"owner","nameLocation":"1575:5:7","nodeType":"VariableDeclaration","scope":1383,"src":"1567:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1375,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1378,"mutability":"mutable","name":"spender","nameLocation":"1590:7:7","nodeType":"VariableDeclaration","scope":1383,"src":"1582:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:7"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1383,"src":"1622:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:7"},"scope":1406,"src":"1548:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"1637:667:7","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1393,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:7","nodeType":"FunctionDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"spender","nameLocation":"2334:7:7","nodeType":"VariableDeclaration","scope":1393,"src":"2326:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1385,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1388,"mutability":"mutable","name":"value","nameLocation":"2351:5:7","nodeType":"VariableDeclaration","scope":1393,"src":"2343:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:7"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1393,"src":"2376:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1390,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:7"},"scope":1406,"src":"2309:73:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"2388:297:7","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1405,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:7","nodeType":"FunctionDefinition","parameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"from","nameLocation":"2720:4:7","nodeType":"VariableDeclaration","scope":1405,"src":"2712:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1395,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"to","nameLocation":"2734:2:7","nodeType":"VariableDeclaration","scope":1405,"src":"2726:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1397,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"value","nameLocation":"2746:5:7","nodeType":"VariableDeclaration","scope":1405,"src":"2738:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1399,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:7"},"returnParameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1405,"src":"2771:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1402,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:7"},"scope":1406,"src":"2690:87:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1407,"src":"204:2575:7","usedErrors":[],"usedEvents":[1340,1349]}],"src":"106:2674:7"}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol":{"id":8,"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol","exportedSymbols":{"Checkpoints":[9229],"ERC20":[1328],"ERC20Votes":[1538],"Votes":[625]},"id":1539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1408,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"121:24:8"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":1410,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1539,"sourceUnit":1329,"src":"147:35:8","symbolAliases":[{"foreign":{"id":1409,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"155:5:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/governance/utils/Votes.sol","file":"../../../governance/utils/Votes.sol","id":1412,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1539,"sourceUnit":626,"src":"183:58:8","symbolAliases":[{"foreign":{"id":1411,"name":"Votes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"191:5:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/Checkpoints.sol","file":"../../../utils/structs/Checkpoints.sol","id":1414,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1539,"sourceUnit":9230,"src":"242:67:8","symbolAliases":[{"foreign":{"id":1413,"name":"Checkpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9229,"src":"250:11:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1416,"name":"ERC20","nameLocations":["1226:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":1328,"src":"1226:5:8"},"id":1417,"nodeType":"InheritanceSpecifier","src":"1226:5:8"},{"baseName":{"id":1418,"name":"Votes","nameLocations":["1233:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"1233:5:8"},"id":1419,"nodeType":"InheritanceSpecifier","src":"1233:5:8"}],"canonicalName":"ERC20Votes","contractDependencies":[],"contractKind":"contract","documentation":{"id":1415,"nodeType":"StructuredDocumentation","src":"311:882:8","text":" @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\n NOTE: This contract does not provide interface compatibility with Compound's COMP token.\n This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\n power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\n By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked."},"fullyImplemented":true,"id":1538,"internalFunctionIDs":{"602":1,"616":2},"linearizedBaseContracts":[1538,625,661,82,676,1662,4032,650,1328,718,1564,1406,1594],"name":"ERC20Votes","nameLocation":"1212:10:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"1245:100:8","text":" @dev Total supply cap has been exceeded, introducing a risk of votes overflowing."},"errorSelector":"1cb15d26","id":1426,"name":"ERC20ExceededSafeSupply","nameLocation":"1356:23:8","nodeType":"ErrorDefinition","parameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1422,"mutability":"mutable","name":"increasedSupply","nameLocation":"1388:15:8","nodeType":"VariableDeclaration","scope":1426,"src":"1380:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1380:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1424,"mutability":"mutable","name":"cap","nameLocation":"1413:3:8","nodeType":"VariableDeclaration","scope":1426,"src":"1405:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1423,"name":"uint256","nodeType":"ElementaryTypeName","src":"1405:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1379:38:8"},"src":"1350:68:8"},{"body":{"id":1438,"nodeType":"Block","src":"2175:41:8","statements":[{"expression":{"expression":{"arguments":[{"id":1434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2197:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":1433,"name":"uint208","nodeType":"ElementaryTypeName","src":"2197:7:8","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":1432,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2192:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2206:3:8","memberName":"max","nodeType":"MemberAccess","src":"2192:17:8","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":1431,"id":1437,"nodeType":"Return","src":"2185:24:8"}]},"documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"1424:684:8","text":" @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\n This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\n so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\n remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\n {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\n additional logic requires it. When resolving override conflicts on this function, the minimum should be\n returned."},"id":1439,"implemented":true,"kind":"function","modifiers":[],"name":"_maxSupply","nameLocation":"2122:10:8","nodeType":"FunctionDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[],"src":"2132:2:8"},"returnParameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1439,"src":"2166:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1429,"name":"uint256","nodeType":"ElementaryTypeName","src":"2166:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2165:9:8"},"scope":1538,"src":"2113:103:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1135],"body":{"id":1492,"nodeType":"Block","src":"2440:329:8","statements":[{"expression":{"arguments":[{"id":1453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"2464:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1454,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"2470:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"2474:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1450,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"2450:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20Votes_$1538_$","typeString":"type(contract super ERC20Votes)"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2456:7:8","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":1135,"src":"2450:13:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2450:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1457,"nodeType":"ExpressionStatement","src":"2450:30:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1458,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"2494:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2510:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2502:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"2502:7:8","typeDescriptions":{}}},"id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2502:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2494:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1485,"nodeType":"IfStatement","src":"2490:226:8","trueBody":{"id":1484,"nodeType":"Block","src":"2514:202:8","statements":[{"assignments":[1465],"declarations":[{"constant":false,"id":1465,"mutability":"mutable","name":"supply","nameLocation":"2536:6:8","nodeType":"VariableDeclaration","scope":1484,"src":"2528:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"2528:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1468,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1466,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"2545:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2528:30:8"},{"assignments":[1470],"declarations":[{"constant":false,"id":1470,"mutability":"mutable","name":"cap","nameLocation":"2580:3:8","nodeType":"VariableDeclaration","scope":1484,"src":"2572:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"2572:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1473,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1471,"name":"_maxSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"2586:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2586:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2572:26:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1474,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"2616:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1475,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"2625:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1483,"nodeType":"IfStatement","src":"2612:94:8","trueBody":{"id":1482,"nodeType":"Block","src":"2630:76:8","statements":[{"errorCall":{"arguments":[{"id":1478,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"2679:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1479,"name":"cap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"2687:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1477,"name":"ERC20ExceededSafeSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"2655:23:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2655:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1481,"nodeType":"RevertStatement","src":"2648:43:8"}]}}]}},{"expression":{"arguments":[{"id":1487,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"2746:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1488,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"2752:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"2756:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1486,"name":"_transferVotingUnits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"2725:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2725:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1491,"nodeType":"ExpressionStatement","src":"2725:37:8"}]},"documentation":{"id":1440,"nodeType":"StructuredDocumentation","src":"2222:129:8","text":" @dev Move voting power when tokens are transferred.\n Emits a {IVotes-DelegateVotesChanged} event."},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"2365:7:8","nodeType":"FunctionDefinition","overrides":{"id":1448,"nodeType":"OverrideSpecifier","overrides":[],"src":"2431:8:8"},"parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"from","nameLocation":"2381:4:8","nodeType":"VariableDeclaration","scope":1493,"src":"2373:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1441,"name":"address","nodeType":"ElementaryTypeName","src":"2373:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"to","nameLocation":"2395:2:8","nodeType":"VariableDeclaration","scope":1493,"src":"2387:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"2387:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"value","nameLocation":"2407:5:8","nodeType":"VariableDeclaration","scope":1493,"src":"2399:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"2399:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2372:41:8"},"returnParameters":{"id":1449,"nodeType":"ParameterList","parameters":[],"src":"2440:0:8"},"scope":1538,"src":"2356:413:8","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[624],"body":{"id":1506,"nodeType":"Block","src":"3120:42:8","statements":[{"expression":{"arguments":[{"id":1503,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"3147:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1502,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"3137:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3137:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1501,"id":1505,"nodeType":"Return","src":"3130:25:8"}]},"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"2775:249:8","text":" @dev Returns the voting units of an `account`.\n WARNING: Overriding this function may compromise the internal vote accounting.\n `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change."},"id":1507,"implemented":true,"kind":"function","modifiers":[],"name":"_getVotingUnits","nameLocation":"3038:15:8","nodeType":"FunctionDefinition","overrides":{"id":1498,"nodeType":"OverrideSpecifier","overrides":[],"src":"3093:8:8"},"parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"account","nameLocation":"3062:7:8","nodeType":"VariableDeclaration","scope":1507,"src":"3054:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"3054:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3053:17:8"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1507,"src":"3111:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1499,"name":"uint256","nodeType":"ElementaryTypeName","src":"3111:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3110:9:8"},"scope":1538,"src":"3029:133:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1519,"nodeType":"Block","src":"3315:48:8","statements":[{"expression":{"arguments":[{"id":1516,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"3348:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1515,"name":"_numCheckpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"3332:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint32_$","typeString":"function (address) view returns (uint32)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3332:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1514,"id":1518,"nodeType":"Return","src":"3325:31:8"}]},"documentation":{"id":1508,"nodeType":"StructuredDocumentation","src":"3168:64:8","text":" @dev Get number of checkpoints for `account`."},"functionSelector":"6fcfff45","id":1520,"implemented":true,"kind":"function","modifiers":[],"name":"numCheckpoints","nameLocation":"3246:14:8","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"account","nameLocation":"3269:7:8","nodeType":"VariableDeclaration","scope":1520,"src":"3261:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1509,"name":"address","nodeType":"ElementaryTypeName","src":"3261:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3260:17:8"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1520,"src":"3307:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1512,"name":"uint32","nodeType":"ElementaryTypeName","src":"3307:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3306:8:8"},"scope":1538,"src":"3237:126:8","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1536,"nodeType":"Block","src":"3553:50:8","statements":[{"expression":{"arguments":[{"id":1532,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"3583:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1533,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"3592:3:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1531,"name":"_checkpoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"3570:12:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint32_$returns$_t_struct$_Checkpoint208_$8190_memory_ptr_$","typeString":"function (address,uint32) view returns (struct Checkpoints.Checkpoint208 memory)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3570:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208 memory"}},"functionReturnParameters":1530,"id":1535,"nodeType":"Return","src":"3563:33:8"}]},"documentation":{"id":1521,"nodeType":"StructuredDocumentation","src":"3369:66:8","text":" @dev Get the `pos`-th checkpoint for `account`."},"functionSelector":"f1127ed8","id":1537,"implemented":true,"kind":"function","modifiers":[],"name":"checkpoints","nameLocation":"3449:11:8","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1523,"mutability":"mutable","name":"account","nameLocation":"3469:7:8","nodeType":"VariableDeclaration","scope":1537,"src":"3461:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1522,"name":"address","nodeType":"ElementaryTypeName","src":"3461:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"pos","nameLocation":"3485:3:8","nodeType":"VariableDeclaration","scope":1537,"src":"3478:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1524,"name":"uint32","nodeType":"ElementaryTypeName","src":"3478:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3460:29:8"},"returnParameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1537,"src":"3519:32:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208"},"typeName":{"id":1528,"nodeType":"UserDefinedTypeName","pathNode":{"id":1527,"name":"Checkpoints.Checkpoint208","nameLocations":["3519:11:8","3531:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"3519:25:8"},"referencedDeclaration":8190,"src":"3519:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"visibility":"internal"}],"src":"3518:34:8"},"scope":1538,"src":"3440:163:8","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1539,"src":"1194:2411:8","usedErrors":[7,133,140,688,693,698,707,712,717,1426,1604,1728,1730,3468,3473,3478,5749,7656],"usedEvents":[16,25,630,1340,1349]}],"src":"121:3485:8"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"id":9,"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1406],"IERC20Metadata":[1564]},"id":1565,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1540,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1542,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1565,"sourceUnit":1407,"src":"151:37:9","symbolAliases":[{"foreign":{"id":1541,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"159:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1544,"name":"IERC20","nameLocations":["306:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1406,"src":"306:6:9"},"id":1545,"nodeType":"InheritanceSpecifier","src":"306:6:9"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1543,"nodeType":"StructuredDocumentation","src":"190:87:9","text":" @dev Interface for the optional metadata functions from the ERC-20 standard."},"fullyImplemented":false,"id":1564,"linearizedBaseContracts":[1564,1406],"name":"IERC20Metadata","nameLocation":"288:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1546,"nodeType":"StructuredDocumentation","src":"319:54:9","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1551,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"387:4:9","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[],"src":"391:2:9"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1551,"src":"417:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1548,"name":"string","nodeType":"ElementaryTypeName","src":"417:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"416:15:9"},"scope":1564,"src":"378:54:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"438:56:9","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1557,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"508:6:9","nodeType":"FunctionDefinition","parameters":{"id":1553,"nodeType":"ParameterList","parameters":[],"src":"514:2:9"},"returnParameters":{"id":1556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1557,"src":"540:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1554,"name":"string","nodeType":"ElementaryTypeName","src":"540:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"539:15:9"},"scope":1564,"src":"499:56:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1558,"nodeType":"StructuredDocumentation","src":"561:65:9","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1563,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"640:8:9","nodeType":"FunctionDefinition","parameters":{"id":1559,"nodeType":"ParameterList","parameters":[],"src":"648:2:9"},"returnParameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1563,"src":"674:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1560,"name":"uint8","nodeType":"ElementaryTypeName","src":"674:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"673:7:9"},"scope":1564,"src":"631:50:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1565,"src":"278:405:9","usedErrors":[],"usedEvents":[1340,1349]}],"src":"125:559:9"}},"@openzeppelin/contracts/utils/Context.sol":{"id":10,"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1594]},"id":1595,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1566,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:10"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1567,"nodeType":"StructuredDocumentation","src":"127:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1594,"linearizedBaseContracts":[1594],"name":"Context","nameLocation":"642:7:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1575,"nodeType":"Block","src":"718:34:10","statements":[{"expression":{"expression":{"id":1572,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"735:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:10","memberName":"sender","nodeType":"MemberAccess","src":"735:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1571,"id":1574,"nodeType":"Return","src":"728:17:10"}]},"id":1576,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:10","nodeType":"FunctionDefinition","parameters":{"id":1568,"nodeType":"ParameterList","parameters":[],"src":"675:2:10"},"returnParameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1576,"src":"709:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1569,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:10"},"scope":1594,"src":"656:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1584,"nodeType":"Block","src":"825:32:10","statements":[{"expression":{"expression":{"id":1581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"842:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:10","memberName":"data","nodeType":"MemberAccess","src":"842:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1580,"id":1583,"nodeType":"Return","src":"835:15:10"}]},"id":1585,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:10","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"775:2:10"},"returnParameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1585,"src":"809:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1578,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:10"},"scope":1594,"src":"758:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"935:25:10","statements":[{"expression":{"hexValue":"30","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1589,"id":1591,"nodeType":"Return","src":"945:8:10"}]},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:10","nodeType":"FunctionDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[],"src":"892:2:10"},"returnParameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1593,"src":"926:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:10"},"scope":1594,"src":"863:97:10","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1595,"src":"624:338:10","usedErrors":[],"usedEvents":[]}],"src":"101:862:10"}},"@openzeppelin/contracts/utils/Nonces.sol":{"id":11,"ast":{"absolutePath":"@openzeppelin/contracts/utils/Nonces.sol","exportedSymbols":{"Nonces":[1662]},"id":1663,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1596,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"99:24:11"},{"abstract":true,"baseContracts":[],"canonicalName":"Nonces","contractDependencies":[],"contractKind":"contract","documentation":{"id":1597,"nodeType":"StructuredDocumentation","src":"125:83:11","text":" @dev Provides tracking nonces for addresses. Nonces will only increment."},"fullyImplemented":true,"id":1662,"linearizedBaseContracts":[1662],"name":"Nonces","nameLocation":"227:6:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1598,"nodeType":"StructuredDocumentation","src":"240:90:11","text":" @dev The nonce used for an `account` is not the expected current nonce."},"errorSelector":"752d88c0","id":1604,"name":"InvalidAccountNonce","nameLocation":"341:19:11","nodeType":"ErrorDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1600,"mutability":"mutable","name":"account","nameLocation":"369:7:11","nodeType":"VariableDeclaration","scope":1604,"src":"361:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1599,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"currentNonce","nameLocation":"386:12:11","nodeType":"VariableDeclaration","scope":1604,"src":"378:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"360:39:11"},"src":"335:65:11"},{"constant":false,"id":1608,"mutability":"mutable","name":"_nonces","nameLocation":"450:7:11","nodeType":"VariableDeclaration","scope":1662,"src":"406:51:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1607,"keyName":"account","keyNameLocation":"422:7:11","keyType":{"id":1605,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"406:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1606,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":1620,"nodeType":"Block","src":"607:38:11","statements":[{"expression":{"baseExpression":{"id":1616,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"624:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1618,"indexExpression":{"id":1617,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"632:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"624:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1615,"id":1619,"nodeType":"Return","src":"617:21:11"}]},"documentation":{"id":1609,"nodeType":"StructuredDocumentation","src":"464:69:11","text":" @dev Returns the next unused nonce for an address."},"functionSelector":"7ecebe00","id":1621,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"547:6:11","nodeType":"FunctionDefinition","parameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1611,"mutability":"mutable","name":"owner","nameLocation":"562:5:11","nodeType":"VariableDeclaration","scope":1621,"src":"554:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"554:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"553:15:11"},"returnParameters":{"id":1615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1621,"src":"598:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1613,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"597:9:11"},"scope":1662,"src":"538:107:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1635,"nodeType":"Block","src":"828:326:11","statements":[{"id":1634,"nodeType":"UncheckedBlock","src":"1031:117:11","statements":[{"expression":{"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1121:16:11","subExpression":{"baseExpression":{"id":1629,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1608,"src":"1121:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1631,"indexExpression":{"id":1630,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"1129:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1121:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1628,"id":1633,"nodeType":"Return","src":"1114:23:11"}]}]},"documentation":{"id":1622,"nodeType":"StructuredDocumentation","src":"651:103:11","text":" @dev Consumes a nonce.\n Returns the current value and increments nonce."},"id":1636,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"768:9:11","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"owner","nameLocation":"786:5:11","nodeType":"VariableDeclaration","scope":1636,"src":"778:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"778:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"777:15:11"},"returnParameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1636,"src":"819:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"819:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"818:9:11"},"scope":1662,"src":"759:395:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1660,"nodeType":"Block","src":"1338:149:11","statements":[{"assignments":[1645],"declarations":[{"constant":false,"id":1645,"mutability":"mutable","name":"current","nameLocation":"1356:7:11","nodeType":"VariableDeclaration","scope":1660,"src":"1348:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1644,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1649,"initialValue":{"arguments":[{"id":1647,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"1376:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1646,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"1366:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1366:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1348:34:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1650,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"1396:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1651,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"1405:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1396:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1659,"nodeType":"IfStatement","src":"1392:89:11","trueBody":{"id":1658,"nodeType":"Block","src":"1414:67:11","statements":[{"errorCall":{"arguments":[{"id":1654,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"1455:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1655,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"1462:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1653,"name":"InvalidAccountNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"1435:19:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256) pure returns (error)"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1435:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1657,"nodeType":"RevertStatement","src":"1428:42:11"}]}}]},"documentation":{"id":1637,"nodeType":"StructuredDocumentation","src":"1160:100:11","text":" @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."},"id":1661,"implemented":true,"kind":"function","modifiers":[],"name":"_useCheckedNonce","nameLocation":"1274:16:11","nodeType":"FunctionDefinition","parameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1639,"mutability":"mutable","name":"owner","nameLocation":"1299:5:11","nodeType":"VariableDeclaration","scope":1661,"src":"1291:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"1291:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1641,"mutability":"mutable","name":"nonce","nameLocation":"1314:5:11","nodeType":"VariableDeclaration","scope":1661,"src":"1306:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1290:30:11"},"returnParameters":{"id":1643,"nodeType":"ParameterList","parameters":[],"src":"1338:0:11"},"scope":1662,"src":"1265:222:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1663,"src":"209:1280:11","usedErrors":[1604],"usedEvents":[]}],"src":"99:1391:11"}},"@openzeppelin/contracts/utils/Panic.sol":{"id":12,"ast":{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","exportedSymbols":{"Panic":[1714]},"id":1715,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1664,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"99:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"Panic","contractDependencies":[],"contractKind":"library","documentation":{"id":1665,"nodeType":"StructuredDocumentation","src":"125:489:12","text":" @dev Helper library for emitting standardized panic codes.\n ```solidity\n contract Example {\n      using Panic for uint256;\n      // Use any of the declared internal constants\n      function foo() { Panic.GENERIC.panic(); }\n      // Alternatively\n      function foo() { Panic.panic(Panic.GENERIC); }\n }\n ```\n Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n _Available since v5.1._"},"fullyImplemented":true,"id":1714,"linearizedBaseContracts":[1714],"name":"Panic","nameLocation":"665:5:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":1666,"nodeType":"StructuredDocumentation","src":"677:36:12","text":"@dev generic / unspecified error"},"id":1669,"mutability":"constant","name":"GENERIC","nameLocation":"744:7:12","nodeType":"VariableDeclaration","scope":1714,"src":"718:40:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1667,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"754:4:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"764:37:12","text":"@dev used by the assert() builtin"},"id":1673,"mutability":"constant","name":"ASSERT","nameLocation":"832:6:12","nodeType":"VariableDeclaration","scope":1714,"src":"806:39:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1671,"name":"uint256","nodeType":"ElementaryTypeName","src":"806:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783031","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"841:4:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},"visibility":"internal"},{"constant":true,"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"851:41:12","text":"@dev arithmetic underflow or overflow"},"id":1677,"mutability":"constant","name":"UNDER_OVERFLOW","nameLocation":"923:14:12","nodeType":"VariableDeclaration","scope":1714,"src":"897:47:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1675,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783131","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"940:4:12","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"0x11"},"visibility":"internal"},{"constant":true,"documentation":{"id":1678,"nodeType":"StructuredDocumentation","src":"950:35:12","text":"@dev division or modulo by zero"},"id":1681,"mutability":"constant","name":"DIVISION_BY_ZERO","nameLocation":"1016:16:12","nodeType":"VariableDeclaration","scope":1714,"src":"990:49:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1679,"name":"uint256","nodeType":"ElementaryTypeName","src":"990:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783132","id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1035:4:12","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"0x12"},"visibility":"internal"},{"constant":true,"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"1045:30:12","text":"@dev enum conversion error"},"id":1685,"mutability":"constant","name":"ENUM_CONVERSION_ERROR","nameLocation":"1106:21:12","nodeType":"VariableDeclaration","scope":1714,"src":"1080:54:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1683,"name":"uint256","nodeType":"ElementaryTypeName","src":"1080:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783231","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:4:12","typeDescriptions":{"typeIdentifier":"t_rational_33_by_1","typeString":"int_const 33"},"value":"0x21"},"visibility":"internal"},{"constant":true,"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"1140:36:12","text":"@dev invalid encoding in storage"},"id":1689,"mutability":"constant","name":"STORAGE_ENCODING_ERROR","nameLocation":"1207:22:12","nodeType":"VariableDeclaration","scope":1714,"src":"1181:55:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783232","id":1688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:4:12","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"visibility":"internal"},{"constant":true,"documentation":{"id":1690,"nodeType":"StructuredDocumentation","src":"1242:24:12","text":"@dev empty array pop"},"id":1693,"mutability":"constant","name":"EMPTY_ARRAY_POP","nameLocation":"1297:15:12","nodeType":"VariableDeclaration","scope":1714,"src":"1271:48:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783331","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1315:4:12","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"0x31"},"visibility":"internal"},{"constant":true,"documentation":{"id":1694,"nodeType":"StructuredDocumentation","src":"1325:35:12","text":"@dev array out of bounds access"},"id":1697,"mutability":"constant","name":"ARRAY_OUT_OF_BOUNDS","nameLocation":"1391:19:12","nodeType":"VariableDeclaration","scope":1714,"src":"1365:52:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783332","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1413:4:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"0x32"},"visibility":"internal"},{"constant":true,"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"1423:65:12","text":"@dev resource error (too large allocation or too large array)"},"id":1701,"mutability":"constant","name":"RESOURCE_ERROR","nameLocation":"1519:14:12","nodeType":"VariableDeclaration","scope":1714,"src":"1493:47:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1699,"name":"uint256","nodeType":"ElementaryTypeName","src":"1493:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783431","id":1700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:4:12","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"0x41"},"visibility":"internal"},{"constant":true,"documentation":{"id":1702,"nodeType":"StructuredDocumentation","src":"1546:42:12","text":"@dev calling invalid internal function"},"id":1705,"mutability":"constant","name":"INVALID_INTERNAL_FUNCTION","nameLocation":"1619:25:12","nodeType":"VariableDeclaration","scope":1714,"src":"1593:58:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783531","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1647:4:12","typeDescriptions":{"typeIdentifier":"t_rational_81_by_1","typeString":"int_const 81"},"value":"0x51"},"visibility":"internal"},{"body":{"id":1712,"nodeType":"Block","src":"1819:151:12","statements":[{"AST":{"nativeSrc":"1854:110:12","nodeType":"YulBlock","src":"1854:110:12","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1875:4:12","nodeType":"YulLiteral","src":"1875:4:12","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1881:10:12","nodeType":"YulLiteral","src":"1881:10:12","type":"","value":"0x4e487b71"}],"functionName":{"name":"mstore","nativeSrc":"1868:6:12","nodeType":"YulIdentifier","src":"1868:6:12"},"nativeSrc":"1868:24:12","nodeType":"YulFunctionCall","src":"1868:24:12"},"nativeSrc":"1868:24:12","nodeType":"YulExpressionStatement","src":"1868:24:12"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1912:4:12","nodeType":"YulLiteral","src":"1912:4:12","type":"","value":"0x20"},{"name":"code","nativeSrc":"1918:4:12","nodeType":"YulIdentifier","src":"1918:4:12"}],"functionName":{"name":"mstore","nativeSrc":"1905:6:12","nodeType":"YulIdentifier","src":"1905:6:12"},"nativeSrc":"1905:18:12","nodeType":"YulFunctionCall","src":"1905:18:12"},"nativeSrc":"1905:18:12","nodeType":"YulExpressionStatement","src":"1905:18:12"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1943:4:12","nodeType":"YulLiteral","src":"1943:4:12","type":"","value":"0x1c"},{"kind":"number","nativeSrc":"1949:4:12","nodeType":"YulLiteral","src":"1949:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1936:6:12","nodeType":"YulIdentifier","src":"1936:6:12"},"nativeSrc":"1936:18:12","nodeType":"YulFunctionCall","src":"1936:18:12"},"nativeSrc":"1936:18:12","nodeType":"YulExpressionStatement","src":"1936:18:12"}]},"evmVersion":"cancun","externalReferences":[{"declaration":1708,"isOffset":false,"isSlot":false,"src":"1918:4:12","valueSize":1}],"flags":["memory-safe"],"id":1711,"nodeType":"InlineAssembly","src":"1829:135:12"}]},"documentation":{"id":1706,"nodeType":"StructuredDocumentation","src":"1658:113:12","text":"@dev Reverts with a panic code. Recommended to use with\n the internal constants with predefined codes."},"id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"panic","nameLocation":"1785:5:12","nodeType":"FunctionDefinition","parameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"code","nameLocation":"1799:4:12","nodeType":"VariableDeclaration","scope":1713,"src":"1791:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1707,"name":"uint256","nodeType":"ElementaryTypeName","src":"1791:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1790:14:12"},"returnParameters":{"id":1710,"nodeType":"ParameterList","parameters":[],"src":"1819:0:12"},"scope":1714,"src":"1776:194:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1715,"src":"657:1315:12","usedErrors":[],"usedEvents":[]}],"src":"99:1874:12"}},"@openzeppelin/contracts/utils/ShortStrings.sol":{"id":13,"ast":{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","exportedSymbols":{"ShortString":[1720],"ShortStrings":[1931],"StorageSlot":[2055]},"id":1932,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1716,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"./StorageSlot.sol","id":1718,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1932,"sourceUnit":2056,"src":"132:46:13","symbolAliases":[{"foreign":{"id":1717,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"140:11:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"ShortString","id":1720,"name":"ShortString","nameLocation":"353:11:13","nodeType":"UserDefinedValueTypeDefinition","src":"348:28:13","underlyingType":{"id":1719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"368:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"abstract":false,"baseContracts":[],"canonicalName":"ShortStrings","contractDependencies":[],"contractKind":"library","documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"378:876:13","text":" @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"},"fullyImplemented":true,"id":1931,"linearizedBaseContracts":[1931],"name":"ShortStrings","nameLocation":"1263:12:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1724,"mutability":"constant","name":"FALLBACK_SENTINEL","nameLocation":"1370:17:13","nodeType":"VariableDeclaration","scope":1931,"src":"1345:111:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1345:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646","id":1723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:66:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0x00000000000000000000000000000000000000000000000000000000000000FF"},"visibility":"private"},{"errorSelector":"305a27a9","id":1728,"name":"StringTooLong","nameLocation":"1469:13:13","nodeType":"ErrorDefinition","parameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"str","nameLocation":"1490:3:13","nodeType":"VariableDeclaration","scope":1728,"src":"1483:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1725,"name":"string","nodeType":"ElementaryTypeName","src":"1483:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1482:12:13"},"src":"1463:32:13"},{"errorSelector":"b3512b0c","id":1730,"name":"InvalidShortString","nameLocation":"1506:18:13","nodeType":"ErrorDefinition","parameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"1524:2:13"},"src":"1500:27:13"},{"body":{"id":1773,"nodeType":"Block","src":"1786:208:13","statements":[{"assignments":[1740],"declarations":[{"constant":false,"id":1740,"mutability":"mutable","name":"bstr","nameLocation":"1809:4:13","nodeType":"VariableDeclaration","scope":1773,"src":"1796:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1739,"name":"bytes","nodeType":"ElementaryTypeName","src":"1796:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1745,"initialValue":{"arguments":[{"id":1743,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1822:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1816:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1741,"name":"bytes","nodeType":"ElementaryTypeName","src":"1816:5:13","typeDescriptions":{}}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1816:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1796:30:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1746,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"1840:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1845:6:13","memberName":"length","nodeType":"MemberAccess","src":"1840:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1854:2:13","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1840:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1755,"nodeType":"IfStatement","src":"1836:72:13","trueBody":{"id":1754,"nodeType":"Block","src":"1858:50:13","statements":[{"errorCall":{"arguments":[{"id":1751,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1893:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1750,"name":"StringTooLong","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"1879:13:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$","typeString":"function (string memory) pure returns (error)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1879:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1753,"nodeType":"RevertStatement","src":"1872:25:13"}]}},{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1764,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"1965:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1957:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1957:7:13","typeDescriptions":{}}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1949:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"1949:7:13","typeDescriptions":{}}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1949:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"expression":{"id":1767,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"1974:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1979:6:13","memberName":"length","nodeType":"MemberAccess","src":"1974:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1949:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1941:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1758,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1941:7:13","typeDescriptions":{}}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1756,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"1924:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"type(ShortString)"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1936:4:13","memberName":"wrap","nodeType":"MemberAccess","src":"1924:16:13","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"functionReturnParameters":1738,"id":1772,"nodeType":"Return","src":"1917:70:13"}]},"documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"1533:170:13","text":" @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."},"id":1774,"implemented":true,"kind":"function","modifiers":[],"name":"toShortString","nameLocation":"1717:13:13","nodeType":"FunctionDefinition","parameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"str","nameLocation":"1745:3:13","nodeType":"VariableDeclaration","scope":1774,"src":"1731:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1732,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1730:19:13"},"returnParameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1774,"src":"1773:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":1736,"nodeType":"UserDefinedTypeName","pathNode":{"id":1735,"name":"ShortString","nameLocations":["1773:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"1773:11:13"},"referencedDeclaration":1720,"src":"1773:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"internal"}],"src":"1772:13:13"},"scope":1931,"src":"1708:286:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1799,"nodeType":"Block","src":"2152:304:13","statements":[{"assignments":[1784],"declarations":[{"constant":false,"id":1784,"mutability":"mutable","name":"len","nameLocation":"2170:3:13","nodeType":"VariableDeclaration","scope":1799,"src":"2162:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1783,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1788,"initialValue":{"arguments":[{"id":1786,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"2187:4:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}],"id":1785,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"2176:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1720_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2162:30:13"},{"assignments":[1790],"declarations":[{"constant":false,"id":1790,"mutability":"mutable","name":"str","nameLocation":"2294:3:13","nodeType":"VariableDeclaration","scope":1799,"src":"2280:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1789,"name":"string","nodeType":"ElementaryTypeName","src":"2280:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1795,"initialValue":{"arguments":[{"hexValue":"3332","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2311:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":1792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2300:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1791,"name":"string","nodeType":"ElementaryTypeName","src":"2304:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2280:34:13"},{"AST":{"nativeSrc":"2349:81:13","nodeType":"YulBlock","src":"2349:81:13","statements":[{"expression":{"arguments":[{"name":"str","nativeSrc":"2370:3:13","nodeType":"YulIdentifier","src":"2370:3:13"},{"name":"len","nativeSrc":"2375:3:13","nodeType":"YulIdentifier","src":"2375:3:13"}],"functionName":{"name":"mstore","nativeSrc":"2363:6:13","nodeType":"YulIdentifier","src":"2363:6:13"},"nativeSrc":"2363:16:13","nodeType":"YulFunctionCall","src":"2363:16:13"},"nativeSrc":"2363:16:13","nodeType":"YulExpressionStatement","src":"2363:16:13"},{"expression":{"arguments":[{"arguments":[{"name":"str","nativeSrc":"2403:3:13","nodeType":"YulIdentifier","src":"2403:3:13"},{"kind":"number","nativeSrc":"2408:4:13","nodeType":"YulLiteral","src":"2408:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2399:3:13","nodeType":"YulIdentifier","src":"2399:3:13"},"nativeSrc":"2399:14:13","nodeType":"YulFunctionCall","src":"2399:14:13"},{"name":"sstr","nativeSrc":"2415:4:13","nodeType":"YulIdentifier","src":"2415:4:13"}],"functionName":{"name":"mstore","nativeSrc":"2392:6:13","nodeType":"YulIdentifier","src":"2392:6:13"},"nativeSrc":"2392:28:13","nodeType":"YulFunctionCall","src":"2392:28:13"},"nativeSrc":"2392:28:13","nodeType":"YulExpressionStatement","src":"2392:28:13"}]},"evmVersion":"cancun","externalReferences":[{"declaration":1784,"isOffset":false,"isSlot":false,"src":"2375:3:13","valueSize":1},{"declaration":1778,"isOffset":false,"isSlot":false,"src":"2415:4:13","valueSize":1},{"declaration":1790,"isOffset":false,"isSlot":false,"src":"2370:3:13","valueSize":1},{"declaration":1790,"isOffset":false,"isSlot":false,"src":"2403:3:13","valueSize":1}],"flags":["memory-safe"],"id":1796,"nodeType":"InlineAssembly","src":"2324:106:13"},{"expression":{"id":1797,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"2446:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1782,"id":1798,"nodeType":"Return","src":"2439:10:13"}]},"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"2000:73:13","text":" @dev Decode a `ShortString` back to a \"normal\" string."},"id":1800,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"2087:8:13","nodeType":"FunctionDefinition","parameters":{"id":1779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"sstr","nameLocation":"2108:4:13","nodeType":"VariableDeclaration","scope":1800,"src":"2096:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":1777,"nodeType":"UserDefinedTypeName","pathNode":{"id":1776,"name":"ShortString","nameLocations":["2096:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2096:11:13"},"referencedDeclaration":1720,"src":"2096:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"internal"}],"src":"2095:18:13"},"returnParameters":{"id":1782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1800,"src":"2137:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1780,"name":"string","nodeType":"ElementaryTypeName","src":"2137:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2136:15:13"},"scope":1931,"src":"2078:378:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1831,"nodeType":"Block","src":"2598:175:13","statements":[{"assignments":[1810],"declarations":[{"constant":false,"id":1810,"mutability":"mutable","name":"result","nameLocation":"2616:6:13","nodeType":"VariableDeclaration","scope":1831,"src":"2608:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1809,"name":"uint256","nodeType":"ElementaryTypeName","src":"2608:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1820,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1815,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"2652:4:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}],"expression":{"id":1813,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"2633:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"type(ShortString)"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2645:6:13","memberName":"unwrap","nodeType":"MemberAccess","src":"2633:18:13","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1720_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2625:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"2625:7:13","typeDescriptions":{}}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2625:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30784646","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2661:4:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"2625:40:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2608:57:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1821,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"2679:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2688:2:13","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"2679:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1828,"nodeType":"IfStatement","src":"2675:69:13","trueBody":{"id":1827,"nodeType":"Block","src":"2692:52:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1824,"name":"InvalidShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"2713:18:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2713:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1826,"nodeType":"RevertStatement","src":"2706:27:13"}]}},{"expression":{"id":1829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"2760:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1808,"id":1830,"nodeType":"Return","src":"2753:13:13"}]},"documentation":{"id":1801,"nodeType":"StructuredDocumentation","src":"2462:61:13","text":" @dev Return the length of a `ShortString`."},"id":1832,"implemented":true,"kind":"function","modifiers":[],"name":"byteLength","nameLocation":"2537:10:13","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"sstr","nameLocation":"2560:4:13","nodeType":"VariableDeclaration","scope":1832,"src":"2548:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":1803,"nodeType":"UserDefinedTypeName","pathNode":{"id":1802,"name":"ShortString","nameLocations":["2548:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2548:11:13"},"referencedDeclaration":1720,"src":"2548:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"internal"}],"src":"2547:18:13"},"returnParameters":{"id":1808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1832,"src":"2589:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1806,"name":"uint256","nodeType":"ElementaryTypeName","src":"2589:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2588:9:13"},"scope":1931,"src":"2528:245:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1871,"nodeType":"Block","src":"2996:231:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"3016:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3010:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1843,"name":"bytes","nodeType":"ElementaryTypeName","src":"3010:5:13","typeDescriptions":{}}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3010:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3023:6:13","memberName":"length","nodeType":"MemberAccess","src":"3010:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3032:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3010:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1869,"nodeType":"Block","src":"3094:127:13","statements":[{"expression":{"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1858,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"3134:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"expression":{"id":1855,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"3108:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2055_$","typeString":"type(library StorageSlot)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3120:13:13","memberName":"getStringSlot","nodeType":"MemberAccess","referencedDeclaration":2032,"src":"3108:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1952_storage_ptr_$","typeString":"function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3108:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1952_storage_ptr","typeString":"struct StorageSlot.StringSlot storage pointer"}},"id":1860,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3141:5:13","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1951,"src":"3108:38:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"3149:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3108:46:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1863,"nodeType":"ExpressionStatement","src":"3108:46:13"},{"expression":{"arguments":[{"id":1866,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"3192:17:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1864,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"3175:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"type(ShortString)"}},"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3187:4:13","memberName":"wrap","nodeType":"MemberAccess","src":"3175:16:13","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3175:35:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"functionReturnParameters":1842,"id":1868,"nodeType":"Return","src":"3168:42:13"}]},"id":1870,"nodeType":"IfStatement","src":"3006:215:13","trueBody":{"id":1854,"nodeType":"Block","src":"3036:52:13","statements":[{"expression":{"arguments":[{"id":1851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"3071:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1850,"name":"toShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"3057:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"function (string memory) pure returns (ShortString)"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"functionReturnParameters":1842,"id":1853,"nodeType":"Return","src":"3050:27:13"}]}}]},"documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"2779:103:13","text":" @dev Encode a string into a `ShortString`, or write it to storage if it is too long."},"id":1872,"implemented":true,"kind":"function","modifiers":[],"name":"toShortStringWithFallback","nameLocation":"2896:25:13","nodeType":"FunctionDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"value","nameLocation":"2936:5:13","nodeType":"VariableDeclaration","scope":1872,"src":"2922:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1834,"name":"string","nodeType":"ElementaryTypeName","src":"2922:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"store","nameLocation":"2958:5:13","nodeType":"VariableDeclaration","scope":1872,"src":"2943:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1836,"name":"string","nodeType":"ElementaryTypeName","src":"2943:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2921:43:13"},"returnParameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1872,"src":"2983:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":1840,"nodeType":"UserDefinedTypeName","pathNode":{"id":1839,"name":"ShortString","nameLocations":["2983:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2983:11:13"},"referencedDeclaration":1720,"src":"2983:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"internal"}],"src":"2982:13:13"},"scope":1931,"src":"2887:340:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1898,"nodeType":"Block","src":"3477:158:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"3510:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}],"expression":{"id":1883,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"3491:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"type(ShortString)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3503:6:13","memberName":"unwrap","nodeType":"MemberAccess","src":"3491:18:13","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1720_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3491:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1887,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"3520:17:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3491:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1896,"nodeType":"Block","src":"3592:37:13","statements":[{"expression":{"id":1894,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"3613:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":1882,"id":1895,"nodeType":"Return","src":"3606:12:13"}]},"id":1897,"nodeType":"IfStatement","src":"3487:142:13","trueBody":{"id":1893,"nodeType":"Block","src":"3539:47:13","statements":[{"expression":{"arguments":[{"id":1890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"3569:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}],"id":1889,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"3560:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1720_$returns$_t_string_memory_ptr_$","typeString":"function (ShortString) pure returns (string memory)"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3560:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1882,"id":1892,"nodeType":"Return","src":"3553:22:13"}]}}]},"documentation":{"id":1873,"nodeType":"StructuredDocumentation","src":"3233:130:13","text":" @dev Decode a string that was encoded to `ShortString` or written to storage using {toShortStringWithFallback}."},"id":1899,"implemented":true,"kind":"function","modifiers":[],"name":"toStringWithFallback","nameLocation":"3377:20:13","nodeType":"FunctionDefinition","parameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"value","nameLocation":"3410:5:13","nodeType":"VariableDeclaration","scope":1899,"src":"3398:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":1875,"nodeType":"UserDefinedTypeName","pathNode":{"id":1874,"name":"ShortString","nameLocations":["3398:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"3398:11:13"},"referencedDeclaration":1720,"src":"3398:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"store","nameLocation":"3432:5:13","nodeType":"VariableDeclaration","scope":1899,"src":"3417:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1877,"name":"string","nodeType":"ElementaryTypeName","src":"3417:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3397:41:13"},"returnParameters":{"id":1882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1899,"src":"3462:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1880,"name":"string","nodeType":"ElementaryTypeName","src":"3462:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3461:15:13"},"scope":1931,"src":"3368:267:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1929,"nodeType":"Block","src":"4125:174:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"4158:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}],"expression":{"id":1910,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"4139:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"type(ShortString)"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4151:6:13","memberName":"unwrap","nodeType":"MemberAccess","src":"4139:18:13","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1720_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4139:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1914,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"4168:17:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4139:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1927,"nodeType":"Block","src":"4242:51:13","statements":[{"expression":{"expression":{"arguments":[{"id":1923,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"4269:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"id":1922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4263:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1921,"name":"bytes","nodeType":"ElementaryTypeName","src":"4263:5:13","typeDescriptions":{}}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4276:6:13","memberName":"length","nodeType":"MemberAccess","src":"4263:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1909,"id":1926,"nodeType":"Return","src":"4256:26:13"}]},"id":1928,"nodeType":"IfStatement","src":"4135:158:13","trueBody":{"id":1920,"nodeType":"Block","src":"4187:49:13","statements":[{"expression":{"arguments":[{"id":1917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"4219:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}],"id":1916,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"4208:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1720_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4208:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1909,"id":1919,"nodeType":"Return","src":"4201:24:13"}]}}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"3641:374:13","text":" @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {toShortStringWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."},"id":1930,"implemented":true,"kind":"function","modifiers":[],"name":"byteLengthWithFallback","nameLocation":"4029:22:13","nodeType":"FunctionDefinition","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"value","nameLocation":"4064:5:13","nodeType":"VariableDeclaration","scope":1930,"src":"4052:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":1902,"nodeType":"UserDefinedTypeName","pathNode":{"id":1901,"name":"ShortString","nameLocations":["4052:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"4052:11:13"},"referencedDeclaration":1720,"src":"4052:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":1905,"mutability":"mutable","name":"store","nameLocation":"4086:5:13","nodeType":"VariableDeclaration","scope":1930,"src":"4071:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1904,"name":"string","nodeType":"ElementaryTypeName","src":"4071:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4051:41:13"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1930,"src":"4116:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1907,"name":"uint256","nodeType":"ElementaryTypeName","src":"4116:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4115:9:13"},"scope":1931,"src":"4020:279:13","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1932,"src":"1255:3046:13","usedErrors":[1728,1730],"usedEvents":[]}],"src":"106:4196:13"}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"id":14,"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2055]},"id":2056,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1933,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"219:1187:14","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":2055,"linearizedBaseContracts":[2055],"name":"StorageSlot","nameLocation":"1415:11:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1937,"members":[{"constant":false,"id":1936,"mutability":"mutable","name":"value","nameLocation":"1470:5:14","nodeType":"VariableDeclaration","scope":1937,"src":"1462:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1935,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1440:11:14","nodeType":"StructDefinition","scope":2055,"src":"1433:49:14","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1940,"members":[{"constant":false,"id":1939,"mutability":"mutable","name":"value","nameLocation":"1522:5:14","nodeType":"VariableDeclaration","scope":1940,"src":"1517:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1938,"name":"bool","nodeType":"ElementaryTypeName","src":"1517:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1495:11:14","nodeType":"StructDefinition","scope":2055,"src":"1488:46:14","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1943,"members":[{"constant":false,"id":1942,"mutability":"mutable","name":"value","nameLocation":"1577:5:14","nodeType":"VariableDeclaration","scope":1943,"src":"1569:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1547:11:14","nodeType":"StructDefinition","scope":2055,"src":"1540:49:14","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1946,"members":[{"constant":false,"id":1945,"mutability":"mutable","name":"value","nameLocation":"1632:5:14","nodeType":"VariableDeclaration","scope":1946,"src":"1624:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"1624:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1602:11:14","nodeType":"StructDefinition","scope":2055,"src":"1595:49:14","visibility":"public"},{"canonicalName":"StorageSlot.Int256Slot","id":1949,"members":[{"constant":false,"id":1948,"mutability":"mutable","name":"value","nameLocation":"1685:5:14","nodeType":"VariableDeclaration","scope":1949,"src":"1678:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1947,"name":"int256","nodeType":"ElementaryTypeName","src":"1678:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"1657:10:14","nodeType":"StructDefinition","scope":2055,"src":"1650:47:14","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":1952,"members":[{"constant":false,"id":1951,"mutability":"mutable","name":"value","nameLocation":"1738:5:14","nodeType":"VariableDeclaration","scope":1952,"src":"1731:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1950,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1710:10:14","nodeType":"StructDefinition","scope":2055,"src":"1703:47:14","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":1955,"members":[{"constant":false,"id":1954,"mutability":"mutable","name":"value","nameLocation":"1789:5:14","nodeType":"VariableDeclaration","scope":1955,"src":"1783:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1953,"name":"bytes","nodeType":"ElementaryTypeName","src":"1783:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1763:9:14","nodeType":"StructDefinition","scope":2055,"src":"1756:45:14","visibility":"public"},{"body":{"id":1965,"nodeType":"Block","src":"1983:79:14","statements":[{"AST":{"nativeSrc":"2018:38:14","nodeType":"YulBlock","src":"2018:38:14","statements":[{"nativeSrc":"2032:14:14","nodeType":"YulAssignment","src":"2032:14:14","value":{"name":"slot","nativeSrc":"2042:4:14","nodeType":"YulIdentifier","src":"2042:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"2032:6:14","nodeType":"YulIdentifier","src":"2032:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":1962,"isOffset":false,"isSlot":true,"src":"2032:6:14","suffix":"slot","valueSize":1},{"declaration":1958,"isOffset":false,"isSlot":false,"src":"2042:4:14","valueSize":1}],"flags":["memory-safe"],"id":1964,"nodeType":"InlineAssembly","src":"1993:63:14"}]},"documentation":{"id":1956,"nodeType":"StructuredDocumentation","src":"1807:87:14","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1966,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1908:14:14","nodeType":"FunctionDefinition","parameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"slot","nameLocation":"1931:4:14","nodeType":"VariableDeclaration","scope":1966,"src":"1923:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1923:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1922:14:14"},"returnParameters":{"id":1963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"r","nameLocation":"1980:1:14","nodeType":"VariableDeclaration","scope":1966,"src":"1960:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1937_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1961,"nodeType":"UserDefinedTypeName","pathNode":{"id":1960,"name":"AddressSlot","nameLocations":["1960:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1937,"src":"1960:11:14"},"referencedDeclaration":1937,"src":"1960:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1937_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:23:14"},"scope":2055,"src":"1899:163:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1976,"nodeType":"Block","src":"2243:79:14","statements":[{"AST":{"nativeSrc":"2278:38:14","nodeType":"YulBlock","src":"2278:38:14","statements":[{"nativeSrc":"2292:14:14","nodeType":"YulAssignment","src":"2292:14:14","value":{"name":"slot","nativeSrc":"2302:4:14","nodeType":"YulIdentifier","src":"2302:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"2292:6:14","nodeType":"YulIdentifier","src":"2292:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":1973,"isOffset":false,"isSlot":true,"src":"2292:6:14","suffix":"slot","valueSize":1},{"declaration":1969,"isOffset":false,"isSlot":false,"src":"2302:4:14","valueSize":1}],"flags":["memory-safe"],"id":1975,"nodeType":"InlineAssembly","src":"2253:63:14"}]},"documentation":{"id":1967,"nodeType":"StructuredDocumentation","src":"2068:86:14","text":" @dev Returns a `BooleanSlot` with member `value` located at `slot`."},"id":1977,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2168:14:14","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"slot","nameLocation":"2191:4:14","nodeType":"VariableDeclaration","scope":1977,"src":"2183:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2183:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2182:14:14"},"returnParameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"r","nameLocation":"2240:1:14","nodeType":"VariableDeclaration","scope":1977,"src":"2220:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1940_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1972,"nodeType":"UserDefinedTypeName","pathNode":{"id":1971,"name":"BooleanSlot","nameLocations":["2220:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1940,"src":"2220:11:14"},"referencedDeclaration":1940,"src":"2220:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1940_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2219:23:14"},"scope":2055,"src":"2159:163:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1987,"nodeType":"Block","src":"2503:79:14","statements":[{"AST":{"nativeSrc":"2538:38:14","nodeType":"YulBlock","src":"2538:38:14","statements":[{"nativeSrc":"2552:14:14","nodeType":"YulAssignment","src":"2552:14:14","value":{"name":"slot","nativeSrc":"2562:4:14","nodeType":"YulIdentifier","src":"2562:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"2552:6:14","nodeType":"YulIdentifier","src":"2552:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":1984,"isOffset":false,"isSlot":true,"src":"2552:6:14","suffix":"slot","valueSize":1},{"declaration":1980,"isOffset":false,"isSlot":false,"src":"2562:4:14","valueSize":1}],"flags":["memory-safe"],"id":1986,"nodeType":"InlineAssembly","src":"2513:63:14"}]},"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"2328:86:14","text":" @dev Returns a `Bytes32Slot` with member `value` located at `slot`."},"id":1988,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2428:14:14","nodeType":"FunctionDefinition","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"slot","nameLocation":"2451:4:14","nodeType":"VariableDeclaration","scope":1988,"src":"2443:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2442:14:14"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"r","nameLocation":"2500:1:14","nodeType":"VariableDeclaration","scope":1988,"src":"2480:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1943_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1983,"nodeType":"UserDefinedTypeName","pathNode":{"id":1982,"name":"Bytes32Slot","nameLocations":["2480:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1943,"src":"2480:11:14"},"referencedDeclaration":1943,"src":"2480:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1943_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2479:23:14"},"scope":2055,"src":"2419:163:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1998,"nodeType":"Block","src":"2763:79:14","statements":[{"AST":{"nativeSrc":"2798:38:14","nodeType":"YulBlock","src":"2798:38:14","statements":[{"nativeSrc":"2812:14:14","nodeType":"YulAssignment","src":"2812:14:14","value":{"name":"slot","nativeSrc":"2822:4:14","nodeType":"YulIdentifier","src":"2822:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"2812:6:14","nodeType":"YulIdentifier","src":"2812:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":1995,"isOffset":false,"isSlot":true,"src":"2812:6:14","suffix":"slot","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"2822:4:14","valueSize":1}],"flags":["memory-safe"],"id":1997,"nodeType":"InlineAssembly","src":"2773:63:14"}]},"documentation":{"id":1989,"nodeType":"StructuredDocumentation","src":"2588:86:14","text":" @dev Returns a `Uint256Slot` with member `value` located at `slot`."},"id":1999,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2688:14:14","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"slot","nameLocation":"2711:4:14","nodeType":"VariableDeclaration","scope":1999,"src":"2703:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2703:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2702:14:14"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"r","nameLocation":"2760:1:14","nodeType":"VariableDeclaration","scope":1999,"src":"2740:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1946_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1994,"nodeType":"UserDefinedTypeName","pathNode":{"id":1993,"name":"Uint256Slot","nameLocations":["2740:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":1946,"src":"2740:11:14"},"referencedDeclaration":1946,"src":"2740:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1946_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2739:23:14"},"scope":2055,"src":"2679:163:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2009,"nodeType":"Block","src":"3020:79:14","statements":[{"AST":{"nativeSrc":"3055:38:14","nodeType":"YulBlock","src":"3055:38:14","statements":[{"nativeSrc":"3069:14:14","nodeType":"YulAssignment","src":"3069:14:14","value":{"name":"slot","nativeSrc":"3079:4:14","nodeType":"YulIdentifier","src":"3079:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"3069:6:14","nodeType":"YulIdentifier","src":"3069:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2006,"isOffset":false,"isSlot":true,"src":"3069:6:14","suffix":"slot","valueSize":1},{"declaration":2002,"isOffset":false,"isSlot":false,"src":"3079:4:14","valueSize":1}],"flags":["memory-safe"],"id":2008,"nodeType":"InlineAssembly","src":"3030:63:14"}]},"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"2848:85:14","text":" @dev Returns a `Int256Slot` with member `value` located at `slot`."},"id":2010,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"2947:13:14","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"slot","nameLocation":"2969:4:14","nodeType":"VariableDeclaration","scope":2010,"src":"2961:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2961:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2960:14:14"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"r","nameLocation":"3017:1:14","nodeType":"VariableDeclaration","scope":2010,"src":"2998:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$1949_storage_ptr","typeString":"struct StorageSlot.Int256Slot"},"typeName":{"id":2005,"nodeType":"UserDefinedTypeName","pathNode":{"id":2004,"name":"Int256Slot","nameLocations":["2998:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1949,"src":"2998:10:14"},"referencedDeclaration":1949,"src":"2998:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$1949_storage_ptr","typeString":"struct StorageSlot.Int256Slot"}},"visibility":"internal"}],"src":"2997:22:14"},"scope":2055,"src":"2938:161:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2020,"nodeType":"Block","src":"3277:79:14","statements":[{"AST":{"nativeSrc":"3312:38:14","nodeType":"YulBlock","src":"3312:38:14","statements":[{"nativeSrc":"3326:14:14","nodeType":"YulAssignment","src":"3326:14:14","value":{"name":"slot","nativeSrc":"3336:4:14","nodeType":"YulIdentifier","src":"3336:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"3326:6:14","nodeType":"YulIdentifier","src":"3326:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2017,"isOffset":false,"isSlot":true,"src":"3326:6:14","suffix":"slot","valueSize":1},{"declaration":2013,"isOffset":false,"isSlot":false,"src":"3336:4:14","valueSize":1}],"flags":["memory-safe"],"id":2019,"nodeType":"InlineAssembly","src":"3287:63:14"}]},"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"3105:85:14","text":" @dev Returns a `StringSlot` with member `value` located at `slot`."},"id":2021,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3204:13:14","nodeType":"FunctionDefinition","parameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"slot","nameLocation":"3226:4:14","nodeType":"VariableDeclaration","scope":2021,"src":"3218:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2012,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3218:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3217:14:14"},"returnParameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"r","nameLocation":"3274:1:14","nodeType":"VariableDeclaration","scope":2021,"src":"3255:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1952_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2016,"nodeType":"UserDefinedTypeName","pathNode":{"id":2015,"name":"StringSlot","nameLocations":["3255:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1952,"src":"3255:10:14"},"referencedDeclaration":1952,"src":"3255:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1952_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3254:22:14"},"scope":2055,"src":"3195:161:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2031,"nodeType":"Block","src":"3558:85:14","statements":[{"AST":{"nativeSrc":"3593:44:14","nodeType":"YulBlock","src":"3593:44:14","statements":[{"nativeSrc":"3607:20:14","nodeType":"YulAssignment","src":"3607:20:14","value":{"name":"store.slot","nativeSrc":"3617:10:14","nodeType":"YulIdentifier","src":"3617:10:14"},"variableNames":[{"name":"r.slot","nativeSrc":"3607:6:14","nodeType":"YulIdentifier","src":"3607:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2028,"isOffset":false,"isSlot":true,"src":"3607:6:14","suffix":"slot","valueSize":1},{"declaration":2024,"isOffset":false,"isSlot":true,"src":"3617:10:14","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":2030,"nodeType":"InlineAssembly","src":"3568:69:14"}]},"documentation":{"id":2022,"nodeType":"StructuredDocumentation","src":"3362:101:14","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2032,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3477:13:14","nodeType":"FunctionDefinition","parameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"store","nameLocation":"3506:5:14","nodeType":"VariableDeclaration","scope":2032,"src":"3491:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2023,"name":"string","nodeType":"ElementaryTypeName","src":"3491:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3490:22:14"},"returnParameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"r","nameLocation":"3555:1:14","nodeType":"VariableDeclaration","scope":2032,"src":"3536:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1952_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2027,"nodeType":"UserDefinedTypeName","pathNode":{"id":2026,"name":"StringSlot","nameLocations":["3536:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1952,"src":"3536:10:14"},"referencedDeclaration":1952,"src":"3536:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1952_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3535:22:14"},"scope":2055,"src":"3468:175:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2042,"nodeType":"Block","src":"3818:79:14","statements":[{"AST":{"nativeSrc":"3853:38:14","nodeType":"YulBlock","src":"3853:38:14","statements":[{"nativeSrc":"3867:14:14","nodeType":"YulAssignment","src":"3867:14:14","value":{"name":"slot","nativeSrc":"3877:4:14","nodeType":"YulIdentifier","src":"3877:4:14"},"variableNames":[{"name":"r.slot","nativeSrc":"3867:6:14","nodeType":"YulIdentifier","src":"3867:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2039,"isOffset":false,"isSlot":true,"src":"3867:6:14","suffix":"slot","valueSize":1},{"declaration":2035,"isOffset":false,"isSlot":false,"src":"3877:4:14","valueSize":1}],"flags":["memory-safe"],"id":2041,"nodeType":"InlineAssembly","src":"3828:63:14"}]},"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"3649:84:14","text":" @dev Returns a `BytesSlot` with member `value` located at `slot`."},"id":2043,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3747:12:14","nodeType":"FunctionDefinition","parameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"slot","nameLocation":"3768:4:14","nodeType":"VariableDeclaration","scope":2043,"src":"3760:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3760:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3759:14:14"},"returnParameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2039,"mutability":"mutable","name":"r","nameLocation":"3815:1:14","nodeType":"VariableDeclaration","scope":2043,"src":"3797:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1955_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2038,"nodeType":"UserDefinedTypeName","pathNode":{"id":2037,"name":"BytesSlot","nameLocations":["3797:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":1955,"src":"3797:9:14"},"referencedDeclaration":1955,"src":"3797:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1955_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3796:21:14"},"scope":2055,"src":"3738:159:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2053,"nodeType":"Block","src":"4094:85:14","statements":[{"AST":{"nativeSrc":"4129:44:14","nodeType":"YulBlock","src":"4129:44:14","statements":[{"nativeSrc":"4143:20:14","nodeType":"YulAssignment","src":"4143:20:14","value":{"name":"store.slot","nativeSrc":"4153:10:14","nodeType":"YulIdentifier","src":"4153:10:14"},"variableNames":[{"name":"r.slot","nativeSrc":"4143:6:14","nodeType":"YulIdentifier","src":"4143:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2050,"isOffset":false,"isSlot":true,"src":"4143:6:14","suffix":"slot","valueSize":1},{"declaration":2046,"isOffset":false,"isSlot":true,"src":"4153:10:14","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":2052,"nodeType":"InlineAssembly","src":"4104:69:14"}]},"documentation":{"id":2044,"nodeType":"StructuredDocumentation","src":"3903:99:14","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2054,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"4016:12:14","nodeType":"FunctionDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"store","nameLocation":"4043:5:14","nodeType":"VariableDeclaration","scope":2054,"src":"4029:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2045,"name":"bytes","nodeType":"ElementaryTypeName","src":"4029:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4028:21:14"},"returnParameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"r","nameLocation":"4091:1:14","nodeType":"VariableDeclaration","scope":2054,"src":"4073:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1955_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2049,"nodeType":"UserDefinedTypeName","pathNode":{"id":2048,"name":"BytesSlot","nameLocations":["4073:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":1955,"src":"4073:9:14"},"referencedDeclaration":1955,"src":"4073:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1955_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"4072:21:14"},"scope":2055,"src":"4007:172:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2056,"src":"1407:2774:14","usedErrors":[],"usedEvents":[]}],"src":"193:3989:14"}},"@openzeppelin/contracts/utils/Strings.sol":{"id":15,"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[5739],"SafeCast":[7504],"SignedMath":[7648],"Strings":[3457]},"id":3458,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2057,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:15"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2059,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3458,"sourceUnit":5740,"src":"127:37:15","symbolAliases":[{"foreign":{"id":2058,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"135:4:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./math/SafeCast.sol","id":2061,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3458,"sourceUnit":7505,"src":"165:45:15","symbolAliases":[{"foreign":{"id":2060,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"173:8:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2063,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3458,"sourceUnit":7649,"src":"211:49:15","symbolAliases":[{"foreign":{"id":2062,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7648,"src":"219:10:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2064,"nodeType":"StructuredDocumentation","src":"262:34:15","text":" @dev String operations."},"fullyImplemented":true,"id":3457,"linearizedBaseContracts":[3457],"name":"Strings","nameLocation":"305:7:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2066,"libraryName":{"id":2065,"name":"SafeCast","nameLocations":["325:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":7504,"src":"325:8:15"},"nodeType":"UsingForDirective","src":"319:21:15"},{"constant":true,"id":2069,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"371:10:15","nodeType":"VariableDeclaration","scope":3457,"src":"346:56:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2067,"name":"bytes16","nodeType":"ElementaryTypeName","src":"346:7:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"384:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2072,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"431:14:15","nodeType":"VariableDeclaration","scope":3457,"src":"408:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2070,"name":"uint8","nodeType":"ElementaryTypeName","src":"408:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"448:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"id":2108,"mutability":"constant","name":"SPECIAL_CHARS_LOOKUP","nameLocation":"481:20:15","nodeType":"VariableDeclaration","scope":3457,"src":"456:302:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_4951760157141521116776380160_by_1","typeString":"int_const 4951760157141521116776380160"},"id":2107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_17179883264_by_1","typeString":"int_const 17179883264"},"id":2102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_14080_by_1","typeString":"int_const 14080"},"id":2097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_5888_by_1","typeString":"int_const 5888"},"id":2092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_1792_by_1","typeString":"int_const 1792"},"id":2087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_768_by_1","typeString":"int_const 768"},"id":2082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"513:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783038","id":2075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"518:4:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x08"},"src":"513:9:15","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":2077,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"512:11:15","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"id":2080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"552:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783039","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:4:15","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"0x09"},"src":"552:9:15","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"}}],"id":2081,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"551:11:15","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"}},"src":"512:50:15","typeDescriptions":{"typeIdentifier":"t_rational_768_by_1","typeString":"int_const 768"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"id":2085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"585:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783061","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:4:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"0x0a"},"src":"585:9:15","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"}}],"id":2086,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"584:11:15","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"}},"src":"512:83:15","typeDescriptions":{"typeIdentifier":"t_rational_1792_by_1","typeString":"int_const 1792"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"},"id":2090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"622:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783063","id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"627:4:15","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"0x0c"},"src":"622:9:15","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"}}],"id":2091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"621:11:15","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"}},"src":"512:120:15","typeDescriptions":{"typeIdentifier":"t_rational_5888_by_1","typeString":"int_const 5888"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"id":2095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"661:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783064","id":2094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"666:4:15","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"0x0d"},"src":"661:9:15","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"}}],"id":2096,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"660:11:15","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"}},"src":"512:159:15","typeDescriptions":{"typeIdentifier":"t_rational_14080_by_1","typeString":"int_const 14080"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_17179869184_by_1","typeString":"int_const 17179869184"},"id":2100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"706:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783232","id":2099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"711:4:15","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"src":"706:9:15","typeDescriptions":{"typeIdentifier":"t_rational_17179869184_by_1","typeString":"int_const 17179869184"}}],"id":2101,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"705:11:15","typeDescriptions":{"typeIdentifier":"t_rational_17179869184_by_1","typeString":"int_const 17179869184"}},"src":"512:204:15","typeDescriptions":{"typeIdentifier":"t_rational_17179883264_by_1","typeString":"int_const 17179883264"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4951760157141521099596496896_by_1","typeString":"int_const 4951760157141521099596496896"},"id":2105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"30783563","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"753:4:15","typeDescriptions":{"typeIdentifier":"t_rational_92_by_1","typeString":"int_const 92"},"value":"0x5c"},"src":"748:9:15","typeDescriptions":{"typeIdentifier":"t_rational_4951760157141521099596496896_by_1","typeString":"int_const 4951760157141521099596496896"}}],"id":2106,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"747:11:15","typeDescriptions":{"typeIdentifier":"t_rational_4951760157141521099596496896_by_1","typeString":"int_const 4951760157141521099596496896"}},"src":"512:246:15","typeDescriptions":{"typeIdentifier":"t_rational_4951760157141521116776380160_by_1","typeString":"int_const 4951760157141521116776380160"}},"visibility":"private"},{"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"778:81:15","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":2115,"name":"StringsInsufficientHexLength","nameLocation":"870:28:15","nodeType":"ErrorDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"value","nameLocation":"907:5:15","nodeType":"VariableDeclaration","scope":2115,"src":"899:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"899:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2113,"mutability":"mutable","name":"length","nameLocation":"922:6:15","nodeType":"VariableDeclaration","scope":2115,"src":"914:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"898:31:15"},"src":"864:66:15"},{"documentation":{"id":2116,"nodeType":"StructuredDocumentation","src":"936:108:15","text":" @dev The string being parsed contains characters that are not in scope of the given base."},"errorSelector":"94e2737e","id":2118,"name":"StringsInvalidChar","nameLocation":"1055:18:15","nodeType":"ErrorDefinition","parameters":{"id":2117,"nodeType":"ParameterList","parameters":[],"src":"1073:2:15"},"src":"1049:27:15"},{"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"1082:84:15","text":" @dev The string being parsed is not a properly formatted address."},"errorSelector":"1d15ae44","id":2121,"name":"StringsInvalidAddressFormat","nameLocation":"1177:27:15","nodeType":"ErrorDefinition","parameters":{"id":2120,"nodeType":"ParameterList","parameters":[],"src":"1204:2:15"},"src":"1171:36:15"},{"body":{"id":2168,"nodeType":"Block","src":"1379:561:15","statements":[{"id":2167,"nodeType":"UncheckedBlock","src":"1389:545:15","statements":[{"assignments":[2130],"declarations":[{"constant":false,"id":2130,"mutability":"mutable","name":"length","nameLocation":"1421:6:15","nodeType":"VariableDeclaration","scope":2167,"src":"1413:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"1413:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2137,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2133,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"1441:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2131,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"1430:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:5:15","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":5571,"src":"1430:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1430:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1450:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1430:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1413:38:15"},{"assignments":[2139],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"buffer","nameLocation":"1479:6:15","nodeType":"VariableDeclaration","scope":2167,"src":"1465:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2138,"name":"string","nodeType":"ElementaryTypeName","src":"1465:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2144,"initialValue":{"arguments":[{"id":2142,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"1499:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1488:10:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2140,"name":"string","nodeType":"ElementaryTypeName","src":"1492:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1465:41:15"},{"assignments":[2146],"declarations":[{"constant":false,"id":2146,"mutability":"mutable","name":"ptr","nameLocation":"1528:3:15","nodeType":"VariableDeclaration","scope":2167,"src":"1520:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"1520:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2147,"nodeType":"VariableDeclarationStatement","src":"1520:11:15"},{"AST":{"nativeSrc":"1570:67:15","nodeType":"YulBlock","src":"1570:67:15","statements":[{"nativeSrc":"1588:35:15","nodeType":"YulAssignment","src":"1588:35:15","value":{"arguments":[{"name":"buffer","nativeSrc":"1599:6:15","nodeType":"YulIdentifier","src":"1599:6:15"},{"arguments":[{"kind":"number","nativeSrc":"1611:2:15","nodeType":"YulLiteral","src":"1611:2:15","type":"","value":"32"},{"name":"length","nativeSrc":"1615:6:15","nodeType":"YulIdentifier","src":"1615:6:15"}],"functionName":{"name":"add","nativeSrc":"1607:3:15","nodeType":"YulIdentifier","src":"1607:3:15"},"nativeSrc":"1607:15:15","nodeType":"YulFunctionCall","src":"1607:15:15"}],"functionName":{"name":"add","nativeSrc":"1595:3:15","nodeType":"YulIdentifier","src":"1595:3:15"},"nativeSrc":"1595:28:15","nodeType":"YulFunctionCall","src":"1595:28:15"},"variableNames":[{"name":"ptr","nativeSrc":"1588:3:15","nodeType":"YulIdentifier","src":"1588:3:15"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2139,"isOffset":false,"isSlot":false,"src":"1599:6:15","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"1615:6:15","valueSize":1},{"declaration":2146,"isOffset":false,"isSlot":false,"src":"1588:3:15","valueSize":1}],"flags":["memory-safe"],"id":2148,"nodeType":"InlineAssembly","src":"1545:92:15"},{"body":{"id":2163,"nodeType":"Block","src":"1663:234:15","statements":[{"expression":{"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1681:5:15","subExpression":{"id":2150,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1681:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2152,"nodeType":"ExpressionStatement","src":"1681:5:15"},{"AST":{"nativeSrc":"1729:86:15","nodeType":"YulBlock","src":"1729:86:15","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1759:3:15","nodeType":"YulIdentifier","src":"1759:3:15"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1773:5:15","nodeType":"YulIdentifier","src":"1773:5:15"},{"kind":"number","nativeSrc":"1780:2:15","nodeType":"YulLiteral","src":"1780:2:15","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1769:3:15","nodeType":"YulIdentifier","src":"1769:3:15"},"nativeSrc":"1769:14:15","nodeType":"YulFunctionCall","src":"1769:14:15"},{"name":"HEX_DIGITS","nativeSrc":"1785:10:15","nodeType":"YulIdentifier","src":"1785:10:15"}],"functionName":{"name":"byte","nativeSrc":"1764:4:15","nodeType":"YulIdentifier","src":"1764:4:15"},"nativeSrc":"1764:32:15","nodeType":"YulFunctionCall","src":"1764:32:15"}],"functionName":{"name":"mstore8","nativeSrc":"1751:7:15","nodeType":"YulIdentifier","src":"1751:7:15"},"nativeSrc":"1751:46:15","nodeType":"YulFunctionCall","src":"1751:46:15"},"nativeSrc":"1751:46:15","nodeType":"YulExpressionStatement","src":"1751:46:15"}]},"evmVersion":"cancun","externalReferences":[{"declaration":2069,"isOffset":false,"isSlot":false,"src":"1785:10:15","valueSize":1},{"declaration":2146,"isOffset":false,"isSlot":false,"src":"1759:3:15","valueSize":1},{"declaration":2124,"isOffset":false,"isSlot":false,"src":"1773:5:15","valueSize":1}],"flags":["memory-safe"],"id":2153,"nodeType":"InlineAssembly","src":"1704:111:15"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"1832:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1841:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1832:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"1832:11:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"1865:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2162,"nodeType":"IfStatement","src":"1861:21:15","trueBody":{"id":2161,"nodeType":"Break","src":"1877:5:15"}}]},"condition":{"hexValue":"74727565","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1657:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2164,"nodeType":"WhileStatement","src":"1650:247:15"},{"expression":{"id":2165,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"1917:6:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2128,"id":2166,"nodeType":"Return","src":"1910:13:15"}]}]},"documentation":{"id":2122,"nodeType":"StructuredDocumentation","src":"1213:90:15","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2169,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1317:8:15","nodeType":"FunctionDefinition","parameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"value","nameLocation":"1334:5:15","nodeType":"VariableDeclaration","scope":2169,"src":"1326:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1326:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1325:15:15"},"returnParameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2169,"src":"1364:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2126,"name":"string","nodeType":"ElementaryTypeName","src":"1364:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1363:15:15"},"scope":3457,"src":"1308:632:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2194,"nodeType":"Block","src":"2116:92:15","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"2147:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2147:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2165:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2147:20:15","trueExpression":{"hexValue":"2d","id":2183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2159:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"2193:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2187,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7648,"src":"2178:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$7648_$","typeString":"type(library SignedMath)"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2189:3:15","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":7647,"src":"2178:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2178:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2186,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"2169:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2169:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2133:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2177,"name":"string","nodeType":"ElementaryTypeName","src":"2133:6:15","typeDescriptions":{}}},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2140:6:15","memberName":"concat","nodeType":"MemberAccess","src":"2133:13:15","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2133:68:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2176,"id":2193,"nodeType":"Return","src":"2126:75:15"}]},"documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"1946:89:15","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2195,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"2049:14:15","nodeType":"FunctionDefinition","parameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"value","nameLocation":"2071:5:15","nodeType":"VariableDeclaration","scope":2195,"src":"2064:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2171,"name":"int256","nodeType":"ElementaryTypeName","src":"2064:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2063:14:15"},"returnParameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"2101:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2174,"name":"string","nodeType":"ElementaryTypeName","src":"2101:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2100:15:15"},"scope":3457,"src":"2040:168:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2214,"nodeType":"Block","src":"2387:100:15","statements":[{"id":2213,"nodeType":"UncheckedBlock","src":"2397:84:15","statements":[{"expression":{"arguments":[{"id":2204,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"2440:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"2459:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2205,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"2447:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2452:6:15","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":5682,"src":"2447:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2447:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2468:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2447:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2203,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2215,2298,2318],"referencedDeclaration":2298,"src":"2428:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2428:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2202,"id":2212,"nodeType":"Return","src":"2421:49:15"}]}]},"documentation":{"id":2196,"nodeType":"StructuredDocumentation","src":"2214:94:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2215,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2322:11:15","nodeType":"FunctionDefinition","parameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"value","nameLocation":"2342:5:15","nodeType":"VariableDeclaration","scope":2215,"src":"2334:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2333:15:15"},"returnParameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2215,"src":"2372:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2200,"name":"string","nodeType":"ElementaryTypeName","src":"2372:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2371:15:15"},"scope":3457,"src":"2313:174:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2297,"nodeType":"Block","src":"2700:435:15","statements":[{"assignments":[2226],"declarations":[{"constant":false,"id":2226,"mutability":"mutable","name":"localValue","nameLocation":"2718:10:15","nodeType":"VariableDeclaration","scope":2297,"src":"2710:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2225,"name":"uint256","nodeType":"ElementaryTypeName","src":"2710:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2228,"initialValue":{"id":2227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"2731:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2710:26:15"},{"assignments":[2230],"declarations":[{"constant":false,"id":2230,"mutability":"mutable","name":"buffer","nameLocation":"2759:6:15","nodeType":"VariableDeclaration","scope":2297,"src":"2746:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2229,"name":"bytes","nodeType":"ElementaryTypeName","src":"2746:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2239,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2778:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2234,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"2782:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2778:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2791:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2778:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2768:9:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2231,"name":"bytes","nodeType":"ElementaryTypeName","src":"2772:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2746:47:15"},{"expression":{"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2240,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2803:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2242,"indexExpression":{"hexValue":"30","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2810:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2803:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2815:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2803:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2245,"nodeType":"ExpressionStatement","src":"2803:15:15"},{"expression":{"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2246,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2828:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2248,"indexExpression":{"hexValue":"31","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2835:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2828:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2840:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2828:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2251,"nodeType":"ExpressionStatement","src":"2828:15:15"},{"body":{"id":2280,"nodeType":"Block","src":"2898:95:15","statements":[{"expression":{"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2266,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"2912:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2268,"indexExpression":{"id":2267,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"2919:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2912:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2269,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"2924:10:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2273,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2270,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"2935:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2948:3:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2935:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2924:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2912:40:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2275,"nodeType":"ExpressionStatement","src":"2912:40:15"},{"expression":{"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2276,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"2966:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2981:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2966:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2279,"nodeType":"ExpressionStatement","src":"2966:16:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2260,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"2886:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2890:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2886:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2281,"initializationExpression":{"assignments":[2253],"declarations":[{"constant":false,"id":2253,"mutability":"mutable","name":"i","nameLocation":"2866:1:15","nodeType":"VariableDeclaration","scope":2281,"src":"2858:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2858:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2259,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2870:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2255,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"2874:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2870:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2883:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2870:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2858:26:15"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2893:3:15","subExpression":{"id":2263,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"2895:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2265,"nodeType":"ExpressionStatement","src":"2893:3:15"},"nodeType":"ForStatement","src":"2853:140:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2282,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"3006:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3020:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3006:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2291,"nodeType":"IfStatement","src":"3002:96:15","trueBody":{"id":2290,"nodeType":"Block","src":"3023:75:15","statements":[{"errorCall":{"arguments":[{"id":2286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"3073:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2287,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"3080:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2285,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"3044:28:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3044:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2289,"nodeType":"RevertStatement","src":"3037:50:15"}]}},{"expression":{"arguments":[{"id":2294,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"3121:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3114:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2292,"name":"string","nodeType":"ElementaryTypeName","src":"3114:6:15","typeDescriptions":{}}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3114:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2224,"id":2296,"nodeType":"Return","src":"3107:21:15"}]},"documentation":{"id":2216,"nodeType":"StructuredDocumentation","src":"2493:112:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2298,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2619:11:15","nodeType":"FunctionDefinition","parameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2218,"mutability":"mutable","name":"value","nameLocation":"2639:5:15","nodeType":"VariableDeclaration","scope":2298,"src":"2631:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2217,"name":"uint256","nodeType":"ElementaryTypeName","src":"2631:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2220,"mutability":"mutable","name":"length","nameLocation":"2654:6:15","nodeType":"VariableDeclaration","scope":2298,"src":"2646:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"2646:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2630:31:15"},"returnParameters":{"id":2224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2298,"src":"2685:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2222,"name":"string","nodeType":"ElementaryTypeName","src":"2685:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2684:15:15"},"scope":3457,"src":"2610:525:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2317,"nodeType":"Block","src":"3367:75:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2311,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"3412:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3404:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2309,"name":"uint160","nodeType":"ElementaryTypeName","src":"3404:7:15","typeDescriptions":{}}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3404:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3396:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2307,"name":"uint256","nodeType":"ElementaryTypeName","src":"3396:7:15","typeDescriptions":{}}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3396:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2314,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"3420:14:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2306,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2215,2298,2318],"referencedDeclaration":2298,"src":"3384:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2305,"id":2316,"nodeType":"Return","src":"3377:58:15"}]},"documentation":{"id":2299,"nodeType":"StructuredDocumentation","src":"3141:148:15","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":2318,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"3303:11:15","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"addr","nameLocation":"3323:4:15","nodeType":"VariableDeclaration","scope":2318,"src":"3315:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"3315:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3314:14:15"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2318,"src":"3352:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2303,"name":"string","nodeType":"ElementaryTypeName","src":"3352:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3351:15:15"},"scope":3457,"src":"3294:148:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2382,"nodeType":"Block","src":"3699:642:15","statements":[{"assignments":[2327],"declarations":[{"constant":false,"id":2327,"mutability":"mutable","name":"buffer","nameLocation":"3722:6:15","nodeType":"VariableDeclaration","scope":2382,"src":"3709:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2326,"name":"bytes","nodeType":"ElementaryTypeName","src":"3709:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2334,"initialValue":{"arguments":[{"arguments":[{"id":2331,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"3749:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2330,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2215,2298,2318],"referencedDeclaration":2318,"src":"3737:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3737:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3731:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2328,"name":"bytes","nodeType":"ElementaryTypeName","src":"3731:5:15","typeDescriptions":{}}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3731:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3709:46:15"},{"assignments":[2336],"declarations":[{"constant":false,"id":2336,"mutability":"mutable","name":"hashValue","nameLocation":"3848:9:15","nodeType":"VariableDeclaration","scope":2382,"src":"3840:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2335,"name":"uint256","nodeType":"ElementaryTypeName","src":"3840:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2337,"nodeType":"VariableDeclarationStatement","src":"3840:17:15"},{"AST":{"nativeSrc":"3892:78:15","nodeType":"YulBlock","src":"3892:78:15","statements":[{"nativeSrc":"3906:54:15","nodeType":"YulAssignment","src":"3906:54:15","value":{"arguments":[{"kind":"number","nativeSrc":"3923:2:15","nodeType":"YulLiteral","src":"3923:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"3941:6:15","nodeType":"YulIdentifier","src":"3941:6:15"},{"kind":"number","nativeSrc":"3949:4:15","nodeType":"YulLiteral","src":"3949:4:15","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3937:3:15","nodeType":"YulIdentifier","src":"3937:3:15"},"nativeSrc":"3937:17:15","nodeType":"YulFunctionCall","src":"3937:17:15"},{"kind":"number","nativeSrc":"3956:2:15","nodeType":"YulLiteral","src":"3956:2:15","type":"","value":"40"}],"functionName":{"name":"keccak256","nativeSrc":"3927:9:15","nodeType":"YulIdentifier","src":"3927:9:15"},"nativeSrc":"3927:32:15","nodeType":"YulFunctionCall","src":"3927:32:15"}],"functionName":{"name":"shr","nativeSrc":"3919:3:15","nodeType":"YulIdentifier","src":"3919:3:15"},"nativeSrc":"3919:41:15","nodeType":"YulFunctionCall","src":"3919:41:15"},"variableNames":[{"name":"hashValue","nativeSrc":"3906:9:15","nodeType":"YulIdentifier","src":"3906:9:15"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2327,"isOffset":false,"isSlot":false,"src":"3941:6:15","valueSize":1},{"declaration":2336,"isOffset":false,"isSlot":false,"src":"3906:9:15","valueSize":1}],"flags":["memory-safe"],"id":2338,"nodeType":"InlineAssembly","src":"3867:103:15"},{"body":{"id":2375,"nodeType":"Block","src":"4013:291:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"4119:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4131:3:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"4119:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"37","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4137:1:15","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"4119:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":2356,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"4148:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2358,"indexExpression":{"id":2357,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4155:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4148:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":2355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4142:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2354,"name":"uint8","nodeType":"ElementaryTypeName","src":"4142:5:15","typeDescriptions":{}}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4142:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4161:2:15","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"4142:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4119:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2370,"nodeType":"IfStatement","src":"4115:150:15","trueBody":{"id":2369,"nodeType":"Block","src":"4165:100:15","statements":[{"expression":{"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2363,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"4233:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2365,"indexExpression":{"id":2364,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4240:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4233:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"^=","rightHandSide":{"hexValue":"30783230","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4246:4:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"4233:17:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2368,"nodeType":"ExpressionStatement","src":"4233:17:15"}]}},{"expression":{"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2371,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"4278:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4292:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"4278:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2374,"nodeType":"ExpressionStatement","src":"4278:15:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4001:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4005:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4001:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2376,"initializationExpression":{"assignments":[2340],"declarations":[{"constant":false,"id":2340,"mutability":"mutable","name":"i","nameLocation":"3993:1:15","nodeType":"VariableDeclaration","scope":2376,"src":"3985:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"3985:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"hexValue":"3431","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3997:2:15","typeDescriptions":{"typeIdentifier":"t_rational_41_by_1","typeString":"int_const 41"},"value":"41"},"nodeType":"VariableDeclarationStatement","src":"3985:14:15"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"4008:3:15","subExpression":{"id":2346,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4010:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2348,"nodeType":"ExpressionStatement","src":"4008:3:15"},"nodeType":"ForStatement","src":"3980:324:15"},{"expression":{"arguments":[{"id":2379,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"4327:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4320:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2377,"name":"string","nodeType":"ElementaryTypeName","src":"4320:6:15","typeDescriptions":{}}},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4320:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2325,"id":2381,"nodeType":"Return","src":"4313:21:15"}]},"documentation":{"id":2319,"nodeType":"StructuredDocumentation","src":"3448:165:15","text":" @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n representation, according to EIP-55."},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"toChecksumHexString","nameLocation":"3627:19:15","nodeType":"FunctionDefinition","parameters":{"id":2322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2321,"mutability":"mutable","name":"addr","nameLocation":"3655:4:15","nodeType":"VariableDeclaration","scope":2383,"src":"3647:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2320,"name":"address","nodeType":"ElementaryTypeName","src":"3647:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3646:14:15"},"returnParameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2383,"src":"3684:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2323,"name":"string","nodeType":"ElementaryTypeName","src":"3684:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3683:15:15"},"scope":3457,"src":"3618:723:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2419,"nodeType":"Block","src":"4496:104:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2395,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"4519:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4513:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2393,"name":"bytes","nodeType":"ElementaryTypeName","src":"4513:5:15","typeDescriptions":{}}},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4513:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4522:6:15","memberName":"length","nodeType":"MemberAccess","src":"4513:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2400,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"4538:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4532:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2398,"name":"bytes","nodeType":"ElementaryTypeName","src":"4532:5:15","typeDescriptions":{}}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4532:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4541:6:15","memberName":"length","nodeType":"MemberAccess","src":"4532:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4513:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2407,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"4567:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4561:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2405,"name":"bytes","nodeType":"ElementaryTypeName","src":"4561:5:15","typeDescriptions":{}}},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4561:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2404,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"4551:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4551:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2413,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"4590:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4584:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2411,"name":"bytes","nodeType":"ElementaryTypeName","src":"4584:5:15","typeDescriptions":{}}},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4584:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2410,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"4574:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4574:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4551:42:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4513:80:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2392,"id":2418,"nodeType":"Return","src":"4506:87:15"}]},"documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"4347:66:15","text":" @dev Returns true if the two strings are equal."},"id":2420,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"4427:5:15","nodeType":"FunctionDefinition","parameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"a","nameLocation":"4447:1:15","nodeType":"VariableDeclaration","scope":2420,"src":"4433:15:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2385,"name":"string","nodeType":"ElementaryTypeName","src":"4433:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2388,"mutability":"mutable","name":"b","nameLocation":"4464:1:15","nodeType":"VariableDeclaration","scope":2420,"src":"4450:15:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2387,"name":"string","nodeType":"ElementaryTypeName","src":"4450:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4432:34:15"},"returnParameters":{"id":2392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2420,"src":"4490:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2390,"name":"bool","nodeType":"ElementaryTypeName","src":"4490:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4489:6:15"},"scope":3457,"src":"4418:182:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2438,"nodeType":"Block","src":"4897:64:15","statements":[{"expression":{"arguments":[{"id":2429,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"4924:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4931:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":2433,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"4940:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4934:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2431,"name":"bytes","nodeType":"ElementaryTypeName","src":"4934:5:15","typeDescriptions":{}}},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4934:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4947:6:15","memberName":"length","nodeType":"MemberAccess","src":"4934:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2428,"name":"parseUint","nodeType":"Identifier","overloadedDeclarations":[2439,2470],"referencedDeclaration":2470,"src":"4914:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4914:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2427,"id":2437,"nodeType":"Return","src":"4907:47:15"}]},"documentation":{"id":2421,"nodeType":"StructuredDocumentation","src":"4606:214:15","text":" @dev Parse a decimal string and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":2439,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"4834:9:15","nodeType":"FunctionDefinition","parameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"input","nameLocation":"4858:5:15","nodeType":"VariableDeclaration","scope":2439,"src":"4844:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2422,"name":"string","nodeType":"ElementaryTypeName","src":"4844:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4843:21:15"},"returnParameters":{"id":2427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2439,"src":"4888:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"4888:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4887:9:15"},"scope":3457,"src":"4825:136:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2469,"nodeType":"Block","src":"5366:153:15","statements":[{"assignments":[2452,2454],"declarations":[{"constant":false,"id":2452,"mutability":"mutable","name":"success","nameLocation":"5382:7:15","nodeType":"VariableDeclaration","scope":2469,"src":"5377:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2451,"name":"bool","nodeType":"ElementaryTypeName","src":"5377:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2454,"mutability":"mutable","name":"value","nameLocation":"5399:5:15","nodeType":"VariableDeclaration","scope":2469,"src":"5391:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2453,"name":"uint256","nodeType":"ElementaryTypeName","src":"5391:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2460,"initialValue":{"arguments":[{"id":2456,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5421:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2457,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"5428:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2458,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"5435:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2455,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[2491,2528],"referencedDeclaration":2528,"src":"5408:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5408:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5376:63:15"},{"condition":{"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5453:8:15","subExpression":{"id":2461,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"5454:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2466,"nodeType":"IfStatement","src":"5449:41:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2463,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5470:18:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5470:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2465,"nodeType":"RevertStatement","src":"5463:27:15"}},{"expression":{"id":2467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"5507:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2450,"id":2468,"nodeType":"Return","src":"5500:12:15"}]},"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"4967:294:15","text":" @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":2470,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"5275:9:15","nodeType":"FunctionDefinition","parameters":{"id":2447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"input","nameLocation":"5299:5:15","nodeType":"VariableDeclaration","scope":2470,"src":"5285:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2441,"name":"string","nodeType":"ElementaryTypeName","src":"5285:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2444,"mutability":"mutable","name":"begin","nameLocation":"5314:5:15","nodeType":"VariableDeclaration","scope":2470,"src":"5306:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2443,"name":"uint256","nodeType":"ElementaryTypeName","src":"5306:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2446,"mutability":"mutable","name":"end","nameLocation":"5329:3:15","nodeType":"VariableDeclaration","scope":2470,"src":"5321:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2445,"name":"uint256","nodeType":"ElementaryTypeName","src":"5321:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5284:49:15"},"returnParameters":{"id":2450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2470,"src":"5357:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2448,"name":"uint256","nodeType":"ElementaryTypeName","src":"5357:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5356:9:15"},"scope":3457,"src":"5266:253:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2490,"nodeType":"Block","src":"5840:83:15","statements":[{"expression":{"arguments":[{"id":2481,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"5886:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5893:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":2485,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"5902:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5896:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2483,"name":"bytes","nodeType":"ElementaryTypeName","src":"5896:5:15","typeDescriptions":{}}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5896:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5909:6:15","memberName":"length","nodeType":"MemberAccess","src":"5896:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2480,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"5857:28:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5857:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2479,"id":2489,"nodeType":"Return","src":"5850:66:15"}]},"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"5525:215:15","text":" @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":2491,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"5754:12:15","nodeType":"FunctionDefinition","parameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"input","nameLocation":"5781:5:15","nodeType":"VariableDeclaration","scope":2491,"src":"5767:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2472,"name":"string","nodeType":"ElementaryTypeName","src":"5767:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5766:21:15"},"returnParameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"success","nameLocation":"5816:7:15","nodeType":"VariableDeclaration","scope":2491,"src":"5811:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2475,"name":"bool","nodeType":"ElementaryTypeName","src":"5811:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2478,"mutability":"mutable","name":"value","nameLocation":"5833:5:15","nodeType":"VariableDeclaration","scope":2491,"src":"5825:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"5825:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5810:29:15"},"scope":3457,"src":"5745:178:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2527,"nodeType":"Block","src":"6325:144:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2505,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"6339:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2508,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"6351:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6345:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2506,"name":"bytes","nodeType":"ElementaryTypeName","src":"6345:5:15","typeDescriptions":{}}},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6345:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6358:6:15","memberName":"length","nodeType":"MemberAccess","src":"6345:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6339:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"6368:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2513,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"6376:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6368:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6339:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2520,"nodeType":"IfStatement","src":"6335:63:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6389:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6396:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2518,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6388:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2504,"id":2519,"nodeType":"Return","src":"6381:17:15"}},{"expression":{"arguments":[{"id":2522,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"6444:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2523,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2496,"src":"6451:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2524,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"6458:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2521,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"6415:28:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6415:47:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2504,"id":2526,"nodeType":"Return","src":"6408:54:15"}]},"documentation":{"id":2492,"nodeType":"StructuredDocumentation","src":"5929:238:15","text":" @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":2528,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"6181:12:15","nodeType":"FunctionDefinition","parameters":{"id":2499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2494,"mutability":"mutable","name":"input","nameLocation":"6217:5:15","nodeType":"VariableDeclaration","scope":2528,"src":"6203:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2493,"name":"string","nodeType":"ElementaryTypeName","src":"6203:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2496,"mutability":"mutable","name":"begin","nameLocation":"6240:5:15","nodeType":"VariableDeclaration","scope":2528,"src":"6232:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2495,"name":"uint256","nodeType":"ElementaryTypeName","src":"6232:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2498,"mutability":"mutable","name":"end","nameLocation":"6263:3:15","nodeType":"VariableDeclaration","scope":2528,"src":"6255:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"6255:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6193:79:15"},"returnParameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"success","nameLocation":"6301:7:15","nodeType":"VariableDeclaration","scope":2528,"src":"6296:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2500,"name":"bool","nodeType":"ElementaryTypeName","src":"6296:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"value","nameLocation":"6318:5:15","nodeType":"VariableDeclaration","scope":2528,"src":"6310:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"6310:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6295:29:15"},"scope":3457,"src":"6172:297:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2597,"nodeType":"Block","src":"6872:347:15","statements":[{"assignments":[2543],"declarations":[{"constant":false,"id":2543,"mutability":"mutable","name":"buffer","nameLocation":"6895:6:15","nodeType":"VariableDeclaration","scope":2597,"src":"6882:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2542,"name":"bytes","nodeType":"ElementaryTypeName","src":"6882:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2548,"initialValue":{"arguments":[{"id":2546,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"6910:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6904:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2544,"name":"bytes","nodeType":"ElementaryTypeName","src":"6904:5:15","typeDescriptions":{}}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6904:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6882:34:15"},{"assignments":[2550],"declarations":[{"constant":false,"id":2550,"mutability":"mutable","name":"result","nameLocation":"6935:6:15","nodeType":"VariableDeclaration","scope":2597,"src":"6927:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"6927:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2552,"initialValue":{"hexValue":"30","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6944:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6927:18:15"},{"body":{"id":2591,"nodeType":"Block","src":"6993:189:15","statements":[{"assignments":[2564],"declarations":[{"constant":false,"id":2564,"mutability":"mutable","name":"chr","nameLocation":"7013:3:15","nodeType":"VariableDeclaration","scope":2591,"src":"7007:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2563,"name":"uint8","nodeType":"ElementaryTypeName","src":"7007:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2574,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":2569,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"7062:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2570,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"7070:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2568,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"7039:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7032:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2566,"name":"bytes1","nodeType":"ElementaryTypeName","src":"7032:6:15","typeDescriptions":{}}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7032:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":2565,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"7019:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7019:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"7007:67:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"7092:3:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"39","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7098:1:15","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"7092:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2582,"nodeType":"IfStatement","src":"7088:30:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7109:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2580,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7108:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2541,"id":2581,"nodeType":"Return","src":"7101:17:15"}},{"expression":{"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"7132:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3130","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7142:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"7132:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2586,"nodeType":"ExpressionStatement","src":"7132:12:15"},{"expression":{"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2587,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"7158:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2588,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"7168:3:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7158:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2590,"nodeType":"ExpressionStatement","src":"7158:13:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2557,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"6979:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2558,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"6983:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6979:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2592,"initializationExpression":{"assignments":[2554],"declarations":[{"constant":false,"id":2554,"mutability":"mutable","name":"i","nameLocation":"6968:1:15","nodeType":"VariableDeclaration","scope":2592,"src":"6960:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2553,"name":"uint256","nodeType":"ElementaryTypeName","src":"6960:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2556,"initialValue":{"id":2555,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"6972:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6960:17:15"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6988:3:15","subExpression":{"id":2560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"6990:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2562,"nodeType":"ExpressionStatement","src":"6988:3:15"},"nodeType":"ForStatement","src":"6955:227:15"},{"expression":{"components":[{"hexValue":"74727565","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7199:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2594,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"7205:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2595,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7198:14:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2541,"id":2596,"nodeType":"Return","src":"7191:21:15"}]},"documentation":{"id":2529,"nodeType":"StructuredDocumentation","src":"6475:224:15","text":" @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":2598,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseUintUncheckedBounds","nameLocation":"6713:28:15","nodeType":"FunctionDefinition","parameters":{"id":2536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"input","nameLocation":"6765:5:15","nodeType":"VariableDeclaration","scope":2598,"src":"6751:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2530,"name":"string","nodeType":"ElementaryTypeName","src":"6751:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2533,"mutability":"mutable","name":"begin","nameLocation":"6788:5:15","nodeType":"VariableDeclaration","scope":2598,"src":"6780:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"6780:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"end","nameLocation":"6811:3:15","nodeType":"VariableDeclaration","scope":2598,"src":"6803:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2534,"name":"uint256","nodeType":"ElementaryTypeName","src":"6803:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6741:79:15"},"returnParameters":{"id":2541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"success","nameLocation":"6848:7:15","nodeType":"VariableDeclaration","scope":2598,"src":"6843:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2537,"name":"bool","nodeType":"ElementaryTypeName","src":"6843:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2540,"mutability":"mutable","name":"value","nameLocation":"6865:5:15","nodeType":"VariableDeclaration","scope":2598,"src":"6857:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2539,"name":"uint256","nodeType":"ElementaryTypeName","src":"6857:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6842:29:15"},"scope":3457,"src":"6704:515:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2616,"nodeType":"Block","src":"7516:63:15","statements":[{"expression":{"arguments":[{"id":2607,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"7542:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7549:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":2611,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"7558:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7552:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2609,"name":"bytes","nodeType":"ElementaryTypeName","src":"7552:5:15","typeDescriptions":{}}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7552:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7565:6:15","memberName":"length","nodeType":"MemberAccess","src":"7552:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2606,"name":"parseInt","nodeType":"Identifier","overloadedDeclarations":[2617,2648],"referencedDeclaration":2648,"src":"7533:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (int256)"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7533:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2605,"id":2615,"nodeType":"Return","src":"7526:46:15"}]},"documentation":{"id":2599,"nodeType":"StructuredDocumentation","src":"7225:216:15","text":" @dev Parse a decimal string and returns the value as a `int256`.\n Requirements:\n - The string must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":2617,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7455:8:15","nodeType":"FunctionDefinition","parameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"input","nameLocation":"7478:5:15","nodeType":"VariableDeclaration","scope":2617,"src":"7464:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2600,"name":"string","nodeType":"ElementaryTypeName","src":"7464:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:21:15"},"returnParameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2617,"src":"7508:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2603,"name":"int256","nodeType":"ElementaryTypeName","src":"7508:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7507:8:15"},"scope":3457,"src":"7446:133:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2647,"nodeType":"Block","src":"7984:151:15","statements":[{"assignments":[2630,2632],"declarations":[{"constant":false,"id":2630,"mutability":"mutable","name":"success","nameLocation":"8000:7:15","nodeType":"VariableDeclaration","scope":2647,"src":"7995:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2629,"name":"bool","nodeType":"ElementaryTypeName","src":"7995:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2632,"mutability":"mutable","name":"value","nameLocation":"8016:5:15","nodeType":"VariableDeclaration","scope":2647,"src":"8009:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2631,"name":"int256","nodeType":"ElementaryTypeName","src":"8009:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2638,"initialValue":{"arguments":[{"id":2634,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"8037:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2635,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"8044:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2636,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"8051:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2633,"name":"tryParseInt","nodeType":"Identifier","overloadedDeclarations":[2669,2711],"referencedDeclaration":2711,"src":"8025:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8025:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"nodeType":"VariableDeclarationStatement","src":"7994:61:15"},{"condition":{"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8069:8:15","subExpression":{"id":2639,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"8070:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2644,"nodeType":"IfStatement","src":"8065:41:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2641,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"8086:18:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8086:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2643,"nodeType":"RevertStatement","src":"8079:27:15"}},{"expression":{"id":2645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"8123:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2628,"id":2646,"nodeType":"Return","src":"8116:12:15"}]},"documentation":{"id":2618,"nodeType":"StructuredDocumentation","src":"7585:296:15","text":" @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":2648,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7895:8:15","nodeType":"FunctionDefinition","parameters":{"id":2625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2620,"mutability":"mutable","name":"input","nameLocation":"7918:5:15","nodeType":"VariableDeclaration","scope":2648,"src":"7904:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2619,"name":"string","nodeType":"ElementaryTypeName","src":"7904:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2622,"mutability":"mutable","name":"begin","nameLocation":"7933:5:15","nodeType":"VariableDeclaration","scope":2648,"src":"7925:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"7925:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2624,"mutability":"mutable","name":"end","nameLocation":"7948:3:15","nodeType":"VariableDeclaration","scope":2648,"src":"7940:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2623,"name":"uint256","nodeType":"ElementaryTypeName","src":"7940:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7903:49:15"},"returnParameters":{"id":2628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2648,"src":"7976:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2626,"name":"int256","nodeType":"ElementaryTypeName","src":"7976:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7975:8:15"},"scope":3457,"src":"7886:249:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2668,"nodeType":"Block","src":"8526:82:15","statements":[{"expression":{"arguments":[{"id":2659,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"8571:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8578:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":2663,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"8587:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8581:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2661,"name":"bytes","nodeType":"ElementaryTypeName","src":"8581:5:15","typeDescriptions":{}}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8581:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8594:6:15","memberName":"length","nodeType":"MemberAccess","src":"8581:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2658,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"8543:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8543:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":2657,"id":2667,"nodeType":"Return","src":"8536:65:15"}]},"documentation":{"id":2649,"nodeType":"StructuredDocumentation","src":"8141:287:15","text":" @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":2669,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8442:11:15","nodeType":"FunctionDefinition","parameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"input","nameLocation":"8468:5:15","nodeType":"VariableDeclaration","scope":2669,"src":"8454:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2650,"name":"string","nodeType":"ElementaryTypeName","src":"8454:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8453:21:15"},"returnParameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"success","nameLocation":"8503:7:15","nodeType":"VariableDeclaration","scope":2669,"src":"8498:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2653,"name":"bool","nodeType":"ElementaryTypeName","src":"8498:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"value","nameLocation":"8519:5:15","nodeType":"VariableDeclaration","scope":2669,"src":"8512:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2655,"name":"int256","nodeType":"ElementaryTypeName","src":"8512:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8497:28:15"},"scope":3457,"src":"8433:175:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":2674,"mutability":"constant","name":"ABS_MIN_INT256","nameLocation":"8639:14:15","nodeType":"VariableDeclaration","scope":3457,"src":"8614:50:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"8614:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":2673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8656:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323535","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8661:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"8656:8:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"visibility":"private"},{"body":{"id":2710,"nodeType":"Block","src":"9130:143:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2688,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"9144:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2691,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"9156:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9150:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2689,"name":"bytes","nodeType":"ElementaryTypeName","src":"9150:5:15","typeDescriptions":{}}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9150:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9163:6:15","memberName":"length","nodeType":"MemberAccess","src":"9150:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9144:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2695,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"9173:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2696,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"9181:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9173:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9144:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2703,"nodeType":"IfStatement","src":"9140:63:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9194:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9201:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9193:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2687,"id":2702,"nodeType":"Return","src":"9186:17:15"}},{"expression":{"arguments":[{"id":2705,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"9248:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2706,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"9255:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2707,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"9262:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2704,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"9220:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9220:46:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":2687,"id":2709,"nodeType":"Return","src":"9213:53:15"}]},"documentation":{"id":2675,"nodeType":"StructuredDocumentation","src":"8671:303:15","text":" @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character or if the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":2711,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8988:11:15","nodeType":"FunctionDefinition","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2677,"mutability":"mutable","name":"input","nameLocation":"9023:5:15","nodeType":"VariableDeclaration","scope":2711,"src":"9009:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2676,"name":"string","nodeType":"ElementaryTypeName","src":"9009:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2679,"mutability":"mutable","name":"begin","nameLocation":"9046:5:15","nodeType":"VariableDeclaration","scope":2711,"src":"9038:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2678,"name":"uint256","nodeType":"ElementaryTypeName","src":"9038:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2681,"mutability":"mutable","name":"end","nameLocation":"9069:3:15","nodeType":"VariableDeclaration","scope":2711,"src":"9061:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2680,"name":"uint256","nodeType":"ElementaryTypeName","src":"9061:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8999:79:15"},"returnParameters":{"id":2687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"success","nameLocation":"9107:7:15","nodeType":"VariableDeclaration","scope":2711,"src":"9102:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2683,"name":"bool","nodeType":"ElementaryTypeName","src":"9102:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2686,"mutability":"mutable","name":"value","nameLocation":"9123:5:15","nodeType":"VariableDeclaration","scope":2711,"src":"9116:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2685,"name":"int256","nodeType":"ElementaryTypeName","src":"9116:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9101:28:15"},"scope":3457,"src":"8979:294:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2831,"nodeType":"Block","src":"9673:812:15","statements":[{"assignments":[2726],"declarations":[{"constant":false,"id":2726,"mutability":"mutable","name":"buffer","nameLocation":"9696:6:15","nodeType":"VariableDeclaration","scope":2831,"src":"9683:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2725,"name":"bytes","nodeType":"ElementaryTypeName","src":"9683:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2731,"initialValue":{"arguments":[{"id":2729,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"9711:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9705:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2727,"name":"bytes","nodeType":"ElementaryTypeName","src":"9705:5:15","typeDescriptions":{}}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9705:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9683:34:15"},{"assignments":[2733],"declarations":[{"constant":false,"id":2733,"mutability":"mutable","name":"sign","nameLocation":"9781:4:15","nodeType":"VariableDeclaration","scope":2831,"src":"9774:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":2732,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9774:6:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":2749,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2734,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"9788:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2735,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"9797:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9788:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":2744,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"9845:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2745,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"9853:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2743,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"9822:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9822:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9815:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2741,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9815:6:15","typeDescriptions":{}}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9815:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9788:72:15","trueExpression":{"arguments":[{"hexValue":"30","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9810:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9803:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2737,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9803:6:15","typeDescriptions":{}}},"id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9803:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"9774:86:15"},{"assignments":[2751],"declarations":[{"constant":false,"id":2751,"mutability":"mutable","name":"positiveSign","nameLocation":"9946:12:15","nodeType":"VariableDeclaration","scope":2831,"src":"9941:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2750,"name":"bool","nodeType":"ElementaryTypeName","src":"9941:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2758,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"9961:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2b","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9976:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""},"value":"+"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""}],"id":2754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9969:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2753,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9969:6:15","typeDescriptions":{}}},"id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9969:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"9961:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9941:39:15"},{"assignments":[2760],"declarations":[{"constant":false,"id":2760,"mutability":"mutable","name":"negativeSign","nameLocation":"9995:12:15","nodeType":"VariableDeclaration","scope":2831,"src":"9990:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2759,"name":"bool","nodeType":"ElementaryTypeName","src":"9990:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2767,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2761,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"10010:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2d","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10025:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""}],"id":2763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10018:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2762,"name":"bytes1","nodeType":"ElementaryTypeName","src":"10018:6:15","typeDescriptions":{}}},"id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10018:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"10010:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9990:39:15"},{"assignments":[2769],"declarations":[{"constant":false,"id":2769,"mutability":"mutable","name":"offset","nameLocation":"10047:6:15","nodeType":"VariableDeclaration","scope":2831,"src":"10039:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"10039:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2776,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2770,"name":"positiveSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"10057:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":2771,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"10073:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10057:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2773,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10056:30:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10087:6:15","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"10056:37:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10056:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10039:56:15"},{"assignments":[2778,2780],"declarations":[{"constant":false,"id":2778,"mutability":"mutable","name":"absSuccess","nameLocation":"10112:10:15","nodeType":"VariableDeclaration","scope":2831,"src":"10107:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2777,"name":"bool","nodeType":"ElementaryTypeName","src":"10107:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2780,"mutability":"mutable","name":"absValue","nameLocation":"10132:8:15","nodeType":"VariableDeclaration","scope":2831,"src":"10124:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"10124:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2788,"initialValue":{"arguments":[{"id":2782,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"10157:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2783,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"10164:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2784,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"10172:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10164:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2786,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"10180:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2781,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[2491,2528],"referencedDeclaration":2528,"src":"10144:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10144:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"10106:78:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2789,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"10199:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2790,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"10213:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2791,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"10224:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10213:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10199:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2809,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"10341:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2810,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"10355:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10341:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2812,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"10371:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2813,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"10383:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10371:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10341:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10469:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2827,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10468:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2724,"id":2828,"nodeType":"Return","src":"10461:17:15"},"id":2829,"nodeType":"IfStatement","src":"10337:141:15","trueBody":{"id":2824,"nodeType":"Block","src":"10399:56:15","statements":[{"expression":{"components":[{"hexValue":"74727565","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10421:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"arguments":[{"id":2819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10432:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2818,"name":"int256","nodeType":"ElementaryTypeName","src":"10432:6:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":2817,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"10427:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10427:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10440:3:15","memberName":"min","nodeType":"MemberAccess","src":"10427:16:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2822,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10420:24:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":2724,"id":2823,"nodeType":"Return","src":"10413:31:15"}]}},"id":2830,"nodeType":"IfStatement","src":"10195:283:15","trueBody":{"id":2808,"nodeType":"Block","src":"10240:91:15","statements":[{"expression":{"components":[{"hexValue":"74727565","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10262:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"condition":{"id":2795,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"10268:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2803,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"10310:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10303:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2801,"name":"int256","nodeType":"ElementaryTypeName","src":"10303:6:15","typeDescriptions":{}}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10303:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10268:51:15","trueExpression":{"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"10283:17:15","subExpression":{"arguments":[{"id":2798,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"10291:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10284:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2796,"name":"int256","nodeType":"ElementaryTypeName","src":"10284:6:15","typeDescriptions":{}}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10284:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2806,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10261:59:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":2724,"id":2807,"nodeType":"Return","src":"10254:66:15"}]}}]},"documentation":{"id":2712,"nodeType":"StructuredDocumentation","src":"9279:223:15","text":" @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":2832,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseIntUncheckedBounds","nameLocation":"9516:27:15","nodeType":"FunctionDefinition","parameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2714,"mutability":"mutable","name":"input","nameLocation":"9567:5:15","nodeType":"VariableDeclaration","scope":2832,"src":"9553:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2713,"name":"string","nodeType":"ElementaryTypeName","src":"9553:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2716,"mutability":"mutable","name":"begin","nameLocation":"9590:5:15","nodeType":"VariableDeclaration","scope":2832,"src":"9582:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"9582:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2718,"mutability":"mutable","name":"end","nameLocation":"9613:3:15","nodeType":"VariableDeclaration","scope":2832,"src":"9605:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2717,"name":"uint256","nodeType":"ElementaryTypeName","src":"9605:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9543:79:15"},"returnParameters":{"id":2724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"success","nameLocation":"9650:7:15","nodeType":"VariableDeclaration","scope":2832,"src":"9645:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2720,"name":"bool","nodeType":"ElementaryTypeName","src":"9645:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2723,"mutability":"mutable","name":"value","nameLocation":"9666:5:15","nodeType":"VariableDeclaration","scope":2832,"src":"9659:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2722,"name":"int256","nodeType":"ElementaryTypeName","src":"9659:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9644:28:15"},"scope":3457,"src":"9507:978:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2850,"nodeType":"Block","src":"10830:67:15","statements":[{"expression":{"arguments":[{"id":2841,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"10860:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":2845,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"10876:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10870:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2843,"name":"bytes","nodeType":"ElementaryTypeName","src":"10870:5:15","typeDescriptions":{}}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10870:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10883:6:15","memberName":"length","nodeType":"MemberAccess","src":"10870:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2840,"name":"parseHexUint","nodeType":"Identifier","overloadedDeclarations":[2851,2882],"referencedDeclaration":2882,"src":"10847:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10847:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2839,"id":2849,"nodeType":"Return","src":"10840:50:15"}]},"documentation":{"id":2833,"nodeType":"StructuredDocumentation","src":"10491:259:15","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":2851,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"10764:12:15","nodeType":"FunctionDefinition","parameters":{"id":2836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2835,"mutability":"mutable","name":"input","nameLocation":"10791:5:15","nodeType":"VariableDeclaration","scope":2851,"src":"10777:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2834,"name":"string","nodeType":"ElementaryTypeName","src":"10777:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10776:21:15"},"returnParameters":{"id":2839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2851,"src":"10821:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2837,"name":"uint256","nodeType":"ElementaryTypeName","src":"10821:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10820:9:15"},"scope":3457,"src":"10755:142:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2881,"nodeType":"Block","src":"11318:156:15","statements":[{"assignments":[2864,2866],"declarations":[{"constant":false,"id":2864,"mutability":"mutable","name":"success","nameLocation":"11334:7:15","nodeType":"VariableDeclaration","scope":2881,"src":"11329:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2863,"name":"bool","nodeType":"ElementaryTypeName","src":"11329:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"value","nameLocation":"11351:5:15","nodeType":"VariableDeclaration","scope":2881,"src":"11343:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2865,"name":"uint256","nodeType":"ElementaryTypeName","src":"11343:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2872,"initialValue":{"arguments":[{"id":2868,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"11376:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2869,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"11383:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2870,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"11390:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2867,"name":"tryParseHexUint","nodeType":"Identifier","overloadedDeclarations":[2903,2940],"referencedDeclaration":2940,"src":"11360:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11360:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11328:66:15"},{"condition":{"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11408:8:15","subExpression":{"id":2873,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"11409:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2878,"nodeType":"IfStatement","src":"11404:41:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2875,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"11425:18:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11425:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2877,"nodeType":"RevertStatement","src":"11418:27:15"}},{"expression":{"id":2879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"11462:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2862,"id":2880,"nodeType":"Return","src":"11455:12:15"}]},"documentation":{"id":2852,"nodeType":"StructuredDocumentation","src":"10903:307:15","text":" @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":2882,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"11224:12:15","nodeType":"FunctionDefinition","parameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"input","nameLocation":"11251:5:15","nodeType":"VariableDeclaration","scope":2882,"src":"11237:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2853,"name":"string","nodeType":"ElementaryTypeName","src":"11237:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2856,"mutability":"mutable","name":"begin","nameLocation":"11266:5:15","nodeType":"VariableDeclaration","scope":2882,"src":"11258:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2855,"name":"uint256","nodeType":"ElementaryTypeName","src":"11258:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"end","nameLocation":"11281:3:15","nodeType":"VariableDeclaration","scope":2882,"src":"11273:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"11273:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11236:49:15"},"returnParameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2882,"src":"11309:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"11309:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11308:9:15"},"scope":3457,"src":"11215:259:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2902,"nodeType":"Block","src":"11801:86:15","statements":[{"expression":{"arguments":[{"id":2893,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"11850:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":2897,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"11866:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11860:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2895,"name":"bytes","nodeType":"ElementaryTypeName","src":"11860:5:15","typeDescriptions":{}}},"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11860:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11873:6:15","memberName":"length","nodeType":"MemberAccess","src":"11860:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2892,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"11818:31:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11818:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2891,"id":2901,"nodeType":"Return","src":"11811:69:15"}]},"documentation":{"id":2883,"nodeType":"StructuredDocumentation","src":"11480:218:15","text":" @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":2903,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"11712:15:15","nodeType":"FunctionDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"input","nameLocation":"11742:5:15","nodeType":"VariableDeclaration","scope":2903,"src":"11728:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2884,"name":"string","nodeType":"ElementaryTypeName","src":"11728:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11727:21:15"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"mutability":"mutable","name":"success","nameLocation":"11777:7:15","nodeType":"VariableDeclaration","scope":2903,"src":"11772:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2887,"name":"bool","nodeType":"ElementaryTypeName","src":"11772:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2890,"mutability":"mutable","name":"value","nameLocation":"11794:5:15","nodeType":"VariableDeclaration","scope":2903,"src":"11786:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2889,"name":"uint256","nodeType":"ElementaryTypeName","src":"11786:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11771:29:15"},"scope":3457,"src":"11703:184:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2939,"nodeType":"Block","src":"12295:147:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"12309:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2920,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"12321:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12315:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2918,"name":"bytes","nodeType":"ElementaryTypeName","src":"12315:5:15","typeDescriptions":{}}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12315:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12328:6:15","memberName":"length","nodeType":"MemberAccess","src":"12315:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12309:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2924,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"12338:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2925,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"12346:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12338:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12309:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2932,"nodeType":"IfStatement","src":"12305:63:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12359:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12366:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2930,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"12358:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2916,"id":2931,"nodeType":"Return","src":"12351:17:15"}},{"expression":{"arguments":[{"id":2934,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"12417:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2935,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"12424:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2936,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"12431:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2933,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"12385:31:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12385:50:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2916,"id":2938,"nodeType":"Return","src":"12378:57:15"}]},"documentation":{"id":2904,"nodeType":"StructuredDocumentation","src":"11893:241:15","text":" @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":2940,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"12148:15:15","nodeType":"FunctionDefinition","parameters":{"id":2911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"input","nameLocation":"12187:5:15","nodeType":"VariableDeclaration","scope":2940,"src":"12173:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2905,"name":"string","nodeType":"ElementaryTypeName","src":"12173:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2908,"mutability":"mutable","name":"begin","nameLocation":"12210:5:15","nodeType":"VariableDeclaration","scope":2940,"src":"12202:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2907,"name":"uint256","nodeType":"ElementaryTypeName","src":"12202:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2910,"mutability":"mutable","name":"end","nameLocation":"12233:3:15","nodeType":"VariableDeclaration","scope":2940,"src":"12225:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2909,"name":"uint256","nodeType":"ElementaryTypeName","src":"12225:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12163:79:15"},"returnParameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2913,"mutability":"mutable","name":"success","nameLocation":"12271:7:15","nodeType":"VariableDeclaration","scope":2940,"src":"12266:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2912,"name":"bool","nodeType":"ElementaryTypeName","src":"12266:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2915,"mutability":"mutable","name":"value","nameLocation":"12288:5:15","nodeType":"VariableDeclaration","scope":2940,"src":"12280:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2914,"name":"uint256","nodeType":"ElementaryTypeName","src":"12280:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12265:29:15"},"scope":3457,"src":"12139:303:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3042,"nodeType":"Block","src":"12851:881:15","statements":[{"assignments":[2955],"declarations":[{"constant":false,"id":2955,"mutability":"mutable","name":"buffer","nameLocation":"12874:6:15","nodeType":"VariableDeclaration","scope":3042,"src":"12861:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2954,"name":"bytes","nodeType":"ElementaryTypeName","src":"12861:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2960,"initialValue":{"arguments":[{"id":2958,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12889:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12883:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2956,"name":"bytes","nodeType":"ElementaryTypeName","src":"12883:5:15","typeDescriptions":{}}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12883:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"12861:34:15"},{"assignments":[2962],"declarations":[{"constant":false,"id":2962,"mutability":"mutable","name":"hasPrefix","nameLocation":"12948:9:15","nodeType":"VariableDeclaration","scope":3042,"src":"12943:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2961,"name":"bool","nodeType":"ElementaryTypeName","src":"12943:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2982,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2963,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"12961:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2964,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"12967:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12975:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12967:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12961:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2968,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12960:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2972,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"13011:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2973,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13019:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2971,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"12988:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12988:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12981:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":2969,"name":"bytes2","nodeType":"ElementaryTypeName","src":"12981:6:15","typeDescriptions":{}}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12981:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13037:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":2977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13030:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":2976,"name":"bytes2","nodeType":"ElementaryTypeName","src":"13030:6:15","typeDescriptions":{}}},"id":2979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13030:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"12981:61:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12960:82:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12943:99:15"},{"assignments":[2984],"declarations":[{"constant":false,"id":2984,"mutability":"mutable","name":"offset","nameLocation":"13131:6:15","nodeType":"VariableDeclaration","scope":3042,"src":"13123:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"13123:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2990,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2985,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"13140:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13150:6:15","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"13140:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13140:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13161:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13140:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13123:39:15"},{"assignments":[2992],"declarations":[{"constant":false,"id":2992,"mutability":"mutable","name":"result","nameLocation":"13181:6:15","nodeType":"VariableDeclaration","scope":3042,"src":"13173:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2991,"name":"uint256","nodeType":"ElementaryTypeName","src":"13173:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2994,"initialValue":{"hexValue":"30","id":2993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13190:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13173:18:15"},{"body":{"id":3036,"nodeType":"Block","src":"13248:447:15","statements":[{"assignments":[3008],"declarations":[{"constant":false,"id":3008,"mutability":"mutable","name":"chr","nameLocation":"13268:3:15","nodeType":"VariableDeclaration","scope":3036,"src":"13262:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3007,"name":"uint8","nodeType":"ElementaryTypeName","src":"13262:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3018,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":3013,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"13317:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3014,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"13325:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3012,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"13294:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13294:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13287:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3010,"name":"bytes1","nodeType":"ElementaryTypeName","src":"13287:6:15","typeDescriptions":{}}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13287:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":3009,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"13274:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13274:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"13262:67:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"13347:3:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3135","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13353:2:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"13347:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3026,"nodeType":"IfStatement","src":"13343:31:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13365:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13372:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"13364:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2953,"id":3025,"nodeType":"Return","src":"13357:17:15"}},{"expression":{"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3027,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"13388:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3136","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13398:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13388:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3030,"nodeType":"ExpressionStatement","src":"13388:12:15"},{"id":3035,"nodeType":"UncheckedBlock","src":"13414:271:15","statements":[{"expression":{"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"13657:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3032,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"13667:3:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13657:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3034,"nodeType":"ExpressionStatement","src":"13657:13:15"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"13234:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3002,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"13238:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13234:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3037,"initializationExpression":{"assignments":[2996],"declarations":[{"constant":false,"id":2996,"mutability":"mutable","name":"i","nameLocation":"13214:1:15","nodeType":"VariableDeclaration","scope":3037,"src":"13206:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2995,"name":"uint256","nodeType":"ElementaryTypeName","src":"13206:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3000,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2997,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"13218:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2998,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"13226:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13218:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13206:26:15"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"13243:3:15","subExpression":{"id":3004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"13245:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3006,"nodeType":"ExpressionStatement","src":"13243:3:15"},"nodeType":"ForStatement","src":"13201:494:15"},{"expression":{"components":[{"hexValue":"74727565","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13712:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"13718:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3040,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13711:14:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2953,"id":3041,"nodeType":"Return","src":"13704:21:15"}]},"documentation":{"id":2941,"nodeType":"StructuredDocumentation","src":"12448:227:15","text":" @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":3043,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseHexUintUncheckedBounds","nameLocation":"12689:31:15","nodeType":"FunctionDefinition","parameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"input","nameLocation":"12744:5:15","nodeType":"VariableDeclaration","scope":3043,"src":"12730:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2942,"name":"string","nodeType":"ElementaryTypeName","src":"12730:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2945,"mutability":"mutable","name":"begin","nameLocation":"12767:5:15","nodeType":"VariableDeclaration","scope":3043,"src":"12759:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2944,"name":"uint256","nodeType":"ElementaryTypeName","src":"12759:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2947,"mutability":"mutable","name":"end","nameLocation":"12790:3:15","nodeType":"VariableDeclaration","scope":3043,"src":"12782:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2946,"name":"uint256","nodeType":"ElementaryTypeName","src":"12782:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12720:79:15"},"returnParameters":{"id":2953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2950,"mutability":"mutable","name":"success","nameLocation":"12827:7:15","nodeType":"VariableDeclaration","scope":3043,"src":"12822:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2949,"name":"bool","nodeType":"ElementaryTypeName","src":"12822:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2952,"mutability":"mutable","name":"value","nameLocation":"12844:5:15","nodeType":"VariableDeclaration","scope":3043,"src":"12836:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"12836:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12821:29:15"},"scope":3457,"src":"12680:1052:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3061,"nodeType":"Block","src":"14030:67:15","statements":[{"expression":{"arguments":[{"id":3052,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"14060:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14067:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":3056,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"14076:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14070:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3054,"name":"bytes","nodeType":"ElementaryTypeName","src":"14070:5:15","typeDescriptions":{}}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14070:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14083:6:15","memberName":"length","nodeType":"MemberAccess","src":"14070:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3051,"name":"parseAddress","nodeType":"Identifier","overloadedDeclarations":[3062,3093],"referencedDeclaration":3093,"src":"14047:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (address)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14047:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3050,"id":3060,"nodeType":"Return","src":"14040:50:15"}]},"documentation":{"id":3044,"nodeType":"StructuredDocumentation","src":"13738:212:15","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":3062,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"13964:12:15","nodeType":"FunctionDefinition","parameters":{"id":3047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3046,"mutability":"mutable","name":"input","nameLocation":"13991:5:15","nodeType":"VariableDeclaration","scope":3062,"src":"13977:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3045,"name":"string","nodeType":"ElementaryTypeName","src":"13977:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13976:21:15"},"returnParameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3062,"src":"14021:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3048,"name":"address","nodeType":"ElementaryTypeName","src":"14021:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14020:9:15"},"scope":3457,"src":"13955:142:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3092,"nodeType":"Block","src":"14470:165:15","statements":[{"assignments":[3075,3077],"declarations":[{"constant":false,"id":3075,"mutability":"mutable","name":"success","nameLocation":"14486:7:15","nodeType":"VariableDeclaration","scope":3092,"src":"14481:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3074,"name":"bool","nodeType":"ElementaryTypeName","src":"14481:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3077,"mutability":"mutable","name":"value","nameLocation":"14503:5:15","nodeType":"VariableDeclaration","scope":3092,"src":"14495:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3076,"name":"address","nodeType":"ElementaryTypeName","src":"14495:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3083,"initialValue":{"arguments":[{"id":3079,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"14528:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3080,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"14535:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3081,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"14542:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3078,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[3114,3218],"referencedDeclaration":3218,"src":"14512:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14512:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"nodeType":"VariableDeclarationStatement","src":"14480:66:15"},{"condition":{"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14560:8:15","subExpression":{"id":3084,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"14561:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3089,"nodeType":"IfStatement","src":"14556:50:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3086,"name":"StringsInvalidAddressFormat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"14577:27:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14577:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3088,"nodeType":"RevertStatement","src":"14570:36:15"}},{"expression":{"id":3090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"14623:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3073,"id":3091,"nodeType":"Return","src":"14616:12:15"}]},"documentation":{"id":3063,"nodeType":"StructuredDocumentation","src":"14103:259:15","text":" @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":3093,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"14376:12:15","nodeType":"FunctionDefinition","parameters":{"id":3070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3065,"mutability":"mutable","name":"input","nameLocation":"14403:5:15","nodeType":"VariableDeclaration","scope":3093,"src":"14389:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3064,"name":"string","nodeType":"ElementaryTypeName","src":"14389:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3067,"mutability":"mutable","name":"begin","nameLocation":"14418:5:15","nodeType":"VariableDeclaration","scope":3093,"src":"14410:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3066,"name":"uint256","nodeType":"ElementaryTypeName","src":"14410:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3069,"mutability":"mutable","name":"end","nameLocation":"14433:3:15","nodeType":"VariableDeclaration","scope":3093,"src":"14425:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"14425:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14388:49:15"},"returnParameters":{"id":3073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3093,"src":"14461:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"14461:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14460:9:15"},"scope":3457,"src":"14367:268:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3113,"nodeType":"Block","src":"14942:70:15","statements":[{"expression":{"arguments":[{"id":3104,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"14975:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14982:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":3108,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"14991:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14985:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3106,"name":"bytes","nodeType":"ElementaryTypeName","src":"14985:5:15","typeDescriptions":{}}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14985:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14998:6:15","memberName":"length","nodeType":"MemberAccess","src":"14985:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3103,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[3114,3218],"referencedDeclaration":3218,"src":"14959:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14959:46:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":3102,"id":3112,"nodeType":"Return","src":"14952:53:15"}]},"documentation":{"id":3094,"nodeType":"StructuredDocumentation","src":"14641:198:15","text":" @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n formatted address. See {parseAddress-string} requirements."},"id":3114,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"14853:15:15","nodeType":"FunctionDefinition","parameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3096,"mutability":"mutable","name":"input","nameLocation":"14883:5:15","nodeType":"VariableDeclaration","scope":3114,"src":"14869:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3095,"name":"string","nodeType":"ElementaryTypeName","src":"14869:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"14868:21:15"},"returnParameters":{"id":3102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3099,"mutability":"mutable","name":"success","nameLocation":"14918:7:15","nodeType":"VariableDeclaration","scope":3114,"src":"14913:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3098,"name":"bool","nodeType":"ElementaryTypeName","src":"14913:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3101,"mutability":"mutable","name":"value","nameLocation":"14935:5:15","nodeType":"VariableDeclaration","scope":3114,"src":"14927:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3100,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14912:29:15"},"scope":3457,"src":"14844:168:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3217,"nodeType":"Block","src":"15405:733:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"15419:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3131,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"15431:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15425:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3129,"name":"bytes","nodeType":"ElementaryTypeName","src":"15425:5:15","typeDescriptions":{}}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15425:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15438:6:15","memberName":"length","nodeType":"MemberAccess","src":"15425:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15419:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3135,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"15448:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3136,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"15456:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15448:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15419:40:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"nodeType":"IfStatement","src":"15415:72:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15469:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15484:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15476:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3140,"name":"address","nodeType":"ElementaryTypeName","src":"15476:7:15","typeDescriptions":{}}},"id":3143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15476:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15468:19:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":3127,"id":3145,"nodeType":"Return","src":"15461:26:15"}},{"assignments":[3148],"declarations":[{"constant":false,"id":3148,"mutability":"mutable","name":"hasPrefix","nameLocation":"15503:9:15","nodeType":"VariableDeclaration","scope":3217,"src":"15498:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3147,"name":"bool","nodeType":"ElementaryTypeName","src":"15498:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3171,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3149,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"15516:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"15522:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15530:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15522:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15516:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15515:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":3160,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"15572:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15566:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3158,"name":"bytes","nodeType":"ElementaryTypeName","src":"15566:5:15","typeDescriptions":{}}},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15566:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3162,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"15580:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3157,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"15543:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15543:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15536:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":3155,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15536:6:15","typeDescriptions":{}}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15536:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15598:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":3166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15591:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":3165,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15591:6:15","typeDescriptions":{}}},"id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15591:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"15536:67:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15515:88:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"15498:105:15"},{"assignments":[3173],"declarations":[{"constant":false,"id":3173,"mutability":"mutable","name":"expectedLength","nameLocation":"15692:14:15","nodeType":"VariableDeclaration","scope":3217,"src":"15684:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3172,"name":"uint256","nodeType":"ElementaryTypeName","src":"15684:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3181,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3430","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15709:2:15","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3175,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"15714:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15724:6:15","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"15714:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15714:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15735:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15714:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15709:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15684:52:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3182,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"15801:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3183,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"15807:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15801:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3185,"name":"expectedLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"15816:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15801:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3215,"nodeType":"Block","src":"16081:51:15","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16103:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16118:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16110:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3209,"name":"address","nodeType":"ElementaryTypeName","src":"16110:7:15","typeDescriptions":{}}},"id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16110:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3213,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"16102:19:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":3127,"id":3214,"nodeType":"Return","src":"16095:26:15"}]},"id":3216,"nodeType":"IfStatement","src":"15797:335:15","trueBody":{"id":3207,"nodeType":"Block","src":"15832:243:15","statements":[{"assignments":[3188,3190],"declarations":[{"constant":false,"id":3188,"mutability":"mutable","name":"s","nameLocation":"15953:1:15","nodeType":"VariableDeclaration","scope":3207,"src":"15948:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3187,"name":"bool","nodeType":"ElementaryTypeName","src":"15948:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"v","nameLocation":"15964:1:15","nodeType":"VariableDeclaration","scope":3207,"src":"15956:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3189,"name":"uint256","nodeType":"ElementaryTypeName","src":"15956:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3196,"initialValue":{"arguments":[{"id":3192,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"16001:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3193,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"16008:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3194,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"16015:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3191,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"15969:31:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15969:50:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15947:72:15"},{"expression":{"components":[{"id":3197,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"16041:1:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"id":3202,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"16060:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16052:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3200,"name":"uint160","nodeType":"ElementaryTypeName","src":"16052:7:15","typeDescriptions":{}}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16052:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16044:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3198,"name":"address","nodeType":"ElementaryTypeName","src":"16044:7:15","typeDescriptions":{}}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16044:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16040:24:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":3127,"id":3206,"nodeType":"Return","src":"16033:31:15"}]}}]},"documentation":{"id":3115,"nodeType":"StructuredDocumentation","src":"15018:226:15","text":" @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n formatted address. See {parseAddress-string-uint256-uint256} requirements."},"id":3218,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"15258:15:15","nodeType":"FunctionDefinition","parameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3117,"mutability":"mutable","name":"input","nameLocation":"15297:5:15","nodeType":"VariableDeclaration","scope":3218,"src":"15283:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3116,"name":"string","nodeType":"ElementaryTypeName","src":"15283:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3119,"mutability":"mutable","name":"begin","nameLocation":"15320:5:15","nodeType":"VariableDeclaration","scope":3218,"src":"15312:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3118,"name":"uint256","nodeType":"ElementaryTypeName","src":"15312:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3121,"mutability":"mutable","name":"end","nameLocation":"15343:3:15","nodeType":"VariableDeclaration","scope":3218,"src":"15335:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"15335:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15273:79:15"},"returnParameters":{"id":3127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3124,"mutability":"mutable","name":"success","nameLocation":"15381:7:15","nodeType":"VariableDeclaration","scope":3218,"src":"15376:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3123,"name":"bool","nodeType":"ElementaryTypeName","src":"15376:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3126,"mutability":"mutable","name":"value","nameLocation":"15398:5:15","nodeType":"VariableDeclaration","scope":3218,"src":"15390:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3125,"name":"address","nodeType":"ElementaryTypeName","src":"15390:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15375:29:15"},"scope":3457,"src":"15249:889:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3277,"nodeType":"Block","src":"16207:461:15","statements":[{"assignments":[3226],"declarations":[{"constant":false,"id":3226,"mutability":"mutable","name":"value","nameLocation":"16223:5:15","nodeType":"VariableDeclaration","scope":3277,"src":"16217:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3225,"name":"uint8","nodeType":"ElementaryTypeName","src":"16217:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3231,"initialValue":{"arguments":[{"id":3229,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"16237:3:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":3228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16231:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3227,"name":"uint8","nodeType":"ElementaryTypeName","src":"16231:5:15","typeDescriptions":{}}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16231:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"16217:24:15"},{"id":3274,"nodeType":"UncheckedBlock","src":"16401:238:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16429:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3437","id":3233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16437:2:15","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"src":"16429:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16443:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3538","id":3236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16451:2:15","typeDescriptions":{"typeIdentifier":"t_rational_58_by_1","typeString":"int_const 58"},"value":"58"},"src":"16443:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16429:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16489:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16497:2:15","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"16489:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16503:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313033","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16511:3:15","typeDescriptions":{"typeIdentifier":"t_rational_103_by_1","typeString":"int_const 103"},"value":"103"},"src":"16503:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16489:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16550:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3634","id":3255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16558:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"16550:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3257,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16564:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3731","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16572:2:15","typeDescriptions":{"typeIdentifier":"t_rational_71_by_1","typeString":"int_const 71"},"value":"71"},"src":"16564:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16550:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"expression":{"arguments":[{"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16618:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3266,"name":"uint8","nodeType":"ElementaryTypeName","src":"16618:5:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3265,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"16613:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16613:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16625:3:15","memberName":"max","nodeType":"MemberAccess","src":"16613:15:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":3224,"id":3270,"nodeType":"Return","src":"16606:22:15"},"id":3271,"nodeType":"IfStatement","src":"16546:82:15","trueBody":{"expression":{"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16576:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3535","id":3262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16585:2:15","typeDescriptions":{"typeIdentifier":"t_rational_55_by_1","typeString":"int_const 55"},"value":"55"},"src":"16576:11:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3264,"nodeType":"ExpressionStatement","src":"16576:11:15"}},"id":3272,"nodeType":"IfStatement","src":"16485:143:15","trueBody":{"expression":{"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16516:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3837","id":3251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16525:2:15","typeDescriptions":{"typeIdentifier":"t_rational_87_by_1","typeString":"int_const 87"},"value":"87"},"src":"16516:11:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3253,"nodeType":"ExpressionStatement","src":"16516:11:15"}},"id":3273,"nodeType":"IfStatement","src":"16425:203:15","trueBody":{"expression":{"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16455:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3438","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16464:2:15","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"16455:11:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3242,"nodeType":"ExpressionStatement","src":"16455:11:15"}}]},{"expression":{"id":3275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"16656:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":3224,"id":3276,"nodeType":"Return","src":"16649:12:15"}]},"id":3278,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseChr","nameLocation":"16153:12:15","nodeType":"FunctionDefinition","parameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"chr","nameLocation":"16173:3:15","nodeType":"VariableDeclaration","scope":3278,"src":"16166:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":3219,"name":"bytes1","nodeType":"ElementaryTypeName","src":"16166:6:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"16165:12:15"},"returnParameters":{"id":3224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3278,"src":"16200:5:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3222,"name":"uint8","nodeType":"ElementaryTypeName","src":"16200:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16199:7:15"},"scope":3457,"src":"16144:524:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3443,"nodeType":"Block","src":"17334:1331:15","statements":[{"assignments":[3287],"declarations":[{"constant":false,"id":3287,"mutability":"mutable","name":"buffer","nameLocation":"17357:6:15","nodeType":"VariableDeclaration","scope":3443,"src":"17344:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3286,"name":"bytes","nodeType":"ElementaryTypeName","src":"17344:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3292,"initialValue":{"arguments":[{"id":3290,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"17372:5:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17366:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3288,"name":"bytes","nodeType":"ElementaryTypeName","src":"17366:5:15","typeDescriptions":{}}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17366:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"17344:34:15"},{"assignments":[3294],"declarations":[{"constant":false,"id":3294,"mutability":"mutable","name":"output","nameLocation":"17401:6:15","nodeType":"VariableDeclaration","scope":3443,"src":"17388:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3293,"name":"bytes","nodeType":"ElementaryTypeName","src":"17388:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3302,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17420:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":3298,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"17424:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17431:6:15","memberName":"length","nodeType":"MemberAccess","src":"17424:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17420:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17410:9:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3295,"name":"bytes","nodeType":"ElementaryTypeName","src":"17414:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17410:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"17388:50:15"},{"assignments":[3304],"declarations":[{"constant":false,"id":3304,"mutability":"mutable","name":"outputLength","nameLocation":"17479:12:15","nodeType":"VariableDeclaration","scope":3443,"src":"17471:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3303,"name":"uint256","nodeType":"ElementaryTypeName","src":"17471:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3306,"initialValue":{"hexValue":"30","id":3305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17494:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17471:24:15"},{"body":{"id":3435,"nodeType":"Block","src":"17546:854:15","statements":[{"assignments":[3318],"declarations":[{"constant":false,"id":3318,"mutability":"mutable","name":"char","nameLocation":"17567:4:15","nodeType":"VariableDeclaration","scope":3435,"src":"17560:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":3317,"name":"bytes1","nodeType":"ElementaryTypeName","src":"17560:6:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":3326,"initialValue":{"arguments":[{"arguments":[{"id":3322,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"17604:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3323,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"17612:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3321,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"17581:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17581:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17574:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3319,"name":"bytes1","nodeType":"ElementaryTypeName","src":"17574:6:15","typeDescriptions":{}}},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17574:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"17560:55:15"},{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3327,"name":"SPECIAL_CHARS_LOOKUP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"17635:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17659:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"arguments":[{"id":3331,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"17670:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":3330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17664:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3329,"name":"uint8","nodeType":"ElementaryTypeName","src":"17664:5:15","typeDescriptions":{}}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17664:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"17659:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3334,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17658:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17635:41:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3336,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17634:43:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17681:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17634:48:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3339,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17633:50:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3433,"nodeType":"Block","src":"18328:62:15","statements":[{"expression":{"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3426,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"18346:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3429,"indexExpression":{"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18353:14:15","subExpression":{"id":3427,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"18353:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18346:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3430,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"18371:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"18346:29:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3432,"nodeType":"ExpressionStatement","src":"18346:29:15"}]},"id":3434,"nodeType":"IfStatement","src":"17629:761:15","trueBody":{"id":3425,"nodeType":"Block","src":"17685:637:15","statements":[{"expression":{"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3340,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"17703:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3343,"indexExpression":{"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17710:14:15","subExpression":{"id":3341,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"17710:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17703:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"5c","id":3344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17728:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_731553fa98541ade8b78284229adfe09a819380dee9244baac20dd1e0aa24095","typeString":"literal_string \"\\\""},"value":"\\"},"src":"17703:29:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3346,"nodeType":"ExpressionStatement","src":"17703:29:15"},{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3347,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"17754:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783038","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17762:4:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x08"},"src":"17754:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3357,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"17823:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783039","id":3358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17831:4:15","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"0x09"},"src":"17823:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3367,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"17892:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783061","id":3368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17900:4:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"0x0a"},"src":"17892:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"17961:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783063","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17969:4:15","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"0x0c"},"src":"17961:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3387,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"18030:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783064","id":3388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18038:4:15","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"0x0d"},"src":"18030:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3397,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"18099:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783563","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18107:4:15","typeDescriptions":{"typeIdentifier":"t_rational_92_by_1","typeString":"int_const 92"},"value":"0x5c"},"src":"18099:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3407,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"18169:4:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783232","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18177:4:15","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"src":"18169:12:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3418,"nodeType":"IfStatement","src":"18165:143:15","trueBody":{"id":3417,"nodeType":"Block","src":"18183:125:15","statements":[{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3410,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"18261:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3413,"indexExpression":{"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18268:14:15","subExpression":{"id":3411,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"18268:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18261:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"22","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18286:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""},"src":"18261:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3416,"nodeType":"ExpressionStatement","src":"18261:28:15"}]}},"id":3419,"nodeType":"IfStatement","src":"18095:213:15","trueBody":{"expression":{"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3400,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"18113:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3403,"indexExpression":{"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18120:14:15","subExpression":{"id":3401,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"18120:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18113:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"5c","id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18138:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_731553fa98541ade8b78284229adfe09a819380dee9244baac20dd1e0aa24095","typeString":"literal_string \"\\\""},"value":"\\"},"src":"18113:29:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3406,"nodeType":"ExpressionStatement","src":"18113:29:15"}},"id":3420,"nodeType":"IfStatement","src":"18026:282:15","trueBody":{"expression":{"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3390,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"18044:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3393,"indexExpression":{"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18051:14:15","subExpression":{"id":3391,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"18051:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18044:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"72","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18069:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_414f72a4d550cad29f17d9d99a4af64b3776ec5538cd440cef0f03fef2e9e010","typeString":"literal_string \"r\""},"value":"r"},"src":"18044:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3396,"nodeType":"ExpressionStatement","src":"18044:28:15"}},"id":3421,"nodeType":"IfStatement","src":"17957:351:15","trueBody":{"expression":{"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3380,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"17975:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3383,"indexExpression":{"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17982:14:15","subExpression":{"id":3381,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"17982:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17975:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18000:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d1e8aeb79500496ef3dc2e57ba746a8315d048b7a664a2bf948db4fa91960483","typeString":"literal_string \"f\""},"value":"f"},"src":"17975:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3386,"nodeType":"ExpressionStatement","src":"17975:28:15"}},"id":3422,"nodeType":"IfStatement","src":"17888:420:15","trueBody":{"expression":{"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3370,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"17906:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3373,"indexExpression":{"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17913:14:15","subExpression":{"id":3371,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"17913:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17906:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"6e","id":3374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17931:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b4ecedb4964a40fe416b16c7bd8b46092040ec42ef0aa69e59f09872f105cf3","typeString":"literal_string \"n\""},"value":"n"},"src":"17906:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3376,"nodeType":"ExpressionStatement","src":"17906:28:15"}},"id":3423,"nodeType":"IfStatement","src":"17819:489:15","trueBody":{"expression":{"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3360,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"17837:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3363,"indexExpression":{"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17844:14:15","subExpression":{"id":3361,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"17844:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17837:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74","id":3364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17862:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cac1bb71f0a97c8ac94ca9546b43178a9ad254c7b757ac07433aa6df35cd8089","typeString":"literal_string \"t\""},"value":"t"},"src":"17837:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3366,"nodeType":"ExpressionStatement","src":"17837:28:15"}},"id":3424,"nodeType":"IfStatement","src":"17750:558:15","trueBody":{"expression":{"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3350,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"17768:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3353,"indexExpression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17775:14:15","subExpression":{"id":3351,"name":"outputLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"17775:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17768:22:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"62","id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17793:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5553de315e0edf504d9150af82dafa5c4667fa618ed0a6f19c69b41166c5510","typeString":"literal_string \"b\""},"value":"b"},"src":"17768:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3356,"nodeType":"ExpressionStatement","src":"17768:28:15"}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"17522:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3311,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"17526:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17533:6:15","memberName":"length","nodeType":"MemberAccess","src":"17526:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17522:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3436,"initializationExpression":{"assignments":[3308],"declarations":[{"constant":false,"id":3308,"mutability":"mutable","name":"i","nameLocation":"17519:1:15","nodeType":"VariableDeclaration","scope":3436,"src":"17511:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3307,"name":"uint256","nodeType":"ElementaryTypeName","src":"17511:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3309,"nodeType":"VariableDeclarationStatement","src":"17511:9:15"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17541:3:15","subExpression":{"id":3314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"17543:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3316,"nodeType":"ExpressionStatement","src":"17541:3:15"},"nodeType":"ForStatement","src":"17506:894:15"},{"AST":{"nativeSrc":"18498:129:15","nodeType":"YulBlock","src":"18498:129:15","statements":[{"expression":{"arguments":[{"name":"output","nativeSrc":"18519:6:15","nodeType":"YulIdentifier","src":"18519:6:15"},{"name":"outputLength","nativeSrc":"18527:12:15","nodeType":"YulIdentifier","src":"18527:12:15"}],"functionName":{"name":"mstore","nativeSrc":"18512:6:15","nodeType":"YulIdentifier","src":"18512:6:15"},"nativeSrc":"18512:28:15","nodeType":"YulFunctionCall","src":"18512:28:15"},"nativeSrc":"18512:28:15","nodeType":"YulExpressionStatement","src":"18512:28:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"18560:4:15","nodeType":"YulLiteral","src":"18560:4:15","type":"","value":"0x40"},{"arguments":[{"name":"output","nativeSrc":"18570:6:15","nodeType":"YulIdentifier","src":"18570:6:15"},{"arguments":[{"kind":"number","nativeSrc":"18582:1:15","nodeType":"YulLiteral","src":"18582:1:15","type":"","value":"5"},{"arguments":[{"kind":"number","nativeSrc":"18589:1:15","nodeType":"YulLiteral","src":"18589:1:15","type":"","value":"5"},{"arguments":[{"name":"outputLength","nativeSrc":"18596:12:15","nodeType":"YulIdentifier","src":"18596:12:15"},{"kind":"number","nativeSrc":"18610:2:15","nodeType":"YulLiteral","src":"18610:2:15","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"18592:3:15","nodeType":"YulIdentifier","src":"18592:3:15"},"nativeSrc":"18592:21:15","nodeType":"YulFunctionCall","src":"18592:21:15"}],"functionName":{"name":"shr","nativeSrc":"18585:3:15","nodeType":"YulIdentifier","src":"18585:3:15"},"nativeSrc":"18585:29:15","nodeType":"YulFunctionCall","src":"18585:29:15"}],"functionName":{"name":"shl","nativeSrc":"18578:3:15","nodeType":"YulIdentifier","src":"18578:3:15"},"nativeSrc":"18578:37:15","nodeType":"YulFunctionCall","src":"18578:37:15"}],"functionName":{"name":"add","nativeSrc":"18566:3:15","nodeType":"YulIdentifier","src":"18566:3:15"},"nativeSrc":"18566:50:15","nodeType":"YulFunctionCall","src":"18566:50:15"}],"functionName":{"name":"mstore","nativeSrc":"18553:6:15","nodeType":"YulIdentifier","src":"18553:6:15"},"nativeSrc":"18553:64:15","nodeType":"YulFunctionCall","src":"18553:64:15"},"nativeSrc":"18553:64:15","nodeType":"YulExpressionStatement","src":"18553:64:15"}]},"evmVersion":"cancun","externalReferences":[{"declaration":3294,"isOffset":false,"isSlot":false,"src":"18519:6:15","valueSize":1},{"declaration":3294,"isOffset":false,"isSlot":false,"src":"18570:6:15","valueSize":1},{"declaration":3304,"isOffset":false,"isSlot":false,"src":"18527:12:15","valueSize":1},{"declaration":3304,"isOffset":false,"isSlot":false,"src":"18596:12:15","valueSize":1}],"flags":["memory-safe"],"id":3437,"nodeType":"InlineAssembly","src":"18473:154:15"},{"expression":{"arguments":[{"id":3440,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"18651:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18644:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3438,"name":"string","nodeType":"ElementaryTypeName","src":"18644:6:15","typeDescriptions":{}}},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18644:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3285,"id":3442,"nodeType":"Return","src":"18637:21:15"}]},"documentation":{"id":3279,"nodeType":"StructuredDocumentation","src":"16674:576:15","text":" @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n characters that are not in this range, but other tooling may provide different results."},"id":3444,"implemented":true,"kind":"function","modifiers":[],"name":"escapeJSON","nameLocation":"17264:10:15","nodeType":"FunctionDefinition","parameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3281,"mutability":"mutable","name":"input","nameLocation":"17289:5:15","nodeType":"VariableDeclaration","scope":3444,"src":"17275:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3280,"name":"string","nodeType":"ElementaryTypeName","src":"17275:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17274:21:15"},"returnParameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3444,"src":"17319:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3283,"name":"string","nodeType":"ElementaryTypeName","src":"17319:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"17318:15:15"},"scope":3457,"src":"17255:1410:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3455,"nodeType":"Block","src":"19050:225:15","statements":[{"AST":{"nativeSrc":"19199:70:15","nodeType":"YulBlock","src":"19199:70:15","statements":[{"nativeSrc":"19213:46:15","nodeType":"YulAssignment","src":"19213:46:15","value":{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"19232:6:15","nodeType":"YulIdentifier","src":"19232:6:15"},{"arguments":[{"kind":"number","nativeSrc":"19244:4:15","nodeType":"YulLiteral","src":"19244:4:15","type":"","value":"0x20"},{"name":"offset","nativeSrc":"19250:6:15","nodeType":"YulIdentifier","src":"19250:6:15"}],"functionName":{"name":"add","nativeSrc":"19240:3:15","nodeType":"YulIdentifier","src":"19240:3:15"},"nativeSrc":"19240:17:15","nodeType":"YulFunctionCall","src":"19240:17:15"}],"functionName":{"name":"add","nativeSrc":"19228:3:15","nodeType":"YulIdentifier","src":"19228:3:15"},"nativeSrc":"19228:30:15","nodeType":"YulFunctionCall","src":"19228:30:15"}],"functionName":{"name":"mload","nativeSrc":"19222:5:15","nodeType":"YulIdentifier","src":"19222:5:15"},"nativeSrc":"19222:37:15","nodeType":"YulFunctionCall","src":"19222:37:15"},"variableNames":[{"name":"value","nativeSrc":"19213:5:15","nodeType":"YulIdentifier","src":"19213:5:15"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3447,"isOffset":false,"isSlot":false,"src":"19232:6:15","valueSize":1},{"declaration":3449,"isOffset":false,"isSlot":false,"src":"19250:6:15","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"19213:5:15","valueSize":1}],"flags":["memory-safe"],"id":3454,"nodeType":"InlineAssembly","src":"19174:95:15"}]},"documentation":{"id":3445,"nodeType":"StructuredDocumentation","src":"18671:268:15","text":" @dev Reads a bytes32 from a bytes array without bounds checking.\n NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n assembly block as such would prevent some optimizations."},"id":3456,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeReadBytesOffset","nameLocation":"18953:22:15","nodeType":"FunctionDefinition","parameters":{"id":3450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"buffer","nameLocation":"18989:6:15","nodeType":"VariableDeclaration","scope":3456,"src":"18976:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3446,"name":"bytes","nodeType":"ElementaryTypeName","src":"18976:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3449,"mutability":"mutable","name":"offset","nameLocation":"19005:6:15","nodeType":"VariableDeclaration","scope":3456,"src":"18997:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3448,"name":"uint256","nodeType":"ElementaryTypeName","src":"18997:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18975:37:15"},"returnParameters":{"id":3453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3452,"mutability":"mutable","name":"value","nameLocation":"19043:5:15","nodeType":"VariableDeclaration","scope":3456,"src":"19035:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19035:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"19034:15:15"},"scope":3457,"src":"18944:331:15","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3458,"src":"297:18980:15","usedErrors":[2115,2118,2121],"usedEvents":[]}],"src":"101:19177:15"}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"id":16,"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[3805]},"id":3806,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3459,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":3460,"nodeType":"StructuredDocumentation","src":"138:205:16","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3805,"linearizedBaseContracts":[3805],"name":"ECDSA","nameLocation":"352:5:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":3465,"members":[{"id":3461,"name":"NoError","nameLocation":"392:7:16","nodeType":"EnumValue","src":"392:7:16"},{"id":3462,"name":"InvalidSignature","nameLocation":"409:16:16","nodeType":"EnumValue","src":"409:16:16"},{"id":3463,"name":"InvalidSignatureLength","nameLocation":"435:22:16","nodeType":"EnumValue","src":"435:22:16"},{"id":3464,"name":"InvalidSignatureS","nameLocation":"467:17:16","nodeType":"EnumValue","src":"467:17:16"}],"name":"RecoverError","nameLocation":"369:12:16","nodeType":"EnumDefinition","src":"364:126:16"},{"documentation":{"id":3466,"nodeType":"StructuredDocumentation","src":"496:63:16","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":3468,"name":"ECDSAInvalidSignature","nameLocation":"570:21:16","nodeType":"ErrorDefinition","parameters":{"id":3467,"nodeType":"ParameterList","parameters":[],"src":"591:2:16"},"src":"564:30:16"},{"documentation":{"id":3469,"nodeType":"StructuredDocumentation","src":"600:60:16","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":3473,"name":"ECDSAInvalidSignatureLength","nameLocation":"671:27:16","nodeType":"ErrorDefinition","parameters":{"id":3472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"length","nameLocation":"707:6:16","nodeType":"VariableDeclaration","scope":3473,"src":"699:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3470,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:16:16"},"src":"665:50:16"},{"documentation":{"id":3474,"nodeType":"StructuredDocumentation","src":"721:85:16","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":3478,"name":"ECDSAInvalidSignatureS","nameLocation":"817:22:16","nodeType":"ErrorDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"s","nameLocation":"848:1:16","nodeType":"VariableDeclaration","scope":3478,"src":"840:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"840:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:11:16"},"src":"811:40:16"},{"body":{"id":3530,"nodeType":"Block","src":"2285:622:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3493,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"2299:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2309:6:16","memberName":"length","nodeType":"MemberAccess","src":"2299:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2319:2:16","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2299:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3528,"nodeType":"Block","src":"2793:108:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2823:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2815:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3515,"name":"address","nodeType":"ElementaryTypeName","src":"2815:7:16","typeDescriptions":{}}},"id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2815:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3519,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"2827:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2840:22:16","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3463,"src":"2827:35:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":3523,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"2872:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2882:6:16","memberName":"length","nodeType":"MemberAccess","src":"2872:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2864:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2864:7:16","typeDescriptions":{}}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3526,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2814:76:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3492,"id":3527,"nodeType":"Return","src":"2807:83:16"}]},"id":3529,"nodeType":"IfStatement","src":"2295:606:16","trueBody":{"id":3514,"nodeType":"Block","src":"2323:464:16","statements":[{"assignments":[3498],"declarations":[{"constant":false,"id":3498,"mutability":"mutable","name":"r","nameLocation":"2345:1:16","nodeType":"VariableDeclaration","scope":3514,"src":"2337:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2337:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3499,"nodeType":"VariableDeclarationStatement","src":"2337:9:16"},{"assignments":[3501],"declarations":[{"constant":false,"id":3501,"mutability":"mutable","name":"s","nameLocation":"2368:1:16","nodeType":"VariableDeclaration","scope":3514,"src":"2360:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2360:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3502,"nodeType":"VariableDeclarationStatement","src":"2360:9:16"},{"assignments":[3504],"declarations":[{"constant":false,"id":3504,"mutability":"mutable","name":"v","nameLocation":"2389:1:16","nodeType":"VariableDeclaration","scope":3514,"src":"2383:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3503,"name":"uint8","nodeType":"ElementaryTypeName","src":"2383:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3505,"nodeType":"VariableDeclarationStatement","src":"2383:7:16"},{"AST":{"nativeSrc":"2560:171:16","nodeType":"YulBlock","src":"2560:171:16","statements":[{"nativeSrc":"2578:32:16","nodeType":"YulAssignment","src":"2578:32:16","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2593:9:16","nodeType":"YulIdentifier","src":"2593:9:16"},{"kind":"number","nativeSrc":"2604:4:16","nodeType":"YulLiteral","src":"2604:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2589:3:16","nodeType":"YulIdentifier","src":"2589:3:16"},"nativeSrc":"2589:20:16","nodeType":"YulFunctionCall","src":"2589:20:16"}],"functionName":{"name":"mload","nativeSrc":"2583:5:16","nodeType":"YulIdentifier","src":"2583:5:16"},"nativeSrc":"2583:27:16","nodeType":"YulFunctionCall","src":"2583:27:16"},"variableNames":[{"name":"r","nativeSrc":"2578:1:16","nodeType":"YulIdentifier","src":"2578:1:16"}]},{"nativeSrc":"2627:32:16","nodeType":"YulAssignment","src":"2627:32:16","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2642:9:16","nodeType":"YulIdentifier","src":"2642:9:16"},{"kind":"number","nativeSrc":"2653:4:16","nodeType":"YulLiteral","src":"2653:4:16","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2638:3:16","nodeType":"YulIdentifier","src":"2638:3:16"},"nativeSrc":"2638:20:16","nodeType":"YulFunctionCall","src":"2638:20:16"}],"functionName":{"name":"mload","nativeSrc":"2632:5:16","nodeType":"YulIdentifier","src":"2632:5:16"},"nativeSrc":"2632:27:16","nodeType":"YulFunctionCall","src":"2632:27:16"},"variableNames":[{"name":"s","nativeSrc":"2627:1:16","nodeType":"YulIdentifier","src":"2627:1:16"}]},{"nativeSrc":"2676:41:16","nodeType":"YulAssignment","src":"2676:41:16","value":{"arguments":[{"kind":"number","nativeSrc":"2686:1:16","nodeType":"YulLiteral","src":"2686:1:16","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2699:9:16","nodeType":"YulIdentifier","src":"2699:9:16"},{"kind":"number","nativeSrc":"2710:4:16","nodeType":"YulLiteral","src":"2710:4:16","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2695:3:16","nodeType":"YulIdentifier","src":"2695:3:16"},"nativeSrc":"2695:20:16","nodeType":"YulFunctionCall","src":"2695:20:16"}],"functionName":{"name":"mload","nativeSrc":"2689:5:16","nodeType":"YulIdentifier","src":"2689:5:16"},"nativeSrc":"2689:27:16","nodeType":"YulFunctionCall","src":"2689:27:16"}],"functionName":{"name":"byte","nativeSrc":"2681:4:16","nodeType":"YulIdentifier","src":"2681:4:16"},"nativeSrc":"2681:36:16","nodeType":"YulFunctionCall","src":"2681:36:16"},"variableNames":[{"name":"v","nativeSrc":"2676:1:16","nodeType":"YulIdentifier","src":"2676:1:16"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3498,"isOffset":false,"isSlot":false,"src":"2578:1:16","valueSize":1},{"declaration":3501,"isOffset":false,"isSlot":false,"src":"2627:1:16","valueSize":1},{"declaration":3483,"isOffset":false,"isSlot":false,"src":"2593:9:16","valueSize":1},{"declaration":3483,"isOffset":false,"isSlot":false,"src":"2642:9:16","valueSize":1},{"declaration":3483,"isOffset":false,"isSlot":false,"src":"2699:9:16","valueSize":1},{"declaration":3504,"isOffset":false,"isSlot":false,"src":"2676:1:16","valueSize":1}],"flags":["memory-safe"],"id":3506,"nodeType":"InlineAssembly","src":"2535:196:16"},{"expression":{"arguments":[{"id":3508,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"2762:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3509,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"2768:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3510,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"2771:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3511,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"2774:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3507,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3531,3611,3719],"referencedDeclaration":3719,"src":"2751:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3492,"id":3513,"nodeType":"Return","src":"2744:32:16"}]}}]},"documentation":{"id":3479,"nodeType":"StructuredDocumentation","src":"857:1267:16","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":3531,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2138:10:16","nodeType":"FunctionDefinition","parameters":{"id":3484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3481,"mutability":"mutable","name":"hash","nameLocation":"2166:4:16","nodeType":"VariableDeclaration","scope":3531,"src":"2158:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2158:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3483,"mutability":"mutable","name":"signature","nameLocation":"2193:9:16","nodeType":"VariableDeclaration","scope":3531,"src":"2180:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3482,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2148:60:16"},"returnParameters":{"id":3492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3486,"mutability":"mutable","name":"recovered","nameLocation":"2240:9:16","nodeType":"VariableDeclaration","scope":3531,"src":"2232:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3485,"name":"address","nodeType":"ElementaryTypeName","src":"2232:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3489,"mutability":"mutable","name":"err","nameLocation":"2264:3:16","nodeType":"VariableDeclaration","scope":3531,"src":"2251:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3488,"nodeType":"UserDefinedTypeName","pathNode":{"id":3487,"name":"RecoverError","nameLocations":["2251:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"2251:12:16"},"referencedDeclaration":3465,"src":"2251:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3491,"mutability":"mutable","name":"errArg","nameLocation":"2277:6:16","nodeType":"VariableDeclaration","scope":3531,"src":"2269:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2269:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2231:53:16"},"scope":3805,"src":"2129:778:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3560,"nodeType":"Block","src":"3801:168:16","statements":[{"assignments":[3542,3545,3547],"declarations":[{"constant":false,"id":3542,"mutability":"mutable","name":"recovered","nameLocation":"3820:9:16","nodeType":"VariableDeclaration","scope":3560,"src":"3812:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3541,"name":"address","nodeType":"ElementaryTypeName","src":"3812:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"error","nameLocation":"3844:5:16","nodeType":"VariableDeclaration","scope":3560,"src":"3831:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3544,"nodeType":"UserDefinedTypeName","pathNode":{"id":3543,"name":"RecoverError","nameLocations":["3831:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"3831:12:16"},"referencedDeclaration":3465,"src":"3831:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"errorArg","nameLocation":"3859:8:16","nodeType":"VariableDeclaration","scope":3560,"src":"3851:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3851:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3552,"initialValue":{"arguments":[{"id":3549,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"3882:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3550,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"3888:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3548,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3531,3611,3719],"referencedDeclaration":3531,"src":"3871:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3871:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3811:87:16"},{"expression":{"arguments":[{"id":3554,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"3920:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"id":3555,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"3927:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3553,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"3908:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3465_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3908:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3557,"nodeType":"ExpressionStatement","src":"3908:28:16"},{"expression":{"id":3558,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"3953:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3540,"id":3559,"nodeType":"Return","src":"3946:16:16"}]},"documentation":{"id":3532,"nodeType":"StructuredDocumentation","src":"2913:796:16","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":3561,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3723:7:16","nodeType":"FunctionDefinition","parameters":{"id":3537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3534,"mutability":"mutable","name":"hash","nameLocation":"3739:4:16","nodeType":"VariableDeclaration","scope":3561,"src":"3731:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3731:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3536,"mutability":"mutable","name":"signature","nameLocation":"3758:9:16","nodeType":"VariableDeclaration","scope":3561,"src":"3745:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3535,"name":"bytes","nodeType":"ElementaryTypeName","src":"3745:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3730:38:16"},"returnParameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3561,"src":"3792:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"3792:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3791:9:16"},"scope":3805,"src":"3714:255:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3610,"nodeType":"Block","src":"4348:342:16","statements":[{"id":3609,"nodeType":"UncheckedBlock","src":"4358:326:16","statements":[{"assignments":[3579],"declarations":[{"constant":false,"id":3579,"mutability":"mutable","name":"s","nameLocation":"4390:1:16","nodeType":"VariableDeclaration","scope":3609,"src":"4382:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4382:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3586,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3580,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"4394:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4407:66:16","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4399:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4399:7:16","typeDescriptions":{}}},"id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4399:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4394:80:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4382:92:16"},{"assignments":[3588],"declarations":[{"constant":false,"id":3588,"mutability":"mutable","name":"v","nameLocation":"4591:1:16","nodeType":"VariableDeclaration","scope":3609,"src":"4585:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3587,"name":"uint8","nodeType":"ElementaryTypeName","src":"4585:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3601,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3593,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"4610:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4602:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3591,"name":"uint256","nodeType":"ElementaryTypeName","src":"4602:7:16","typeDescriptions":{}}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4602:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4617:3:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4602:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4601:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4624:2:16","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4601:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4595:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3589,"name":"uint8","nodeType":"ElementaryTypeName","src":"4595:5:16","typeDescriptions":{}}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4595:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4585:42:16"},{"expression":{"arguments":[{"id":3603,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"4659:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3604,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"4665:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3605,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"4668:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3606,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"4671:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3602,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3531,3611,3719],"referencedDeclaration":3719,"src":"4648:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3577,"id":3608,"nodeType":"Return","src":"4641:32:16"}]}]},"documentation":{"id":3562,"nodeType":"StructuredDocumentation","src":"3975:205:16","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]"},"id":3611,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4194:10:16","nodeType":"FunctionDefinition","parameters":{"id":3569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3564,"mutability":"mutable","name":"hash","nameLocation":"4222:4:16","nodeType":"VariableDeclaration","scope":3611,"src":"4214:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4214:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3566,"mutability":"mutable","name":"r","nameLocation":"4244:1:16","nodeType":"VariableDeclaration","scope":3611,"src":"4236:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4236:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3568,"mutability":"mutable","name":"vs","nameLocation":"4263:2:16","nodeType":"VariableDeclaration","scope":3611,"src":"4255:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4204:67:16"},"returnParameters":{"id":3577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3571,"mutability":"mutable","name":"recovered","nameLocation":"4303:9:16","nodeType":"VariableDeclaration","scope":3611,"src":"4295:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3570,"name":"address","nodeType":"ElementaryTypeName","src":"4295:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3574,"mutability":"mutable","name":"err","nameLocation":"4327:3:16","nodeType":"VariableDeclaration","scope":3611,"src":"4314:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3573,"nodeType":"UserDefinedTypeName","pathNode":{"id":3572,"name":"RecoverError","nameLocations":["4314:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"4314:12:16"},"referencedDeclaration":3465,"src":"4314:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3576,"mutability":"mutable","name":"errArg","nameLocation":"4340:6:16","nodeType":"VariableDeclaration","scope":3611,"src":"4332:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4332:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4294:53:16"},"scope":3805,"src":"4185:505:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3643,"nodeType":"Block","src":"4903:164:16","statements":[{"assignments":[3624,3627,3629],"declarations":[{"constant":false,"id":3624,"mutability":"mutable","name":"recovered","nameLocation":"4922:9:16","nodeType":"VariableDeclaration","scope":3643,"src":"4914:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3623,"name":"address","nodeType":"ElementaryTypeName","src":"4914:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3627,"mutability":"mutable","name":"error","nameLocation":"4946:5:16","nodeType":"VariableDeclaration","scope":3643,"src":"4933:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3626,"nodeType":"UserDefinedTypeName","pathNode":{"id":3625,"name":"RecoverError","nameLocations":["4933:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"4933:12:16"},"referencedDeclaration":3465,"src":"4933:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"errorArg","nameLocation":"4961:8:16","nodeType":"VariableDeclaration","scope":3643,"src":"4953:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4953:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3635,"initialValue":{"arguments":[{"id":3631,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"4984:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3632,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"4990:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3633,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"4993:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3630,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3531,3611,3719],"referencedDeclaration":3611,"src":"4973:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4973:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4913:83:16"},{"expression":{"arguments":[{"id":3637,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"5018:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"id":3638,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"5025:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3636,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"5006:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3465_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5006:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3640,"nodeType":"ExpressionStatement","src":"5006:28:16"},{"expression":{"id":3641,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"5051:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3622,"id":3642,"nodeType":"Return","src":"5044:16:16"}]},"documentation":{"id":3612,"nodeType":"StructuredDocumentation","src":"4696:116:16","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":3644,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4826:7:16","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3614,"mutability":"mutable","name":"hash","nameLocation":"4842:4:16","nodeType":"VariableDeclaration","scope":3644,"src":"4834:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4834:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"r","nameLocation":"4856:1:16","nodeType":"VariableDeclaration","scope":3644,"src":"4848:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4848:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"vs","nameLocation":"4867:2:16","nodeType":"VariableDeclaration","scope":3644,"src":"4859:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4859:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4833:37:16"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3644,"src":"4894:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3620,"name":"address","nodeType":"ElementaryTypeName","src":"4894:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4893:9:16"},"scope":3805,"src":"4817:250:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3718,"nodeType":"Block","src":"5382:1372:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3665,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"6278:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6270:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"6270:7:16","typeDescriptions":{}}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6270:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6283:66:16","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6270:79:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3679,"nodeType":"IfStatement","src":"6266:164:16","trueBody":{"id":3678,"nodeType":"Block","src":"6351:79:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6381:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6373:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3669,"name":"address","nodeType":"ElementaryTypeName","src":"6373:7:16","typeDescriptions":{}}},"id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3673,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"6385:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6398:17:16","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"6385:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"id":3675,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"6417:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3676,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6372:47:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3662,"id":3677,"nodeType":"Return","src":"6365:54:16"}]}},{"assignments":[3681],"declarations":[{"constant":false,"id":3681,"mutability":"mutable","name":"signer","nameLocation":"6532:6:16","nodeType":"VariableDeclaration","scope":3718,"src":"6524:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"6524:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3688,"initialValue":{"arguments":[{"id":3683,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"6551:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3684,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"6557:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3685,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"6560:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3686,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"6563:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3682,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967290,"src":"6541:9:16","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6541:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6524:41:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3689,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"6579:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6597:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6589:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"6589:7:16","typeDescriptions":{}}},"id":3693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6589:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6579:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3708,"nodeType":"IfStatement","src":"6575:113:16","trueBody":{"id":3707,"nodeType":"Block","src":"6601:87:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6623:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3695,"name":"address","nodeType":"ElementaryTypeName","src":"6623:7:16","typeDescriptions":{}}},"id":3698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6623:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3699,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"6635:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6648:16:16","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"6635:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6674:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6666:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3701,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6666:7:16","typeDescriptions":{}}},"id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6666:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6622:55:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3662,"id":3706,"nodeType":"Return","src":"6615:62:16"}]}},{"expression":{"components":[{"id":3709,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"6706:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3710,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"6714:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6727:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3461,"src":"6714:20:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":3714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6744:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6736:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6736:7:16","typeDescriptions":{}}},"id":3715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6736:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3716,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6705:42:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3662,"id":3717,"nodeType":"Return","src":"6698:49:16"}]},"documentation":{"id":3645,"nodeType":"StructuredDocumentation","src":"5073:125:16","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3719,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5212:10:16","nodeType":"FunctionDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"hash","nameLocation":"5240:4:16","nodeType":"VariableDeclaration","scope":3719,"src":"5232:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5232:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"v","nameLocation":"5260:1:16","nodeType":"VariableDeclaration","scope":3719,"src":"5254:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3648,"name":"uint8","nodeType":"ElementaryTypeName","src":"5254:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"r","nameLocation":"5279:1:16","nodeType":"VariableDeclaration","scope":3719,"src":"5271:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5271:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3653,"mutability":"mutable","name":"s","nameLocation":"5298:1:16","nodeType":"VariableDeclaration","scope":3719,"src":"5290:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5290:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5222:83:16"},"returnParameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3656,"mutability":"mutable","name":"recovered","nameLocation":"5337:9:16","nodeType":"VariableDeclaration","scope":3719,"src":"5329:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3655,"name":"address","nodeType":"ElementaryTypeName","src":"5329:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3659,"mutability":"mutable","name":"err","nameLocation":"5361:3:16","nodeType":"VariableDeclaration","scope":3719,"src":"5348:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3658,"nodeType":"UserDefinedTypeName","pathNode":{"id":3657,"name":"RecoverError","nameLocations":["5348:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"5348:12:16"},"referencedDeclaration":3465,"src":"5348:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3661,"mutability":"mutable","name":"errArg","nameLocation":"5374:6:16","nodeType":"VariableDeclaration","scope":3719,"src":"5366:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5366:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5328:53:16"},"scope":3805,"src":"5203:1551:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3754,"nodeType":"Block","src":"6981:166:16","statements":[{"assignments":[3734,3737,3739],"declarations":[{"constant":false,"id":3734,"mutability":"mutable","name":"recovered","nameLocation":"7000:9:16","nodeType":"VariableDeclaration","scope":3754,"src":"6992:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3733,"name":"address","nodeType":"ElementaryTypeName","src":"6992:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3737,"mutability":"mutable","name":"error","nameLocation":"7024:5:16","nodeType":"VariableDeclaration","scope":3754,"src":"7011:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3736,"nodeType":"UserDefinedTypeName","pathNode":{"id":3735,"name":"RecoverError","nameLocations":["7011:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"7011:12:16"},"referencedDeclaration":3465,"src":"7011:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"errorArg","nameLocation":"7039:8:16","nodeType":"VariableDeclaration","scope":3754,"src":"7031:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3738,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7031:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3746,"initialValue":{"arguments":[{"id":3741,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"7062:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3742,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3724,"src":"7068:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3743,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"7071:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3744,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3728,"src":"7074:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3740,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3531,3611,3719],"referencedDeclaration":3719,"src":"7051:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7051:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3465_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"6991:85:16"},{"expression":{"arguments":[{"id":3748,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"7098:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},{"id":3749,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"7105:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3747,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3804,"src":"7086:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3465_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7086:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3751,"nodeType":"ExpressionStatement","src":"7086:28:16"},{"expression":{"id":3752,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"7131:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3732,"id":3753,"nodeType":"Return","src":"7124:16:16"}]},"documentation":{"id":3720,"nodeType":"StructuredDocumentation","src":"6760:122:16","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3755,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6896:7:16","nodeType":"FunctionDefinition","parameters":{"id":3729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"mutability":"mutable","name":"hash","nameLocation":"6912:4:16","nodeType":"VariableDeclaration","scope":3755,"src":"6904:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6904:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3724,"mutability":"mutable","name":"v","nameLocation":"6924:1:16","nodeType":"VariableDeclaration","scope":3755,"src":"6918:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3723,"name":"uint8","nodeType":"ElementaryTypeName","src":"6918:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3726,"mutability":"mutable","name":"r","nameLocation":"6935:1:16","nodeType":"VariableDeclaration","scope":3755,"src":"6927:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3725,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6927:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3728,"mutability":"mutable","name":"s","nameLocation":"6946:1:16","nodeType":"VariableDeclaration","scope":3755,"src":"6938:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3727,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6938:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6903:45:16"},"returnParameters":{"id":3732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3755,"src":"6972:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3730,"name":"address","nodeType":"ElementaryTypeName","src":"6972:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6971:9:16"},"scope":3805,"src":"6887:260:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3803,"nodeType":"Block","src":"7352:460:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3764,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"7366:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3765,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"7375:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7388:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3461,"src":"7375:20:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"src":"7366:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3770,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"7462:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3771,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"7471:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7484:16:16","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3462,"src":"7471:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"src":"7462:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3778,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"7567:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3779,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"7576:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7589:22:16","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3463,"src":"7576:35:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"src":"7567:44:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3790,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"7701:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3791,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"7710:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3465_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7723:17:16","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3464,"src":"7710:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"src":"7701:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3799,"nodeType":"IfStatement","src":"7697:109:16","trueBody":{"id":3798,"nodeType":"Block","src":"7742:64:16","statements":[{"errorCall":{"arguments":[{"id":3795,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"7786:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3794,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"7763:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32) pure returns (error)"}},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7763:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3797,"nodeType":"RevertStatement","src":"7756:39:16"}]}},"id":3800,"nodeType":"IfStatement","src":"7563:243:16","trueBody":{"id":3789,"nodeType":"Block","src":"7613:78:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3785,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"7670:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7662:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3783,"name":"uint256","nodeType":"ElementaryTypeName","src":"7662:7:16","typeDescriptions":{}}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7662:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3782,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"7634:27:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7634:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3788,"nodeType":"RevertStatement","src":"7627:53:16"}]}},"id":3801,"nodeType":"IfStatement","src":"7458:348:16","trueBody":{"id":3777,"nodeType":"Block","src":"7502:55:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3774,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"7523:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7523:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3776,"nodeType":"RevertStatement","src":"7516:30:16"}]}},"id":3802,"nodeType":"IfStatement","src":"7362:444:16","trueBody":{"id":3769,"nodeType":"Block","src":"7397:55:16","statements":[{"functionReturnParameters":3763,"id":3768,"nodeType":"Return","src":"7411:7:16"}]}}]},"documentation":{"id":3756,"nodeType":"StructuredDocumentation","src":"7153:122:16","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":3804,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7289:11:16","nodeType":"FunctionDefinition","parameters":{"id":3762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3759,"mutability":"mutable","name":"error","nameLocation":"7314:5:16","nodeType":"VariableDeclaration","scope":3804,"src":"7301:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3758,"nodeType":"UserDefinedTypeName","pathNode":{"id":3757,"name":"RecoverError","nameLocations":["7301:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3465,"src":"7301:12:16"},"referencedDeclaration":3465,"src":"7301:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3465","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3761,"mutability":"mutable","name":"errorArg","nameLocation":"7329:8:16","nodeType":"VariableDeclaration","scope":3804,"src":"7321:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7321:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7300:38:16"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[],"src":"7352:0:16"},"scope":3805,"src":"7280:532:16","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3806,"src":"344:7470:16","usedErrors":[3468,3473,3478],"usedEvents":[]}],"src":"112:7703:16"}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"id":17,"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"EIP712":[4032],"IERC5267":[650],"MessageHashUtils":[4118],"ShortString":[1720],"ShortStrings":[1931]},"id":4033,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3807,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","file":"./MessageHashUtils.sol","id":3809,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4033,"sourceUnit":4119,"src":"139:56:17","symbolAliases":[{"foreign":{"id":3808,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"147:16:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","file":"../ShortStrings.sol","id":3812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4033,"sourceUnit":1932,"src":"196:62:17","symbolAliases":[{"foreign":{"id":3810,"name":"ShortStrings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"204:12:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3811,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"218:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","file":"../../interfaces/IERC5267.sol","id":3814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4033,"sourceUnit":651,"src":"259:55:17","symbolAliases":[{"foreign":{"id":3813,"name":"IERC5267","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"267:8:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3816,"name":"IERC5267","nameLocations":["1988:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":650,"src":"1988:8:17"},"id":3817,"nodeType":"InheritanceSpecifier","src":"1988:8:17"}],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":3815,"nodeType":"StructuredDocumentation","src":"316:1643:17","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"},"fullyImplemented":true,"id":4032,"linearizedBaseContracts":[4032,650],"name":"EIP712","nameLocation":"1978:6:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3819,"libraryName":{"id":3818,"name":"ShortStrings","nameLocations":["2009:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1931,"src":"2009:12:17"},"nodeType":"UsingForDirective","src":"2003:25:17"},{"constant":true,"id":3824,"mutability":"constant","name":"TYPE_HASH","nameLocation":"2059:9:17","nodeType":"VariableDeclaration","scope":4032,"src":"2034:140:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2034:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2089:84:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3821,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"2079:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2079:95:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3826,"mutability":"immutable","name":"_cachedDomainSeparator","nameLocation":"2399:22:17","nodeType":"VariableDeclaration","scope":4032,"src":"2373:48:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3825,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2373:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3828,"mutability":"immutable","name":"_cachedChainId","nameLocation":"2453:14:17","nodeType":"VariableDeclaration","scope":4032,"src":"2427:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"2427:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3830,"mutability":"immutable","name":"_cachedThis","nameLocation":"2499:11:17","nodeType":"VariableDeclaration","scope":4032,"src":"2473:37:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3829,"name":"address","nodeType":"ElementaryTypeName","src":"2473:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":3832,"mutability":"immutable","name":"_hashedName","nameLocation":"2543:11:17","nodeType":"VariableDeclaration","scope":4032,"src":"2517:37:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2517:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3834,"mutability":"immutable","name":"_hashedVersion","nameLocation":"2586:14:17","nodeType":"VariableDeclaration","scope":4032,"src":"2560:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2560:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3837,"mutability":"immutable","name":"_name","nameLocation":"2637:5:17","nodeType":"VariableDeclaration","scope":4032,"src":"2607:35:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":3836,"nodeType":"UserDefinedTypeName","pathNode":{"id":3835,"name":"ShortString","nameLocations":["2607:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2607:11:17"},"referencedDeclaration":1720,"src":"2607:11:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":3840,"mutability":"immutable","name":"_version","nameLocation":"2678:8:17","nodeType":"VariableDeclaration","scope":4032,"src":"2648:38:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"},"typeName":{"id":3839,"nodeType":"UserDefinedTypeName","pathNode":{"id":3838,"name":"ShortString","nameLocations":["2648:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2648:11:17"},"referencedDeclaration":1720,"src":"2648:11:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":3842,"mutability":"mutable","name":"_nameFallback","nameLocation":"2757:13:17","nodeType":"VariableDeclaration","scope":4032,"src":"2742:28:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3841,"name":"string","nodeType":"ElementaryTypeName","src":"2742:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":3844,"mutability":"mutable","name":"_versionFallback","nameLocation":"2841:16:17","nodeType":"VariableDeclaration","scope":4032,"src":"2826:31:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3843,"name":"string","nodeType":"ElementaryTypeName","src":"2826:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":3901,"nodeType":"Block","src":"3483:376:17","statements":[{"expression":{"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3852,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"3493:5:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3855,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"3532:13:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":3853,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"3501:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3506:25:17","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1872,"src":"3501:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1720_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3501:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"src":"3493:53:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"id":3858,"nodeType":"ExpressionStatement","src":"3493:53:17"},{"expression":{"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3859,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"3556:8:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3862,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3844,"src":"3601:16:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":3860,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"3567:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3575:25:17","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1872,"src":"3567:33:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1720_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3567:51:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"src":"3556:62:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"id":3865,"nodeType":"ExpressionStatement","src":"3556:62:17"},{"expression":{"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3866,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"3628:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3870,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"3658:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3652:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3868,"name":"bytes","nodeType":"ElementaryTypeName","src":"3652:5:17","typeDescriptions":{}}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3652:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3867,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3642:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3642:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3628:36:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3874,"nodeType":"ExpressionStatement","src":"3628:36:17"},{"expression":{"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3875,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"3674:14:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3879,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"3707:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3701:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3877,"name":"bytes","nodeType":"ElementaryTypeName","src":"3701:5:17","typeDescriptions":{}}},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3701:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3876,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3691:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3691:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3674:42:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3883,"nodeType":"ExpressionStatement","src":"3674:42:17"},{"expression":{"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3884,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"3727:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3885,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"3744:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3750:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"3744:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3727:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3888,"nodeType":"ExpressionStatement","src":"3727:30:17"},{"expression":{"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3889,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"3767:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":3890,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"3792:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3792:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3767:48:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3893,"nodeType":"ExpressionStatement","src":"3767:48:17"},{"expression":{"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3894,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"3825:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3897,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3847:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}],"id":3896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3839:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3895,"name":"address","nodeType":"ElementaryTypeName","src":"3839:7:17","typeDescriptions":{}}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3839:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3825:27:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3900,"nodeType":"ExpressionStatement","src":"3825:27:17"}]},"documentation":{"id":3845,"nodeType":"StructuredDocumentation","src":"2864:559:17","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":3902,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"name","nameLocation":"3454:4:17","nodeType":"VariableDeclaration","scope":3902,"src":"3440:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3846,"name":"string","nodeType":"ElementaryTypeName","src":"3440:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3849,"mutability":"mutable","name":"version","nameLocation":"3474:7:17","nodeType":"VariableDeclaration","scope":3902,"src":"3460:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3848,"name":"string","nodeType":"ElementaryTypeName","src":"3460:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3439:43:17"},"returnParameters":{"id":3851,"nodeType":"ParameterList","parameters":[],"src":"3483:0:17"},"scope":4032,"src":"3428:431:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3927,"nodeType":"Block","src":"4007:200:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3910,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4029:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}],"id":3909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4021:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3908,"name":"address","nodeType":"ElementaryTypeName","src":"4021:7:17","typeDescriptions":{}}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4021:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3912,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"4038:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4021:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3914,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"4053:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4059:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"4053:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3916,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"4070:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4053:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4021:63:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3925,"nodeType":"Block","src":"4146:55:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3922,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"4167:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4167:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3907,"id":3924,"nodeType":"Return","src":"4160:30:17"}]},"id":3926,"nodeType":"IfStatement","src":"4017:184:17","trueBody":{"id":3921,"nodeType":"Block","src":"4086:54:17","statements":[{"expression":{"id":3919,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"4107:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3907,"id":3920,"nodeType":"Return","src":"4100:29:17"}]}}]},"documentation":{"id":3903,"nodeType":"StructuredDocumentation","src":"3865:75:17","text":" @dev Returns the domain separator for the current chain."},"id":3928,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3954:18:17","nodeType":"FunctionDefinition","parameters":{"id":3904,"nodeType":"ParameterList","parameters":[],"src":"3972:2:17"},"returnParameters":{"id":3907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3928,"src":"3998:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3905,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3998:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3997:9:17"},"scope":4032,"src":"3945:262:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3948,"nodeType":"Block","src":"4277:115:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":3936,"name":"TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"4315:9:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3937,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"4326:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3938,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"4339:14:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3939,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"4355:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4361:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"4355:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3943,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4378:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}],"id":3942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4370:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"4370:7:17","typeDescriptions":{}}},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4370:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3934,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4304:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4308:6:17","memberName":"encode","nodeType":"MemberAccess","src":"4304:10:17","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4304:80:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3933,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"4294:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:91:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3932,"id":3947,"nodeType":"Return","src":"4287:98:17"}]},"id":3949,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"4222:21:17","nodeType":"FunctionDefinition","parameters":{"id":3929,"nodeType":"ParameterList","parameters":[],"src":"4243:2:17"},"returnParameters":{"id":3932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3949,"src":"4268:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4268:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4267:9:17"},"scope":4032,"src":"4213:179:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3964,"nodeType":"Block","src":"5103:90:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3959,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"5153:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5153:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3961,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"5175:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3957,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"5120:16:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MessageHashUtils_$4118_$","typeString":"type(library MessageHashUtils)"}},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5137:15:17","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":4117,"src":"5120:32:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5120:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3956,"id":3963,"nodeType":"Return","src":"5113:73:17"}]},"documentation":{"id":3950,"nodeType":"StructuredDocumentation","src":"4398:614:17","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":3965,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"5026:16:17","nodeType":"FunctionDefinition","parameters":{"id":3953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"mutability":"mutable","name":"structHash","nameLocation":"5051:10:17","nodeType":"VariableDeclaration","scope":3965,"src":"5043:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5043:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5042:20:17"},"returnParameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3965,"src":"5094:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5094:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5093:9:17"},"scope":4032,"src":"5017:176:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[649],"body":{"id":4006,"nodeType":"Block","src":"5571:229:17","statements":[{"expression":{"components":[{"hexValue":"0f","id":3984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5602:7:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":3985,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"5632:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5632:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3987,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"5659:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5659:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3989,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"5689:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5695:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"5689:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3993,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5724:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4032","typeString":"contract EIP712"}],"id":3992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5716:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3991,"name":"address","nodeType":"ElementaryTypeName","src":"5716:7:17","typeDescriptions":{}}},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5716:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5751:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5743:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3995,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5743:7:17","typeDescriptions":{}}},"id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5743:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5781:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5767:13:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":3999,"name":"uint256","nodeType":"ElementaryTypeName","src":"5771:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4000,"nodeType":"ArrayTypeName","src":"5771:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5767:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":4004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5588:205:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":3983,"id":4005,"nodeType":"Return","src":"5581:212:17"}]},"documentation":{"id":3966,"nodeType":"StructuredDocumentation","src":"5199:39:17","text":" @inheritdoc IERC5267"},"functionSelector":"84b0196e","id":4007,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"5252:12:17","nodeType":"FunctionDefinition","parameters":{"id":3967,"nodeType":"ParameterList","parameters":[],"src":"5264:2:17"},"returnParameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3969,"mutability":"mutable","name":"fields","nameLocation":"5348:6:17","nodeType":"VariableDeclaration","scope":4007,"src":"5341:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":3968,"name":"bytes1","nodeType":"ElementaryTypeName","src":"5341:6:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":3971,"mutability":"mutable","name":"name","nameLocation":"5382:4:17","nodeType":"VariableDeclaration","scope":4007,"src":"5368:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3970,"name":"string","nodeType":"ElementaryTypeName","src":"5368:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3973,"mutability":"mutable","name":"version","nameLocation":"5414:7:17","nodeType":"VariableDeclaration","scope":4007,"src":"5400:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3972,"name":"string","nodeType":"ElementaryTypeName","src":"5400:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3975,"mutability":"mutable","name":"chainId","nameLocation":"5443:7:17","nodeType":"VariableDeclaration","scope":4007,"src":"5435:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3974,"name":"uint256","nodeType":"ElementaryTypeName","src":"5435:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"verifyingContract","nameLocation":"5472:17:17","nodeType":"VariableDeclaration","scope":4007,"src":"5464:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3976,"name":"address","nodeType":"ElementaryTypeName","src":"5464:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3979,"mutability":"mutable","name":"salt","nameLocation":"5511:4:17","nodeType":"VariableDeclaration","scope":4007,"src":"5503:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5503:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"extensions","nameLocation":"5546:10:17","nodeType":"VariableDeclaration","scope":4007,"src":"5529:27:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3980,"name":"uint256","nodeType":"ElementaryTypeName","src":"5529:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3981,"nodeType":"ArrayTypeName","src":"5529:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5327:239:17"},"scope":4032,"src":"5243:557:17","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4018,"nodeType":"Block","src":"6181:65:17","statements":[{"expression":{"arguments":[{"id":4015,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"6225:13:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4013,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"6198:5:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6204:20:17","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1899,"src":"6198:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1720_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6198:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4012,"id":4017,"nodeType":"Return","src":"6191:48:17"}]},"documentation":{"id":4008,"nodeType":"StructuredDocumentation","src":"5806:256:17","text":" @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":4019,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"6129:11:17","nodeType":"FunctionDefinition","parameters":{"id":4009,"nodeType":"ParameterList","parameters":[],"src":"6140:2:17"},"returnParameters":{"id":4012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4019,"src":"6166:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4010,"name":"string","nodeType":"ElementaryTypeName","src":"6166:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6165:15:17"},"scope":4032,"src":"6120:126:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4030,"nodeType":"Block","src":"6636:71:17","statements":[{"expression":{"arguments":[{"id":4027,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3844,"src":"6683:16:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4025,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3840,"src":"6653:8:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$1720","typeString":"ShortString"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6662:20:17","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":1899,"src":"6653:29:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1720_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1720_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6653:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4024,"id":4029,"nodeType":"Return","src":"6646:54:17"}]},"documentation":{"id":4020,"nodeType":"StructuredDocumentation","src":"6252:262:17","text":" @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":4031,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"6581:14:17","nodeType":"FunctionDefinition","parameters":{"id":4021,"nodeType":"ParameterList","parameters":[],"src":"6595:2:17"},"returnParameters":{"id":4024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4023,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4031,"src":"6621:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4022,"name":"string","nodeType":"ElementaryTypeName","src":"6621:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6620:15:17"},"scope":4032,"src":"6572:135:17","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4033,"src":"1960:4749:17","usedErrors":[1728,1730],"usedEvents":[630]}],"src":"113:6597:17"}},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"id":18,"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","exportedSymbols":{"MessageHashUtils":[4118],"Strings":[3457]},"id":4119,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4034,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:18"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":4036,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4119,"sourceUnit":3458,"src":"149:39:18","symbolAliases":[{"foreign":{"id":4035,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"157:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":4037,"nodeType":"StructuredDocumentation","src":"190:330:18","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"id":4118,"linearizedBaseContracts":[4118],"name":"MessageHashUtils","nameLocation":"529:16:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":4046,"nodeType":"Block","src":"1339:341:18","statements":[{"AST":{"nativeSrc":"1374:300:18","nodeType":"YulBlock","src":"1374:300:18","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1395:4:18","nodeType":"YulLiteral","src":"1395:4:18","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1401:34:18","nodeType":"YulLiteral","src":"1401:34:18","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1388:6:18","nodeType":"YulIdentifier","src":"1388:6:18"},"nativeSrc":"1388:48:18","nodeType":"YulFunctionCall","src":"1388:48:18"},"nativeSrc":"1388:48:18","nodeType":"YulExpressionStatement","src":"1388:48:18"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1497:4:18","nodeType":"YulLiteral","src":"1497:4:18","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1503:11:18","nodeType":"YulIdentifier","src":"1503:11:18"}],"functionName":{"name":"mstore","nativeSrc":"1490:6:18","nodeType":"YulIdentifier","src":"1490:6:18"},"nativeSrc":"1490:25:18","nodeType":"YulFunctionCall","src":"1490:25:18"},"nativeSrc":"1490:25:18","nodeType":"YulExpressionStatement","src":"1490:25:18"},{"nativeSrc":"1569:31:18","nodeType":"YulAssignment","src":"1569:31:18","value":{"arguments":[{"kind":"number","nativeSrc":"1589:4:18","nodeType":"YulLiteral","src":"1589:4:18","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1595:4:18","nodeType":"YulLiteral","src":"1595:4:18","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1579:9:18","nodeType":"YulIdentifier","src":"1579:9:18"},"nativeSrc":"1579:21:18","nodeType":"YulFunctionCall","src":"1579:21:18"},"variableNames":[{"name":"digest","nativeSrc":"1569:6:18","nodeType":"YulIdentifier","src":"1569:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4043,"isOffset":false,"isSlot":false,"src":"1569:6:18","valueSize":1},{"declaration":4040,"isOffset":false,"isSlot":false,"src":"1503:11:18","valueSize":1}],"flags":["memory-safe"],"id":4045,"nodeType":"InlineAssembly","src":"1349:325:18"}]},"documentation":{"id":4038,"nodeType":"StructuredDocumentation","src":"552:690:18","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"id":4047,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1256:22:18","nodeType":"FunctionDefinition","parameters":{"id":4041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4040,"mutability":"mutable","name":"messageHash","nameLocation":"1287:11:18","nodeType":"VariableDeclaration","scope":4047,"src":"1279:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1279:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1278:21:18"},"returnParameters":{"id":4044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4043,"mutability":"mutable","name":"digest","nameLocation":"1331:6:18","nodeType":"VariableDeclaration","scope":4047,"src":"1323:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4042,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1323:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1322:16:18"},"scope":4118,"src":"1247:433:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4072,"nodeType":"Block","src":"2257:143:18","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":4059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2309:32:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":4064,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"2366:7:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:6:18","memberName":"length","nodeType":"MemberAccess","src":"2366:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4062,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"2349:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3457_$","typeString":"type(library Strings)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2357:8:18","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"2349:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2349:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2343:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4060,"name":"bytes","nodeType":"ElementaryTypeName","src":"2343:5:18","typeDescriptions":{}}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2343:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4068,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4050,"src":"2384:7:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2296:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4056,"name":"bytes","nodeType":"ElementaryTypeName","src":"2296:5:18","typeDescriptions":{}}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2302:6:18","memberName":"concat","nodeType":"MemberAccess","src":"2296:12:18","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2296:96:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4055,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"2286:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2286:107:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4054,"id":4071,"nodeType":"Return","src":"2267:126:18"}]},"documentation":{"id":4048,"nodeType":"StructuredDocumentation","src":"1686:480:18","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"id":4073,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2180:22:18","nodeType":"FunctionDefinition","parameters":{"id":4051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4050,"mutability":"mutable","name":"message","nameLocation":"2216:7:18","nodeType":"VariableDeclaration","scope":4073,"src":"2203:20:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4049,"name":"bytes","nodeType":"ElementaryTypeName","src":"2203:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2202:22:18"},"returnParameters":{"id":4054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4073,"src":"2248:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2248:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2247:9:18"},"scope":4118,"src":"2171:229:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4092,"nodeType":"Block","src":"2854:80:18","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":4086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2898:10:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":4087,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"2910:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4088,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"2921:4:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4084,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2881:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2885:12:18","memberName":"encodePacked","nodeType":"MemberAccess","src":"2881:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2881:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4083,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"2871:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2871:56:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4082,"id":4091,"nodeType":"Return","src":"2864:63:18"}]},"documentation":{"id":4074,"nodeType":"StructuredDocumentation","src":"2406:332:18","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"id":4093,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2752:31:18","nodeType":"FunctionDefinition","parameters":{"id":4079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4076,"mutability":"mutable","name":"validator","nameLocation":"2792:9:18","nodeType":"VariableDeclaration","scope":4093,"src":"2784:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4075,"name":"address","nodeType":"ElementaryTypeName","src":"2784:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4078,"mutability":"mutable","name":"data","nameLocation":"2816:4:18","nodeType":"VariableDeclaration","scope":4093,"src":"2803:17:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4077,"name":"bytes","nodeType":"ElementaryTypeName","src":"2803:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2783:38:18"},"returnParameters":{"id":4082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4093,"src":"2845:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2845:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2844:9:18"},"scope":4118,"src":"2743:191:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4104,"nodeType":"Block","src":"3216:216:18","statements":[{"AST":{"nativeSrc":"3251:175:18","nodeType":"YulBlock","src":"3251:175:18","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3272:4:18","nodeType":"YulLiteral","src":"3272:4:18","type":"","value":"0x00"},{"hexValue":"1900","kind":"string","nativeSrc":"3278:10:18","nodeType":"YulLiteral","src":"3278:10:18","type":"","value":"\u0019\u0000"}],"functionName":{"name":"mstore","nativeSrc":"3265:6:18","nodeType":"YulIdentifier","src":"3265:6:18"},"nativeSrc":"3265:24:18","nodeType":"YulFunctionCall","src":"3265:24:18"},"nativeSrc":"3265:24:18","nodeType":"YulExpressionStatement","src":"3265:24:18"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3309:4:18","nodeType":"YulLiteral","src":"3309:4:18","type":"","value":"0x02"},{"arguments":[{"kind":"number","nativeSrc":"3319:2:18","nodeType":"YulLiteral","src":"3319:2:18","type":"","value":"96"},{"name":"validator","nativeSrc":"3323:9:18","nodeType":"YulIdentifier","src":"3323:9:18"}],"functionName":{"name":"shl","nativeSrc":"3315:3:18","nodeType":"YulIdentifier","src":"3315:3:18"},"nativeSrc":"3315:18:18","nodeType":"YulFunctionCall","src":"3315:18:18"}],"functionName":{"name":"mstore","nativeSrc":"3302:6:18","nodeType":"YulIdentifier","src":"3302:6:18"},"nativeSrc":"3302:32:18","nodeType":"YulFunctionCall","src":"3302:32:18"},"nativeSrc":"3302:32:18","nodeType":"YulExpressionStatement","src":"3302:32:18"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3354:4:18","nodeType":"YulLiteral","src":"3354:4:18","type":"","value":"0x16"},{"name":"messageHash","nativeSrc":"3360:11:18","nodeType":"YulIdentifier","src":"3360:11:18"}],"functionName":{"name":"mstore","nativeSrc":"3347:6:18","nodeType":"YulIdentifier","src":"3347:6:18"},"nativeSrc":"3347:25:18","nodeType":"YulFunctionCall","src":"3347:25:18"},"nativeSrc":"3347:25:18","nodeType":"YulExpressionStatement","src":"3347:25:18"},{"nativeSrc":"3385:31:18","nodeType":"YulAssignment","src":"3385:31:18","value":{"arguments":[{"kind":"number","nativeSrc":"3405:4:18","nodeType":"YulLiteral","src":"3405:4:18","type":"","value":"0x00"},{"kind":"number","nativeSrc":"3411:4:18","nodeType":"YulLiteral","src":"3411:4:18","type":"","value":"0x36"}],"functionName":{"name":"keccak256","nativeSrc":"3395:9:18","nodeType":"YulIdentifier","src":"3395:9:18"},"nativeSrc":"3395:21:18","nodeType":"YulFunctionCall","src":"3395:21:18"},"variableNames":[{"name":"digest","nativeSrc":"3385:6:18","nodeType":"YulIdentifier","src":"3385:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4101,"isOffset":false,"isSlot":false,"src":"3385:6:18","valueSize":1},{"declaration":4098,"isOffset":false,"isSlot":false,"src":"3360:11:18","valueSize":1},{"declaration":4096,"isOffset":false,"isSlot":false,"src":"3323:9:18","valueSize":1}],"flags":["memory-safe"],"id":4103,"nodeType":"InlineAssembly","src":"3226:200:18"}]},"documentation":{"id":4094,"nodeType":"StructuredDocumentation","src":"2940:129:18","text":" @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32."},"id":4105,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"3083:31:18","nodeType":"FunctionDefinition","parameters":{"id":4099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4096,"mutability":"mutable","name":"validator","nameLocation":"3132:9:18","nodeType":"VariableDeclaration","scope":4105,"src":"3124:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4095,"name":"address","nodeType":"ElementaryTypeName","src":"3124:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4098,"mutability":"mutable","name":"messageHash","nameLocation":"3159:11:18","nodeType":"VariableDeclaration","scope":4105,"src":"3151:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4097,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3151:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3114:62:18"},"returnParameters":{"id":4102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4101,"mutability":"mutable","name":"digest","nameLocation":"3208:6:18","nodeType":"VariableDeclaration","scope":4105,"src":"3200:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3200:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3199:16:18"},"scope":4118,"src":"3074:358:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4116,"nodeType":"Block","src":"3983:265:18","statements":[{"AST":{"nativeSrc":"4018:224:18","nodeType":"YulBlock","src":"4018:224:18","statements":[{"nativeSrc":"4032:22:18","nodeType":"YulVariableDeclaration","src":"4032:22:18","value":{"arguments":[{"kind":"number","nativeSrc":"4049:4:18","nodeType":"YulLiteral","src":"4049:4:18","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"4043:5:18","nodeType":"YulIdentifier","src":"4043:5:18"},"nativeSrc":"4043:11:18","nodeType":"YulFunctionCall","src":"4043:11:18"},"variables":[{"name":"ptr","nativeSrc":"4036:3:18","nodeType":"YulTypedName","src":"4036:3:18","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"4074:3:18","nodeType":"YulIdentifier","src":"4074:3:18"},{"hexValue":"1901","kind":"string","nativeSrc":"4079:10:18","nodeType":"YulLiteral","src":"4079:10:18","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"4067:6:18","nodeType":"YulIdentifier","src":"4067:6:18"},"nativeSrc":"4067:23:18","nodeType":"YulFunctionCall","src":"4067:23:18"},"nativeSrc":"4067:23:18","nodeType":"YulExpressionStatement","src":"4067:23:18"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"4114:3:18","nodeType":"YulIdentifier","src":"4114:3:18"},{"kind":"number","nativeSrc":"4119:4:18","nodeType":"YulLiteral","src":"4119:4:18","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"4110:3:18","nodeType":"YulIdentifier","src":"4110:3:18"},"nativeSrc":"4110:14:18","nodeType":"YulFunctionCall","src":"4110:14:18"},{"name":"domainSeparator","nativeSrc":"4126:15:18","nodeType":"YulIdentifier","src":"4126:15:18"}],"functionName":{"name":"mstore","nativeSrc":"4103:6:18","nodeType":"YulIdentifier","src":"4103:6:18"},"nativeSrc":"4103:39:18","nodeType":"YulFunctionCall","src":"4103:39:18"},"nativeSrc":"4103:39:18","nodeType":"YulExpressionStatement","src":"4103:39:18"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"4166:3:18","nodeType":"YulIdentifier","src":"4166:3:18"},{"kind":"number","nativeSrc":"4171:4:18","nodeType":"YulLiteral","src":"4171:4:18","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"4162:3:18","nodeType":"YulIdentifier","src":"4162:3:18"},"nativeSrc":"4162:14:18","nodeType":"YulFunctionCall","src":"4162:14:18"},{"name":"structHash","nativeSrc":"4178:10:18","nodeType":"YulIdentifier","src":"4178:10:18"}],"functionName":{"name":"mstore","nativeSrc":"4155:6:18","nodeType":"YulIdentifier","src":"4155:6:18"},"nativeSrc":"4155:34:18","nodeType":"YulFunctionCall","src":"4155:34:18"},"nativeSrc":"4155:34:18","nodeType":"YulExpressionStatement","src":"4155:34:18"},{"nativeSrc":"4202:30:18","nodeType":"YulAssignment","src":"4202:30:18","value":{"arguments":[{"name":"ptr","nativeSrc":"4222:3:18","nodeType":"YulIdentifier","src":"4222:3:18"},{"kind":"number","nativeSrc":"4227:4:18","nodeType":"YulLiteral","src":"4227:4:18","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"4212:9:18","nodeType":"YulIdentifier","src":"4212:9:18"},"nativeSrc":"4212:20:18","nodeType":"YulFunctionCall","src":"4212:20:18"},"variableNames":[{"name":"digest","nativeSrc":"4202:6:18","nodeType":"YulIdentifier","src":"4202:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4113,"isOffset":false,"isSlot":false,"src":"4202:6:18","valueSize":1},{"declaration":4108,"isOffset":false,"isSlot":false,"src":"4126:15:18","valueSize":1},{"declaration":4110,"isOffset":false,"isSlot":false,"src":"4178:10:18","valueSize":1}],"flags":["memory-safe"],"id":4115,"nodeType":"InlineAssembly","src":"3993:249:18"}]},"documentation":{"id":4106,"nodeType":"StructuredDocumentation","src":"3438:431:18","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"id":4117,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3883:15:18","nodeType":"FunctionDefinition","parameters":{"id":4111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4108,"mutability":"mutable","name":"domainSeparator","nameLocation":"3907:15:18","nodeType":"VariableDeclaration","scope":4117,"src":"3899:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3899:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4110,"mutability":"mutable","name":"structHash","nameLocation":"3932:10:18","nodeType":"VariableDeclaration","scope":4117,"src":"3924:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3924:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3898:45:18"},"returnParameters":{"id":4114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4113,"mutability":"mutable","name":"digest","nameLocation":"3975:6:18","nodeType":"VariableDeclaration","scope":4117,"src":"3967:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3967:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3966:16:18"},"scope":4118,"src":"3874:374:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4119,"src":"521:3729:18","usedErrors":[],"usedEvents":[]}],"src":"123:4128:18"}},"@openzeppelin/contracts/utils/math/Math.sol":{"id":19,"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[5739],"Panic":[1714],"SafeCast":[7504]},"id":5740,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4120,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:19"},{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","file":"../Panic.sol","id":4122,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5740,"sourceUnit":1715,"src":"129:35:19","symbolAliases":[{"foreign":{"id":4121,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"137:5:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":4124,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5740,"sourceUnit":7505,"src":"165:40:19","symbolAliases":[{"foreign":{"id":4123,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"173:8:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4125,"nodeType":"StructuredDocumentation","src":"207:73:19","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5739,"linearizedBaseContracts":[5739],"name":"Math","nameLocation":"289:4:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":4130,"members":[{"id":4126,"name":"Floor","nameLocation":"324:5:19","nodeType":"EnumValue","src":"324:5:19"},{"id":4127,"name":"Ceil","nameLocation":"367:4:19","nodeType":"EnumValue","src":"367:4:19"},{"id":4128,"name":"Trunc","nameLocation":"409:5:19","nodeType":"EnumValue","src":"409:5:19"},{"id":4129,"name":"Expand","nameLocation":"439:6:19","nodeType":"EnumValue","src":"439:6:19"}],"name":"Rounding","nameLocation":"305:8:19","nodeType":"EnumDefinition","src":"300:169:19"},{"body":{"id":4143,"nodeType":"Block","src":"731:112:19","statements":[{"AST":{"nativeSrc":"766:71:19","nodeType":"YulBlock","src":"766:71:19","statements":[{"nativeSrc":"780:16:19","nodeType":"YulAssignment","src":"780:16:19","value":{"arguments":[{"name":"a","nativeSrc":"791:1:19","nodeType":"YulIdentifier","src":"791:1:19"},{"name":"b","nativeSrc":"794:1:19","nodeType":"YulIdentifier","src":"794:1:19"}],"functionName":{"name":"add","nativeSrc":"787:3:19","nodeType":"YulIdentifier","src":"787:3:19"},"nativeSrc":"787:9:19","nodeType":"YulFunctionCall","src":"787:9:19"},"variableNames":[{"name":"low","nativeSrc":"780:3:19","nodeType":"YulIdentifier","src":"780:3:19"}]},{"nativeSrc":"809:18:19","nodeType":"YulAssignment","src":"809:18:19","value":{"arguments":[{"name":"low","nativeSrc":"820:3:19","nodeType":"YulIdentifier","src":"820:3:19"},{"name":"a","nativeSrc":"825:1:19","nodeType":"YulIdentifier","src":"825:1:19"}],"functionName":{"name":"lt","nativeSrc":"817:2:19","nodeType":"YulIdentifier","src":"817:2:19"},"nativeSrc":"817:10:19","nodeType":"YulFunctionCall","src":"817:10:19"},"variableNames":[{"name":"high","nativeSrc":"809:4:19","nodeType":"YulIdentifier","src":"809:4:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4133,"isOffset":false,"isSlot":false,"src":"791:1:19","valueSize":1},{"declaration":4133,"isOffset":false,"isSlot":false,"src":"825:1:19","valueSize":1},{"declaration":4135,"isOffset":false,"isSlot":false,"src":"794:1:19","valueSize":1},{"declaration":4138,"isOffset":false,"isSlot":false,"src":"809:4:19","valueSize":1},{"declaration":4140,"isOffset":false,"isSlot":false,"src":"780:3:19","valueSize":1},{"declaration":4140,"isOffset":false,"isSlot":false,"src":"820:3:19","valueSize":1}],"flags":["memory-safe"],"id":4142,"nodeType":"InlineAssembly","src":"741:96:19"}]},"documentation":{"id":4131,"nodeType":"StructuredDocumentation","src":"475:163:19","text":" @dev Return the 512-bit addition of two uint256.\n The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low."},"id":4144,"implemented":true,"kind":"function","modifiers":[],"name":"add512","nameLocation":"652:6:19","nodeType":"FunctionDefinition","parameters":{"id":4136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4133,"mutability":"mutable","name":"a","nameLocation":"667:1:19","nodeType":"VariableDeclaration","scope":4144,"src":"659:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4132,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4135,"mutability":"mutable","name":"b","nameLocation":"678:1:19","nodeType":"VariableDeclaration","scope":4144,"src":"670:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4134,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"658:22:19"},"returnParameters":{"id":4141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4138,"mutability":"mutable","name":"high","nameLocation":"712:4:19","nodeType":"VariableDeclaration","scope":4144,"src":"704:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4137,"name":"uint256","nodeType":"ElementaryTypeName","src":"704:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4140,"mutability":"mutable","name":"low","nameLocation":"726:3:19","nodeType":"VariableDeclaration","scope":4144,"src":"718:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4139,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"703:27:19"},"scope":5739,"src":"643:200:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4157,"nodeType":"Block","src":"1115:462:19","statements":[{"AST":{"nativeSrc":"1437:134:19","nodeType":"YulBlock","src":"1437:134:19","statements":[{"nativeSrc":"1451:30:19","nodeType":"YulVariableDeclaration","src":"1451:30:19","value":{"arguments":[{"name":"a","nativeSrc":"1468:1:19","nodeType":"YulIdentifier","src":"1468:1:19"},{"name":"b","nativeSrc":"1471:1:19","nodeType":"YulIdentifier","src":"1471:1:19"},{"arguments":[{"kind":"number","nativeSrc":"1478:1:19","nodeType":"YulLiteral","src":"1478:1:19","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"1474:3:19","nodeType":"YulIdentifier","src":"1474:3:19"},"nativeSrc":"1474:6:19","nodeType":"YulFunctionCall","src":"1474:6:19"}],"functionName":{"name":"mulmod","nativeSrc":"1461:6:19","nodeType":"YulIdentifier","src":"1461:6:19"},"nativeSrc":"1461:20:19","nodeType":"YulFunctionCall","src":"1461:20:19"},"variables":[{"name":"mm","nativeSrc":"1455:2:19","nodeType":"YulTypedName","src":"1455:2:19","type":""}]},{"nativeSrc":"1494:16:19","nodeType":"YulAssignment","src":"1494:16:19","value":{"arguments":[{"name":"a","nativeSrc":"1505:1:19","nodeType":"YulIdentifier","src":"1505:1:19"},{"name":"b","nativeSrc":"1508:1:19","nodeType":"YulIdentifier","src":"1508:1:19"}],"functionName":{"name":"mul","nativeSrc":"1501:3:19","nodeType":"YulIdentifier","src":"1501:3:19"},"nativeSrc":"1501:9:19","nodeType":"YulFunctionCall","src":"1501:9:19"},"variableNames":[{"name":"low","nativeSrc":"1494:3:19","nodeType":"YulIdentifier","src":"1494:3:19"}]},{"nativeSrc":"1523:38:19","nodeType":"YulAssignment","src":"1523:38:19","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"1539:2:19","nodeType":"YulIdentifier","src":"1539:2:19"},{"name":"low","nativeSrc":"1543:3:19","nodeType":"YulIdentifier","src":"1543:3:19"}],"functionName":{"name":"sub","nativeSrc":"1535:3:19","nodeType":"YulIdentifier","src":"1535:3:19"},"nativeSrc":"1535:12:19","nodeType":"YulFunctionCall","src":"1535:12:19"},{"arguments":[{"name":"mm","nativeSrc":"1552:2:19","nodeType":"YulIdentifier","src":"1552:2:19"},{"name":"low","nativeSrc":"1556:3:19","nodeType":"YulIdentifier","src":"1556:3:19"}],"functionName":{"name":"lt","nativeSrc":"1549:2:19","nodeType":"YulIdentifier","src":"1549:2:19"},"nativeSrc":"1549:11:19","nodeType":"YulFunctionCall","src":"1549:11:19"}],"functionName":{"name":"sub","nativeSrc":"1531:3:19","nodeType":"YulIdentifier","src":"1531:3:19"},"nativeSrc":"1531:30:19","nodeType":"YulFunctionCall","src":"1531:30:19"},"variableNames":[{"name":"high","nativeSrc":"1523:4:19","nodeType":"YulIdentifier","src":"1523:4:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4147,"isOffset":false,"isSlot":false,"src":"1468:1:19","valueSize":1},{"declaration":4147,"isOffset":false,"isSlot":false,"src":"1505:1:19","valueSize":1},{"declaration":4149,"isOffset":false,"isSlot":false,"src":"1471:1:19","valueSize":1},{"declaration":4149,"isOffset":false,"isSlot":false,"src":"1508:1:19","valueSize":1},{"declaration":4152,"isOffset":false,"isSlot":false,"src":"1523:4:19","valueSize":1},{"declaration":4154,"isOffset":false,"isSlot":false,"src":"1494:3:19","valueSize":1},{"declaration":4154,"isOffset":false,"isSlot":false,"src":"1543:3:19","valueSize":1},{"declaration":4154,"isOffset":false,"isSlot":false,"src":"1556:3:19","valueSize":1}],"flags":["memory-safe"],"id":4156,"nodeType":"InlineAssembly","src":"1412:159:19"}]},"documentation":{"id":4145,"nodeType":"StructuredDocumentation","src":"849:173:19","text":" @dev Return the 512-bit multiplication of two uint256.\n The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low."},"id":4158,"implemented":true,"kind":"function","modifiers":[],"name":"mul512","nameLocation":"1036:6:19","nodeType":"FunctionDefinition","parameters":{"id":4150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"a","nameLocation":"1051:1:19","nodeType":"VariableDeclaration","scope":4158,"src":"1043:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4146,"name":"uint256","nodeType":"ElementaryTypeName","src":"1043:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4149,"mutability":"mutable","name":"b","nameLocation":"1062:1:19","nodeType":"VariableDeclaration","scope":4158,"src":"1054:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4148,"name":"uint256","nodeType":"ElementaryTypeName","src":"1054:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:22:19"},"returnParameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4152,"mutability":"mutable","name":"high","nameLocation":"1096:4:19","nodeType":"VariableDeclaration","scope":4158,"src":"1088:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4151,"name":"uint256","nodeType":"ElementaryTypeName","src":"1088:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4154,"mutability":"mutable","name":"low","nameLocation":"1110:3:19","nodeType":"VariableDeclaration","scope":4158,"src":"1102:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4153,"name":"uint256","nodeType":"ElementaryTypeName","src":"1102:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1087:27:19"},"scope":5739,"src":"1027:550:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4192,"nodeType":"Block","src":"1784:149:19","statements":[{"id":4191,"nodeType":"UncheckedBlock","src":"1794:133:19","statements":[{"assignments":[4171],"declarations":[{"constant":false,"id":4171,"mutability":"mutable","name":"c","nameLocation":"1826:1:19","nodeType":"VariableDeclaration","scope":4191,"src":"1818:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4175,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4172,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"1830:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4173,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"1834:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1830:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1818:17:19"},{"expression":{"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4176,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"1849:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4177,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"1859:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4178,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"1864:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1859:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1849:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4181,"nodeType":"ExpressionStatement","src":"1849:16:19"},{"expression":{"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"1879:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4183,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"1888:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4186,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"1908:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4184,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"1892:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1901:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"1892:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1892:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1888:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1879:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4190,"nodeType":"ExpressionStatement","src":"1879:37:19"}]}]},"documentation":{"id":4159,"nodeType":"StructuredDocumentation","src":"1583:105:19","text":" @dev Returns the addition of two unsigned integers, with a success flag (no overflow)."},"id":4193,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"1702:6:19","nodeType":"FunctionDefinition","parameters":{"id":4164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4161,"mutability":"mutable","name":"a","nameLocation":"1717:1:19","nodeType":"VariableDeclaration","scope":4193,"src":"1709:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1709:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4163,"mutability":"mutable","name":"b","nameLocation":"1728:1:19","nodeType":"VariableDeclaration","scope":4193,"src":"1720:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1708:22:19"},"returnParameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4166,"mutability":"mutable","name":"success","nameLocation":"1759:7:19","nodeType":"VariableDeclaration","scope":4193,"src":"1754:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4165,"name":"bool","nodeType":"ElementaryTypeName","src":"1754:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4168,"mutability":"mutable","name":"result","nameLocation":"1776:6:19","nodeType":"VariableDeclaration","scope":4193,"src":"1768:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1753:30:19"},"scope":5739,"src":"1693:240:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4227,"nodeType":"Block","src":"2143:149:19","statements":[{"id":4226,"nodeType":"UncheckedBlock","src":"2153:133:19","statements":[{"assignments":[4206],"declarations":[{"constant":false,"id":4206,"mutability":"mutable","name":"c","nameLocation":"2185:1:19","nodeType":"VariableDeclaration","scope":4226,"src":"2177:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4205,"name":"uint256","nodeType":"ElementaryTypeName","src":"2177:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4210,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4207,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"2189:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4208,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"2193:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2189:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2177:17:19"},{"expression":{"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4211,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"2208:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4212,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"2218:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4213,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4196,"src":"2223:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2218:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2208:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4216,"nodeType":"ExpressionStatement","src":"2208:16:19"},{"expression":{"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4217,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"2238:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4218,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4206,"src":"2247:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4221,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"2267:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4219,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"2251:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2260:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"2251:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2251:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2247:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2238:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4225,"nodeType":"ExpressionStatement","src":"2238:37:19"}]}]},"documentation":{"id":4194,"nodeType":"StructuredDocumentation","src":"1939:108:19","text":" @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow)."},"id":4228,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"2061:6:19","nodeType":"FunctionDefinition","parameters":{"id":4199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4196,"mutability":"mutable","name":"a","nameLocation":"2076:1:19","nodeType":"VariableDeclaration","scope":4228,"src":"2068:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"2068:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4198,"mutability":"mutable","name":"b","nameLocation":"2087:1:19","nodeType":"VariableDeclaration","scope":4228,"src":"2079:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2079:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2067:22:19"},"returnParameters":{"id":4204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4201,"mutability":"mutable","name":"success","nameLocation":"2118:7:19","nodeType":"VariableDeclaration","scope":4228,"src":"2113:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4200,"name":"bool","nodeType":"ElementaryTypeName","src":"2113:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4203,"mutability":"mutable","name":"result","nameLocation":"2135:6:19","nodeType":"VariableDeclaration","scope":4228,"src":"2127:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4202,"name":"uint256","nodeType":"ElementaryTypeName","src":"2127:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2112:30:19"},"scope":5739,"src":"2052:240:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4257,"nodeType":"Block","src":"2505:391:19","statements":[{"id":4256,"nodeType":"UncheckedBlock","src":"2515:375:19","statements":[{"assignments":[4241],"declarations":[{"constant":false,"id":4241,"mutability":"mutable","name":"c","nameLocation":"2547:1:19","nodeType":"VariableDeclaration","scope":4256,"src":"2539:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4240,"name":"uint256","nodeType":"ElementaryTypeName","src":"2539:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4245,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4242,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"2551:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4243,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"2555:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2551:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2539:17:19"},{"AST":{"nativeSrc":"2595:188:19","nodeType":"YulBlock","src":"2595:188:19","statements":[{"nativeSrc":"2727:42:19","nodeType":"YulAssignment","src":"2727:42:19","value":{"arguments":[{"arguments":[{"arguments":[{"name":"c","nativeSrc":"2748:1:19","nodeType":"YulIdentifier","src":"2748:1:19"},{"name":"a","nativeSrc":"2751:1:19","nodeType":"YulIdentifier","src":"2751:1:19"}],"functionName":{"name":"div","nativeSrc":"2744:3:19","nodeType":"YulIdentifier","src":"2744:3:19"},"nativeSrc":"2744:9:19","nodeType":"YulFunctionCall","src":"2744:9:19"},{"name":"b","nativeSrc":"2755:1:19","nodeType":"YulIdentifier","src":"2755:1:19"}],"functionName":{"name":"eq","nativeSrc":"2741:2:19","nodeType":"YulIdentifier","src":"2741:2:19"},"nativeSrc":"2741:16:19","nodeType":"YulFunctionCall","src":"2741:16:19"},{"arguments":[{"name":"a","nativeSrc":"2766:1:19","nodeType":"YulIdentifier","src":"2766:1:19"}],"functionName":{"name":"iszero","nativeSrc":"2759:6:19","nodeType":"YulIdentifier","src":"2759:6:19"},"nativeSrc":"2759:9:19","nodeType":"YulFunctionCall","src":"2759:9:19"}],"functionName":{"name":"or","nativeSrc":"2738:2:19","nodeType":"YulIdentifier","src":"2738:2:19"},"nativeSrc":"2738:31:19","nodeType":"YulFunctionCall","src":"2738:31:19"},"variableNames":[{"name":"success","nativeSrc":"2727:7:19","nodeType":"YulIdentifier","src":"2727:7:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4231,"isOffset":false,"isSlot":false,"src":"2751:1:19","valueSize":1},{"declaration":4231,"isOffset":false,"isSlot":false,"src":"2766:1:19","valueSize":1},{"declaration":4233,"isOffset":false,"isSlot":false,"src":"2755:1:19","valueSize":1},{"declaration":4241,"isOffset":false,"isSlot":false,"src":"2748:1:19","valueSize":1},{"declaration":4236,"isOffset":false,"isSlot":false,"src":"2727:7:19","valueSize":1}],"flags":["memory-safe"],"id":4246,"nodeType":"InlineAssembly","src":"2570:213:19"},{"expression":{"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4247,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"2842:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4248,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"2851:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4251,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"2871:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4249,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"2855:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2864:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"2855:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2851:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4255,"nodeType":"ExpressionStatement","src":"2842:37:19"}]}]},"documentation":{"id":4229,"nodeType":"StructuredDocumentation","src":"2298:111:19","text":" @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow)."},"id":4258,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"2423:6:19","nodeType":"FunctionDefinition","parameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4231,"mutability":"mutable","name":"a","nameLocation":"2438:1:19","nodeType":"VariableDeclaration","scope":4258,"src":"2430:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4230,"name":"uint256","nodeType":"ElementaryTypeName","src":"2430:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4233,"mutability":"mutable","name":"b","nameLocation":"2449:1:19","nodeType":"VariableDeclaration","scope":4258,"src":"2441:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2441:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2429:22:19"},"returnParameters":{"id":4239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"success","nameLocation":"2480:7:19","nodeType":"VariableDeclaration","scope":4258,"src":"2475:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4235,"name":"bool","nodeType":"ElementaryTypeName","src":"2475:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4238,"mutability":"mutable","name":"result","nameLocation":"2497:6:19","nodeType":"VariableDeclaration","scope":4258,"src":"2489:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4237,"name":"uint256","nodeType":"ElementaryTypeName","src":"2489:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2474:30:19"},"scope":5739,"src":"2414:482:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4278,"nodeType":"Block","src":"3111:231:19","statements":[{"id":4277,"nodeType":"UncheckedBlock","src":"3121:215:19","statements":[{"expression":{"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4270,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"3145:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4271,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"3155:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3159:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3155:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3145:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4275,"nodeType":"ExpressionStatement","src":"3145:15:19"},{"AST":{"nativeSrc":"3199:127:19","nodeType":"YulBlock","src":"3199:127:19","statements":[{"nativeSrc":"3293:19:19","nodeType":"YulAssignment","src":"3293:19:19","value":{"arguments":[{"name":"a","nativeSrc":"3307:1:19","nodeType":"YulIdentifier","src":"3307:1:19"},{"name":"b","nativeSrc":"3310:1:19","nodeType":"YulIdentifier","src":"3310:1:19"}],"functionName":{"name":"div","nativeSrc":"3303:3:19","nodeType":"YulIdentifier","src":"3303:3:19"},"nativeSrc":"3303:9:19","nodeType":"YulFunctionCall","src":"3303:9:19"},"variableNames":[{"name":"result","nativeSrc":"3293:6:19","nodeType":"YulIdentifier","src":"3293:6:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4261,"isOffset":false,"isSlot":false,"src":"3307:1:19","valueSize":1},{"declaration":4263,"isOffset":false,"isSlot":false,"src":"3310:1:19","valueSize":1},{"declaration":4268,"isOffset":false,"isSlot":false,"src":"3293:6:19","valueSize":1}],"flags":["memory-safe"],"id":4276,"nodeType":"InlineAssembly","src":"3174:152:19"}]}]},"documentation":{"id":4259,"nodeType":"StructuredDocumentation","src":"2902:113:19","text":" @dev Returns the division of two unsigned integers, with a success flag (no division by zero)."},"id":4279,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"3029:6:19","nodeType":"FunctionDefinition","parameters":{"id":4264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4261,"mutability":"mutable","name":"a","nameLocation":"3044:1:19","nodeType":"VariableDeclaration","scope":4279,"src":"3036:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4260,"name":"uint256","nodeType":"ElementaryTypeName","src":"3036:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4263,"mutability":"mutable","name":"b","nameLocation":"3055:1:19","nodeType":"VariableDeclaration","scope":4279,"src":"3047:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4262,"name":"uint256","nodeType":"ElementaryTypeName","src":"3047:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3035:22:19"},"returnParameters":{"id":4269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4266,"mutability":"mutable","name":"success","nameLocation":"3086:7:19","nodeType":"VariableDeclaration","scope":4279,"src":"3081:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4265,"name":"bool","nodeType":"ElementaryTypeName","src":"3081:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4268,"mutability":"mutable","name":"result","nameLocation":"3103:6:19","nodeType":"VariableDeclaration","scope":4279,"src":"3095:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4267,"name":"uint256","nodeType":"ElementaryTypeName","src":"3095:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3080:30:19"},"scope":5739,"src":"3020:322:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4299,"nodeType":"Block","src":"3567:231:19","statements":[{"id":4298,"nodeType":"UncheckedBlock","src":"3577:215:19","statements":[{"expression":{"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4291,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4287,"src":"3601:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4292,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"3611:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3615:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3611:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3601:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4296,"nodeType":"ExpressionStatement","src":"3601:15:19"},{"AST":{"nativeSrc":"3655:127:19","nodeType":"YulBlock","src":"3655:127:19","statements":[{"nativeSrc":"3749:19:19","nodeType":"YulAssignment","src":"3749:19:19","value":{"arguments":[{"name":"a","nativeSrc":"3763:1:19","nodeType":"YulIdentifier","src":"3763:1:19"},{"name":"b","nativeSrc":"3766:1:19","nodeType":"YulIdentifier","src":"3766:1:19"}],"functionName":{"name":"mod","nativeSrc":"3759:3:19","nodeType":"YulIdentifier","src":"3759:3:19"},"nativeSrc":"3759:9:19","nodeType":"YulFunctionCall","src":"3759:9:19"},"variableNames":[{"name":"result","nativeSrc":"3749:6:19","nodeType":"YulIdentifier","src":"3749:6:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4282,"isOffset":false,"isSlot":false,"src":"3763:1:19","valueSize":1},{"declaration":4284,"isOffset":false,"isSlot":false,"src":"3766:1:19","valueSize":1},{"declaration":4289,"isOffset":false,"isSlot":false,"src":"3749:6:19","valueSize":1}],"flags":["memory-safe"],"id":4297,"nodeType":"InlineAssembly","src":"3630:152:19"}]}]},"documentation":{"id":4280,"nodeType":"StructuredDocumentation","src":"3348:123:19","text":" @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero)."},"id":4300,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"3485:6:19","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4282,"mutability":"mutable","name":"a","nameLocation":"3500:1:19","nodeType":"VariableDeclaration","scope":4300,"src":"3492:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4281,"name":"uint256","nodeType":"ElementaryTypeName","src":"3492:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4284,"mutability":"mutable","name":"b","nameLocation":"3511:1:19","nodeType":"VariableDeclaration","scope":4300,"src":"3503:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4283,"name":"uint256","nodeType":"ElementaryTypeName","src":"3503:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:22:19"},"returnParameters":{"id":4290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4287,"mutability":"mutable","name":"success","nameLocation":"3542:7:19","nodeType":"VariableDeclaration","scope":4300,"src":"3537:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4286,"name":"bool","nodeType":"ElementaryTypeName","src":"3537:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4289,"mutability":"mutable","name":"result","nameLocation":"3559:6:19","nodeType":"VariableDeclaration","scope":4300,"src":"3551:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4288,"name":"uint256","nodeType":"ElementaryTypeName","src":"3551:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3536:30:19"},"scope":5739,"src":"3476:322:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4329,"nodeType":"Block","src":"3989:122:19","statements":[{"assignments":[4311,4313],"declarations":[{"constant":false,"id":4311,"mutability":"mutable","name":"success","nameLocation":"4005:7:19","nodeType":"VariableDeclaration","scope":4329,"src":"4000:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4310,"name":"bool","nodeType":"ElementaryTypeName","src":"4000:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4313,"mutability":"mutable","name":"result","nameLocation":"4022:6:19","nodeType":"VariableDeclaration","scope":4329,"src":"4014:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4312,"name":"uint256","nodeType":"ElementaryTypeName","src":"4014:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4318,"initialValue":{"arguments":[{"id":4315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"4039:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4316,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4305,"src":"4042:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4314,"name":"tryAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"4032:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (bool,uint256)"}},"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3999:45:19"},{"expression":{"arguments":[{"id":4320,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"4069:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4321,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"4078:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":4324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4091:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4323,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:19","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":4322,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"4086:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4086:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":4326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4100:3:19","memberName":"max","nodeType":"MemberAccess","src":"4086:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4319,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"4061:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4061:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4309,"id":4328,"nodeType":"Return","src":"4054:50:19"}]},"documentation":{"id":4301,"nodeType":"StructuredDocumentation","src":"3804:103:19","text":" @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing."},"id":4330,"implemented":true,"kind":"function","modifiers":[],"name":"saturatingAdd","nameLocation":"3921:13:19","nodeType":"FunctionDefinition","parameters":{"id":4306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4303,"mutability":"mutable","name":"a","nameLocation":"3943:1:19","nodeType":"VariableDeclaration","scope":4330,"src":"3935:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4302,"name":"uint256","nodeType":"ElementaryTypeName","src":"3935:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4305,"mutability":"mutable","name":"b","nameLocation":"3954:1:19","nodeType":"VariableDeclaration","scope":4330,"src":"3946:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4304,"name":"uint256","nodeType":"ElementaryTypeName","src":"3946:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3934:22:19"},"returnParameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4330,"src":"3980:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4307,"name":"uint256","nodeType":"ElementaryTypeName","src":"3980:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3979:9:19"},"scope":5739,"src":"3912:199:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4349,"nodeType":"Block","src":"4294:73:19","statements":[{"assignments":[null,4341],"declarations":[null,{"constant":false,"id":4341,"mutability":"mutable","name":"result","nameLocation":"4315:6:19","nodeType":"VariableDeclaration","scope":4349,"src":"4307:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4340,"name":"uint256","nodeType":"ElementaryTypeName","src":"4307:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4346,"initialValue":{"arguments":[{"id":4343,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"4332:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4344,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4335,"src":"4335:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4342,"name":"trySub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"4325:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (bool,uint256)"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4325:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4304:33:19"},{"expression":{"id":4347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"4354:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4339,"id":4348,"nodeType":"Return","src":"4347:13:19"}]},"documentation":{"id":4331,"nodeType":"StructuredDocumentation","src":"4117:95:19","text":" @dev Unsigned saturating subtraction, bounds to zero instead of overflowing."},"id":4350,"implemented":true,"kind":"function","modifiers":[],"name":"saturatingSub","nameLocation":"4226:13:19","nodeType":"FunctionDefinition","parameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4333,"mutability":"mutable","name":"a","nameLocation":"4248:1:19","nodeType":"VariableDeclaration","scope":4350,"src":"4240:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4332,"name":"uint256","nodeType":"ElementaryTypeName","src":"4240:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4335,"mutability":"mutable","name":"b","nameLocation":"4259:1:19","nodeType":"VariableDeclaration","scope":4350,"src":"4251:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4334,"name":"uint256","nodeType":"ElementaryTypeName","src":"4251:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4239:22:19"},"returnParameters":{"id":4339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4350,"src":"4285:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4337,"name":"uint256","nodeType":"ElementaryTypeName","src":"4285:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4284:9:19"},"scope":5739,"src":"4217:150:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4379,"nodeType":"Block","src":"4564:122:19","statements":[{"assignments":[4361,4363],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"success","nameLocation":"4580:7:19","nodeType":"VariableDeclaration","scope":4379,"src":"4575:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4360,"name":"bool","nodeType":"ElementaryTypeName","src":"4575:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4363,"mutability":"mutable","name":"result","nameLocation":"4597:6:19","nodeType":"VariableDeclaration","scope":4379,"src":"4589:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4362,"name":"uint256","nodeType":"ElementaryTypeName","src":"4589:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4368,"initialValue":{"arguments":[{"id":4365,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"4614:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4366,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"4617:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4364,"name":"tryMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"4607:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (bool,uint256)"}},"id":4367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4607:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4574:45:19"},{"expression":{"arguments":[{"id":4370,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"4644:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"4653:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":4374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4666:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4373,"name":"uint256","nodeType":"ElementaryTypeName","src":"4666:7:19","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":4372,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"4661:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4661:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":4376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4675:3:19","memberName":"max","nodeType":"MemberAccess","src":"4661:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4369,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"4636:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4636:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4359,"id":4378,"nodeType":"Return","src":"4629:50:19"}]},"documentation":{"id":4351,"nodeType":"StructuredDocumentation","src":"4373:109:19","text":" @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing."},"id":4380,"implemented":true,"kind":"function","modifiers":[],"name":"saturatingMul","nameLocation":"4496:13:19","nodeType":"FunctionDefinition","parameters":{"id":4356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4353,"mutability":"mutable","name":"a","nameLocation":"4518:1:19","nodeType":"VariableDeclaration","scope":4380,"src":"4510:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4352,"name":"uint256","nodeType":"ElementaryTypeName","src":"4510:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4355,"mutability":"mutable","name":"b","nameLocation":"4529:1:19","nodeType":"VariableDeclaration","scope":4380,"src":"4521:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4354,"name":"uint256","nodeType":"ElementaryTypeName","src":"4521:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4509:22:19"},"returnParameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4380,"src":"4555:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4357,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4554:9:19"},"scope":5739,"src":"4487:199:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4406,"nodeType":"Block","src":"5158:207:19","statements":[{"id":4405,"nodeType":"UncheckedBlock","src":"5168:191:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4392,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5306:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4393,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"5312:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4394,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"5316:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5312:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5311:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4399,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4383,"src":"5337:9:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4397,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"5321:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5330:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"5321:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5321:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5311:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4402,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5310:38:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5306:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4391,"id":4404,"nodeType":"Return","src":"5299:49:19"}]}]},"documentation":{"id":4381,"nodeType":"StructuredDocumentation","src":"4692:374:19","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":4407,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"5080:7:19","nodeType":"FunctionDefinition","parameters":{"id":4388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4383,"mutability":"mutable","name":"condition","nameLocation":"5093:9:19","nodeType":"VariableDeclaration","scope":4407,"src":"5088:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4382,"name":"bool","nodeType":"ElementaryTypeName","src":"5088:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4385,"mutability":"mutable","name":"a","nameLocation":"5112:1:19","nodeType":"VariableDeclaration","scope":4407,"src":"5104:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4384,"name":"uint256","nodeType":"ElementaryTypeName","src":"5104:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4387,"mutability":"mutable","name":"b","nameLocation":"5123:1:19","nodeType":"VariableDeclaration","scope":4407,"src":"5115:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4386,"name":"uint256","nodeType":"ElementaryTypeName","src":"5115:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5087:38:19"},"returnParameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4407,"src":"5149:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4389,"name":"uint256","nodeType":"ElementaryTypeName","src":"5149:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5148:9:19"},"scope":5739,"src":"5071:294:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4425,"nodeType":"Block","src":"5502:44:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4418,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"5527:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4419,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5531:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5527:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4421,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"5534:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4422,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5537:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4417,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"5519:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5519:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4416,"id":4424,"nodeType":"Return","src":"5512:27:19"}]},"documentation":{"id":4408,"nodeType":"StructuredDocumentation","src":"5371:59:19","text":" @dev Returns the largest of two numbers."},"id":4426,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"5444:3:19","nodeType":"FunctionDefinition","parameters":{"id":4413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4410,"mutability":"mutable","name":"a","nameLocation":"5456:1:19","nodeType":"VariableDeclaration","scope":4426,"src":"5448:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4409,"name":"uint256","nodeType":"ElementaryTypeName","src":"5448:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4412,"mutability":"mutable","name":"b","nameLocation":"5467:1:19","nodeType":"VariableDeclaration","scope":4426,"src":"5459:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4411,"name":"uint256","nodeType":"ElementaryTypeName","src":"5459:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5447:22:19"},"returnParameters":{"id":4416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4426,"src":"5493:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4414,"name":"uint256","nodeType":"ElementaryTypeName","src":"5493:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5492:9:19"},"scope":5739,"src":"5435:111:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4444,"nodeType":"Block","src":"5684:44:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4437,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"5709:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4438,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"5713:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5709:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4429,"src":"5716:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4441,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"5719:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4436,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"5701:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5701:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4435,"id":4443,"nodeType":"Return","src":"5694:27:19"}]},"documentation":{"id":4427,"nodeType":"StructuredDocumentation","src":"5552:60:19","text":" @dev Returns the smallest of two numbers."},"id":4445,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"5626:3:19","nodeType":"FunctionDefinition","parameters":{"id":4432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4429,"mutability":"mutable","name":"a","nameLocation":"5638:1:19","nodeType":"VariableDeclaration","scope":4445,"src":"5630:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4428,"name":"uint256","nodeType":"ElementaryTypeName","src":"5630:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4431,"mutability":"mutable","name":"b","nameLocation":"5649:1:19","nodeType":"VariableDeclaration","scope":4445,"src":"5641:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4430,"name":"uint256","nodeType":"ElementaryTypeName","src":"5641:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5629:22:19"},"returnParameters":{"id":4435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4445,"src":"5675:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4433,"name":"uint256","nodeType":"ElementaryTypeName","src":"5675:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5674:9:19"},"scope":5739,"src":"5617:111:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4467,"nodeType":"Block","src":"5912:82:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4455,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"5967:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4456,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"5971:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5967:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5966:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4459,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"5977:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4460,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"5981:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5977:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5976:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5986:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5976:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5966:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4454,"id":4466,"nodeType":"Return","src":"5959:28:19"}]},"documentation":{"id":4446,"nodeType":"StructuredDocumentation","src":"5734:102:19","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4468,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"5850:7:19","nodeType":"FunctionDefinition","parameters":{"id":4451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4448,"mutability":"mutable","name":"a","nameLocation":"5866:1:19","nodeType":"VariableDeclaration","scope":4468,"src":"5858:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4447,"name":"uint256","nodeType":"ElementaryTypeName","src":"5858:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4450,"mutability":"mutable","name":"b","nameLocation":"5877:1:19","nodeType":"VariableDeclaration","scope":4468,"src":"5869:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4449,"name":"uint256","nodeType":"ElementaryTypeName","src":"5869:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5857:22:19"},"returnParameters":{"id":4454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4468,"src":"5903:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4452,"name":"uint256","nodeType":"ElementaryTypeName","src":"5903:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5902:9:19"},"scope":5739,"src":"5841:153:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4508,"nodeType":"Block","src":"6286:633:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4478,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"6300:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6305:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6300:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4489,"nodeType":"IfStatement","src":"6296:150:19","trueBody":{"id":4488,"nodeType":"Block","src":"6308:138:19","statements":[{"expression":{"arguments":[{"expression":{"id":4484,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"6412:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6418:16:19","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"6412:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4481,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"6400:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6406:5:19","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"6400:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6400:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4487,"nodeType":"ExpressionStatement","src":"6400:35:19"}]}},{"id":4507,"nodeType":"UncheckedBlock","src":"6829:84:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4492,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"6876:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6876:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4490,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"6860:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6869:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"6860:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6860:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4496,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"6887:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6891:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6887:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4499,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6886:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4500,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"6896:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6886:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6900:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6886:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4504,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6885:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6860:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4477,"id":4506,"nodeType":"Return","src":"6853:49:19"}]}]},"documentation":{"id":4469,"nodeType":"StructuredDocumentation","src":"6000:210:19","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":4509,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"6224:7:19","nodeType":"FunctionDefinition","parameters":{"id":4474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4471,"mutability":"mutable","name":"a","nameLocation":"6240:1:19","nodeType":"VariableDeclaration","scope":4509,"src":"6232:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4470,"name":"uint256","nodeType":"ElementaryTypeName","src":"6232:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4473,"mutability":"mutable","name":"b","nameLocation":"6251:1:19","nodeType":"VariableDeclaration","scope":4509,"src":"6243:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4472,"name":"uint256","nodeType":"ElementaryTypeName","src":"6243:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6231:22:19"},"returnParameters":{"id":4477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4509,"src":"6277:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4475,"name":"uint256","nodeType":"ElementaryTypeName","src":"6277:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6276:9:19"},"scope":5739,"src":"6215:704:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4644,"nodeType":"Block","src":"7340:3585:19","statements":[{"id":4643,"nodeType":"UncheckedBlock","src":"7350:3569:19","statements":[{"assignments":[4522,4524],"declarations":[{"constant":false,"id":4522,"mutability":"mutable","name":"high","nameLocation":"7383:4:19","nodeType":"VariableDeclaration","scope":4643,"src":"7375:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4521,"name":"uint256","nodeType":"ElementaryTypeName","src":"7375:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4524,"mutability":"mutable","name":"low","nameLocation":"7397:3:19","nodeType":"VariableDeclaration","scope":4643,"src":"7389:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4523,"name":"uint256","nodeType":"ElementaryTypeName","src":"7389:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4529,"initialValue":{"arguments":[{"id":4526,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4512,"src":"7411:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4527,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"7414:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4525,"name":"mul512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"7404:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256,uint256)"}},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7404:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7374:42:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4530,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"7498:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7506:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7498:9:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4538,"nodeType":"IfStatement","src":"7494:365:19","trueBody":{"id":4537,"nodeType":"Block","src":"7509:350:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4533,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"7827:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4534,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"7833:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7827:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4520,"id":4536,"nodeType":"Return","src":"7820:24:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4539,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"7969:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4540,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"7984:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7969:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4557,"nodeType":"IfStatement","src":"7965:142:19","trueBody":{"id":4556,"nodeType":"Block","src":"7990:117:19","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4546,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"8028:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8043:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8028:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":4549,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"8046:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8052:16:19","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"8046:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4551,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"8070:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8076:14:19","memberName":"UNDER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"8070:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4545,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"8020:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8020:71:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4542,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"8008:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8014:5:19","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"8008:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8008:84:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4555,"nodeType":"ExpressionStatement","src":"8008:84:19"}]}},{"assignments":[4559],"declarations":[{"constant":false,"id":4559,"mutability":"mutable","name":"remainder","nameLocation":"8367:9:19","nodeType":"VariableDeclaration","scope":4643,"src":"8359:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4558,"name":"uint256","nodeType":"ElementaryTypeName","src":"8359:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4560,"nodeType":"VariableDeclarationStatement","src":"8359:17:19"},{"AST":{"nativeSrc":"8415:283:19","nodeType":"YulBlock","src":"8415:283:19","statements":[{"nativeSrc":"8484:38:19","nodeType":"YulAssignment","src":"8484:38:19","value":{"arguments":[{"name":"x","nativeSrc":"8504:1:19","nodeType":"YulIdentifier","src":"8504:1:19"},{"name":"y","nativeSrc":"8507:1:19","nodeType":"YulIdentifier","src":"8507:1:19"},{"name":"denominator","nativeSrc":"8510:11:19","nodeType":"YulIdentifier","src":"8510:11:19"}],"functionName":{"name":"mulmod","nativeSrc":"8497:6:19","nodeType":"YulIdentifier","src":"8497:6:19"},"nativeSrc":"8497:25:19","nodeType":"YulFunctionCall","src":"8497:25:19"},"variableNames":[{"name":"remainder","nativeSrc":"8484:9:19","nodeType":"YulIdentifier","src":"8484:9:19"}]},{"nativeSrc":"8604:37:19","nodeType":"YulAssignment","src":"8604:37:19","value":{"arguments":[{"name":"high","nativeSrc":"8616:4:19","nodeType":"YulIdentifier","src":"8616:4:19"},{"arguments":[{"name":"remainder","nativeSrc":"8625:9:19","nodeType":"YulIdentifier","src":"8625:9:19"},{"name":"low","nativeSrc":"8636:3:19","nodeType":"YulIdentifier","src":"8636:3:19"}],"functionName":{"name":"gt","nativeSrc":"8622:2:19","nodeType":"YulIdentifier","src":"8622:2:19"},"nativeSrc":"8622:18:19","nodeType":"YulFunctionCall","src":"8622:18:19"}],"functionName":{"name":"sub","nativeSrc":"8612:3:19","nodeType":"YulIdentifier","src":"8612:3:19"},"nativeSrc":"8612:29:19","nodeType":"YulFunctionCall","src":"8612:29:19"},"variableNames":[{"name":"high","nativeSrc":"8604:4:19","nodeType":"YulIdentifier","src":"8604:4:19"}]},{"nativeSrc":"8658:26:19","nodeType":"YulAssignment","src":"8658:26:19","value":{"arguments":[{"name":"low","nativeSrc":"8669:3:19","nodeType":"YulIdentifier","src":"8669:3:19"},{"name":"remainder","nativeSrc":"8674:9:19","nodeType":"YulIdentifier","src":"8674:9:19"}],"functionName":{"name":"sub","nativeSrc":"8665:3:19","nodeType":"YulIdentifier","src":"8665:3:19"},"nativeSrc":"8665:19:19","nodeType":"YulFunctionCall","src":"8665:19:19"},"variableNames":[{"name":"low","nativeSrc":"8658:3:19","nodeType":"YulIdentifier","src":"8658:3:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4516,"isOffset":false,"isSlot":false,"src":"8510:11:19","valueSize":1},{"declaration":4522,"isOffset":false,"isSlot":false,"src":"8604:4:19","valueSize":1},{"declaration":4522,"isOffset":false,"isSlot":false,"src":"8616:4:19","valueSize":1},{"declaration":4524,"isOffset":false,"isSlot":false,"src":"8636:3:19","valueSize":1},{"declaration":4524,"isOffset":false,"isSlot":false,"src":"8658:3:19","valueSize":1},{"declaration":4524,"isOffset":false,"isSlot":false,"src":"8669:3:19","valueSize":1},{"declaration":4559,"isOffset":false,"isSlot":false,"src":"8484:9:19","valueSize":1},{"declaration":4559,"isOffset":false,"isSlot":false,"src":"8625:9:19","valueSize":1},{"declaration":4559,"isOffset":false,"isSlot":false,"src":"8674:9:19","valueSize":1},{"declaration":4512,"isOffset":false,"isSlot":false,"src":"8504:1:19","valueSize":1},{"declaration":4514,"isOffset":false,"isSlot":false,"src":"8507:1:19","valueSize":1}],"flags":["memory-safe"],"id":4561,"nodeType":"InlineAssembly","src":"8390:308:19"},{"assignments":[4563],"declarations":[{"constant":false,"id":4563,"mutability":"mutable","name":"twos","nameLocation":"8910:4:19","nodeType":"VariableDeclaration","scope":4643,"src":"8902:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4562,"name":"uint256","nodeType":"ElementaryTypeName","src":"8902:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4570,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4564,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"8917:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":4565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8932:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4566,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"8936:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8932:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4568,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8931:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8917:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8902:46:19"},{"AST":{"nativeSrc":"8987:359:19","nodeType":"YulBlock","src":"8987:359:19","statements":[{"nativeSrc":"9052:37:19","nodeType":"YulAssignment","src":"9052:37:19","value":{"arguments":[{"name":"denominator","nativeSrc":"9071:11:19","nodeType":"YulIdentifier","src":"9071:11:19"},{"name":"twos","nativeSrc":"9084:4:19","nodeType":"YulIdentifier","src":"9084:4:19"}],"functionName":{"name":"div","nativeSrc":"9067:3:19","nodeType":"YulIdentifier","src":"9067:3:19"},"nativeSrc":"9067:22:19","nodeType":"YulFunctionCall","src":"9067:22:19"},"variableNames":[{"name":"denominator","nativeSrc":"9052:11:19","nodeType":"YulIdentifier","src":"9052:11:19"}]},{"nativeSrc":"9153:21:19","nodeType":"YulAssignment","src":"9153:21:19","value":{"arguments":[{"name":"low","nativeSrc":"9164:3:19","nodeType":"YulIdentifier","src":"9164:3:19"},{"name":"twos","nativeSrc":"9169:4:19","nodeType":"YulIdentifier","src":"9169:4:19"}],"functionName":{"name":"div","nativeSrc":"9160:3:19","nodeType":"YulIdentifier","src":"9160:3:19"},"nativeSrc":"9160:14:19","nodeType":"YulFunctionCall","src":"9160:14:19"},"variableNames":[{"name":"low","nativeSrc":"9153:3:19","nodeType":"YulIdentifier","src":"9153:3:19"}]},{"nativeSrc":"9293:39:19","nodeType":"YulAssignment","src":"9293:39:19","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9313:1:19","nodeType":"YulLiteral","src":"9313:1:19","type":"","value":"0"},{"name":"twos","nativeSrc":"9316:4:19","nodeType":"YulIdentifier","src":"9316:4:19"}],"functionName":{"name":"sub","nativeSrc":"9309:3:19","nodeType":"YulIdentifier","src":"9309:3:19"},"nativeSrc":"9309:12:19","nodeType":"YulFunctionCall","src":"9309:12:19"},{"name":"twos","nativeSrc":"9323:4:19","nodeType":"YulIdentifier","src":"9323:4:19"}],"functionName":{"name":"div","nativeSrc":"9305:3:19","nodeType":"YulIdentifier","src":"9305:3:19"},"nativeSrc":"9305:23:19","nodeType":"YulFunctionCall","src":"9305:23:19"},{"kind":"number","nativeSrc":"9330:1:19","nodeType":"YulLiteral","src":"9330:1:19","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9301:3:19","nodeType":"YulIdentifier","src":"9301:3:19"},"nativeSrc":"9301:31:19","nodeType":"YulFunctionCall","src":"9301:31:19"},"variableNames":[{"name":"twos","nativeSrc":"9293:4:19","nodeType":"YulIdentifier","src":"9293:4:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4516,"isOffset":false,"isSlot":false,"src":"9052:11:19","valueSize":1},{"declaration":4516,"isOffset":false,"isSlot":false,"src":"9071:11:19","valueSize":1},{"declaration":4524,"isOffset":false,"isSlot":false,"src":"9153:3:19","valueSize":1},{"declaration":4524,"isOffset":false,"isSlot":false,"src":"9164:3:19","valueSize":1},{"declaration":4563,"isOffset":false,"isSlot":false,"src":"9084:4:19","valueSize":1},{"declaration":4563,"isOffset":false,"isSlot":false,"src":"9169:4:19","valueSize":1},{"declaration":4563,"isOffset":false,"isSlot":false,"src":"9293:4:19","valueSize":1},{"declaration":4563,"isOffset":false,"isSlot":false,"src":"9316:4:19","valueSize":1},{"declaration":4563,"isOffset":false,"isSlot":false,"src":"9323:4:19","valueSize":1}],"flags":["memory-safe"],"id":4571,"nodeType":"InlineAssembly","src":"8962:384:19"},{"expression":{"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4572,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"9409:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4573,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"9416:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4574,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"9423:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9416:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9409:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4577,"nodeType":"ExpressionStatement","src":"9409:18:19"},{"assignments":[4579],"declarations":[{"constant":false,"id":4579,"mutability":"mutable","name":"inverse","nameLocation":"9770:7:19","nodeType":"VariableDeclaration","scope":4643,"src":"9762:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4578,"name":"uint256","nodeType":"ElementaryTypeName","src":"9762:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4586,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9781:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4581,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"9785:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9781:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4583,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9780:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9800:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9780:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9762:39:19"},{"expression":{"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4587,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10018:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10029:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4589,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"10033:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4590,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10047:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10029:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10018:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4594,"nodeType":"ExpressionStatement","src":"10018:36:19"},{"expression":{"id":4601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4595,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10088:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10099:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4597,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"10103:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4598,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10117:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10099:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10088:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4602,"nodeType":"ExpressionStatement","src":"10088:36:19"},{"expression":{"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4603,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10160:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10171:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4605,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"10175:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4606,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10189:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10175:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10171:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10160:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4610,"nodeType":"ExpressionStatement","src":"10160:36:19"},{"expression":{"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4611,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10231:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10242:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4613,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"10246:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4614,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10260:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10246:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10242:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10231:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4618,"nodeType":"ExpressionStatement","src":"10231:36:19"},{"expression":{"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4619,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10304:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10315:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4621,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"10319:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4622,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10333:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10319:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10315:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10304:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4626,"nodeType":"ExpressionStatement","src":"10304:36:19"},{"expression":{"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4627,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10378:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10389:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4629,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"10393:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4630,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10407:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10393:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10389:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10378:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4634,"nodeType":"ExpressionStatement","src":"10378:36:19"},{"expression":{"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"10859:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4636,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"10868:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4637,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"10874:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10868:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10859:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4640,"nodeType":"ExpressionStatement","src":"10859:22:19"},{"expression":{"id":4641,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"10902:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4520,"id":4642,"nodeType":"Return","src":"10895:13:19"}]}]},"documentation":{"id":4510,"nodeType":"StructuredDocumentation","src":"6925:312:19","text":" @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":4645,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"7251:6:19","nodeType":"FunctionDefinition","parameters":{"id":4517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4512,"mutability":"mutable","name":"x","nameLocation":"7266:1:19","nodeType":"VariableDeclaration","scope":4645,"src":"7258:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4511,"name":"uint256","nodeType":"ElementaryTypeName","src":"7258:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4514,"mutability":"mutable","name":"y","nameLocation":"7277:1:19","nodeType":"VariableDeclaration","scope":4645,"src":"7269:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4513,"name":"uint256","nodeType":"ElementaryTypeName","src":"7269:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"denominator","nameLocation":"7288:11:19","nodeType":"VariableDeclaration","scope":4645,"src":"7280:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4515,"name":"uint256","nodeType":"ElementaryTypeName","src":"7280:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7257:43:19"},"returnParameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"mutability":"mutable","name":"result","nameLocation":"7332:6:19","nodeType":"VariableDeclaration","scope":4645,"src":"7324:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4518,"name":"uint256","nodeType":"ElementaryTypeName","src":"7324:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7323:16:19"},"scope":5739,"src":"7242:3683:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4681,"nodeType":"Block","src":"11164:128:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4661,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"11188:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4662,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"11191:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4663,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"11194:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4660,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4645,4682],"referencedDeclaration":4645,"src":"11181:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11181:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4668,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"11242:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":4667,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"11225:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4130_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11225:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4671,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"11262:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4672,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"11265:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4673,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"11268:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4670,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"11255:6:19","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11255:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11283:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11255:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11225:59:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4665,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"11209:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11218:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"11209:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11209:76:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11181:104:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4659,"id":4680,"nodeType":"Return","src":"11174:111:19"}]},"documentation":{"id":4646,"nodeType":"StructuredDocumentation","src":"10931:118:19","text":" @dev Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4682,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"11063:6:19","nodeType":"FunctionDefinition","parameters":{"id":4656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4648,"mutability":"mutable","name":"x","nameLocation":"11078:1:19","nodeType":"VariableDeclaration","scope":4682,"src":"11070:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4647,"name":"uint256","nodeType":"ElementaryTypeName","src":"11070:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4650,"mutability":"mutable","name":"y","nameLocation":"11089:1:19","nodeType":"VariableDeclaration","scope":4682,"src":"11081:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4649,"name":"uint256","nodeType":"ElementaryTypeName","src":"11081:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4652,"mutability":"mutable","name":"denominator","nameLocation":"11100:11:19","nodeType":"VariableDeclaration","scope":4682,"src":"11092:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4651,"name":"uint256","nodeType":"ElementaryTypeName","src":"11092:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4655,"mutability":"mutable","name":"rounding","nameLocation":"11122:8:19","nodeType":"VariableDeclaration","scope":4682,"src":"11113:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":4654,"nodeType":"UserDefinedTypeName","pathNode":{"id":4653,"name":"Rounding","nameLocations":["11113:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"11113:8:19"},"referencedDeclaration":4130,"src":"11113:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11069:62:19"},"returnParameters":{"id":4659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4682,"src":"11155:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4657,"name":"uint256","nodeType":"ElementaryTypeName","src":"11155:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11154:9:19"},"scope":5739,"src":"11054:238:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4731,"nodeType":"Block","src":"11500:245:19","statements":[{"id":4730,"nodeType":"UncheckedBlock","src":"11510:229:19","statements":[{"assignments":[4695,4697],"declarations":[{"constant":false,"id":4695,"mutability":"mutable","name":"high","nameLocation":"11543:4:19","nodeType":"VariableDeclaration","scope":4730,"src":"11535:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4694,"name":"uint256","nodeType":"ElementaryTypeName","src":"11535:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4697,"mutability":"mutable","name":"low","nameLocation":"11557:3:19","nodeType":"VariableDeclaration","scope":4730,"src":"11549:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4696,"name":"uint256","nodeType":"ElementaryTypeName","src":"11549:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4702,"initialValue":{"arguments":[{"id":4699,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"11571:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4700,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"11574:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4698,"name":"mul512","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"11564:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256,uint256)"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11564:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11534:42:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4703,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4695,"src":"11594:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11602:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4705,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"11607:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11602:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11594:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4716,"nodeType":"IfStatement","src":"11590:86:19","trueBody":{"id":4715,"nodeType":"Block","src":"11610:66:19","statements":[{"expression":{"arguments":[{"expression":{"id":4711,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"11640:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11646:14:19","memberName":"UNDER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"11640:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4708,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"11628:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11634:5:19","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"11628:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4714,"nodeType":"ExpressionStatement","src":"11628:33:19"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4717,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4695,"src":"11697:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":4718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11706:3:19","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4719,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"11712:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11706:7:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"id":4721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11705:9:19","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"11697:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4723,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11696:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4724,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"11719:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":4725,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"11726:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11719:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4727,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11718:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11696:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4693,"id":4729,"nodeType":"Return","src":"11689:39:19"}]}]},"documentation":{"id":4683,"nodeType":"StructuredDocumentation","src":"11298:111:19","text":" @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256."},"id":4732,"implemented":true,"kind":"function","modifiers":[],"name":"mulShr","nameLocation":"11423:6:19","nodeType":"FunctionDefinition","parameters":{"id":4690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4685,"mutability":"mutable","name":"x","nameLocation":"11438:1:19","nodeType":"VariableDeclaration","scope":4732,"src":"11430:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4684,"name":"uint256","nodeType":"ElementaryTypeName","src":"11430:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4687,"mutability":"mutable","name":"y","nameLocation":"11449:1:19","nodeType":"VariableDeclaration","scope":4732,"src":"11441:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4686,"name":"uint256","nodeType":"ElementaryTypeName","src":"11441:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4689,"mutability":"mutable","name":"n","nameLocation":"11458:1:19","nodeType":"VariableDeclaration","scope":4732,"src":"11452:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4688,"name":"uint8","nodeType":"ElementaryTypeName","src":"11452:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"11429:31:19"},"returnParameters":{"id":4693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4692,"mutability":"mutable","name":"result","nameLocation":"11492:6:19","nodeType":"VariableDeclaration","scope":4732,"src":"11484:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4691,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:16:19"},"scope":5739,"src":"11414:331:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4770,"nodeType":"Block","src":"11963:113:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4748,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"11987:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4749,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"11990:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4750,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4739,"src":"11993:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4747,"name":"mulShr","nodeType":"Identifier","overloadedDeclarations":[4732,4771],"referencedDeclaration":4732,"src":"11980:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint8_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint8) pure returns (uint256)"}},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11980:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4755,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4742,"src":"12031:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":4754,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"12014:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4130_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12014:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4758,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"12051:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4759,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4737,"src":"12054:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12057:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4761,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4739,"src":"12062:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12057:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4757,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"12044:6:19","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12044:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12067:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12044:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12014:54:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4752,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"11998:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12007:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"11998:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11998:71:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11980:89:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4746,"id":4769,"nodeType":"Return","src":"11973:96:19"}]},"documentation":{"id":4733,"nodeType":"StructuredDocumentation","src":"11751:109:19","text":" @dev Calculates x * y >> n with full precision, following the selected rounding direction."},"id":4771,"implemented":true,"kind":"function","modifiers":[],"name":"mulShr","nameLocation":"11874:6:19","nodeType":"FunctionDefinition","parameters":{"id":4743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4735,"mutability":"mutable","name":"x","nameLocation":"11889:1:19","nodeType":"VariableDeclaration","scope":4771,"src":"11881:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4734,"name":"uint256","nodeType":"ElementaryTypeName","src":"11881:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4737,"mutability":"mutable","name":"y","nameLocation":"11900:1:19","nodeType":"VariableDeclaration","scope":4771,"src":"11892:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4736,"name":"uint256","nodeType":"ElementaryTypeName","src":"11892:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4739,"mutability":"mutable","name":"n","nameLocation":"11909:1:19","nodeType":"VariableDeclaration","scope":4771,"src":"11903:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4738,"name":"uint8","nodeType":"ElementaryTypeName","src":"11903:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4742,"mutability":"mutable","name":"rounding","nameLocation":"11921:8:19","nodeType":"VariableDeclaration","scope":4771,"src":"11912:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":4741,"nodeType":"UserDefinedTypeName","pathNode":{"id":4740,"name":"Rounding","nameLocations":["11912:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"11912:8:19"},"referencedDeclaration":4130,"src":"11912:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11880:50:19"},"returnParameters":{"id":4746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4771,"src":"11954:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4744,"name":"uint256","nodeType":"ElementaryTypeName","src":"11954:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11953:9:19"},"scope":5739,"src":"11865:211:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4867,"nodeType":"Block","src":"12710:1849:19","statements":[{"id":4866,"nodeType":"UncheckedBlock","src":"12720:1833:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4781,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"12748:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12753:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12748:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4786,"nodeType":"IfStatement","src":"12744:20:19","trueBody":{"expression":{"hexValue":"30","id":4784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4780,"id":4785,"nodeType":"Return","src":"12756:8:19"}},{"assignments":[4788],"declarations":[{"constant":false,"id":4788,"mutability":"mutable","name":"remainder","nameLocation":"13243:9:19","nodeType":"VariableDeclaration","scope":4866,"src":"13235:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4787,"name":"uint256","nodeType":"ElementaryTypeName","src":"13235:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4792,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4789,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"13255:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4790,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"13259:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13255:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13235:25:19"},{"assignments":[4794],"declarations":[{"constant":false,"id":4794,"mutability":"mutable","name":"gcd","nameLocation":"13282:3:19","nodeType":"VariableDeclaration","scope":4866,"src":"13274:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4793,"name":"uint256","nodeType":"ElementaryTypeName","src":"13274:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4796,"initialValue":{"id":4795,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"13288:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13274:15:19"},{"assignments":[4798],"declarations":[{"constant":false,"id":4798,"mutability":"mutable","name":"x","nameLocation":"13432:1:19","nodeType":"VariableDeclaration","scope":4866,"src":"13425:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4797,"name":"int256","nodeType":"ElementaryTypeName","src":"13425:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4800,"initialValue":{"hexValue":"30","id":4799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13436:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13425:12:19"},{"assignments":[4802],"declarations":[{"constant":false,"id":4802,"mutability":"mutable","name":"y","nameLocation":"13458:1:19","nodeType":"VariableDeclaration","scope":4866,"src":"13451:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4801,"name":"int256","nodeType":"ElementaryTypeName","src":"13451:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4804,"initialValue":{"hexValue":"31","id":4803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13462:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"13451:12:19"},{"body":{"id":4841,"nodeType":"Block","src":"13501:882:19","statements":[{"assignments":[4809],"declarations":[{"constant":false,"id":4809,"mutability":"mutable","name":"quotient","nameLocation":"13527:8:19","nodeType":"VariableDeclaration","scope":4841,"src":"13519:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4808,"name":"uint256","nodeType":"ElementaryTypeName","src":"13519:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4813,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4810,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"13538:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4811,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"13544:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13538:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13519:34:19"},{"expression":{"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4814,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"13573:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4815,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"13578:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4816,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"13572:16:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":4817,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"13678:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4818,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"13923:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4819,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"13929:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4820,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"13941:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13929:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13923:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4823,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13591:376:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"13572:395:19","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4825,"nodeType":"ExpressionStatement","src":"13572:395:19"},{"expression":{"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4826,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"13987:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":4827,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"13990:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4828,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"13986:6:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":4829,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"14072:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4830,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"14326:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4831,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"14330:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":4834,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"14341:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14334:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4832,"name":"int256","nodeType":"ElementaryTypeName","src":"14334:6:19","typeDescriptions":{}}},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14334:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14330:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14326:24:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13995:373:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"src":"13986:382:19","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4840,"nodeType":"ExpressionStatement","src":"13986:382:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4805,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"13485:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13498:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13485:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4842,"nodeType":"WhileStatement","src":"13478:905:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4843,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"14401:3:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":4844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14408:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14401:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4848,"nodeType":"IfStatement","src":"14397:22:19","trueBody":{"expression":{"hexValue":"30","id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14418:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4780,"id":4847,"nodeType":"Return","src":"14411:8:19"}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4850,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"14470:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14474:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14470:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4853,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"14477:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"14489:2:19","subExpression":{"id":4856,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"14490:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14481:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4854,"name":"uint256","nodeType":"ElementaryTypeName","src":"14481:7:19","typeDescriptions":{}}},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14481:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14477:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4862,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"14502:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14494:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4860,"name":"uint256","nodeType":"ElementaryTypeName","src":"14494:7:19","typeDescriptions":{}}},"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14494:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4849,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4407,"src":"14462:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14462:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4780,"id":4865,"nodeType":"Return","src":"14455:50:19"}]}]},"documentation":{"id":4772,"nodeType":"StructuredDocumentation","src":"12082:553:19","text":" @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n If the input value is not inversible, 0 is returned.\n NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}."},"id":4868,"implemented":true,"kind":"function","modifiers":[],"name":"invMod","nameLocation":"12649:6:19","nodeType":"FunctionDefinition","parameters":{"id":4777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4774,"mutability":"mutable","name":"a","nameLocation":"12664:1:19","nodeType":"VariableDeclaration","scope":4868,"src":"12656:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4773,"name":"uint256","nodeType":"ElementaryTypeName","src":"12656:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4776,"mutability":"mutable","name":"n","nameLocation":"12675:1:19","nodeType":"VariableDeclaration","scope":4868,"src":"12667:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4775,"name":"uint256","nodeType":"ElementaryTypeName","src":"12667:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12655:22:19"},"returnParameters":{"id":4780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4868,"src":"12701:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4778,"name":"uint256","nodeType":"ElementaryTypeName","src":"12701:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12700:9:19"},"scope":5739,"src":"12640:1919:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4888,"nodeType":"Block","src":"15159:82:19","statements":[{"id":4887,"nodeType":"UncheckedBlock","src":"15169:66:19","statements":[{"expression":{"arguments":[{"id":4880,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"15212:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4881,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"15215:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":4882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15219:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15215:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4884,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"15222:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4878,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"15200:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15205:6:19","memberName":"modExp","nodeType":"MemberAccess","referencedDeclaration":4925,"src":"15200:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (uint256)"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15200:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4877,"id":4886,"nodeType":"Return","src":"15193:31:19"}]}]},"documentation":{"id":4869,"nodeType":"StructuredDocumentation","src":"14565:514:19","text":" @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n NOTE: this function does NOT check that `p` is a prime greater than `2`."},"id":4889,"implemented":true,"kind":"function","modifiers":[],"name":"invModPrime","nameLocation":"15093:11:19","nodeType":"FunctionDefinition","parameters":{"id":4874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4871,"mutability":"mutable","name":"a","nameLocation":"15113:1:19","nodeType":"VariableDeclaration","scope":4889,"src":"15105:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4870,"name":"uint256","nodeType":"ElementaryTypeName","src":"15105:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4873,"mutability":"mutable","name":"p","nameLocation":"15124:1:19","nodeType":"VariableDeclaration","scope":4889,"src":"15116:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4872,"name":"uint256","nodeType":"ElementaryTypeName","src":"15116:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15104:22:19"},"returnParameters":{"id":4877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4889,"src":"15150:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4875,"name":"uint256","nodeType":"ElementaryTypeName","src":"15150:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15149:9:19"},"scope":5739,"src":"15084:157:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4924,"nodeType":"Block","src":"16011:174:19","statements":[{"assignments":[4902,4904],"declarations":[{"constant":false,"id":4902,"mutability":"mutable","name":"success","nameLocation":"16027:7:19","nodeType":"VariableDeclaration","scope":4924,"src":"16022:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4901,"name":"bool","nodeType":"ElementaryTypeName","src":"16022:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4904,"mutability":"mutable","name":"result","nameLocation":"16044:6:19","nodeType":"VariableDeclaration","scope":4924,"src":"16036:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4903,"name":"uint256","nodeType":"ElementaryTypeName","src":"16036:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4910,"initialValue":{"arguments":[{"id":4906,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4892,"src":"16064:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4907,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"16067:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4908,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"16070:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4905,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[4949,5031],"referencedDeclaration":4949,"src":"16054:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (bool,uint256)"}},"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16054:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"16021:51:19"},{"condition":{"id":4912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16086:8:19","subExpression":{"id":4911,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4902,"src":"16087:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4921,"nodeType":"IfStatement","src":"16082:74:19","trueBody":{"id":4920,"nodeType":"Block","src":"16096:60:19","statements":[{"expression":{"arguments":[{"expression":{"id":4916,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"16122:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16128:16:19","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"16122:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4913,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"16110:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16116:5:19","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"16110:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16110:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4919,"nodeType":"ExpressionStatement","src":"16110:35:19"}]}},{"expression":{"id":4922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4904,"src":"16172:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4900,"id":4923,"nodeType":"Return","src":"16165:13:19"}]},"documentation":{"id":4890,"nodeType":"StructuredDocumentation","src":"15247:678:19","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n Requirements:\n - modulus can't be zero\n - underlying staticcall to precompile must succeed\n IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n sure the chain you're using it on supports the precompiled contract for modular exponentiation\n at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n interpreted as 0."},"id":4925,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"15939:6:19","nodeType":"FunctionDefinition","parameters":{"id":4897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4892,"mutability":"mutable","name":"b","nameLocation":"15954:1:19","nodeType":"VariableDeclaration","scope":4925,"src":"15946:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4891,"name":"uint256","nodeType":"ElementaryTypeName","src":"15946:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4894,"mutability":"mutable","name":"e","nameLocation":"15965:1:19","nodeType":"VariableDeclaration","scope":4925,"src":"15957:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4893,"name":"uint256","nodeType":"ElementaryTypeName","src":"15957:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4896,"mutability":"mutable","name":"m","nameLocation":"15976:1:19","nodeType":"VariableDeclaration","scope":4925,"src":"15968:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4895,"name":"uint256","nodeType":"ElementaryTypeName","src":"15968:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15945:33:19"},"returnParameters":{"id":4900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4925,"src":"16002:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4898,"name":"uint256","nodeType":"ElementaryTypeName","src":"16002:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16001:9:19"},"scope":5739,"src":"15930:255:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4948,"nodeType":"Block","src":"17039:1493:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4939,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"17053:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17058:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17053:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4946,"nodeType":"IfStatement","src":"17049:29:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17069:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17076:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"17068:10:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4938,"id":4945,"nodeType":"Return","src":"17061:17:19"}},{"AST":{"nativeSrc":"17113:1413:19","nodeType":"YulBlock","src":"17113:1413:19","statements":[{"nativeSrc":"17127:22:19","nodeType":"YulVariableDeclaration","src":"17127:22:19","value":{"arguments":[{"kind":"number","nativeSrc":"17144:4:19","nodeType":"YulLiteral","src":"17144:4:19","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"17138:5:19","nodeType":"YulIdentifier","src":"17138:5:19"},"nativeSrc":"17138:11:19","nodeType":"YulFunctionCall","src":"17138:11:19"},"variables":[{"name":"ptr","nativeSrc":"17131:3:19","nodeType":"YulTypedName","src":"17131:3:19","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"18057:3:19","nodeType":"YulIdentifier","src":"18057:3:19"},{"kind":"number","nativeSrc":"18062:4:19","nodeType":"YulLiteral","src":"18062:4:19","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"18050:6:19","nodeType":"YulIdentifier","src":"18050:6:19"},"nativeSrc":"18050:17:19","nodeType":"YulFunctionCall","src":"18050:17:19"},"nativeSrc":"18050:17:19","nodeType":"YulExpressionStatement","src":"18050:17:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18091:3:19","nodeType":"YulIdentifier","src":"18091:3:19"},{"kind":"number","nativeSrc":"18096:4:19","nodeType":"YulLiteral","src":"18096:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"18087:3:19","nodeType":"YulIdentifier","src":"18087:3:19"},"nativeSrc":"18087:14:19","nodeType":"YulFunctionCall","src":"18087:14:19"},{"kind":"number","nativeSrc":"18103:4:19","nodeType":"YulLiteral","src":"18103:4:19","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"18080:6:19","nodeType":"YulIdentifier","src":"18080:6:19"},"nativeSrc":"18080:28:19","nodeType":"YulFunctionCall","src":"18080:28:19"},"nativeSrc":"18080:28:19","nodeType":"YulExpressionStatement","src":"18080:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18132:3:19","nodeType":"YulIdentifier","src":"18132:3:19"},{"kind":"number","nativeSrc":"18137:4:19","nodeType":"YulLiteral","src":"18137:4:19","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"18128:3:19","nodeType":"YulIdentifier","src":"18128:3:19"},"nativeSrc":"18128:14:19","nodeType":"YulFunctionCall","src":"18128:14:19"},{"kind":"number","nativeSrc":"18144:4:19","nodeType":"YulLiteral","src":"18144:4:19","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"18121:6:19","nodeType":"YulIdentifier","src":"18121:6:19"},"nativeSrc":"18121:28:19","nodeType":"YulFunctionCall","src":"18121:28:19"},"nativeSrc":"18121:28:19","nodeType":"YulExpressionStatement","src":"18121:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18173:3:19","nodeType":"YulIdentifier","src":"18173:3:19"},{"kind":"number","nativeSrc":"18178:4:19","nodeType":"YulLiteral","src":"18178:4:19","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"18169:3:19","nodeType":"YulIdentifier","src":"18169:3:19"},"nativeSrc":"18169:14:19","nodeType":"YulFunctionCall","src":"18169:14:19"},{"name":"b","nativeSrc":"18185:1:19","nodeType":"YulIdentifier","src":"18185:1:19"}],"functionName":{"name":"mstore","nativeSrc":"18162:6:19","nodeType":"YulIdentifier","src":"18162:6:19"},"nativeSrc":"18162:25:19","nodeType":"YulFunctionCall","src":"18162:25:19"},"nativeSrc":"18162:25:19","nodeType":"YulExpressionStatement","src":"18162:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18211:3:19","nodeType":"YulIdentifier","src":"18211:3:19"},{"kind":"number","nativeSrc":"18216:4:19","nodeType":"YulLiteral","src":"18216:4:19","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"18207:3:19","nodeType":"YulIdentifier","src":"18207:3:19"},"nativeSrc":"18207:14:19","nodeType":"YulFunctionCall","src":"18207:14:19"},{"name":"e","nativeSrc":"18223:1:19","nodeType":"YulIdentifier","src":"18223:1:19"}],"functionName":{"name":"mstore","nativeSrc":"18200:6:19","nodeType":"YulIdentifier","src":"18200:6:19"},"nativeSrc":"18200:25:19","nodeType":"YulFunctionCall","src":"18200:25:19"},"nativeSrc":"18200:25:19","nodeType":"YulExpressionStatement","src":"18200:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"18249:3:19","nodeType":"YulIdentifier","src":"18249:3:19"},{"kind":"number","nativeSrc":"18254:4:19","nodeType":"YulLiteral","src":"18254:4:19","type":"","value":"0xa0"}],"functionName":{"name":"add","nativeSrc":"18245:3:19","nodeType":"YulIdentifier","src":"18245:3:19"},"nativeSrc":"18245:14:19","nodeType":"YulFunctionCall","src":"18245:14:19"},{"name":"m","nativeSrc":"18261:1:19","nodeType":"YulIdentifier","src":"18261:1:19"}],"functionName":{"name":"mstore","nativeSrc":"18238:6:19","nodeType":"YulIdentifier","src":"18238:6:19"},"nativeSrc":"18238:25:19","nodeType":"YulFunctionCall","src":"18238:25:19"},"nativeSrc":"18238:25:19","nodeType":"YulExpressionStatement","src":"18238:25:19"},{"nativeSrc":"18425:57:19","nodeType":"YulAssignment","src":"18425:57:19","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"18447:3:19","nodeType":"YulIdentifier","src":"18447:3:19"},"nativeSrc":"18447:5:19","nodeType":"YulFunctionCall","src":"18447:5:19"},{"kind":"number","nativeSrc":"18454:4:19","nodeType":"YulLiteral","src":"18454:4:19","type":"","value":"0x05"},{"name":"ptr","nativeSrc":"18460:3:19","nodeType":"YulIdentifier","src":"18460:3:19"},{"kind":"number","nativeSrc":"18465:4:19","nodeType":"YulLiteral","src":"18465:4:19","type":"","value":"0xc0"},{"kind":"number","nativeSrc":"18471:4:19","nodeType":"YulLiteral","src":"18471:4:19","type":"","value":"0x00"},{"kind":"number","nativeSrc":"18477:4:19","nodeType":"YulLiteral","src":"18477:4:19","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nativeSrc":"18436:10:19","nodeType":"YulIdentifier","src":"18436:10:19"},"nativeSrc":"18436:46:19","nodeType":"YulFunctionCall","src":"18436:46:19"},"variableNames":[{"name":"success","nativeSrc":"18425:7:19","nodeType":"YulIdentifier","src":"18425:7:19"}]},{"nativeSrc":"18495:21:19","nodeType":"YulAssignment","src":"18495:21:19","value":{"arguments":[{"kind":"number","nativeSrc":"18511:4:19","nodeType":"YulLiteral","src":"18511:4:19","type":"","value":"0x00"}],"functionName":{"name":"mload","nativeSrc":"18505:5:19","nodeType":"YulIdentifier","src":"18505:5:19"},"nativeSrc":"18505:11:19","nodeType":"YulFunctionCall","src":"18505:11:19"},"variableNames":[{"name":"result","nativeSrc":"18495:6:19","nodeType":"YulIdentifier","src":"18495:6:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":4928,"isOffset":false,"isSlot":false,"src":"18185:1:19","valueSize":1},{"declaration":4930,"isOffset":false,"isSlot":false,"src":"18223:1:19","valueSize":1},{"declaration":4932,"isOffset":false,"isSlot":false,"src":"18261:1:19","valueSize":1},{"declaration":4937,"isOffset":false,"isSlot":false,"src":"18495:6:19","valueSize":1},{"declaration":4935,"isOffset":false,"isSlot":false,"src":"18425:7:19","valueSize":1}],"flags":["memory-safe"],"id":4947,"nodeType":"InlineAssembly","src":"17088:1438:19"}]},"documentation":{"id":4926,"nodeType":"StructuredDocumentation","src":"16191:738:19","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n to operate modulo 0 or if the underlying precompile reverted.\n IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n of a revert, but the result may be incorrectly interpreted as 0."},"id":4949,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"16943:9:19","nodeType":"FunctionDefinition","parameters":{"id":4933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4928,"mutability":"mutable","name":"b","nameLocation":"16961:1:19","nodeType":"VariableDeclaration","scope":4949,"src":"16953:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4927,"name":"uint256","nodeType":"ElementaryTypeName","src":"16953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4930,"mutability":"mutable","name":"e","nameLocation":"16972:1:19","nodeType":"VariableDeclaration","scope":4949,"src":"16964:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4929,"name":"uint256","nodeType":"ElementaryTypeName","src":"16964:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4932,"mutability":"mutable","name":"m","nameLocation":"16983:1:19","nodeType":"VariableDeclaration","scope":4949,"src":"16975:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4931,"name":"uint256","nodeType":"ElementaryTypeName","src":"16975:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16952:33:19"},"returnParameters":{"id":4938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4935,"mutability":"mutable","name":"success","nameLocation":"17014:7:19","nodeType":"VariableDeclaration","scope":4949,"src":"17009:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4934,"name":"bool","nodeType":"ElementaryTypeName","src":"17009:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4937,"mutability":"mutable","name":"result","nameLocation":"17031:6:19","nodeType":"VariableDeclaration","scope":4949,"src":"17023:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4936,"name":"uint256","nodeType":"ElementaryTypeName","src":"17023:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17008:30:19"},"scope":5739,"src":"16934:1598:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4984,"nodeType":"Block","src":"18729:179:19","statements":[{"assignments":[4962,4964],"declarations":[{"constant":false,"id":4962,"mutability":"mutable","name":"success","nameLocation":"18745:7:19","nodeType":"VariableDeclaration","scope":4984,"src":"18740:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4961,"name":"bool","nodeType":"ElementaryTypeName","src":"18740:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4964,"mutability":"mutable","name":"result","nameLocation":"18767:6:19","nodeType":"VariableDeclaration","scope":4984,"src":"18754:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4963,"name":"bytes","nodeType":"ElementaryTypeName","src":"18754:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4970,"initialValue":{"arguments":[{"id":4966,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"18787:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4967,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"18790:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4968,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4956,"src":"18793:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4965,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[4949,5031],"referencedDeclaration":5031,"src":"18777:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory,bytes memory) view returns (bool,bytes memory)"}},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18777:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"18739:56:19"},{"condition":{"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"18809:8:19","subExpression":{"id":4971,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"18810:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4981,"nodeType":"IfStatement","src":"18805:74:19","trueBody":{"id":4980,"nodeType":"Block","src":"18819:60:19","statements":[{"expression":{"arguments":[{"expression":{"id":4976,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"18845:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18851:16:19","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"18845:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4973,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"18833:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$1714_$","typeString":"type(library Panic)"}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18839:5:19","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"18833:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18833:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4979,"nodeType":"ExpressionStatement","src":"18833:35:19"}]}},{"expression":{"id":4982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"18895:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4960,"id":4983,"nodeType":"Return","src":"18888:13:19"}]},"documentation":{"id":4950,"nodeType":"StructuredDocumentation","src":"18538:85:19","text":" @dev Variant of {modExp} that supports inputs of arbitrary length."},"id":4985,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"18637:6:19","nodeType":"FunctionDefinition","parameters":{"id":4957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4952,"mutability":"mutable","name":"b","nameLocation":"18657:1:19","nodeType":"VariableDeclaration","scope":4985,"src":"18644:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4951,"name":"bytes","nodeType":"ElementaryTypeName","src":"18644:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4954,"mutability":"mutable","name":"e","nameLocation":"18673:1:19","nodeType":"VariableDeclaration","scope":4985,"src":"18660:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4953,"name":"bytes","nodeType":"ElementaryTypeName","src":"18660:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4956,"mutability":"mutable","name":"m","nameLocation":"18689:1:19","nodeType":"VariableDeclaration","scope":4985,"src":"18676:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4955,"name":"bytes","nodeType":"ElementaryTypeName","src":"18676:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18643:48:19"},"returnParameters":{"id":4960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4985,"src":"18715:12:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4958,"name":"bytes","nodeType":"ElementaryTypeName","src":"18715:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18714:14:19"},"scope":5739,"src":"18628:280:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5030,"nodeType":"Block","src":"19162:771:19","statements":[{"condition":{"arguments":[{"id":5000,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"19187:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4999,"name":"_zeroBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5064,"src":"19176:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19176:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5009,"nodeType":"IfStatement","src":"19172:47:19","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":5002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19199:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":5005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19216:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"19206:9:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":5003,"name":"bytes","nodeType":"ElementaryTypeName","src":"19210:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":5006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19206:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":5007,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19198:21:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":4998,"id":5008,"nodeType":"Return","src":"19191:28:19"}},{"assignments":[5011],"declarations":[{"constant":false,"id":5011,"mutability":"mutable","name":"mLen","nameLocation":"19238:4:19","nodeType":"VariableDeclaration","scope":5030,"src":"19230:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5010,"name":"uint256","nodeType":"ElementaryTypeName","src":"19230:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5014,"initialValue":{"expression":{"id":5012,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"19245:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19247:6:19","memberName":"length","nodeType":"MemberAccess","src":"19245:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19230:23:19"},{"expression":{"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"19335:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5018,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4988,"src":"19361:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19363:6:19","memberName":"length","nodeType":"MemberAccess","src":"19361:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5020,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4990,"src":"19371:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19373:6:19","memberName":"length","nodeType":"MemberAccess","src":"19371:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5022,"name":"mLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"19381:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5023,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4988,"src":"19387:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5024,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4990,"src":"19390:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5025,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"19393:1:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5016,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"19344:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19348:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"19344:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19344:51:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"19335:60:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5028,"nodeType":"ExpressionStatement","src":"19335:60:19"},{"AST":{"nativeSrc":"19431:496:19","nodeType":"YulBlock","src":"19431:496:19","statements":[{"nativeSrc":"19445:32:19","nodeType":"YulVariableDeclaration","src":"19445:32:19","value":{"arguments":[{"name":"result","nativeSrc":"19464:6:19","nodeType":"YulIdentifier","src":"19464:6:19"},{"kind":"number","nativeSrc":"19472:4:19","nodeType":"YulLiteral","src":"19472:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19460:3:19","nodeType":"YulIdentifier","src":"19460:3:19"},"nativeSrc":"19460:17:19","nodeType":"YulFunctionCall","src":"19460:17:19"},"variables":[{"name":"dataPtr","nativeSrc":"19449:7:19","nodeType":"YulTypedName","src":"19449:7:19","type":""}]},{"nativeSrc":"19567:73:19","nodeType":"YulAssignment","src":"19567:73:19","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"19589:3:19","nodeType":"YulIdentifier","src":"19589:3:19"},"nativeSrc":"19589:5:19","nodeType":"YulFunctionCall","src":"19589:5:19"},{"kind":"number","nativeSrc":"19596:4:19","nodeType":"YulLiteral","src":"19596:4:19","type":"","value":"0x05"},{"name":"dataPtr","nativeSrc":"19602:7:19","nodeType":"YulIdentifier","src":"19602:7:19"},{"arguments":[{"name":"result","nativeSrc":"19617:6:19","nodeType":"YulIdentifier","src":"19617:6:19"}],"functionName":{"name":"mload","nativeSrc":"19611:5:19","nodeType":"YulIdentifier","src":"19611:5:19"},"nativeSrc":"19611:13:19","nodeType":"YulFunctionCall","src":"19611:13:19"},{"name":"dataPtr","nativeSrc":"19626:7:19","nodeType":"YulIdentifier","src":"19626:7:19"},{"name":"mLen","nativeSrc":"19635:4:19","nodeType":"YulIdentifier","src":"19635:4:19"}],"functionName":{"name":"staticcall","nativeSrc":"19578:10:19","nodeType":"YulIdentifier","src":"19578:10:19"},"nativeSrc":"19578:62:19","nodeType":"YulFunctionCall","src":"19578:62:19"},"variableNames":[{"name":"success","nativeSrc":"19567:7:19","nodeType":"YulIdentifier","src":"19567:7:19"}]},{"expression":{"arguments":[{"name":"result","nativeSrc":"19796:6:19","nodeType":"YulIdentifier","src":"19796:6:19"},{"name":"mLen","nativeSrc":"19804:4:19","nodeType":"YulIdentifier","src":"19804:4:19"}],"functionName":{"name":"mstore","nativeSrc":"19789:6:19","nodeType":"YulIdentifier","src":"19789:6:19"},"nativeSrc":"19789:20:19","nodeType":"YulFunctionCall","src":"19789:20:19"},"nativeSrc":"19789:20:19","nodeType":"YulExpressionStatement","src":"19789:20:19"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19892:4:19","nodeType":"YulLiteral","src":"19892:4:19","type":"","value":"0x40"},{"arguments":[{"name":"dataPtr","nativeSrc":"19902:7:19","nodeType":"YulIdentifier","src":"19902:7:19"},{"name":"mLen","nativeSrc":"19911:4:19","nodeType":"YulIdentifier","src":"19911:4:19"}],"functionName":{"name":"add","nativeSrc":"19898:3:19","nodeType":"YulIdentifier","src":"19898:3:19"},"nativeSrc":"19898:18:19","nodeType":"YulFunctionCall","src":"19898:18:19"}],"functionName":{"name":"mstore","nativeSrc":"19885:6:19","nodeType":"YulIdentifier","src":"19885:6:19"},"nativeSrc":"19885:32:19","nodeType":"YulFunctionCall","src":"19885:32:19"},"nativeSrc":"19885:32:19","nodeType":"YulExpressionStatement","src":"19885:32:19"}]},"evmVersion":"cancun","externalReferences":[{"declaration":5011,"isOffset":false,"isSlot":false,"src":"19635:4:19","valueSize":1},{"declaration":5011,"isOffset":false,"isSlot":false,"src":"19804:4:19","valueSize":1},{"declaration":5011,"isOffset":false,"isSlot":false,"src":"19911:4:19","valueSize":1},{"declaration":4997,"isOffset":false,"isSlot":false,"src":"19464:6:19","valueSize":1},{"declaration":4997,"isOffset":false,"isSlot":false,"src":"19617:6:19","valueSize":1},{"declaration":4997,"isOffset":false,"isSlot":false,"src":"19796:6:19","valueSize":1},{"declaration":4995,"isOffset":false,"isSlot":false,"src":"19567:7:19","valueSize":1}],"flags":["memory-safe"],"id":5029,"nodeType":"InlineAssembly","src":"19406:521:19"}]},"documentation":{"id":4986,"nodeType":"StructuredDocumentation","src":"18914:88:19","text":" @dev Variant of {tryModExp} that supports inputs of arbitrary length."},"id":5031,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"19016:9:19","nodeType":"FunctionDefinition","parameters":{"id":4993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4988,"mutability":"mutable","name":"b","nameLocation":"19048:1:19","nodeType":"VariableDeclaration","scope":5031,"src":"19035:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4987,"name":"bytes","nodeType":"ElementaryTypeName","src":"19035:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4990,"mutability":"mutable","name":"e","nameLocation":"19072:1:19","nodeType":"VariableDeclaration","scope":5031,"src":"19059:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4989,"name":"bytes","nodeType":"ElementaryTypeName","src":"19059:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4992,"mutability":"mutable","name":"m","nameLocation":"19096:1:19","nodeType":"VariableDeclaration","scope":5031,"src":"19083:14:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4991,"name":"bytes","nodeType":"ElementaryTypeName","src":"19083:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19025:78:19"},"returnParameters":{"id":4998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4995,"mutability":"mutable","name":"success","nameLocation":"19132:7:19","nodeType":"VariableDeclaration","scope":5031,"src":"19127:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4994,"name":"bool","nodeType":"ElementaryTypeName","src":"19127:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4997,"mutability":"mutable","name":"result","nameLocation":"19154:6:19","nodeType":"VariableDeclaration","scope":5031,"src":"19141:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4996,"name":"bytes","nodeType":"ElementaryTypeName","src":"19141:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19126:35:19"},"scope":5739,"src":"19007:926:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5063,"nodeType":"Block","src":"20088:176:19","statements":[{"body":{"id":5059,"nodeType":"Block","src":"20145:92:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5050,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5034,"src":"20163:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5052,"indexExpression":{"id":5051,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5040,"src":"20173:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20163:12:19","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20179:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20163:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5058,"nodeType":"IfStatement","src":"20159:68:19","trueBody":{"id":5057,"nodeType":"Block","src":"20182:45:19","statements":[{"expression":{"hexValue":"66616c7365","id":5055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"20207:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5038,"id":5056,"nodeType":"Return","src":"20200:12:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5043,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5040,"src":"20118:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5044,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5034,"src":"20122:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20132:6:19","memberName":"length","nodeType":"MemberAccess","src":"20122:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20118:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5060,"initializationExpression":{"assignments":[5040],"declarations":[{"constant":false,"id":5040,"mutability":"mutable","name":"i","nameLocation":"20111:1:19","nodeType":"VariableDeclaration","scope":5060,"src":"20103:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5039,"name":"uint256","nodeType":"ElementaryTypeName","src":"20103:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5042,"initialValue":{"hexValue":"30","id":5041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20115:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"20103:13:19"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"20140:3:19","subExpression":{"id":5047,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5040,"src":"20142:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5049,"nodeType":"ExpressionStatement","src":"20140:3:19"},"nodeType":"ForStatement","src":"20098:139:19"},{"expression":{"hexValue":"74727565","id":5061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"20253:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5038,"id":5062,"nodeType":"Return","src":"20246:11:19"}]},"documentation":{"id":5032,"nodeType":"StructuredDocumentation","src":"19939:72:19","text":" @dev Returns whether the provided byte array is zero."},"id":5064,"implemented":true,"kind":"function","modifiers":[],"name":"_zeroBytes","nameLocation":"20025:10:19","nodeType":"FunctionDefinition","parameters":{"id":5035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5034,"mutability":"mutable","name":"byteArray","nameLocation":"20049:9:19","nodeType":"VariableDeclaration","scope":5064,"src":"20036:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5033,"name":"bytes","nodeType":"ElementaryTypeName","src":"20036:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20035:24:19"},"returnParameters":{"id":5038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5064,"src":"20082:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5036,"name":"bool","nodeType":"ElementaryTypeName","src":"20082:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20081:6:19"},"scope":5739,"src":"20016:248:19","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":5282,"nodeType":"Block","src":"20624:5124:19","statements":[{"id":5281,"nodeType":"UncheckedBlock","src":"20634:5108:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5072,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"20728:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31","id":5073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20733:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20728:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5078,"nodeType":"IfStatement","src":"20724:53:19","trueBody":{"id":5077,"nodeType":"Block","src":"20736:41:19","statements":[{"expression":{"id":5075,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"20761:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5071,"id":5076,"nodeType":"Return","src":"20754:8:19"}]}},{"assignments":[5080],"declarations":[{"constant":false,"id":5080,"mutability":"mutable","name":"aa","nameLocation":"21712:2:19","nodeType":"VariableDeclaration","scope":5281,"src":"21704:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5079,"name":"uint256","nodeType":"ElementaryTypeName","src":"21704:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5082,"initialValue":{"id":5081,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"21717:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21704:14:19"},{"assignments":[5084],"declarations":[{"constant":false,"id":5084,"mutability":"mutable","name":"xn","nameLocation":"21740:2:19","nodeType":"VariableDeclaration","scope":5281,"src":"21732:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5083,"name":"uint256","nodeType":"ElementaryTypeName","src":"21732:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5086,"initialValue":{"hexValue":"31","id":5085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21745:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"21732:14:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5087,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"21765:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":5090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21772:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":5089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21777:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"21772:8:19","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":5091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"21771:10:19","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"src":"21765:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5102,"nodeType":"IfStatement","src":"21761:92:19","trueBody":{"id":5101,"nodeType":"Block","src":"21783:70:19","statements":[{"expression":{"id":5095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5093,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"21801:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21808:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"21801:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5096,"nodeType":"ExpressionStatement","src":"21801:10:19"},{"expression":{"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5097,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"21829:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3634","id":5098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21836:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"21829:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5100,"nodeType":"ExpressionStatement","src":"21829:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5103,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"21870:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":5106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21877:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":5105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21882:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"21877:7:19","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":5107,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"21876:9:19","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"src":"21870:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5118,"nodeType":"IfStatement","src":"21866:90:19","trueBody":{"id":5117,"nodeType":"Block","src":"21887:69:19","statements":[{"expression":{"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5109,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"21905:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21912:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"21905:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5112,"nodeType":"ExpressionStatement","src":"21905:9:19"},{"expression":{"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5113,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"21932:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3332","id":5114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21939:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"21932:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5116,"nodeType":"ExpressionStatement","src":"21932:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5119,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"21973:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":5122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21980:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":5121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21985:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"21980:7:19","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":5123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"21979:9:19","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"21973:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5134,"nodeType":"IfStatement","src":"21969:90:19","trueBody":{"id":5133,"nodeType":"Block","src":"21990:69:19","statements":[{"expression":{"id":5127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5125,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22008:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22015:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"22008:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5128,"nodeType":"ExpressionStatement","src":"22008:9:19"},{"expression":{"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5129,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22035:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3136","id":5130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22042:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"22035:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5132,"nodeType":"ExpressionStatement","src":"22035:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5135,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22076:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":5138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22083:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":5137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22088:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"22083:7:19","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":5139,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22082:9:19","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"src":"22076:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5150,"nodeType":"IfStatement","src":"22072:89:19","trueBody":{"id":5149,"nodeType":"Block","src":"22093:68:19","statements":[{"expression":{"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5141,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22111:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22118:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"22111:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5144,"nodeType":"ExpressionStatement","src":"22111:9:19"},{"expression":{"id":5147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5145,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22138:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"38","id":5146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22145:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"22138:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5148,"nodeType":"ExpressionStatement","src":"22138:8:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5151,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22178:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":5154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22185:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":5153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22190:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"22185:6:19","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":5155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22184:8:19","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"src":"22178:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5166,"nodeType":"IfStatement","src":"22174:87:19","trueBody":{"id":5165,"nodeType":"Block","src":"22194:67:19","statements":[{"expression":{"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5157,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22212:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22219:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"22212:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5160,"nodeType":"ExpressionStatement","src":"22212:8:19"},{"expression":{"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5161,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22238:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"34","id":5162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22245:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"22238:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5164,"nodeType":"ExpressionStatement","src":"22238:8:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5167,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22278:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"id":5170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22285:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":5169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22290:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"22285:6:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}}],"id":5171,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22284:8:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}},"src":"22278:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5182,"nodeType":"IfStatement","src":"22274:87:19","trueBody":{"id":5181,"nodeType":"Block","src":"22294:67:19","statements":[{"expression":{"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5173,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22312:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":5174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22319:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"22312:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5176,"nodeType":"ExpressionStatement","src":"22312:8:19"},{"expression":{"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5177,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22338:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":5178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22345:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22338:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5180,"nodeType":"ExpressionStatement","src":"22338:8:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5183,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"22378:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"id":5186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22385:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":5185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22390:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22385:6:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}}],"id":5187,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"22384:8:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}},"src":"22378:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5194,"nodeType":"IfStatement","src":"22374:61:19","trueBody":{"id":5193,"nodeType":"Block","src":"22394:41:19","statements":[{"expression":{"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5189,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22412:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":5190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22419:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22412:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5192,"nodeType":"ExpressionStatement","src":"22412:8:19"}]}},{"expression":{"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5195,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22855:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":5196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22861:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5197,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"22865:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22861:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22860:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22872:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22860:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22855:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5203,"nodeType":"ExpressionStatement","src":"22855:18:19"},{"expression":{"id":5213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5204,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24760:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5205,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24766:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"24771:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5207,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24775:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24771:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24766:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24765:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24782:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24765:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24760:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5214,"nodeType":"ExpressionStatement","src":"24760:23:19"},{"expression":{"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5215,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24869:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5216,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24875:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5217,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"24880:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5218,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24884:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24880:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24875:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5221,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24874:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24891:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24874:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24869:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5225,"nodeType":"ExpressionStatement","src":"24869:23:19"},{"expression":{"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5226,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24980:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5227,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24986:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"24991:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5229,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"24995:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24991:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24986:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5232,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"24985:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25002:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24985:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24980:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5236,"nodeType":"ExpressionStatement","src":"24980:23:19"},{"expression":{"id":5246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5237,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25089:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5238,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25095:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5239,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"25100:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5240,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25104:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25100:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25095:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25094:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25111:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25094:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25089:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5247,"nodeType":"ExpressionStatement","src":"25089:23:19"},{"expression":{"id":5257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5248,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25199:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5249,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25205:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5250,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"25210:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5251,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25214:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25210:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25205:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5254,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25204:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25221:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25204:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25199:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5258,"nodeType":"ExpressionStatement","src":"25199:23:19"},{"expression":{"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5259,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25309:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5260,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25315:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5261,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"25320:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5262,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25324:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25320:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25315:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5265,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"25314:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25331:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"25314:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25309:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5269,"nodeType":"ExpressionStatement","src":"25309:23:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5270,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25698:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5273,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25719:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5274,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"25724:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5275,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5084,"src":"25728:2:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25724:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25719:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5271,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"25703:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25712:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"25703:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25703:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25698:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5071,"id":5280,"nodeType":"Return","src":"25691:40:19"}]}]},"documentation":{"id":5065,"nodeType":"StructuredDocumentation","src":"20270:292:19","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n using integer operations."},"id":5283,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"20576:4:19","nodeType":"FunctionDefinition","parameters":{"id":5068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5067,"mutability":"mutable","name":"a","nameLocation":"20589:1:19","nodeType":"VariableDeclaration","scope":5283,"src":"20581:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5066,"name":"uint256","nodeType":"ElementaryTypeName","src":"20581:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20580:11:19"},"returnParameters":{"id":5071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5283,"src":"20615:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5069,"name":"uint256","nodeType":"ElementaryTypeName","src":"20615:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20614:9:19"},"scope":5739,"src":"20567:5181:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5316,"nodeType":"Block","src":"25921:171:19","statements":[{"id":5315,"nodeType":"UncheckedBlock","src":"25931:155:19","statements":[{"assignments":[5295],"declarations":[{"constant":false,"id":5295,"mutability":"mutable","name":"result","nameLocation":"25963:6:19","nodeType":"VariableDeclaration","scope":5315,"src":"25955:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5294,"name":"uint256","nodeType":"ElementaryTypeName","src":"25955:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5299,"initialValue":{"arguments":[{"id":5297,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"25977:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5296,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[5283,5317],"referencedDeclaration":5283,"src":"25972:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25972:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25955:24:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5300,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5295,"src":"26000:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5304,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"26042:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":5303,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"26025:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4130_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26025:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5295,"src":"26055:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5307,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5295,"src":"26064:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26055:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5309,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"26073:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26055:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26025:49:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5301,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26009:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26018:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26009:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26009:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26000:75:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5293,"id":5314,"nodeType":"Return","src":"25993:82:19"}]}]},"documentation":{"id":5284,"nodeType":"StructuredDocumentation","src":"25754:86:19","text":" @dev Calculates sqrt(a), following the selected rounding direction."},"id":5317,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"25854:4:19","nodeType":"FunctionDefinition","parameters":{"id":5290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5286,"mutability":"mutable","name":"a","nameLocation":"25867:1:19","nodeType":"VariableDeclaration","scope":5317,"src":"25859:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5285,"name":"uint256","nodeType":"ElementaryTypeName","src":"25859:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5289,"mutability":"mutable","name":"rounding","nameLocation":"25879:8:19","nodeType":"VariableDeclaration","scope":5317,"src":"25870:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":5288,"nodeType":"UserDefinedTypeName","pathNode":{"id":5287,"name":"Rounding","nameLocations":["25870:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"25870:8:19"},"referencedDeclaration":4130,"src":"25870:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"25858:30:19"},"returnParameters":{"id":5293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5317,"src":"25912:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5291,"name":"uint256","nodeType":"ElementaryTypeName","src":"25912:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25911:9:19"},"scope":5739,"src":"25845:247:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5407,"nodeType":"Block","src":"26281:2334:19","statements":[{"expression":{"id":5334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5325,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26363:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5328,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"26383:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666666666666666666666666666666666666666666666666666","id":5329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26387:34:19","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"value":"0xffffffffffffffffffffffffffffffff"},"src":"26383:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5326,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26367:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26376:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26367:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26367:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"37","id":5332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26426:1:19","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"26367:60:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26363:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5335,"nodeType":"ExpressionStatement","src":"26363:64:19"},{"expression":{"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5336,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26503:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5339,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"26525:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5340,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26530:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26525:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5342,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26524:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666666666666666666666666666","id":5343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26535:18:19","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xffffffffffffffff"},"src":"26524:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5337,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26508:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26517:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26508:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26508:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"36","id":5346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26558:1:19","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"26508:51:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26503:56:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5349,"nodeType":"ExpressionStatement","src":"26503:56:19"},{"expression":{"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5350,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26634:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5353,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"26656:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5354,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26661:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26656:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26655:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666","id":5357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26666:10:19","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"src":"26655:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5351,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26639:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26648:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26639:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26639:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":5360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26681:1:19","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"26639:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26634:48:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5363,"nodeType":"ExpressionStatement","src":"26634:48:19"},{"expression":{"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5364,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26757:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5367,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"26779:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5368,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26784:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26779:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5370,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26778:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666","id":5371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26789:6:19","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xffff"},"src":"26778:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5365,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26762:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26771:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26762:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26762:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":5374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26800:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"26762:39:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26757:44:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5377,"nodeType":"ExpressionStatement","src":"26757:44:19"},{"expression":{"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5378,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26874:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5381,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"26896:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5382,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26901:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26896:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5384,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26895:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666","id":5385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26906:4:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"26895:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5379,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26879:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26888:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26879:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26879:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26915:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"26879:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26874:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5391,"nodeType":"ExpressionStatement","src":"26874:42:19"},{"expression":{"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5392,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"26988:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5395,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5320,"src":"27010:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5396,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"27015:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27010:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"27009:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866","id":5399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27020:3:19","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"27009:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5393,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"26993:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27002:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"26993:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26993:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":5402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27028:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26993:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26988:41:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5405,"nodeType":"ExpressionStatement","src":"26988:41:19"},{"AST":{"nativeSrc":"28490:119:19","nodeType":"YulBlock","src":"28490:119:19","statements":[{"nativeSrc":"28504:95:19","nodeType":"YulAssignment","src":"28504:95:19","value":{"arguments":[{"name":"r","nativeSrc":"28512:1:19","nodeType":"YulIdentifier","src":"28512:1:19"},{"arguments":[{"arguments":[{"name":"r","nativeSrc":"28524:1:19","nodeType":"YulIdentifier","src":"28524:1:19"},{"name":"x","nativeSrc":"28527:1:19","nodeType":"YulIdentifier","src":"28527:1:19"}],"functionName":{"name":"shr","nativeSrc":"28520:3:19","nodeType":"YulIdentifier","src":"28520:3:19"},"nativeSrc":"28520:9:19","nodeType":"YulFunctionCall","src":"28520:9:19"},{"kind":"number","nativeSrc":"28531:66:19","nodeType":"YulLiteral","src":"28531:66:19","type":"","value":"0x0000010102020202030303030303030300000000000000000000000000000000"}],"functionName":{"name":"byte","nativeSrc":"28515:4:19","nodeType":"YulIdentifier","src":"28515:4:19"},"nativeSrc":"28515:83:19","nodeType":"YulFunctionCall","src":"28515:83:19"}],"functionName":{"name":"or","nativeSrc":"28509:2:19","nodeType":"YulIdentifier","src":"28509:2:19"},"nativeSrc":"28509:90:19","nodeType":"YulFunctionCall","src":"28509:90:19"},"variableNames":[{"name":"r","nativeSrc":"28504:1:19","nodeType":"YulIdentifier","src":"28504:1:19"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":5323,"isOffset":false,"isSlot":false,"src":"28504:1:19","valueSize":1},{"declaration":5323,"isOffset":false,"isSlot":false,"src":"28512:1:19","valueSize":1},{"declaration":5323,"isOffset":false,"isSlot":false,"src":"28524:1:19","valueSize":1},{"declaration":5320,"isOffset":false,"isSlot":false,"src":"28527:1:19","valueSize":1}],"flags":["memory-safe"],"id":5406,"nodeType":"InlineAssembly","src":"28465:144:19"}]},"documentation":{"id":5318,"nodeType":"StructuredDocumentation","src":"26098:119:19","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":5408,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"26231:4:19","nodeType":"FunctionDefinition","parameters":{"id":5321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5320,"mutability":"mutable","name":"x","nameLocation":"26244:1:19","nodeType":"VariableDeclaration","scope":5408,"src":"26236:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5319,"name":"uint256","nodeType":"ElementaryTypeName","src":"26236:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26235:11:19"},"returnParameters":{"id":5324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5323,"mutability":"mutable","name":"r","nameLocation":"26278:1:19","nodeType":"VariableDeclaration","scope":5408,"src":"26270:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5322,"name":"uint256","nodeType":"ElementaryTypeName","src":"26270:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26269:11:19"},"scope":5739,"src":"26222:2393:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5441,"nodeType":"Block","src":"28848:175:19","statements":[{"id":5440,"nodeType":"UncheckedBlock","src":"28858:159:19","statements":[{"assignments":[5420],"declarations":[{"constant":false,"id":5420,"mutability":"mutable","name":"result","nameLocation":"28890:6:19","nodeType":"VariableDeclaration","scope":5440,"src":"28882:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5419,"name":"uint256","nodeType":"ElementaryTypeName","src":"28882:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5424,"initialValue":{"arguments":[{"id":5422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"28904:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5421,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[5408,5442],"referencedDeclaration":5408,"src":"28899:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28899:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28882:28:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"28931:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5429,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5414,"src":"28973:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":5428,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"28956:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4130_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28956:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28986:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5432,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5420,"src":"28991:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28986:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5411,"src":"29000:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28986:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"28956:49:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5426,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"28940:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28949:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"28940:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28940:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28931:75:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5418,"id":5439,"nodeType":"Return","src":"28924:82:19"}]}]},"documentation":{"id":5409,"nodeType":"StructuredDocumentation","src":"28621:142:19","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5442,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"28777:4:19","nodeType":"FunctionDefinition","parameters":{"id":5415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5411,"mutability":"mutable","name":"value","nameLocation":"28790:5:19","nodeType":"VariableDeclaration","scope":5442,"src":"28782:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5410,"name":"uint256","nodeType":"ElementaryTypeName","src":"28782:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5414,"mutability":"mutable","name":"rounding","nameLocation":"28806:8:19","nodeType":"VariableDeclaration","scope":5442,"src":"28797:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":5413,"nodeType":"UserDefinedTypeName","pathNode":{"id":5412,"name":"Rounding","nameLocations":["28797:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"28797:8:19"},"referencedDeclaration":4130,"src":"28797:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"28781:34:19"},"returnParameters":{"id":5418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5442,"src":"28839:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5416,"name":"uint256","nodeType":"ElementaryTypeName","src":"28839:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28838:9:19"},"scope":5739,"src":"28768:255:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5570,"nodeType":"Block","src":"29216:854:19","statements":[{"assignments":[5451],"declarations":[{"constant":false,"id":5451,"mutability":"mutable","name":"result","nameLocation":"29234:6:19","nodeType":"VariableDeclaration","scope":5570,"src":"29226:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5450,"name":"uint256","nodeType":"ElementaryTypeName","src":"29226:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5453,"initialValue":{"hexValue":"30","id":5452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29243:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29226:18:19"},{"id":5567,"nodeType":"UncheckedBlock","src":"29254:787:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29282:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":5457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29291:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":5456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29297:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"29291:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"29282:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5470,"nodeType":"IfStatement","src":"29278:103:19","trueBody":{"id":5469,"nodeType":"Block","src":"29301:80:19","statements":[{"expression":{"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29319:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":5462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29328:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":5461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29334:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"29328:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"29319:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5464,"nodeType":"ExpressionStatement","src":"29319:17:19"},{"expression":{"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5465,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"29354:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":5466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29364:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"29354:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5468,"nodeType":"ExpressionStatement","src":"29354:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29398:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29407:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29413:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"29407:8:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"29398:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5487,"nodeType":"IfStatement","src":"29394:103:19","trueBody":{"id":5486,"nodeType":"Block","src":"29417:80:19","statements":[{"expression":{"id":5480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5476,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29435:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29444:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29450:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"29444:8:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"29435:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5481,"nodeType":"ExpressionStatement","src":"29435:17:19"},{"expression":{"id":5484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"29470:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29480:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"29470:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5485,"nodeType":"ExpressionStatement","src":"29470:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5488,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29514:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29523:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29529:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"29523:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"29514:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5504,"nodeType":"IfStatement","src":"29510:103:19","trueBody":{"id":5503,"nodeType":"Block","src":"29533:80:19","statements":[{"expression":{"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29551:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29560:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29566:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"29560:8:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"29551:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5498,"nodeType":"ExpressionStatement","src":"29551:17:19"},{"expression":{"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5499,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"29586:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29596:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"29586:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5502,"nodeType":"ExpressionStatement","src":"29586:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29630:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29639:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29645:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"29639:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"29630:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5521,"nodeType":"IfStatement","src":"29626:100:19","trueBody":{"id":5520,"nodeType":"Block","src":"29648:78:19","statements":[{"expression":{"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29666:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29675:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29681:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"29675:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"29666:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5515,"nodeType":"ExpressionStatement","src":"29666:16:19"},{"expression":{"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"29700:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29710:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"29700:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5519,"nodeType":"ExpressionStatement","src":"29700:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29743:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29752:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29758:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"29752:7:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"29743:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5538,"nodeType":"IfStatement","src":"29739:100:19","trueBody":{"id":5537,"nodeType":"Block","src":"29761:78:19","statements":[{"expression":{"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29779:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29788:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29794:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"29788:7:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"29779:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5532,"nodeType":"ExpressionStatement","src":"29779:16:19"},{"expression":{"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5533,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"29813:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29823:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"29813:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5536,"nodeType":"ExpressionStatement","src":"29813:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29856:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29865:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29871:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"29865:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"29856:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5555,"nodeType":"IfStatement","src":"29852:100:19","trueBody":{"id":5554,"nodeType":"Block","src":"29874:78:19","statements":[{"expression":{"id":5548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29892:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29901:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29907:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"29901:7:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"29892:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5549,"nodeType":"ExpressionStatement","src":"29892:16:19"},{"expression":{"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"29926:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29936:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"29926:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5553,"nodeType":"ExpressionStatement","src":"29926:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"29969:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":5559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29978:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":5558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29984:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"29978:7:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"29969:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5566,"nodeType":"IfStatement","src":"29965:66:19","trueBody":{"id":5565,"nodeType":"Block","src":"29987:44:19","statements":[{"expression":{"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"30005:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30015:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"30005:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5564,"nodeType":"ExpressionStatement","src":"30005:11:19"}]}}]},{"expression":{"id":5568,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"30057:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5449,"id":5569,"nodeType":"Return","src":"30050:13:19"}]},"documentation":{"id":5443,"nodeType":"StructuredDocumentation","src":"29029:120:19","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":5571,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"29163:5:19","nodeType":"FunctionDefinition","parameters":{"id":5446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5445,"mutability":"mutable","name":"value","nameLocation":"29177:5:19","nodeType":"VariableDeclaration","scope":5571,"src":"29169:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5444,"name":"uint256","nodeType":"ElementaryTypeName","src":"29169:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29168:15:19"},"returnParameters":{"id":5449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5571,"src":"29207:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5447,"name":"uint256","nodeType":"ElementaryTypeName","src":"29207:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29206:9:19"},"scope":5739,"src":"29154:916:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5604,"nodeType":"Block","src":"30305:177:19","statements":[{"id":5603,"nodeType":"UncheckedBlock","src":"30315:161:19","statements":[{"assignments":[5583],"declarations":[{"constant":false,"id":5583,"mutability":"mutable","name":"result","nameLocation":"30347:6:19","nodeType":"VariableDeclaration","scope":5603,"src":"30339:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5582,"name":"uint256","nodeType":"ElementaryTypeName","src":"30339:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5587,"initialValue":{"arguments":[{"id":5585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"30362:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5584,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[5571,5605],"referencedDeclaration":5571,"src":"30356:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30356:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30339:29:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"30389:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5592,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"30431:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":5591,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"30414:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4130_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30414:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30444:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":5595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"30450:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30444:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"30459:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30444:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30414:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5589,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"30398:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30407:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"30398:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30398:67:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30389:76:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5581,"id":5602,"nodeType":"Return","src":"30382:83:19"}]}]},"documentation":{"id":5572,"nodeType":"StructuredDocumentation","src":"30076:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5605,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"30233:5:19","nodeType":"FunctionDefinition","parameters":{"id":5578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5574,"mutability":"mutable","name":"value","nameLocation":"30247:5:19","nodeType":"VariableDeclaration","scope":5605,"src":"30239:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5573,"name":"uint256","nodeType":"ElementaryTypeName","src":"30239:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5577,"mutability":"mutable","name":"rounding","nameLocation":"30263:8:19","nodeType":"VariableDeclaration","scope":5605,"src":"30254:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":5576,"nodeType":"UserDefinedTypeName","pathNode":{"id":5575,"name":"Rounding","nameLocations":["30254:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"30254:8:19"},"referencedDeclaration":4130,"src":"30254:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"30238:34:19"},"returnParameters":{"id":5581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5605,"src":"30296:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5579,"name":"uint256","nodeType":"ElementaryTypeName","src":"30296:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30295:9:19"},"scope":5739,"src":"30224:258:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5681,"nodeType":"Block","src":"30800:675:19","statements":[{"expression":{"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5613,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"30882:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5616,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"30902:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666666666666666666666666666666666666666666666666666","id":5617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30906:34:19","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"value":"0xffffffffffffffffffffffffffffffff"},"src":"30902:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5614,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"30886:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30895:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"30886:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30886:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"37","id":5620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30945:1:19","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"30886:60:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30882:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5623,"nodeType":"ExpressionStatement","src":"30882:64:19"},{"expression":{"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5624,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31022:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5627,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"31044:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5628,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31049:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31044:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31043:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666666666666666666666666666","id":5631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31054:18:19","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xffffffffffffffff"},"src":"31043:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5625,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"31027:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31036:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"31027:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31027:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"36","id":5634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31077:1:19","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"31027:51:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31022:56:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5637,"nodeType":"ExpressionStatement","src":"31022:56:19"},{"expression":{"id":5650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5638,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31153:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5641,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"31175:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5642,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31180:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31175:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5644,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31174:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666666666666666","id":5645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31185:10:19","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"src":"31174:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5639,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"31158:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31167:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"31158:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31158:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":5648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31200:1:19","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"31158:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31153:48:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5651,"nodeType":"ExpressionStatement","src":"31153:48:19"},{"expression":{"id":5664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5652,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31276:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5655,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"31298:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5656,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31303:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31298:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5658,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31297:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307866666666","id":5659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31308:6:19","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xffff"},"src":"31297:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5653,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"31281:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31290:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"31281:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31281:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":5662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31319:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"31281:39:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31276:44:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5665,"nodeType":"ExpressionStatement","src":"31276:44:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5666,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31426:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"33","id":5667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31431:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"31426:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5669,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31425:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5672,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"31453:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":5673,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5611,"src":"31458:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31453:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5675,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31452:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30786666","id":5676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31463:4:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"31452:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5670,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"31436:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31445:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"31436:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31436:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31425:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5612,"id":5680,"nodeType":"Return","src":"31418:50:19"}]},"documentation":{"id":5606,"nodeType":"StructuredDocumentation","src":"30488:246:19","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":5682,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"30748:6:19","nodeType":"FunctionDefinition","parameters":{"id":5609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5608,"mutability":"mutable","name":"x","nameLocation":"30763:1:19","nodeType":"VariableDeclaration","scope":5682,"src":"30755:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5607,"name":"uint256","nodeType":"ElementaryTypeName","src":"30755:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30754:11:19"},"returnParameters":{"id":5612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5611,"mutability":"mutable","name":"r","nameLocation":"30797:1:19","nodeType":"VariableDeclaration","scope":5682,"src":"30789:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5610,"name":"uint256","nodeType":"ElementaryTypeName","src":"30789:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30788:11:19"},"scope":5739,"src":"30739:736:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5718,"nodeType":"Block","src":"31712:184:19","statements":[{"id":5717,"nodeType":"UncheckedBlock","src":"31722:168:19","statements":[{"assignments":[5694],"declarations":[{"constant":false,"id":5694,"mutability":"mutable","name":"result","nameLocation":"31754:6:19","nodeType":"VariableDeclaration","scope":5717,"src":"31746:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5693,"name":"uint256","nodeType":"ElementaryTypeName","src":"31746:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5698,"initialValue":{"arguments":[{"id":5696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"31770:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5695,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[5682,5719],"referencedDeclaration":5682,"src":"31763:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31763:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31746:30:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"31797:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5703,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"31839:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":5702,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"31822:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4130_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31822:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31852:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5706,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"31858:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31868:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"31858:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5709,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31857:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31852:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5711,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5685,"src":"31873:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31852:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"31822:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5700,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"31806:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":5701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31815:6:19","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"31806:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":5714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31806:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31797:82:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5692,"id":5716,"nodeType":"Return","src":"31790:89:19"}]}]},"documentation":{"id":5683,"nodeType":"StructuredDocumentation","src":"31481:144:19","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5719,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"31639:6:19","nodeType":"FunctionDefinition","parameters":{"id":5689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5685,"mutability":"mutable","name":"value","nameLocation":"31654:5:19","nodeType":"VariableDeclaration","scope":5719,"src":"31646:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5684,"name":"uint256","nodeType":"ElementaryTypeName","src":"31646:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5688,"mutability":"mutable","name":"rounding","nameLocation":"31670:8:19","nodeType":"VariableDeclaration","scope":5719,"src":"31661:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":5687,"nodeType":"UserDefinedTypeName","pathNode":{"id":5686,"name":"Rounding","nameLocations":["31661:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"31661:8:19"},"referencedDeclaration":4130,"src":"31661:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"31645:34:19"},"returnParameters":{"id":5692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5719,"src":"31703:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5690,"name":"uint256","nodeType":"ElementaryTypeName","src":"31703:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31702:9:19"},"scope":5739,"src":"31630:266:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5737,"nodeType":"Block","src":"32094:48:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5730,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"32117:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}],"id":5729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32111:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5728,"name":"uint8","nodeType":"ElementaryTypeName","src":"32111:5:19","typeDescriptions":{}}},"id":5731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32111:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":5732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32129:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"32111:19:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":5734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32134:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"32111:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5727,"id":5736,"nodeType":"Return","src":"32104:31:19"}]},"documentation":{"id":5720,"nodeType":"StructuredDocumentation","src":"31902:113:19","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":5738,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"32029:16:19","nodeType":"FunctionDefinition","parameters":{"id":5724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5723,"mutability":"mutable","name":"rounding","nameLocation":"32055:8:19","nodeType":"VariableDeclaration","scope":5738,"src":"32046:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"},"typeName":{"id":5722,"nodeType":"UserDefinedTypeName","pathNode":{"id":5721,"name":"Rounding","nameLocations":["32046:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":4130,"src":"32046:8:19"},"referencedDeclaration":4130,"src":"32046:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4130","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"32045:19:19"},"returnParameters":{"id":5727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5738,"src":"32088:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5725,"name":"bool","nodeType":"ElementaryTypeName","src":"32088:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"32087:6:19"},"scope":5739,"src":"32020:122:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5740,"src":"281:31863:19","usedErrors":[],"usedEvents":[]}],"src":"103:32042:19"}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"id":20,"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[7504]},"id":7505,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5741,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":5742,"nodeType":"StructuredDocumentation","src":"218:550:20","text":" @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":7504,"linearizedBaseContracts":[7504],"name":"SafeCast","nameLocation":"777:8:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5743,"nodeType":"StructuredDocumentation","src":"792:68:20","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":5749,"name":"SafeCastOverflowedUintDowncast","nameLocation":"871:30:20","nodeType":"ErrorDefinition","parameters":{"id":5748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5745,"mutability":"mutable","name":"bits","nameLocation":"908:4:20","nodeType":"VariableDeclaration","scope":5749,"src":"902:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5744,"name":"uint8","nodeType":"ElementaryTypeName","src":"902:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5747,"mutability":"mutable","name":"value","nameLocation":"922:5:20","nodeType":"VariableDeclaration","scope":5749,"src":"914:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5746,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"901:27:20"},"src":"865:64:20"},{"documentation":{"id":5750,"nodeType":"StructuredDocumentation","src":"935:75:20","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":5754,"name":"SafeCastOverflowedIntToUint","nameLocation":"1021:27:20","nodeType":"ErrorDefinition","parameters":{"id":5753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5752,"mutability":"mutable","name":"value","nameLocation":"1056:5:20","nodeType":"VariableDeclaration","scope":5754,"src":"1049:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5751,"name":"int256","nodeType":"ElementaryTypeName","src":"1049:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1048:14:20"},"src":"1015:48:20"},{"documentation":{"id":5755,"nodeType":"StructuredDocumentation","src":"1069:67:20","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":5761,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1147:29:20","nodeType":"ErrorDefinition","parameters":{"id":5760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5757,"mutability":"mutable","name":"bits","nameLocation":"1183:4:20","nodeType":"VariableDeclaration","scope":5761,"src":"1177:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5756,"name":"uint8","nodeType":"ElementaryTypeName","src":"1177:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5759,"mutability":"mutable","name":"value","nameLocation":"1196:5:20","nodeType":"VariableDeclaration","scope":5761,"src":"1189:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5758,"name":"int256","nodeType":"ElementaryTypeName","src":"1189:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1176:26:20"},"src":"1141:62:20"},{"documentation":{"id":5762,"nodeType":"StructuredDocumentation","src":"1209:75:20","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":5766,"name":"SafeCastOverflowedUintToInt","nameLocation":"1295:27:20","nodeType":"ErrorDefinition","parameters":{"id":5765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5764,"mutability":"mutable","name":"value","nameLocation":"1331:5:20","nodeType":"VariableDeclaration","scope":5766,"src":"1323:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5763,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1322:15:20"},"src":"1289:49:20"},{"body":{"id":5793,"nodeType":"Block","src":"1695:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"1709:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1722:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":5776,"name":"uint248","nodeType":"ElementaryTypeName","src":"1722:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":5775,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1717:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":5779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1731:3:20","memberName":"max","nodeType":"MemberAccess","src":"1717:17:20","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1709:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5787,"nodeType":"IfStatement","src":"1705:105:20","trueBody":{"id":5786,"nodeType":"Block","src":"1736:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":5782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1788:3:20","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":5783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"1793:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5781,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"1757:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5785,"nodeType":"RevertStatement","src":"1750:49:20"}]}},{"expression":{"arguments":[{"id":5790,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"1834:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1826:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":5788,"name":"uint248","nodeType":"ElementaryTypeName","src":"1826:7:20","typeDescriptions":{}}},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1826:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":5773,"id":5792,"nodeType":"Return","src":"1819:21:20"}]},"documentation":{"id":5767,"nodeType":"StructuredDocumentation","src":"1344:280:20","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":5794,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1638:9:20","nodeType":"FunctionDefinition","parameters":{"id":5770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5769,"mutability":"mutable","name":"value","nameLocation":"1656:5:20","nodeType":"VariableDeclaration","scope":5794,"src":"1648:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1647:15:20"},"returnParameters":{"id":5773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5794,"src":"1686:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":5771,"name":"uint248","nodeType":"ElementaryTypeName","src":"1686:7:20","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1685:9:20"},"scope":7504,"src":"1629:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5821,"nodeType":"Block","src":"2204:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"2218:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2231:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":5804,"name":"uint240","nodeType":"ElementaryTypeName","src":"2231:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":5803,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2226:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2226:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":5807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2240:3:20","memberName":"max","nodeType":"MemberAccess","src":"2226:17:20","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2218:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5815,"nodeType":"IfStatement","src":"2214:105:20","trueBody":{"id":5814,"nodeType":"Block","src":"2245:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":5810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:3:20","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":5811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"2302:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5809,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"2266:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5813,"nodeType":"RevertStatement","src":"2259:49:20"}]}},{"expression":{"arguments":[{"id":5818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"2343:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2335:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":5816,"name":"uint240","nodeType":"ElementaryTypeName","src":"2335:7:20","typeDescriptions":{}}},"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":5801,"id":5820,"nodeType":"Return","src":"2328:21:20"}]},"documentation":{"id":5795,"nodeType":"StructuredDocumentation","src":"1853:280:20","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":5822,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2147:9:20","nodeType":"FunctionDefinition","parameters":{"id":5798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5797,"mutability":"mutable","name":"value","nameLocation":"2165:5:20","nodeType":"VariableDeclaration","scope":5822,"src":"2157:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5796,"name":"uint256","nodeType":"ElementaryTypeName","src":"2157:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2156:15:20"},"returnParameters":{"id":5801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5822,"src":"2195:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":5799,"name":"uint240","nodeType":"ElementaryTypeName","src":"2195:7:20","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2194:9:20"},"scope":7504,"src":"2138:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5849,"nodeType":"Block","src":"2713:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5825,"src":"2727:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2740:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":5832,"name":"uint232","nodeType":"ElementaryTypeName","src":"2740:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":5831,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2735:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":5835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2749:3:20","memberName":"max","nodeType":"MemberAccess","src":"2735:17:20","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2727:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5843,"nodeType":"IfStatement","src":"2723:105:20","trueBody":{"id":5842,"nodeType":"Block","src":"2754:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":5838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2806:3:20","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":5839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5825,"src":"2811:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5837,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"2775:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2775:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5841,"nodeType":"RevertStatement","src":"2768:49:20"}]}},{"expression":{"arguments":[{"id":5846,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5825,"src":"2852:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5845,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2844:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":5844,"name":"uint232","nodeType":"ElementaryTypeName","src":"2844:7:20","typeDescriptions":{}}},"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2844:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":5829,"id":5848,"nodeType":"Return","src":"2837:21:20"}]},"documentation":{"id":5823,"nodeType":"StructuredDocumentation","src":"2362:280:20","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":5850,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2656:9:20","nodeType":"FunctionDefinition","parameters":{"id":5826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5825,"mutability":"mutable","name":"value","nameLocation":"2674:5:20","nodeType":"VariableDeclaration","scope":5850,"src":"2666:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2666:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:15:20"},"returnParameters":{"id":5829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5850,"src":"2704:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":5827,"name":"uint232","nodeType":"ElementaryTypeName","src":"2704:7:20","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2703:9:20"},"scope":7504,"src":"2647:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5877,"nodeType":"Block","src":"3222:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5853,"src":"3236:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3249:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":5860,"name":"uint224","nodeType":"ElementaryTypeName","src":"3249:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":5859,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"3244:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":5863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3258:3:20","memberName":"max","nodeType":"MemberAccess","src":"3244:17:20","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3236:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5871,"nodeType":"IfStatement","src":"3232:105:20","trueBody":{"id":5870,"nodeType":"Block","src":"3263:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":5866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3315:3:20","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":5867,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5853,"src":"3320:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5865,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"3284:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3284:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5869,"nodeType":"RevertStatement","src":"3277:49:20"}]}},{"expression":{"arguments":[{"id":5874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5853,"src":"3361:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3353:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":5872,"name":"uint224","nodeType":"ElementaryTypeName","src":"3353:7:20","typeDescriptions":{}}},"id":5875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3353:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":5857,"id":5876,"nodeType":"Return","src":"3346:21:20"}]},"documentation":{"id":5851,"nodeType":"StructuredDocumentation","src":"2871:280:20","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":5878,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3165:9:20","nodeType":"FunctionDefinition","parameters":{"id":5854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5853,"mutability":"mutable","name":"value","nameLocation":"3183:5:20","nodeType":"VariableDeclaration","scope":5878,"src":"3175:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5852,"name":"uint256","nodeType":"ElementaryTypeName","src":"3175:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3174:15:20"},"returnParameters":{"id":5857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5878,"src":"3213:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":5855,"name":"uint224","nodeType":"ElementaryTypeName","src":"3213:7:20","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3212:9:20"},"scope":7504,"src":"3156:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5905,"nodeType":"Block","src":"3731:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"3745:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3758:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":5888,"name":"uint216","nodeType":"ElementaryTypeName","src":"3758:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":5887,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"3753:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3753:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":5891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3767:3:20","memberName":"max","nodeType":"MemberAccess","src":"3753:17:20","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3745:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5899,"nodeType":"IfStatement","src":"3741:105:20","trueBody":{"id":5898,"nodeType":"Block","src":"3772:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":5894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3824:3:20","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":5895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"3829:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5893,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"3793:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3793:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5897,"nodeType":"RevertStatement","src":"3786:49:20"}]}},{"expression":{"arguments":[{"id":5902,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"3870:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3862:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":5900,"name":"uint216","nodeType":"ElementaryTypeName","src":"3862:7:20","typeDescriptions":{}}},"id":5903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3862:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":5885,"id":5904,"nodeType":"Return","src":"3855:21:20"}]},"documentation":{"id":5879,"nodeType":"StructuredDocumentation","src":"3380:280:20","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":5906,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3674:9:20","nodeType":"FunctionDefinition","parameters":{"id":5882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5881,"mutability":"mutable","name":"value","nameLocation":"3692:5:20","nodeType":"VariableDeclaration","scope":5906,"src":"3684:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5880,"name":"uint256","nodeType":"ElementaryTypeName","src":"3684:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3683:15:20"},"returnParameters":{"id":5885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5906,"src":"3722:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":5883,"name":"uint216","nodeType":"ElementaryTypeName","src":"3722:7:20","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3721:9:20"},"scope":7504,"src":"3665:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5933,"nodeType":"Block","src":"4240:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"4254:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4267:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":5916,"name":"uint208","nodeType":"ElementaryTypeName","src":"4267:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":5915,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"4262:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4262:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":5919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4276:3:20","memberName":"max","nodeType":"MemberAccess","src":"4262:17:20","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4254:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5927,"nodeType":"IfStatement","src":"4250:105:20","trueBody":{"id":5926,"nodeType":"Block","src":"4281:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":5922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4333:3:20","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":5923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"4338:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5921,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"4302:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5925,"nodeType":"RevertStatement","src":"4295:49:20"}]}},{"expression":{"arguments":[{"id":5930,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"4379:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4371:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":5928,"name":"uint208","nodeType":"ElementaryTypeName","src":"4371:7:20","typeDescriptions":{}}},"id":5931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4371:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":5913,"id":5932,"nodeType":"Return","src":"4364:21:20"}]},"documentation":{"id":5907,"nodeType":"StructuredDocumentation","src":"3889:280:20","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":5934,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4183:9:20","nodeType":"FunctionDefinition","parameters":{"id":5910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5909,"mutability":"mutable","name":"value","nameLocation":"4201:5:20","nodeType":"VariableDeclaration","scope":5934,"src":"4193:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5908,"name":"uint256","nodeType":"ElementaryTypeName","src":"4193:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4192:15:20"},"returnParameters":{"id":5913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5934,"src":"4231:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":5911,"name":"uint208","nodeType":"ElementaryTypeName","src":"4231:7:20","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4230:9:20"},"scope":7504,"src":"4174:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5961,"nodeType":"Block","src":"4749:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"4763:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4776:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":5944,"name":"uint200","nodeType":"ElementaryTypeName","src":"4776:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":5943,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"4771:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":5947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4785:3:20","memberName":"max","nodeType":"MemberAccess","src":"4771:17:20","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4763:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5955,"nodeType":"IfStatement","src":"4759:105:20","trueBody":{"id":5954,"nodeType":"Block","src":"4790:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":5950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4842:3:20","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":5951,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"4847:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5949,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"4811:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5953,"nodeType":"RevertStatement","src":"4804:49:20"}]}},{"expression":{"arguments":[{"id":5958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"4888:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4880:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":5956,"name":"uint200","nodeType":"ElementaryTypeName","src":"4880:7:20","typeDescriptions":{}}},"id":5959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4880:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":5941,"id":5960,"nodeType":"Return","src":"4873:21:20"}]},"documentation":{"id":5935,"nodeType":"StructuredDocumentation","src":"4398:280:20","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":5962,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4692:9:20","nodeType":"FunctionDefinition","parameters":{"id":5938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5937,"mutability":"mutable","name":"value","nameLocation":"4710:5:20","nodeType":"VariableDeclaration","scope":5962,"src":"4702:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5936,"name":"uint256","nodeType":"ElementaryTypeName","src":"4702:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4701:15:20"},"returnParameters":{"id":5941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5940,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5962,"src":"4740:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":5939,"name":"uint200","nodeType":"ElementaryTypeName","src":"4740:7:20","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4739:9:20"},"scope":7504,"src":"4683:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5989,"nodeType":"Block","src":"5258:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5970,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"5272:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5285:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":5972,"name":"uint192","nodeType":"ElementaryTypeName","src":"5285:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":5971,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"5280:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":5975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5294:3:20","memberName":"max","nodeType":"MemberAccess","src":"5280:17:20","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5272:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5983,"nodeType":"IfStatement","src":"5268:105:20","trueBody":{"id":5982,"nodeType":"Block","src":"5299:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":5978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5351:3:20","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":5979,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"5356:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5977,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"5320:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":5980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5981,"nodeType":"RevertStatement","src":"5313:49:20"}]}},{"expression":{"arguments":[{"id":5986,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"5397:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5389:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":5984,"name":"uint192","nodeType":"ElementaryTypeName","src":"5389:7:20","typeDescriptions":{}}},"id":5987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":5969,"id":5988,"nodeType":"Return","src":"5382:21:20"}]},"documentation":{"id":5963,"nodeType":"StructuredDocumentation","src":"4907:280:20","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":5990,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5201:9:20","nodeType":"FunctionDefinition","parameters":{"id":5966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5965,"mutability":"mutable","name":"value","nameLocation":"5219:5:20","nodeType":"VariableDeclaration","scope":5990,"src":"5211:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5964,"name":"uint256","nodeType":"ElementaryTypeName","src":"5211:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5210:15:20"},"returnParameters":{"id":5969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5990,"src":"5249:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":5967,"name":"uint192","nodeType":"ElementaryTypeName","src":"5249:7:20","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5248:9:20"},"scope":7504,"src":"5192:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6017,"nodeType":"Block","src":"5767:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5998,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5781:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5794:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":6000,"name":"uint184","nodeType":"ElementaryTypeName","src":"5794:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":5999,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"5789:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5789:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":6003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5803:3:20","memberName":"max","nodeType":"MemberAccess","src":"5789:17:20","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5781:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6011,"nodeType":"IfStatement","src":"5777:105:20","trueBody":{"id":6010,"nodeType":"Block","src":"5808:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":6006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5860:3:20","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":6007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5865:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6005,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"5829:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6009,"nodeType":"RevertStatement","src":"5822:49:20"}]}},{"expression":{"arguments":[{"id":6014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5906:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5898:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":6012,"name":"uint184","nodeType":"ElementaryTypeName","src":"5898:7:20","typeDescriptions":{}}},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5898:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":5997,"id":6016,"nodeType":"Return","src":"5891:21:20"}]},"documentation":{"id":5991,"nodeType":"StructuredDocumentation","src":"5416:280:20","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":6018,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5710:9:20","nodeType":"FunctionDefinition","parameters":{"id":5994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5993,"mutability":"mutable","name":"value","nameLocation":"5728:5:20","nodeType":"VariableDeclaration","scope":6018,"src":"5720:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5992,"name":"uint256","nodeType":"ElementaryTypeName","src":"5720:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5719:15:20"},"returnParameters":{"id":5997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6018,"src":"5758:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":5995,"name":"uint184","nodeType":"ElementaryTypeName","src":"5758:7:20","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5757:9:20"},"scope":7504,"src":"5701:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6045,"nodeType":"Block","src":"6276:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"6290:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6303:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":6028,"name":"uint176","nodeType":"ElementaryTypeName","src":"6303:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":6027,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"6298:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":6031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6312:3:20","memberName":"max","nodeType":"MemberAccess","src":"6298:17:20","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6290:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6039,"nodeType":"IfStatement","src":"6286:105:20","trueBody":{"id":6038,"nodeType":"Block","src":"6317:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":6034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:3:20","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":6035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"6374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6033,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"6338:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6338:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6037,"nodeType":"RevertStatement","src":"6331:49:20"}]}},{"expression":{"arguments":[{"id":6042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"6415:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6407:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":6040,"name":"uint176","nodeType":"ElementaryTypeName","src":"6407:7:20","typeDescriptions":{}}},"id":6043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6407:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":6025,"id":6044,"nodeType":"Return","src":"6400:21:20"}]},"documentation":{"id":6019,"nodeType":"StructuredDocumentation","src":"5925:280:20","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":6046,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6219:9:20","nodeType":"FunctionDefinition","parameters":{"id":6022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6021,"mutability":"mutable","name":"value","nameLocation":"6237:5:20","nodeType":"VariableDeclaration","scope":6046,"src":"6229:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6020,"name":"uint256","nodeType":"ElementaryTypeName","src":"6229:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6228:15:20"},"returnParameters":{"id":6025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6046,"src":"6267:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":6023,"name":"uint176","nodeType":"ElementaryTypeName","src":"6267:7:20","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6266:9:20"},"scope":7504,"src":"6210:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6073,"nodeType":"Block","src":"6785:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6054,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"6799:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6812:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":6056,"name":"uint168","nodeType":"ElementaryTypeName","src":"6812:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":6055,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"6807:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6807:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":6059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6821:3:20","memberName":"max","nodeType":"MemberAccess","src":"6807:17:20","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6799:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6067,"nodeType":"IfStatement","src":"6795:105:20","trueBody":{"id":6066,"nodeType":"Block","src":"6826:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":6062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6878:3:20","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":6063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"6883:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6061,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"6847:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6847:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6065,"nodeType":"RevertStatement","src":"6840:49:20"}]}},{"expression":{"arguments":[{"id":6070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"6924:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":6068,"name":"uint168","nodeType":"ElementaryTypeName","src":"6916:7:20","typeDescriptions":{}}},"id":6071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":6053,"id":6072,"nodeType":"Return","src":"6909:21:20"}]},"documentation":{"id":6047,"nodeType":"StructuredDocumentation","src":"6434:280:20","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":6074,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6728:9:20","nodeType":"FunctionDefinition","parameters":{"id":6050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6049,"mutability":"mutable","name":"value","nameLocation":"6746:5:20","nodeType":"VariableDeclaration","scope":6074,"src":"6738:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6048,"name":"uint256","nodeType":"ElementaryTypeName","src":"6738:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6737:15:20"},"returnParameters":{"id":6053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6074,"src":"6776:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":6051,"name":"uint168","nodeType":"ElementaryTypeName","src":"6776:7:20","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6775:9:20"},"scope":7504,"src":"6719:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6101,"nodeType":"Block","src":"7294:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6077,"src":"7308:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7321:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6084,"name":"uint160","nodeType":"ElementaryTypeName","src":"7321:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":6083,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"7316:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7316:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":6087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7330:3:20","memberName":"max","nodeType":"MemberAccess","src":"7316:17:20","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7308:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6095,"nodeType":"IfStatement","src":"7304:105:20","trueBody":{"id":6094,"nodeType":"Block","src":"7335:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":6090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7387:3:20","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":6091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6077,"src":"7392:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6089,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"7356:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7356:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6093,"nodeType":"RevertStatement","src":"7349:49:20"}]}},{"expression":{"arguments":[{"id":6098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6077,"src":"7433:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7425:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6096,"name":"uint160","nodeType":"ElementaryTypeName","src":"7425:7:20","typeDescriptions":{}}},"id":6099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7425:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":6081,"id":6100,"nodeType":"Return","src":"7418:21:20"}]},"documentation":{"id":6075,"nodeType":"StructuredDocumentation","src":"6943:280:20","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":6102,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7237:9:20","nodeType":"FunctionDefinition","parameters":{"id":6078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6077,"mutability":"mutable","name":"value","nameLocation":"7255:5:20","nodeType":"VariableDeclaration","scope":6102,"src":"7247:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6076,"name":"uint256","nodeType":"ElementaryTypeName","src":"7247:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7246:15:20"},"returnParameters":{"id":6081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6102,"src":"7285:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":6079,"name":"uint160","nodeType":"ElementaryTypeName","src":"7285:7:20","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7284:9:20"},"scope":7504,"src":"7228:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6129,"nodeType":"Block","src":"7803:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"7817:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7830:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":6112,"name":"uint152","nodeType":"ElementaryTypeName","src":"7830:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":6111,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"7825:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7825:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":6115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7839:3:20","memberName":"max","nodeType":"MemberAccess","src":"7825:17:20","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7817:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6123,"nodeType":"IfStatement","src":"7813:105:20","trueBody":{"id":6122,"nodeType":"Block","src":"7844:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":6118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:3:20","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":6119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"7901:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6117,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"7865:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7865:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6121,"nodeType":"RevertStatement","src":"7858:49:20"}]}},{"expression":{"arguments":[{"id":6126,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"7942:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7934:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":6124,"name":"uint152","nodeType":"ElementaryTypeName","src":"7934:7:20","typeDescriptions":{}}},"id":6127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7934:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":6109,"id":6128,"nodeType":"Return","src":"7927:21:20"}]},"documentation":{"id":6103,"nodeType":"StructuredDocumentation","src":"7452:280:20","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":6130,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7746:9:20","nodeType":"FunctionDefinition","parameters":{"id":6106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6105,"mutability":"mutable","name":"value","nameLocation":"7764:5:20","nodeType":"VariableDeclaration","scope":6130,"src":"7756:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6104,"name":"uint256","nodeType":"ElementaryTypeName","src":"7756:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7755:15:20"},"returnParameters":{"id":6109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6130,"src":"7794:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":6107,"name":"uint152","nodeType":"ElementaryTypeName","src":"7794:7:20","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7793:9:20"},"scope":7504,"src":"7737:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6157,"nodeType":"Block","src":"8312:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6138,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"8326:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8339:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":6140,"name":"uint144","nodeType":"ElementaryTypeName","src":"8339:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":6139,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8334:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8334:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":6143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8348:3:20","memberName":"max","nodeType":"MemberAccess","src":"8334:17:20","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8326:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6151,"nodeType":"IfStatement","src":"8322:105:20","trueBody":{"id":6150,"nodeType":"Block","src":"8353:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":6146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8405:3:20","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":6147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"8410:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6145,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"8374:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6149,"nodeType":"RevertStatement","src":"8367:49:20"}]}},{"expression":{"arguments":[{"id":6154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"8451:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8443:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":6152,"name":"uint144","nodeType":"ElementaryTypeName","src":"8443:7:20","typeDescriptions":{}}},"id":6155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8443:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":6137,"id":6156,"nodeType":"Return","src":"8436:21:20"}]},"documentation":{"id":6131,"nodeType":"StructuredDocumentation","src":"7961:280:20","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":6158,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8255:9:20","nodeType":"FunctionDefinition","parameters":{"id":6134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6133,"mutability":"mutable","name":"value","nameLocation":"8273:5:20","nodeType":"VariableDeclaration","scope":6158,"src":"8265:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6132,"name":"uint256","nodeType":"ElementaryTypeName","src":"8265:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8264:15:20"},"returnParameters":{"id":6137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6158,"src":"8303:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":6135,"name":"uint144","nodeType":"ElementaryTypeName","src":"8303:7:20","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8302:9:20"},"scope":7504,"src":"8246:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6185,"nodeType":"Block","src":"8821:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"8835:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8848:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":6168,"name":"uint136","nodeType":"ElementaryTypeName","src":"8848:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":6167,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8843:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8843:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":6171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8857:3:20","memberName":"max","nodeType":"MemberAccess","src":"8843:17:20","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8835:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6179,"nodeType":"IfStatement","src":"8831:105:20","trueBody":{"id":6178,"nodeType":"Block","src":"8862:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":6174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8914:3:20","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":6175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"8919:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6173,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"8883:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8883:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6177,"nodeType":"RevertStatement","src":"8876:49:20"}]}},{"expression":{"arguments":[{"id":6182,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"8960:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8952:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":6180,"name":"uint136","nodeType":"ElementaryTypeName","src":"8952:7:20","typeDescriptions":{}}},"id":6183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":6165,"id":6184,"nodeType":"Return","src":"8945:21:20"}]},"documentation":{"id":6159,"nodeType":"StructuredDocumentation","src":"8470:280:20","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":6186,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8764:9:20","nodeType":"FunctionDefinition","parameters":{"id":6162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6161,"mutability":"mutable","name":"value","nameLocation":"8782:5:20","nodeType":"VariableDeclaration","scope":6186,"src":"8774:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6160,"name":"uint256","nodeType":"ElementaryTypeName","src":"8774:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8773:15:20"},"returnParameters":{"id":6165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6186,"src":"8812:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":6163,"name":"uint136","nodeType":"ElementaryTypeName","src":"8812:7:20","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8811:9:20"},"scope":7504,"src":"8755:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6213,"nodeType":"Block","src":"9330:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"9344:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9357:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":6196,"name":"uint128","nodeType":"ElementaryTypeName","src":"9357:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":6195,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"9352:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9352:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":6199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9366:3:20","memberName":"max","nodeType":"MemberAccess","src":"9352:17:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9344:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6207,"nodeType":"IfStatement","src":"9340:105:20","trueBody":{"id":6206,"nodeType":"Block","src":"9371:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":6202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9423:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":6203,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"9428:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6201,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"9392:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9392:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6205,"nodeType":"RevertStatement","src":"9385:49:20"}]}},{"expression":{"arguments":[{"id":6210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"9469:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9461:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":6208,"name":"uint128","nodeType":"ElementaryTypeName","src":"9461:7:20","typeDescriptions":{}}},"id":6211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9461:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":6193,"id":6212,"nodeType":"Return","src":"9454:21:20"}]},"documentation":{"id":6187,"nodeType":"StructuredDocumentation","src":"8979:280:20","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":6214,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9273:9:20","nodeType":"FunctionDefinition","parameters":{"id":6190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6189,"mutability":"mutable","name":"value","nameLocation":"9291:5:20","nodeType":"VariableDeclaration","scope":6214,"src":"9283:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6188,"name":"uint256","nodeType":"ElementaryTypeName","src":"9283:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9282:15:20"},"returnParameters":{"id":6193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6214,"src":"9321:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6191,"name":"uint128","nodeType":"ElementaryTypeName","src":"9321:7:20","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9320:9:20"},"scope":7504,"src":"9264:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6241,"nodeType":"Block","src":"9839:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"9853:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9866:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":6224,"name":"uint120","nodeType":"ElementaryTypeName","src":"9866:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":6223,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"9861:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9861:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":6227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9875:3:20","memberName":"max","nodeType":"MemberAccess","src":"9861:17:20","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9853:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6235,"nodeType":"IfStatement","src":"9849:105:20","trueBody":{"id":6234,"nodeType":"Block","src":"9880:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":6230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9932:3:20","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":6231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"9937:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6229,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"9901:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9901:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6233,"nodeType":"RevertStatement","src":"9894:49:20"}]}},{"expression":{"arguments":[{"id":6238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"9978:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9970:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":6236,"name":"uint120","nodeType":"ElementaryTypeName","src":"9970:7:20","typeDescriptions":{}}},"id":6239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9970:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":6221,"id":6240,"nodeType":"Return","src":"9963:21:20"}]},"documentation":{"id":6215,"nodeType":"StructuredDocumentation","src":"9488:280:20","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":6242,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9782:9:20","nodeType":"FunctionDefinition","parameters":{"id":6218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6217,"mutability":"mutable","name":"value","nameLocation":"9800:5:20","nodeType":"VariableDeclaration","scope":6242,"src":"9792:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6216,"name":"uint256","nodeType":"ElementaryTypeName","src":"9792:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9791:15:20"},"returnParameters":{"id":6221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6242,"src":"9830:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":6219,"name":"uint120","nodeType":"ElementaryTypeName","src":"9830:7:20","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9829:9:20"},"scope":7504,"src":"9773:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6269,"nodeType":"Block","src":"10348:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"10362:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10375:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":6252,"name":"uint112","nodeType":"ElementaryTypeName","src":"10375:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":6251,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"10370:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10370:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":6255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10384:3:20","memberName":"max","nodeType":"MemberAccess","src":"10370:17:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10362:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6263,"nodeType":"IfStatement","src":"10358:105:20","trueBody":{"id":6262,"nodeType":"Block","src":"10389:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":6258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10441:3:20","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":6259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"10446:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6257,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"10410:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10410:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6261,"nodeType":"RevertStatement","src":"10403:49:20"}]}},{"expression":{"arguments":[{"id":6266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"10487:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10479:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":6264,"name":"uint112","nodeType":"ElementaryTypeName","src":"10479:7:20","typeDescriptions":{}}},"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10479:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":6249,"id":6268,"nodeType":"Return","src":"10472:21:20"}]},"documentation":{"id":6243,"nodeType":"StructuredDocumentation","src":"9997:280:20","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":6270,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10291:9:20","nodeType":"FunctionDefinition","parameters":{"id":6246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6245,"mutability":"mutable","name":"value","nameLocation":"10309:5:20","nodeType":"VariableDeclaration","scope":6270,"src":"10301:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6244,"name":"uint256","nodeType":"ElementaryTypeName","src":"10301:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10300:15:20"},"returnParameters":{"id":6249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6270,"src":"10339:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":6247,"name":"uint112","nodeType":"ElementaryTypeName","src":"10339:7:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10338:9:20"},"scope":7504,"src":"10282:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6297,"nodeType":"Block","src":"10857:152:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6273,"src":"10871:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10884:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":6280,"name":"uint104","nodeType":"ElementaryTypeName","src":"10884:7:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":6279,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"10879:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10879:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":6283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10893:3:20","memberName":"max","nodeType":"MemberAccess","src":"10879:17:20","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10871:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6291,"nodeType":"IfStatement","src":"10867:105:20","trueBody":{"id":6290,"nodeType":"Block","src":"10898:74:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":6286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10950:3:20","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":6287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6273,"src":"10955:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6285,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"10919:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10919:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6289,"nodeType":"RevertStatement","src":"10912:49:20"}]}},{"expression":{"arguments":[{"id":6294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6273,"src":"10996:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10988:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":6292,"name":"uint104","nodeType":"ElementaryTypeName","src":"10988:7:20","typeDescriptions":{}}},"id":6295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10988:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":6277,"id":6296,"nodeType":"Return","src":"10981:21:20"}]},"documentation":{"id":6271,"nodeType":"StructuredDocumentation","src":"10506:280:20","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":6298,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10800:9:20","nodeType":"FunctionDefinition","parameters":{"id":6274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6273,"mutability":"mutable","name":"value","nameLocation":"10818:5:20","nodeType":"VariableDeclaration","scope":6298,"src":"10810:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6272,"name":"uint256","nodeType":"ElementaryTypeName","src":"10810:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10809:15:20"},"returnParameters":{"id":6277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6298,"src":"10848:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":6275,"name":"uint104","nodeType":"ElementaryTypeName","src":"10848:7:20","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10847:9:20"},"scope":7504,"src":"10791:218:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6325,"nodeType":"Block","src":"11360:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6301,"src":"11374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11387:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":6308,"name":"uint96","nodeType":"ElementaryTypeName","src":"11387:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":6307,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"11382:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11382:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":6311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11395:3:20","memberName":"max","nodeType":"MemberAccess","src":"11382:16:20","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11374:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6319,"nodeType":"IfStatement","src":"11370:103:20","trueBody":{"id":6318,"nodeType":"Block","src":"11400:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":6314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":6315,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6301,"src":"11456:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6313,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"11421:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11421:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6317,"nodeType":"RevertStatement","src":"11414:48:20"}]}},{"expression":{"arguments":[{"id":6322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6301,"src":"11496:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11489:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":6320,"name":"uint96","nodeType":"ElementaryTypeName","src":"11489:6:20","typeDescriptions":{}}},"id":6323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11489:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":6305,"id":6324,"nodeType":"Return","src":"11482:20:20"}]},"documentation":{"id":6299,"nodeType":"StructuredDocumentation","src":"11015:276:20","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":6326,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11305:8:20","nodeType":"FunctionDefinition","parameters":{"id":6302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6301,"mutability":"mutable","name":"value","nameLocation":"11322:5:20","nodeType":"VariableDeclaration","scope":6326,"src":"11314:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6300,"name":"uint256","nodeType":"ElementaryTypeName","src":"11314:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11313:15:20"},"returnParameters":{"id":6305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6326,"src":"11352:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":6303,"name":"uint96","nodeType":"ElementaryTypeName","src":"11352:6:20","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11351:8:20"},"scope":7504,"src":"11296:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6353,"nodeType":"Block","src":"11860:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6329,"src":"11874:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11887:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":6336,"name":"uint88","nodeType":"ElementaryTypeName","src":"11887:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":6335,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"11882:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11882:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":6339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11895:3:20","memberName":"max","nodeType":"MemberAccess","src":"11882:16:20","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11874:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6347,"nodeType":"IfStatement","src":"11870:103:20","trueBody":{"id":6346,"nodeType":"Block","src":"11900:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":6342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11952:2:20","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":6343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6329,"src":"11956:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6341,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"11921:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11921:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6345,"nodeType":"RevertStatement","src":"11914:48:20"}]}},{"expression":{"arguments":[{"id":6350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6329,"src":"11996:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11989:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":6348,"name":"uint88","nodeType":"ElementaryTypeName","src":"11989:6:20","typeDescriptions":{}}},"id":6351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11989:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":6333,"id":6352,"nodeType":"Return","src":"11982:20:20"}]},"documentation":{"id":6327,"nodeType":"StructuredDocumentation","src":"11515:276:20","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":6354,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11805:8:20","nodeType":"FunctionDefinition","parameters":{"id":6330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6329,"mutability":"mutable","name":"value","nameLocation":"11822:5:20","nodeType":"VariableDeclaration","scope":6354,"src":"11814:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6328,"name":"uint256","nodeType":"ElementaryTypeName","src":"11814:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11813:15:20"},"returnParameters":{"id":6333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6354,"src":"11852:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":6331,"name":"uint88","nodeType":"ElementaryTypeName","src":"11852:6:20","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11851:8:20"},"scope":7504,"src":"11796:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6381,"nodeType":"Block","src":"12360:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"12374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12387:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":6364,"name":"uint80","nodeType":"ElementaryTypeName","src":"12387:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":6363,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"12382:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":6367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12395:3:20","memberName":"max","nodeType":"MemberAccess","src":"12382:16:20","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12374:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6375,"nodeType":"IfStatement","src":"12370:103:20","trueBody":{"id":6374,"nodeType":"Block","src":"12400:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":6370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":6371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"12456:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6369,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"12421:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12421:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6373,"nodeType":"RevertStatement","src":"12414:48:20"}]}},{"expression":{"arguments":[{"id":6378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"12496:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12489:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":6376,"name":"uint80","nodeType":"ElementaryTypeName","src":"12489:6:20","typeDescriptions":{}}},"id":6379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12489:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":6361,"id":6380,"nodeType":"Return","src":"12482:20:20"}]},"documentation":{"id":6355,"nodeType":"StructuredDocumentation","src":"12015:276:20","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":6382,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12305:8:20","nodeType":"FunctionDefinition","parameters":{"id":6358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6357,"mutability":"mutable","name":"value","nameLocation":"12322:5:20","nodeType":"VariableDeclaration","scope":6382,"src":"12314:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6356,"name":"uint256","nodeType":"ElementaryTypeName","src":"12314:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12313:15:20"},"returnParameters":{"id":6361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6382,"src":"12352:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":6359,"name":"uint80","nodeType":"ElementaryTypeName","src":"12352:6:20","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12351:8:20"},"scope":7504,"src":"12296:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6409,"nodeType":"Block","src":"12860:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"12874:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12887:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":6392,"name":"uint72","nodeType":"ElementaryTypeName","src":"12887:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":6391,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"12882:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12882:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":6395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12895:3:20","memberName":"max","nodeType":"MemberAccess","src":"12882:16:20","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12874:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6403,"nodeType":"IfStatement","src":"12870:103:20","trueBody":{"id":6402,"nodeType":"Block","src":"12900:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":6398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12952:2:20","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":6399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"12956:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6397,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"12921:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12921:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6401,"nodeType":"RevertStatement","src":"12914:48:20"}]}},{"expression":{"arguments":[{"id":6406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6385,"src":"12996:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12989:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":6404,"name":"uint72","nodeType":"ElementaryTypeName","src":"12989:6:20","typeDescriptions":{}}},"id":6407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12989:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":6389,"id":6408,"nodeType":"Return","src":"12982:20:20"}]},"documentation":{"id":6383,"nodeType":"StructuredDocumentation","src":"12515:276:20","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":6410,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12805:8:20","nodeType":"FunctionDefinition","parameters":{"id":6386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6385,"mutability":"mutable","name":"value","nameLocation":"12822:5:20","nodeType":"VariableDeclaration","scope":6410,"src":"12814:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6384,"name":"uint256","nodeType":"ElementaryTypeName","src":"12814:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12813:15:20"},"returnParameters":{"id":6389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6410,"src":"12852:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":6387,"name":"uint72","nodeType":"ElementaryTypeName","src":"12852:6:20","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12851:8:20"},"scope":7504,"src":"12796:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6437,"nodeType":"Block","src":"13360:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6413,"src":"13374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13387:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":6420,"name":"uint64","nodeType":"ElementaryTypeName","src":"13387:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":6419,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"13382:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13382:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":6423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13395:3:20","memberName":"max","nodeType":"MemberAccess","src":"13382:16:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13374:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6431,"nodeType":"IfStatement","src":"13370:103:20","trueBody":{"id":6430,"nodeType":"Block","src":"13400:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":6426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":6427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6413,"src":"13456:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6425,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"13421:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13421:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6429,"nodeType":"RevertStatement","src":"13414:48:20"}]}},{"expression":{"arguments":[{"id":6434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6413,"src":"13496:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13489:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":6432,"name":"uint64","nodeType":"ElementaryTypeName","src":"13489:6:20","typeDescriptions":{}}},"id":6435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13489:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":6417,"id":6436,"nodeType":"Return","src":"13482:20:20"}]},"documentation":{"id":6411,"nodeType":"StructuredDocumentation","src":"13015:276:20","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":6438,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13305:8:20","nodeType":"FunctionDefinition","parameters":{"id":6414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6413,"mutability":"mutable","name":"value","nameLocation":"13322:5:20","nodeType":"VariableDeclaration","scope":6438,"src":"13314:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6412,"name":"uint256","nodeType":"ElementaryTypeName","src":"13314:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13313:15:20"},"returnParameters":{"id":6417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6438,"src":"13352:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6415,"name":"uint64","nodeType":"ElementaryTypeName","src":"13352:6:20","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13351:8:20"},"scope":7504,"src":"13296:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6465,"nodeType":"Block","src":"13860:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6441,"src":"13874:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13887:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":6448,"name":"uint56","nodeType":"ElementaryTypeName","src":"13887:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":6447,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"13882:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13882:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":6451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13895:3:20","memberName":"max","nodeType":"MemberAccess","src":"13882:16:20","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13874:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6459,"nodeType":"IfStatement","src":"13870:103:20","trueBody":{"id":6458,"nodeType":"Block","src":"13900:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":6454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13952:2:20","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":6455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6441,"src":"13956:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6453,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"13921:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6457,"nodeType":"RevertStatement","src":"13914:48:20"}]}},{"expression":{"arguments":[{"id":6462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6441,"src":"13996:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13989:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":6460,"name":"uint56","nodeType":"ElementaryTypeName","src":"13989:6:20","typeDescriptions":{}}},"id":6463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13989:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":6445,"id":6464,"nodeType":"Return","src":"13982:20:20"}]},"documentation":{"id":6439,"nodeType":"StructuredDocumentation","src":"13515:276:20","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":6466,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13805:8:20","nodeType":"FunctionDefinition","parameters":{"id":6442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6441,"mutability":"mutable","name":"value","nameLocation":"13822:5:20","nodeType":"VariableDeclaration","scope":6466,"src":"13814:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6440,"name":"uint256","nodeType":"ElementaryTypeName","src":"13814:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13813:15:20"},"returnParameters":{"id":6445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6466,"src":"13852:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":6443,"name":"uint56","nodeType":"ElementaryTypeName","src":"13852:6:20","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13851:8:20"},"scope":7504,"src":"13796:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6493,"nodeType":"Block","src":"14360:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6469,"src":"14374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14387:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":6476,"name":"uint48","nodeType":"ElementaryTypeName","src":"14387:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":6475,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"14382:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14382:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":6479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14395:3:20","memberName":"max","nodeType":"MemberAccess","src":"14382:16:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14374:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6487,"nodeType":"IfStatement","src":"14370:103:20","trueBody":{"id":6486,"nodeType":"Block","src":"14400:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":6482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":6483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6469,"src":"14456:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6481,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"14421:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14421:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6485,"nodeType":"RevertStatement","src":"14414:48:20"}]}},{"expression":{"arguments":[{"id":6490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6469,"src":"14496:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14489:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":6488,"name":"uint48","nodeType":"ElementaryTypeName","src":"14489:6:20","typeDescriptions":{}}},"id":6491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14489:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":6473,"id":6492,"nodeType":"Return","src":"14482:20:20"}]},"documentation":{"id":6467,"nodeType":"StructuredDocumentation","src":"14015:276:20","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":6494,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14305:8:20","nodeType":"FunctionDefinition","parameters":{"id":6470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6469,"mutability":"mutable","name":"value","nameLocation":"14322:5:20","nodeType":"VariableDeclaration","scope":6494,"src":"14314:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6468,"name":"uint256","nodeType":"ElementaryTypeName","src":"14314:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14313:15:20"},"returnParameters":{"id":6473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6494,"src":"14352:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":6471,"name":"uint48","nodeType":"ElementaryTypeName","src":"14352:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14351:8:20"},"scope":7504,"src":"14296:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6521,"nodeType":"Block","src":"14860:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6497,"src":"14874:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14887:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":6504,"name":"uint40","nodeType":"ElementaryTypeName","src":"14887:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":6503,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"14882:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14882:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":6507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14895:3:20","memberName":"max","nodeType":"MemberAccess","src":"14882:16:20","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14874:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6515,"nodeType":"IfStatement","src":"14870:103:20","trueBody":{"id":6514,"nodeType":"Block","src":"14900:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":6510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14952:2:20","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":6511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6497,"src":"14956:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6509,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"14921:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14921:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6513,"nodeType":"RevertStatement","src":"14914:48:20"}]}},{"expression":{"arguments":[{"id":6518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6497,"src":"14996:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14989:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":6516,"name":"uint40","nodeType":"ElementaryTypeName","src":"14989:6:20","typeDescriptions":{}}},"id":6519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14989:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":6501,"id":6520,"nodeType":"Return","src":"14982:20:20"}]},"documentation":{"id":6495,"nodeType":"StructuredDocumentation","src":"14515:276:20","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":6522,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14805:8:20","nodeType":"FunctionDefinition","parameters":{"id":6498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6497,"mutability":"mutable","name":"value","nameLocation":"14822:5:20","nodeType":"VariableDeclaration","scope":6522,"src":"14814:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6496,"name":"uint256","nodeType":"ElementaryTypeName","src":"14814:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14813:15:20"},"returnParameters":{"id":6501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6522,"src":"14852:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":6499,"name":"uint40","nodeType":"ElementaryTypeName","src":"14852:6:20","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14851:8:20"},"scope":7504,"src":"14796:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6549,"nodeType":"Block","src":"15360:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6525,"src":"15374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15387:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6532,"name":"uint32","nodeType":"ElementaryTypeName","src":"15387:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":6531,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"15382:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15382:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":6535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15395:3:20","memberName":"max","nodeType":"MemberAccess","src":"15382:16:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15374:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6543,"nodeType":"IfStatement","src":"15370:103:20","trueBody":{"id":6542,"nodeType":"Block","src":"15400:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":6538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":6539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6525,"src":"15456:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6537,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"15421:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15421:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6541,"nodeType":"RevertStatement","src":"15414:48:20"}]}},{"expression":{"arguments":[{"id":6546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6525,"src":"15496:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15489:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":6544,"name":"uint32","nodeType":"ElementaryTypeName","src":"15489:6:20","typeDescriptions":{}}},"id":6547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15489:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":6529,"id":6548,"nodeType":"Return","src":"15482:20:20"}]},"documentation":{"id":6523,"nodeType":"StructuredDocumentation","src":"15015:276:20","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":6550,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15305:8:20","nodeType":"FunctionDefinition","parameters":{"id":6526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6525,"mutability":"mutable","name":"value","nameLocation":"15322:5:20","nodeType":"VariableDeclaration","scope":6550,"src":"15314:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6524,"name":"uint256","nodeType":"ElementaryTypeName","src":"15314:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15313:15:20"},"returnParameters":{"id":6529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6550,"src":"15352:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6527,"name":"uint32","nodeType":"ElementaryTypeName","src":"15352:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15351:8:20"},"scope":7504,"src":"15296:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6577,"nodeType":"Block","src":"15860:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6553,"src":"15874:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15887:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":6560,"name":"uint24","nodeType":"ElementaryTypeName","src":"15887:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":6559,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"15882:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15882:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":6563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15895:3:20","memberName":"max","nodeType":"MemberAccess","src":"15882:16:20","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15874:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6571,"nodeType":"IfStatement","src":"15870:103:20","trueBody":{"id":6570,"nodeType":"Block","src":"15900:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":6566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15952:2:20","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":6567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6553,"src":"15956:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6565,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"15921:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15921:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6569,"nodeType":"RevertStatement","src":"15914:48:20"}]}},{"expression":{"arguments":[{"id":6574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6553,"src":"15996:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15989:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":6572,"name":"uint24","nodeType":"ElementaryTypeName","src":"15989:6:20","typeDescriptions":{}}},"id":6575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15989:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":6557,"id":6576,"nodeType":"Return","src":"15982:20:20"}]},"documentation":{"id":6551,"nodeType":"StructuredDocumentation","src":"15515:276:20","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":6578,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15805:8:20","nodeType":"FunctionDefinition","parameters":{"id":6554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6553,"mutability":"mutable","name":"value","nameLocation":"15822:5:20","nodeType":"VariableDeclaration","scope":6578,"src":"15814:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6552,"name":"uint256","nodeType":"ElementaryTypeName","src":"15814:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15813:15:20"},"returnParameters":{"id":6557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6578,"src":"15852:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":6555,"name":"uint24","nodeType":"ElementaryTypeName","src":"15852:6:20","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15851:8:20"},"scope":7504,"src":"15796:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6605,"nodeType":"Block","src":"16360:149:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6581,"src":"16374:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16387:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":6588,"name":"uint16","nodeType":"ElementaryTypeName","src":"16387:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":6587,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"16382:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16382:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":6591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16395:3:20","memberName":"max","nodeType":"MemberAccess","src":"16382:16:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16374:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6599,"nodeType":"IfStatement","src":"16370:103:20","trueBody":{"id":6598,"nodeType":"Block","src":"16400:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":6594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":6595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6581,"src":"16456:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6593,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"16421:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16421:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6597,"nodeType":"RevertStatement","src":"16414:48:20"}]}},{"expression":{"arguments":[{"id":6602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6581,"src":"16496:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16489:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":6600,"name":"uint16","nodeType":"ElementaryTypeName","src":"16489:6:20","typeDescriptions":{}}},"id":6603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16489:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":6585,"id":6604,"nodeType":"Return","src":"16482:20:20"}]},"documentation":{"id":6579,"nodeType":"StructuredDocumentation","src":"16015:276:20","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":6606,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16305:8:20","nodeType":"FunctionDefinition","parameters":{"id":6582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6581,"mutability":"mutable","name":"value","nameLocation":"16322:5:20","nodeType":"VariableDeclaration","scope":6606,"src":"16314:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6580,"name":"uint256","nodeType":"ElementaryTypeName","src":"16314:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16313:15:20"},"returnParameters":{"id":6585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6606,"src":"16352:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":6583,"name":"uint16","nodeType":"ElementaryTypeName","src":"16352:6:20","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16351:8:20"},"scope":7504,"src":"16296:213:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6633,"nodeType":"Block","src":"16854:146:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6609,"src":"16868:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":6617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16881:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6616,"name":"uint8","nodeType":"ElementaryTypeName","src":"16881:5:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":6615,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"16876:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16876:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":6619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16888:3:20","memberName":"max","nodeType":"MemberAccess","src":"16876:15:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16868:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6627,"nodeType":"IfStatement","src":"16864:101:20","trueBody":{"id":6626,"nodeType":"Block","src":"16893:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":6622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16945:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":6623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6609,"src":"16948:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6621,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"16914:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":6624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16914:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6625,"nodeType":"RevertStatement","src":"16907:47:20"}]}},{"expression":{"arguments":[{"id":6630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6609,"src":"16987:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16981:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6628,"name":"uint8","nodeType":"ElementaryTypeName","src":"16981:5:20","typeDescriptions":{}}},"id":6631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16981:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":6613,"id":6632,"nodeType":"Return","src":"16974:19:20"}]},"documentation":{"id":6607,"nodeType":"StructuredDocumentation","src":"16515:272:20","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":6634,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16801:7:20","nodeType":"FunctionDefinition","parameters":{"id":6610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6609,"mutability":"mutable","name":"value","nameLocation":"16817:5:20","nodeType":"VariableDeclaration","scope":6634,"src":"16809:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6608,"name":"uint256","nodeType":"ElementaryTypeName","src":"16809:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16808:15:20"},"returnParameters":{"id":6613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6634,"src":"16847:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6611,"name":"uint8","nodeType":"ElementaryTypeName","src":"16847:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16846:7:20"},"scope":7504,"src":"16792:208:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6656,"nodeType":"Block","src":"17236:128:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"17250:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":6643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17258:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17250:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6650,"nodeType":"IfStatement","src":"17246:81:20","trueBody":{"id":6649,"nodeType":"Block","src":"17261:66:20","statements":[{"errorCall":{"arguments":[{"id":6646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"17310:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6645,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"17282:27:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$_t_error_$","typeString":"function (int256) pure returns (error)"}},"id":6647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17282:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6648,"nodeType":"RevertStatement","src":"17275:41:20"}]}},{"expression":{"arguments":[{"id":6653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"17351:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17343:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6651,"name":"uint256","nodeType":"ElementaryTypeName","src":"17343:7:20","typeDescriptions":{}}},"id":6654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17343:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6641,"id":6655,"nodeType":"Return","src":"17336:21:20"}]},"documentation":{"id":6635,"nodeType":"StructuredDocumentation","src":"17006:160:20","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":6657,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17180:9:20","nodeType":"FunctionDefinition","parameters":{"id":6638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6637,"mutability":"mutable","name":"value","nameLocation":"17197:5:20","nodeType":"VariableDeclaration","scope":6657,"src":"17190:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6636,"name":"int256","nodeType":"ElementaryTypeName","src":"17190:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17189:14:20"},"returnParameters":{"id":6641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6657,"src":"17227:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6639,"name":"uint256","nodeType":"ElementaryTypeName","src":"17227:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17226:9:20"},"scope":7504,"src":"17171:193:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6682,"nodeType":"Block","src":"17761:150:20","statements":[{"expression":{"id":6670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6665,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"17771:10:20","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6660,"src":"17791:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17784:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":6666,"name":"int248","nodeType":"ElementaryTypeName","src":"17784:6:20","typeDescriptions":{}}},"id":6669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17784:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17771:26:20","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":6671,"nodeType":"ExpressionStatement","src":"17771:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6672,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"17811:10:20","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6660,"src":"17825:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17811:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6681,"nodeType":"IfStatement","src":"17807:98:20","trueBody":{"id":6680,"nodeType":"Block","src":"17832:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":6676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17883:3:20","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":6677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6660,"src":"17888:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6675,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"17853:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17853:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6679,"nodeType":"RevertStatement","src":"17846:48:20"}]}}]},"documentation":{"id":6658,"nodeType":"StructuredDocumentation","src":"17370:312:20","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":6683,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17696:8:20","nodeType":"FunctionDefinition","parameters":{"id":6661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6660,"mutability":"mutable","name":"value","nameLocation":"17712:5:20","nodeType":"VariableDeclaration","scope":6683,"src":"17705:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6659,"name":"int256","nodeType":"ElementaryTypeName","src":"17705:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17704:14:20"},"returnParameters":{"id":6664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6663,"mutability":"mutable","name":"downcasted","nameLocation":"17749:10:20","nodeType":"VariableDeclaration","scope":6683,"src":"17742:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":6662,"name":"int248","nodeType":"ElementaryTypeName","src":"17742:6:20","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17741:19:20"},"scope":7504,"src":"17687:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6708,"nodeType":"Block","src":"18308:150:20","statements":[{"expression":{"id":6696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6691,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"18318:10:20","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6686,"src":"18338:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18331:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":6692,"name":"int240","nodeType":"ElementaryTypeName","src":"18331:6:20","typeDescriptions":{}}},"id":6695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18331:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18318:26:20","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":6697,"nodeType":"ExpressionStatement","src":"18318:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6698,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"18358:10:20","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6686,"src":"18372:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18358:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6707,"nodeType":"IfStatement","src":"18354:98:20","trueBody":{"id":6706,"nodeType":"Block","src":"18379:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":6702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18430:3:20","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":6703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6686,"src":"18435:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6701,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"18400:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18400:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6705,"nodeType":"RevertStatement","src":"18393:48:20"}]}}]},"documentation":{"id":6684,"nodeType":"StructuredDocumentation","src":"17917:312:20","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":6709,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18243:8:20","nodeType":"FunctionDefinition","parameters":{"id":6687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6686,"mutability":"mutable","name":"value","nameLocation":"18259:5:20","nodeType":"VariableDeclaration","scope":6709,"src":"18252:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6685,"name":"int256","nodeType":"ElementaryTypeName","src":"18252:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18251:14:20"},"returnParameters":{"id":6690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6689,"mutability":"mutable","name":"downcasted","nameLocation":"18296:10:20","nodeType":"VariableDeclaration","scope":6709,"src":"18289:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":6688,"name":"int240","nodeType":"ElementaryTypeName","src":"18289:6:20","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18288:19:20"},"scope":7504,"src":"18234:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6734,"nodeType":"Block","src":"18855:150:20","statements":[{"expression":{"id":6722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6717,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"18865:10:20","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6720,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6712,"src":"18885:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18878:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":6718,"name":"int232","nodeType":"ElementaryTypeName","src":"18878:6:20","typeDescriptions":{}}},"id":6721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18878:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18865:26:20","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":6723,"nodeType":"ExpressionStatement","src":"18865:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6724,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"18905:10:20","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6712,"src":"18919:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18905:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6733,"nodeType":"IfStatement","src":"18901:98:20","trueBody":{"id":6732,"nodeType":"Block","src":"18926:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":6728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18977:3:20","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":6729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6712,"src":"18982:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6727,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"18947:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18947:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6731,"nodeType":"RevertStatement","src":"18940:48:20"}]}}]},"documentation":{"id":6710,"nodeType":"StructuredDocumentation","src":"18464:312:20","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":6735,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18790:8:20","nodeType":"FunctionDefinition","parameters":{"id":6713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6712,"mutability":"mutable","name":"value","nameLocation":"18806:5:20","nodeType":"VariableDeclaration","scope":6735,"src":"18799:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6711,"name":"int256","nodeType":"ElementaryTypeName","src":"18799:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18798:14:20"},"returnParameters":{"id":6716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6715,"mutability":"mutable","name":"downcasted","nameLocation":"18843:10:20","nodeType":"VariableDeclaration","scope":6735,"src":"18836:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":6714,"name":"int232","nodeType":"ElementaryTypeName","src":"18836:6:20","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18835:19:20"},"scope":7504,"src":"18781:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6760,"nodeType":"Block","src":"19402:150:20","statements":[{"expression":{"id":6748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6743,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6741,"src":"19412:10:20","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6738,"src":"19432:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19425:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":6744,"name":"int224","nodeType":"ElementaryTypeName","src":"19425:6:20","typeDescriptions":{}}},"id":6747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19425:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19412:26:20","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":6749,"nodeType":"ExpressionStatement","src":"19412:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6750,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6741,"src":"19452:10:20","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6751,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6738,"src":"19466:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19452:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6759,"nodeType":"IfStatement","src":"19448:98:20","trueBody":{"id":6758,"nodeType":"Block","src":"19473:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":6754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19524:3:20","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":6755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6738,"src":"19529:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6753,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"19494:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19494:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6757,"nodeType":"RevertStatement","src":"19487:48:20"}]}}]},"documentation":{"id":6736,"nodeType":"StructuredDocumentation","src":"19011:312:20","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":6761,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19337:8:20","nodeType":"FunctionDefinition","parameters":{"id":6739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6738,"mutability":"mutable","name":"value","nameLocation":"19353:5:20","nodeType":"VariableDeclaration","scope":6761,"src":"19346:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6737,"name":"int256","nodeType":"ElementaryTypeName","src":"19346:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19345:14:20"},"returnParameters":{"id":6742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6741,"mutability":"mutable","name":"downcasted","nameLocation":"19390:10:20","nodeType":"VariableDeclaration","scope":6761,"src":"19383:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":6740,"name":"int224","nodeType":"ElementaryTypeName","src":"19383:6:20","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19382:19:20"},"scope":7504,"src":"19328:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6786,"nodeType":"Block","src":"19949:150:20","statements":[{"expression":{"id":6774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6769,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6767,"src":"19959:10:20","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6764,"src":"19979:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19972:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":6770,"name":"int216","nodeType":"ElementaryTypeName","src":"19972:6:20","typeDescriptions":{}}},"id":6773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19972:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19959:26:20","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":6775,"nodeType":"ExpressionStatement","src":"19959:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6776,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6767,"src":"19999:10:20","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6764,"src":"20013:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19999:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6785,"nodeType":"IfStatement","src":"19995:98:20","trueBody":{"id":6784,"nodeType":"Block","src":"20020:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":6780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20071:3:20","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":6781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6764,"src":"20076:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6779,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"20041:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20041:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6783,"nodeType":"RevertStatement","src":"20034:48:20"}]}}]},"documentation":{"id":6762,"nodeType":"StructuredDocumentation","src":"19558:312:20","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":6787,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19884:8:20","nodeType":"FunctionDefinition","parameters":{"id":6765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6764,"mutability":"mutable","name":"value","nameLocation":"19900:5:20","nodeType":"VariableDeclaration","scope":6787,"src":"19893:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6763,"name":"int256","nodeType":"ElementaryTypeName","src":"19893:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19892:14:20"},"returnParameters":{"id":6768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6767,"mutability":"mutable","name":"downcasted","nameLocation":"19937:10:20","nodeType":"VariableDeclaration","scope":6787,"src":"19930:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":6766,"name":"int216","nodeType":"ElementaryTypeName","src":"19930:6:20","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19929:19:20"},"scope":7504,"src":"19875:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6812,"nodeType":"Block","src":"20496:150:20","statements":[{"expression":{"id":6800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6795,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"20506:10:20","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6790,"src":"20526:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20519:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":6796,"name":"int208","nodeType":"ElementaryTypeName","src":"20519:6:20","typeDescriptions":{}}},"id":6799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20519:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20506:26:20","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":6801,"nodeType":"ExpressionStatement","src":"20506:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6802,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"20546:10:20","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6790,"src":"20560:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20546:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6811,"nodeType":"IfStatement","src":"20542:98:20","trueBody":{"id":6810,"nodeType":"Block","src":"20567:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":6806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20618:3:20","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":6807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6790,"src":"20623:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6805,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"20588:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20588:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6809,"nodeType":"RevertStatement","src":"20581:48:20"}]}}]},"documentation":{"id":6788,"nodeType":"StructuredDocumentation","src":"20105:312:20","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":6813,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20431:8:20","nodeType":"FunctionDefinition","parameters":{"id":6791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6790,"mutability":"mutable","name":"value","nameLocation":"20447:5:20","nodeType":"VariableDeclaration","scope":6813,"src":"20440:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6789,"name":"int256","nodeType":"ElementaryTypeName","src":"20440:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20439:14:20"},"returnParameters":{"id":6794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6793,"mutability":"mutable","name":"downcasted","nameLocation":"20484:10:20","nodeType":"VariableDeclaration","scope":6813,"src":"20477:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":6792,"name":"int208","nodeType":"ElementaryTypeName","src":"20477:6:20","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20476:19:20"},"scope":7504,"src":"20422:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6838,"nodeType":"Block","src":"21043:150:20","statements":[{"expression":{"id":6826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6821,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6819,"src":"21053:10:20","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6824,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"21073:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21066:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":6822,"name":"int200","nodeType":"ElementaryTypeName","src":"21066:6:20","typeDescriptions":{}}},"id":6825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21066:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21053:26:20","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":6827,"nodeType":"ExpressionStatement","src":"21053:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6828,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6819,"src":"21093:10:20","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"21107:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21093:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6837,"nodeType":"IfStatement","src":"21089:98:20","trueBody":{"id":6836,"nodeType":"Block","src":"21114:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":6832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21165:3:20","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":6833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"21170:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6831,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"21135:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21135:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6835,"nodeType":"RevertStatement","src":"21128:48:20"}]}}]},"documentation":{"id":6814,"nodeType":"StructuredDocumentation","src":"20652:312:20","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":6839,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20978:8:20","nodeType":"FunctionDefinition","parameters":{"id":6817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6816,"mutability":"mutable","name":"value","nameLocation":"20994:5:20","nodeType":"VariableDeclaration","scope":6839,"src":"20987:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6815,"name":"int256","nodeType":"ElementaryTypeName","src":"20987:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20986:14:20"},"returnParameters":{"id":6820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6819,"mutability":"mutable","name":"downcasted","nameLocation":"21031:10:20","nodeType":"VariableDeclaration","scope":6839,"src":"21024:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":6818,"name":"int200","nodeType":"ElementaryTypeName","src":"21024:6:20","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21023:19:20"},"scope":7504,"src":"20969:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6864,"nodeType":"Block","src":"21590:150:20","statements":[{"expression":{"id":6852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6847,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6845,"src":"21600:10:20","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6850,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6842,"src":"21620:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21613:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":6848,"name":"int192","nodeType":"ElementaryTypeName","src":"21613:6:20","typeDescriptions":{}}},"id":6851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21613:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21600:26:20","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":6853,"nodeType":"ExpressionStatement","src":"21600:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6854,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6845,"src":"21640:10:20","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6855,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6842,"src":"21654:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21640:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6863,"nodeType":"IfStatement","src":"21636:98:20","trueBody":{"id":6862,"nodeType":"Block","src":"21661:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":6858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21712:3:20","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":6859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6842,"src":"21717:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6857,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"21682:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21682:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6861,"nodeType":"RevertStatement","src":"21675:48:20"}]}}]},"documentation":{"id":6840,"nodeType":"StructuredDocumentation","src":"21199:312:20","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":6865,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21525:8:20","nodeType":"FunctionDefinition","parameters":{"id":6843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6842,"mutability":"mutable","name":"value","nameLocation":"21541:5:20","nodeType":"VariableDeclaration","scope":6865,"src":"21534:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6841,"name":"int256","nodeType":"ElementaryTypeName","src":"21534:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21533:14:20"},"returnParameters":{"id":6846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6845,"mutability":"mutable","name":"downcasted","nameLocation":"21578:10:20","nodeType":"VariableDeclaration","scope":6865,"src":"21571:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":6844,"name":"int192","nodeType":"ElementaryTypeName","src":"21571:6:20","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21570:19:20"},"scope":7504,"src":"21516:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6890,"nodeType":"Block","src":"22137:150:20","statements":[{"expression":{"id":6878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6873,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"22147:10:20","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6876,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6868,"src":"22167:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22160:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":6874,"name":"int184","nodeType":"ElementaryTypeName","src":"22160:6:20","typeDescriptions":{}}},"id":6877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22160:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22147:26:20","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":6879,"nodeType":"ExpressionStatement","src":"22147:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6880,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"22187:10:20","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6868,"src":"22201:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22187:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6889,"nodeType":"IfStatement","src":"22183:98:20","trueBody":{"id":6888,"nodeType":"Block","src":"22208:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":6884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22259:3:20","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":6885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6868,"src":"22264:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6883,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"22229:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22229:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6887,"nodeType":"RevertStatement","src":"22222:48:20"}]}}]},"documentation":{"id":6866,"nodeType":"StructuredDocumentation","src":"21746:312:20","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":6891,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22072:8:20","nodeType":"FunctionDefinition","parameters":{"id":6869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6868,"mutability":"mutable","name":"value","nameLocation":"22088:5:20","nodeType":"VariableDeclaration","scope":6891,"src":"22081:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6867,"name":"int256","nodeType":"ElementaryTypeName","src":"22081:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22080:14:20"},"returnParameters":{"id":6872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6871,"mutability":"mutable","name":"downcasted","nameLocation":"22125:10:20","nodeType":"VariableDeclaration","scope":6891,"src":"22118:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":6870,"name":"int184","nodeType":"ElementaryTypeName","src":"22118:6:20","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22117:19:20"},"scope":7504,"src":"22063:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6916,"nodeType":"Block","src":"22684:150:20","statements":[{"expression":{"id":6904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6899,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"22694:10:20","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6902,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"22714:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22707:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":6900,"name":"int176","nodeType":"ElementaryTypeName","src":"22707:6:20","typeDescriptions":{}}},"id":6903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22707:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22694:26:20","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":6905,"nodeType":"ExpressionStatement","src":"22694:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6906,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"22734:10:20","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"22748:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22734:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6915,"nodeType":"IfStatement","src":"22730:98:20","trueBody":{"id":6914,"nodeType":"Block","src":"22755:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":6910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22806:3:20","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":6911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"22811:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6909,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"22776:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22776:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6913,"nodeType":"RevertStatement","src":"22769:48:20"}]}}]},"documentation":{"id":6892,"nodeType":"StructuredDocumentation","src":"22293:312:20","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":6917,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22619:8:20","nodeType":"FunctionDefinition","parameters":{"id":6895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6894,"mutability":"mutable","name":"value","nameLocation":"22635:5:20","nodeType":"VariableDeclaration","scope":6917,"src":"22628:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6893,"name":"int256","nodeType":"ElementaryTypeName","src":"22628:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22627:14:20"},"returnParameters":{"id":6898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6897,"mutability":"mutable","name":"downcasted","nameLocation":"22672:10:20","nodeType":"VariableDeclaration","scope":6917,"src":"22665:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":6896,"name":"int176","nodeType":"ElementaryTypeName","src":"22665:6:20","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22664:19:20"},"scope":7504,"src":"22610:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6942,"nodeType":"Block","src":"23231:150:20","statements":[{"expression":{"id":6930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6925,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6923,"src":"23241:10:20","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"23261:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23254:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":6926,"name":"int168","nodeType":"ElementaryTypeName","src":"23254:6:20","typeDescriptions":{}}},"id":6929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23254:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23241:26:20","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":6931,"nodeType":"ExpressionStatement","src":"23241:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6932,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6923,"src":"23281:10:20","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"23295:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23281:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6941,"nodeType":"IfStatement","src":"23277:98:20","trueBody":{"id":6940,"nodeType":"Block","src":"23302:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":6936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23353:3:20","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":6937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"23358:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6935,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"23323:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23323:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6939,"nodeType":"RevertStatement","src":"23316:48:20"}]}}]},"documentation":{"id":6918,"nodeType":"StructuredDocumentation","src":"22840:312:20","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":6943,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23166:8:20","nodeType":"FunctionDefinition","parameters":{"id":6921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6920,"mutability":"mutable","name":"value","nameLocation":"23182:5:20","nodeType":"VariableDeclaration","scope":6943,"src":"23175:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6919,"name":"int256","nodeType":"ElementaryTypeName","src":"23175:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23174:14:20"},"returnParameters":{"id":6924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6923,"mutability":"mutable","name":"downcasted","nameLocation":"23219:10:20","nodeType":"VariableDeclaration","scope":6943,"src":"23212:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":6922,"name":"int168","nodeType":"ElementaryTypeName","src":"23212:6:20","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23211:19:20"},"scope":7504,"src":"23157:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6968,"nodeType":"Block","src":"23778:150:20","statements":[{"expression":{"id":6956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6951,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6949,"src":"23788:10:20","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6946,"src":"23808:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23801:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":6952,"name":"int160","nodeType":"ElementaryTypeName","src":"23801:6:20","typeDescriptions":{}}},"id":6955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23801:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23788:26:20","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":6957,"nodeType":"ExpressionStatement","src":"23788:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6958,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6949,"src":"23828:10:20","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6959,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6946,"src":"23842:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23828:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6967,"nodeType":"IfStatement","src":"23824:98:20","trueBody":{"id":6966,"nodeType":"Block","src":"23849:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":6962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23900:3:20","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":6963,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6946,"src":"23905:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6961,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"23870:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23870:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6965,"nodeType":"RevertStatement","src":"23863:48:20"}]}}]},"documentation":{"id":6944,"nodeType":"StructuredDocumentation","src":"23387:312:20","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":6969,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23713:8:20","nodeType":"FunctionDefinition","parameters":{"id":6947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6946,"mutability":"mutable","name":"value","nameLocation":"23729:5:20","nodeType":"VariableDeclaration","scope":6969,"src":"23722:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6945,"name":"int256","nodeType":"ElementaryTypeName","src":"23722:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23721:14:20"},"returnParameters":{"id":6950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6949,"mutability":"mutable","name":"downcasted","nameLocation":"23766:10:20","nodeType":"VariableDeclaration","scope":6969,"src":"23759:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":6948,"name":"int160","nodeType":"ElementaryTypeName","src":"23759:6:20","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23758:19:20"},"scope":7504,"src":"23704:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6994,"nodeType":"Block","src":"24325:150:20","statements":[{"expression":{"id":6982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6977,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6975,"src":"24335:10:20","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6980,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"24355:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24348:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":6978,"name":"int152","nodeType":"ElementaryTypeName","src":"24348:6:20","typeDescriptions":{}}},"id":6981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24348:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24335:26:20","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":6983,"nodeType":"ExpressionStatement","src":"24335:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6984,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6975,"src":"24375:10:20","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"24389:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24375:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6993,"nodeType":"IfStatement","src":"24371:98:20","trueBody":{"id":6992,"nodeType":"Block","src":"24396:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":6988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24447:3:20","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":6989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"24452:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6987,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"24417:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":6990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24417:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6991,"nodeType":"RevertStatement","src":"24410:48:20"}]}}]},"documentation":{"id":6970,"nodeType":"StructuredDocumentation","src":"23934:312:20","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":6995,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24260:8:20","nodeType":"FunctionDefinition","parameters":{"id":6973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6972,"mutability":"mutable","name":"value","nameLocation":"24276:5:20","nodeType":"VariableDeclaration","scope":6995,"src":"24269:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6971,"name":"int256","nodeType":"ElementaryTypeName","src":"24269:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24268:14:20"},"returnParameters":{"id":6976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6975,"mutability":"mutable","name":"downcasted","nameLocation":"24313:10:20","nodeType":"VariableDeclaration","scope":6995,"src":"24306:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":6974,"name":"int152","nodeType":"ElementaryTypeName","src":"24306:6:20","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24305:19:20"},"scope":7504,"src":"24251:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7020,"nodeType":"Block","src":"24872:150:20","statements":[{"expression":{"id":7008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7003,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7001,"src":"24882:10:20","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6998,"src":"24902:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24895:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":7004,"name":"int144","nodeType":"ElementaryTypeName","src":"24895:6:20","typeDescriptions":{}}},"id":7007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24895:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24882:26:20","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":7009,"nodeType":"ExpressionStatement","src":"24882:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7010,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7001,"src":"24922:10:20","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6998,"src":"24936:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24922:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7019,"nodeType":"IfStatement","src":"24918:98:20","trueBody":{"id":7018,"nodeType":"Block","src":"24943:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":7014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24994:3:20","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":7015,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6998,"src":"24999:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7013,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"24964:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24964:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7017,"nodeType":"RevertStatement","src":"24957:48:20"}]}}]},"documentation":{"id":6996,"nodeType":"StructuredDocumentation","src":"24481:312:20","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":7021,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24807:8:20","nodeType":"FunctionDefinition","parameters":{"id":6999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6998,"mutability":"mutable","name":"value","nameLocation":"24823:5:20","nodeType":"VariableDeclaration","scope":7021,"src":"24816:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6997,"name":"int256","nodeType":"ElementaryTypeName","src":"24816:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24815:14:20"},"returnParameters":{"id":7002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7001,"mutability":"mutable","name":"downcasted","nameLocation":"24860:10:20","nodeType":"VariableDeclaration","scope":7021,"src":"24853:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":7000,"name":"int144","nodeType":"ElementaryTypeName","src":"24853:6:20","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24852:19:20"},"scope":7504,"src":"24798:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7046,"nodeType":"Block","src":"25419:150:20","statements":[{"expression":{"id":7034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7029,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7027,"src":"25429:10:20","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7024,"src":"25449:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25442:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":7030,"name":"int136","nodeType":"ElementaryTypeName","src":"25442:6:20","typeDescriptions":{}}},"id":7033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25442:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25429:26:20","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":7035,"nodeType":"ExpressionStatement","src":"25429:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7036,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7027,"src":"25469:10:20","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7037,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7024,"src":"25483:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25469:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7045,"nodeType":"IfStatement","src":"25465:98:20","trueBody":{"id":7044,"nodeType":"Block","src":"25490:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":7040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25541:3:20","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":7041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7024,"src":"25546:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7039,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"25511:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25511:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7043,"nodeType":"RevertStatement","src":"25504:48:20"}]}}]},"documentation":{"id":7022,"nodeType":"StructuredDocumentation","src":"25028:312:20","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":7047,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25354:8:20","nodeType":"FunctionDefinition","parameters":{"id":7025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7024,"mutability":"mutable","name":"value","nameLocation":"25370:5:20","nodeType":"VariableDeclaration","scope":7047,"src":"25363:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7023,"name":"int256","nodeType":"ElementaryTypeName","src":"25363:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25362:14:20"},"returnParameters":{"id":7028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7027,"mutability":"mutable","name":"downcasted","nameLocation":"25407:10:20","nodeType":"VariableDeclaration","scope":7047,"src":"25400:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":7026,"name":"int136","nodeType":"ElementaryTypeName","src":"25400:6:20","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25399:19:20"},"scope":7504,"src":"25345:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7072,"nodeType":"Block","src":"25966:150:20","statements":[{"expression":{"id":7060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7055,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7053,"src":"25976:10:20","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"25996:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25989:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":7056,"name":"int128","nodeType":"ElementaryTypeName","src":"25989:6:20","typeDescriptions":{}}},"id":7059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25989:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25976:26:20","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":7061,"nodeType":"ExpressionStatement","src":"25976:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7062,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7053,"src":"26016:10:20","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"26030:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26016:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7071,"nodeType":"IfStatement","src":"26012:98:20","trueBody":{"id":7070,"nodeType":"Block","src":"26037:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":7066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26088:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":7067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"26093:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7065,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"26058:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26058:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7069,"nodeType":"RevertStatement","src":"26051:48:20"}]}}]},"documentation":{"id":7048,"nodeType":"StructuredDocumentation","src":"25575:312:20","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":7073,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25901:8:20","nodeType":"FunctionDefinition","parameters":{"id":7051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7050,"mutability":"mutable","name":"value","nameLocation":"25917:5:20","nodeType":"VariableDeclaration","scope":7073,"src":"25910:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7049,"name":"int256","nodeType":"ElementaryTypeName","src":"25910:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25909:14:20"},"returnParameters":{"id":7054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7053,"mutability":"mutable","name":"downcasted","nameLocation":"25954:10:20","nodeType":"VariableDeclaration","scope":7073,"src":"25947:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":7052,"name":"int128","nodeType":"ElementaryTypeName","src":"25947:6:20","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25946:19:20"},"scope":7504,"src":"25892:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7098,"nodeType":"Block","src":"26513:150:20","statements":[{"expression":{"id":7086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7081,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"26523:10:20","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7076,"src":"26543:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26536:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":7082,"name":"int120","nodeType":"ElementaryTypeName","src":"26536:6:20","typeDescriptions":{}}},"id":7085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26536:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26523:26:20","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":7087,"nodeType":"ExpressionStatement","src":"26523:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7088,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"26563:10:20","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7076,"src":"26577:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26563:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7097,"nodeType":"IfStatement","src":"26559:98:20","trueBody":{"id":7096,"nodeType":"Block","src":"26584:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":7092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26635:3:20","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":7093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7076,"src":"26640:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7091,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"26605:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26605:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7095,"nodeType":"RevertStatement","src":"26598:48:20"}]}}]},"documentation":{"id":7074,"nodeType":"StructuredDocumentation","src":"26122:312:20","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":7099,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26448:8:20","nodeType":"FunctionDefinition","parameters":{"id":7077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7076,"mutability":"mutable","name":"value","nameLocation":"26464:5:20","nodeType":"VariableDeclaration","scope":7099,"src":"26457:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7075,"name":"int256","nodeType":"ElementaryTypeName","src":"26457:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26456:14:20"},"returnParameters":{"id":7080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7079,"mutability":"mutable","name":"downcasted","nameLocation":"26501:10:20","nodeType":"VariableDeclaration","scope":7099,"src":"26494:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":7078,"name":"int120","nodeType":"ElementaryTypeName","src":"26494:6:20","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26493:19:20"},"scope":7504,"src":"26439:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7124,"nodeType":"Block","src":"27060:150:20","statements":[{"expression":{"id":7112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7107,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7105,"src":"27070:10:20","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7102,"src":"27090:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27083:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":7108,"name":"int112","nodeType":"ElementaryTypeName","src":"27083:6:20","typeDescriptions":{}}},"id":7111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27083:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27070:26:20","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":7113,"nodeType":"ExpressionStatement","src":"27070:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7114,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7105,"src":"27110:10:20","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7102,"src":"27124:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27110:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7123,"nodeType":"IfStatement","src":"27106:98:20","trueBody":{"id":7122,"nodeType":"Block","src":"27131:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":7118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27182:3:20","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":7119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7102,"src":"27187:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7117,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"27152:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27152:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7121,"nodeType":"RevertStatement","src":"27145:48:20"}]}}]},"documentation":{"id":7100,"nodeType":"StructuredDocumentation","src":"26669:312:20","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":7125,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26995:8:20","nodeType":"FunctionDefinition","parameters":{"id":7103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7102,"mutability":"mutable","name":"value","nameLocation":"27011:5:20","nodeType":"VariableDeclaration","scope":7125,"src":"27004:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7101,"name":"int256","nodeType":"ElementaryTypeName","src":"27004:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27003:14:20"},"returnParameters":{"id":7106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7105,"mutability":"mutable","name":"downcasted","nameLocation":"27048:10:20","nodeType":"VariableDeclaration","scope":7125,"src":"27041:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":7104,"name":"int112","nodeType":"ElementaryTypeName","src":"27041:6:20","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27040:19:20"},"scope":7504,"src":"26986:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7150,"nodeType":"Block","src":"27607:150:20","statements":[{"expression":{"id":7138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7133,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7131,"src":"27617:10:20","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7136,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7128,"src":"27637:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27630:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":7134,"name":"int104","nodeType":"ElementaryTypeName","src":"27630:6:20","typeDescriptions":{}}},"id":7137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27630:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27617:26:20","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":7139,"nodeType":"ExpressionStatement","src":"27617:26:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7140,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7131,"src":"27657:10:20","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7128,"src":"27671:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27657:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7149,"nodeType":"IfStatement","src":"27653:98:20","trueBody":{"id":7148,"nodeType":"Block","src":"27678:73:20","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":7144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27729:3:20","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":7145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7128,"src":"27734:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7143,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"27699:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27699:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7147,"nodeType":"RevertStatement","src":"27692:48:20"}]}}]},"documentation":{"id":7126,"nodeType":"StructuredDocumentation","src":"27216:312:20","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":7151,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27542:8:20","nodeType":"FunctionDefinition","parameters":{"id":7129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7128,"mutability":"mutable","name":"value","nameLocation":"27558:5:20","nodeType":"VariableDeclaration","scope":7151,"src":"27551:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7127,"name":"int256","nodeType":"ElementaryTypeName","src":"27551:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27550:14:20"},"returnParameters":{"id":7132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7131,"mutability":"mutable","name":"downcasted","nameLocation":"27595:10:20","nodeType":"VariableDeclaration","scope":7151,"src":"27588:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":7130,"name":"int104","nodeType":"ElementaryTypeName","src":"27588:6:20","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27587:19:20"},"scope":7504,"src":"27533:224:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7176,"nodeType":"Block","src":"28147:148:20","statements":[{"expression":{"id":7164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7159,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7157,"src":"28157:10:20","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7154,"src":"28176:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28170:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":7160,"name":"int96","nodeType":"ElementaryTypeName","src":"28170:5:20","typeDescriptions":{}}},"id":7163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28170:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28157:25:20","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":7165,"nodeType":"ExpressionStatement","src":"28157:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7166,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7157,"src":"28196:10:20","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7167,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7154,"src":"28210:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28196:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7175,"nodeType":"IfStatement","src":"28192:97:20","trueBody":{"id":7174,"nodeType":"Block","src":"28217:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":7170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28268:2:20","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":7171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7154,"src":"28272:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7169,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"28238:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28238:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7173,"nodeType":"RevertStatement","src":"28231:47:20"}]}}]},"documentation":{"id":7152,"nodeType":"StructuredDocumentation","src":"27763:307:20","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":7177,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28084:7:20","nodeType":"FunctionDefinition","parameters":{"id":7155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7154,"mutability":"mutable","name":"value","nameLocation":"28099:5:20","nodeType":"VariableDeclaration","scope":7177,"src":"28092:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7153,"name":"int256","nodeType":"ElementaryTypeName","src":"28092:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28091:14:20"},"returnParameters":{"id":7158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7157,"mutability":"mutable","name":"downcasted","nameLocation":"28135:10:20","nodeType":"VariableDeclaration","scope":7177,"src":"28129:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":7156,"name":"int96","nodeType":"ElementaryTypeName","src":"28129:5:20","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28128:18:20"},"scope":7504,"src":"28075:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7202,"nodeType":"Block","src":"28685:148:20","statements":[{"expression":{"id":7190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7185,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7183,"src":"28695:10:20","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"28714:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28708:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":7186,"name":"int88","nodeType":"ElementaryTypeName","src":"28708:5:20","typeDescriptions":{}}},"id":7189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28708:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28695:25:20","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":7191,"nodeType":"ExpressionStatement","src":"28695:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7192,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7183,"src":"28734:10:20","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7193,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"28748:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28734:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7201,"nodeType":"IfStatement","src":"28730:97:20","trueBody":{"id":7200,"nodeType":"Block","src":"28755:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":7196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28806:2:20","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":7197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"28810:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7195,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"28776:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28776:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7199,"nodeType":"RevertStatement","src":"28769:47:20"}]}}]},"documentation":{"id":7178,"nodeType":"StructuredDocumentation","src":"28301:307:20","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":7203,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28622:7:20","nodeType":"FunctionDefinition","parameters":{"id":7181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7180,"mutability":"mutable","name":"value","nameLocation":"28637:5:20","nodeType":"VariableDeclaration","scope":7203,"src":"28630:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7179,"name":"int256","nodeType":"ElementaryTypeName","src":"28630:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28629:14:20"},"returnParameters":{"id":7184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7183,"mutability":"mutable","name":"downcasted","nameLocation":"28673:10:20","nodeType":"VariableDeclaration","scope":7203,"src":"28667:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":7182,"name":"int88","nodeType":"ElementaryTypeName","src":"28667:5:20","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28666:18:20"},"scope":7504,"src":"28613:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7228,"nodeType":"Block","src":"29223:148:20","statements":[{"expression":{"id":7216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7211,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7209,"src":"29233:10:20","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"29252:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29246:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":7212,"name":"int80","nodeType":"ElementaryTypeName","src":"29246:5:20","typeDescriptions":{}}},"id":7215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29246:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29233:25:20","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":7217,"nodeType":"ExpressionStatement","src":"29233:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7218,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7209,"src":"29272:10:20","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"29286:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29272:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7227,"nodeType":"IfStatement","src":"29268:97:20","trueBody":{"id":7226,"nodeType":"Block","src":"29293:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":7222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29344:2:20","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":7223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"29348:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7221,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"29314:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29314:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7225,"nodeType":"RevertStatement","src":"29307:47:20"}]}}]},"documentation":{"id":7204,"nodeType":"StructuredDocumentation","src":"28839:307:20","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":7229,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29160:7:20","nodeType":"FunctionDefinition","parameters":{"id":7207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7206,"mutability":"mutable","name":"value","nameLocation":"29175:5:20","nodeType":"VariableDeclaration","scope":7229,"src":"29168:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7205,"name":"int256","nodeType":"ElementaryTypeName","src":"29168:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29167:14:20"},"returnParameters":{"id":7210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7209,"mutability":"mutable","name":"downcasted","nameLocation":"29211:10:20","nodeType":"VariableDeclaration","scope":7229,"src":"29205:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":7208,"name":"int80","nodeType":"ElementaryTypeName","src":"29205:5:20","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29204:18:20"},"scope":7504,"src":"29151:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7254,"nodeType":"Block","src":"29761:148:20","statements":[{"expression":{"id":7242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7237,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7235,"src":"29771:10:20","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7232,"src":"29790:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29784:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":7238,"name":"int72","nodeType":"ElementaryTypeName","src":"29784:5:20","typeDescriptions":{}}},"id":7241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29784:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29771:25:20","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":7243,"nodeType":"ExpressionStatement","src":"29771:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7244,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7235,"src":"29810:10:20","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7232,"src":"29824:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29810:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7253,"nodeType":"IfStatement","src":"29806:97:20","trueBody":{"id":7252,"nodeType":"Block","src":"29831:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":7248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29882:2:20","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":7249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7232,"src":"29886:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7247,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"29852:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29852:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7251,"nodeType":"RevertStatement","src":"29845:47:20"}]}}]},"documentation":{"id":7230,"nodeType":"StructuredDocumentation","src":"29377:307:20","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":7255,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29698:7:20","nodeType":"FunctionDefinition","parameters":{"id":7233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7232,"mutability":"mutable","name":"value","nameLocation":"29713:5:20","nodeType":"VariableDeclaration","scope":7255,"src":"29706:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7231,"name":"int256","nodeType":"ElementaryTypeName","src":"29706:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29705:14:20"},"returnParameters":{"id":7236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7235,"mutability":"mutable","name":"downcasted","nameLocation":"29749:10:20","nodeType":"VariableDeclaration","scope":7255,"src":"29743:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":7234,"name":"int72","nodeType":"ElementaryTypeName","src":"29743:5:20","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29742:18:20"},"scope":7504,"src":"29689:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7280,"nodeType":"Block","src":"30299:148:20","statements":[{"expression":{"id":7268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7263,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7261,"src":"30309:10:20","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"30328:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30322:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":7264,"name":"int64","nodeType":"ElementaryTypeName","src":"30322:5:20","typeDescriptions":{}}},"id":7267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30322:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30309:25:20","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":7269,"nodeType":"ExpressionStatement","src":"30309:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7270,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7261,"src":"30348:10:20","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"30362:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30348:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7279,"nodeType":"IfStatement","src":"30344:97:20","trueBody":{"id":7278,"nodeType":"Block","src":"30369:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":7274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30420:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":7275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"30424:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7273,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"30390:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30390:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7277,"nodeType":"RevertStatement","src":"30383:47:20"}]}}]},"documentation":{"id":7256,"nodeType":"StructuredDocumentation","src":"29915:307:20","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":7281,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30236:7:20","nodeType":"FunctionDefinition","parameters":{"id":7259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7258,"mutability":"mutable","name":"value","nameLocation":"30251:5:20","nodeType":"VariableDeclaration","scope":7281,"src":"30244:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7257,"name":"int256","nodeType":"ElementaryTypeName","src":"30244:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30243:14:20"},"returnParameters":{"id":7262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7261,"mutability":"mutable","name":"downcasted","nameLocation":"30287:10:20","nodeType":"VariableDeclaration","scope":7281,"src":"30281:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":7260,"name":"int64","nodeType":"ElementaryTypeName","src":"30281:5:20","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30280:18:20"},"scope":7504,"src":"30227:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7306,"nodeType":"Block","src":"30837:148:20","statements":[{"expression":{"id":7294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7289,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7287,"src":"30847:10:20","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7284,"src":"30866:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30860:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":7290,"name":"int56","nodeType":"ElementaryTypeName","src":"30860:5:20","typeDescriptions":{}}},"id":7293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30860:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30847:25:20","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":7295,"nodeType":"ExpressionStatement","src":"30847:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7296,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7287,"src":"30886:10:20","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7297,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7284,"src":"30900:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30886:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7305,"nodeType":"IfStatement","src":"30882:97:20","trueBody":{"id":7304,"nodeType":"Block","src":"30907:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":7300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30958:2:20","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":7301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7284,"src":"30962:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7299,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"30928:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30928:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7303,"nodeType":"RevertStatement","src":"30921:47:20"}]}}]},"documentation":{"id":7282,"nodeType":"StructuredDocumentation","src":"30453:307:20","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":7307,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30774:7:20","nodeType":"FunctionDefinition","parameters":{"id":7285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7284,"mutability":"mutable","name":"value","nameLocation":"30789:5:20","nodeType":"VariableDeclaration","scope":7307,"src":"30782:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7283,"name":"int256","nodeType":"ElementaryTypeName","src":"30782:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30781:14:20"},"returnParameters":{"id":7288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7287,"mutability":"mutable","name":"downcasted","nameLocation":"30825:10:20","nodeType":"VariableDeclaration","scope":7307,"src":"30819:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":7286,"name":"int56","nodeType":"ElementaryTypeName","src":"30819:5:20","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30818:18:20"},"scope":7504,"src":"30765:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7332,"nodeType":"Block","src":"31375:148:20","statements":[{"expression":{"id":7320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7315,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"31385:10:20","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7310,"src":"31404:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31398:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":7316,"name":"int48","nodeType":"ElementaryTypeName","src":"31398:5:20","typeDescriptions":{}}},"id":7319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31398:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31385:25:20","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":7321,"nodeType":"ExpressionStatement","src":"31385:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7322,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7313,"src":"31424:10:20","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7310,"src":"31438:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31424:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7331,"nodeType":"IfStatement","src":"31420:97:20","trueBody":{"id":7330,"nodeType":"Block","src":"31445:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":7326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31496:2:20","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":7327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7310,"src":"31500:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7325,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"31466:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31466:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7329,"nodeType":"RevertStatement","src":"31459:47:20"}]}}]},"documentation":{"id":7308,"nodeType":"StructuredDocumentation","src":"30991:307:20","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":7333,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31312:7:20","nodeType":"FunctionDefinition","parameters":{"id":7311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7310,"mutability":"mutable","name":"value","nameLocation":"31327:5:20","nodeType":"VariableDeclaration","scope":7333,"src":"31320:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7309,"name":"int256","nodeType":"ElementaryTypeName","src":"31320:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31319:14:20"},"returnParameters":{"id":7314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7313,"mutability":"mutable","name":"downcasted","nameLocation":"31363:10:20","nodeType":"VariableDeclaration","scope":7333,"src":"31357:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":7312,"name":"int48","nodeType":"ElementaryTypeName","src":"31357:5:20","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31356:18:20"},"scope":7504,"src":"31303:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7358,"nodeType":"Block","src":"31913:148:20","statements":[{"expression":{"id":7346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7341,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7339,"src":"31923:10:20","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7336,"src":"31942:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31936:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":7342,"name":"int40","nodeType":"ElementaryTypeName","src":"31936:5:20","typeDescriptions":{}}},"id":7345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31936:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31923:25:20","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":7347,"nodeType":"ExpressionStatement","src":"31923:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7348,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7339,"src":"31962:10:20","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7336,"src":"31976:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31962:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7357,"nodeType":"IfStatement","src":"31958:97:20","trueBody":{"id":7356,"nodeType":"Block","src":"31983:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":7352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32034:2:20","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":7353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7336,"src":"32038:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7351,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"32004:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32004:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7355,"nodeType":"RevertStatement","src":"31997:47:20"}]}}]},"documentation":{"id":7334,"nodeType":"StructuredDocumentation","src":"31529:307:20","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":7359,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31850:7:20","nodeType":"FunctionDefinition","parameters":{"id":7337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7336,"mutability":"mutable","name":"value","nameLocation":"31865:5:20","nodeType":"VariableDeclaration","scope":7359,"src":"31858:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7335,"name":"int256","nodeType":"ElementaryTypeName","src":"31858:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31857:14:20"},"returnParameters":{"id":7340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7339,"mutability":"mutable","name":"downcasted","nameLocation":"31901:10:20","nodeType":"VariableDeclaration","scope":7359,"src":"31895:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":7338,"name":"int40","nodeType":"ElementaryTypeName","src":"31895:5:20","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31894:18:20"},"scope":7504,"src":"31841:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7384,"nodeType":"Block","src":"32451:148:20","statements":[{"expression":{"id":7372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7367,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7365,"src":"32461:10:20","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7362,"src":"32480:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32474:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":7368,"name":"int32","nodeType":"ElementaryTypeName","src":"32474:5:20","typeDescriptions":{}}},"id":7371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32474:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32461:25:20","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":7373,"nodeType":"ExpressionStatement","src":"32461:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7374,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7365,"src":"32500:10:20","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7362,"src":"32514:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32500:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7383,"nodeType":"IfStatement","src":"32496:97:20","trueBody":{"id":7382,"nodeType":"Block","src":"32521:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":7378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32572:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":7379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7362,"src":"32576:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7377,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"32542:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32542:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7381,"nodeType":"RevertStatement","src":"32535:47:20"}]}}]},"documentation":{"id":7360,"nodeType":"StructuredDocumentation","src":"32067:307:20","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":7385,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32388:7:20","nodeType":"FunctionDefinition","parameters":{"id":7363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7362,"mutability":"mutable","name":"value","nameLocation":"32403:5:20","nodeType":"VariableDeclaration","scope":7385,"src":"32396:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7361,"name":"int256","nodeType":"ElementaryTypeName","src":"32396:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32395:14:20"},"returnParameters":{"id":7366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7365,"mutability":"mutable","name":"downcasted","nameLocation":"32439:10:20","nodeType":"VariableDeclaration","scope":7385,"src":"32433:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":7364,"name":"int32","nodeType":"ElementaryTypeName","src":"32433:5:20","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32432:18:20"},"scope":7504,"src":"32379:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7410,"nodeType":"Block","src":"32989:148:20","statements":[{"expression":{"id":7398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7393,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7391,"src":"32999:10:20","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7388,"src":"33018:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33012:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":7394,"name":"int24","nodeType":"ElementaryTypeName","src":"33012:5:20","typeDescriptions":{}}},"id":7397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33012:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32999:25:20","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":7399,"nodeType":"ExpressionStatement","src":"32999:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7400,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7391,"src":"33038:10:20","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7388,"src":"33052:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33038:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7409,"nodeType":"IfStatement","src":"33034:97:20","trueBody":{"id":7408,"nodeType":"Block","src":"33059:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":7404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33110:2:20","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":7405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7388,"src":"33114:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7403,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"33080:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33080:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7407,"nodeType":"RevertStatement","src":"33073:47:20"}]}}]},"documentation":{"id":7386,"nodeType":"StructuredDocumentation","src":"32605:307:20","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":7411,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32926:7:20","nodeType":"FunctionDefinition","parameters":{"id":7389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7388,"mutability":"mutable","name":"value","nameLocation":"32941:5:20","nodeType":"VariableDeclaration","scope":7411,"src":"32934:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7387,"name":"int256","nodeType":"ElementaryTypeName","src":"32934:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32933:14:20"},"returnParameters":{"id":7392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7391,"mutability":"mutable","name":"downcasted","nameLocation":"32977:10:20","nodeType":"VariableDeclaration","scope":7411,"src":"32971:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":7390,"name":"int24","nodeType":"ElementaryTypeName","src":"32971:5:20","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32970:18:20"},"scope":7504,"src":"32917:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7436,"nodeType":"Block","src":"33527:148:20","statements":[{"expression":{"id":7424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7419,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7417,"src":"33537:10:20","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7414,"src":"33556:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33550:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":7420,"name":"int16","nodeType":"ElementaryTypeName","src":"33550:5:20","typeDescriptions":{}}},"id":7423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33550:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33537:25:20","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":7425,"nodeType":"ExpressionStatement","src":"33537:25:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7426,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7417,"src":"33576:10:20","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7414,"src":"33590:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33576:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7435,"nodeType":"IfStatement","src":"33572:97:20","trueBody":{"id":7434,"nodeType":"Block","src":"33597:72:20","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":7430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33648:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":7431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7414,"src":"33652:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7429,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"33618:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33618:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7433,"nodeType":"RevertStatement","src":"33611:47:20"}]}}]},"documentation":{"id":7412,"nodeType":"StructuredDocumentation","src":"33143:307:20","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":7437,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33464:7:20","nodeType":"FunctionDefinition","parameters":{"id":7415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7414,"mutability":"mutable","name":"value","nameLocation":"33479:5:20","nodeType":"VariableDeclaration","scope":7437,"src":"33472:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7413,"name":"int256","nodeType":"ElementaryTypeName","src":"33472:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33471:14:20"},"returnParameters":{"id":7418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7417,"mutability":"mutable","name":"downcasted","nameLocation":"33515:10:20","nodeType":"VariableDeclaration","scope":7437,"src":"33509:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":7416,"name":"int16","nodeType":"ElementaryTypeName","src":"33509:5:20","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33508:18:20"},"scope":7504,"src":"33455:220:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7462,"nodeType":"Block","src":"34058:146:20","statements":[{"expression":{"id":7450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7445,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7443,"src":"34068:10:20","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7440,"src":"34086:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34081:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":7446,"name":"int8","nodeType":"ElementaryTypeName","src":"34081:4:20","typeDescriptions":{}}},"id":7449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34081:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34068:24:20","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":7451,"nodeType":"ExpressionStatement","src":"34068:24:20"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7452,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7443,"src":"34106:10:20","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7440,"src":"34120:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34106:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7461,"nodeType":"IfStatement","src":"34102:96:20","trueBody":{"id":7460,"nodeType":"Block","src":"34127:71:20","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":7456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34178:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":7457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7440,"src":"34181:5:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7455,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"34148:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34148:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7459,"nodeType":"RevertStatement","src":"34141:46:20"}]}}]},"documentation":{"id":7438,"nodeType":"StructuredDocumentation","src":"33681:302:20","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":7463,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33997:6:20","nodeType":"FunctionDefinition","parameters":{"id":7441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7440,"mutability":"mutable","name":"value","nameLocation":"34011:5:20","nodeType":"VariableDeclaration","scope":7463,"src":"34004:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7439,"name":"int256","nodeType":"ElementaryTypeName","src":"34004:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34003:14:20"},"returnParameters":{"id":7444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7443,"mutability":"mutable","name":"downcasted","nameLocation":"34046:10:20","nodeType":"VariableDeclaration","scope":7463,"src":"34041:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":7442,"name":"int8","nodeType":"ElementaryTypeName","src":"34041:4:20","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34040:17:20"},"scope":7504,"src":"33988:216:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7492,"nodeType":"Block","src":"34444:250:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7466,"src":"34557:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":7476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34578:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":7475,"name":"int256","nodeType":"ElementaryTypeName","src":"34578:6:20","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":7474,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"34573:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34573:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":7478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34586:3:20","memberName":"max","nodeType":"MemberAccess","src":"34573:16:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34565:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7472,"name":"uint256","nodeType":"ElementaryTypeName","src":"34565:7:20","typeDescriptions":{}}},"id":7479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34565:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34557:33:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7486,"nodeType":"IfStatement","src":"34553:105:20","trueBody":{"id":7485,"nodeType":"Block","src":"34592:66:20","statements":[{"errorCall":{"arguments":[{"id":7482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7466,"src":"34641:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7481,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5766,"src":"34613:27:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":7483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34613:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7484,"nodeType":"RevertStatement","src":"34606:41:20"}]}},{"expression":{"arguments":[{"id":7489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7466,"src":"34681:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34674:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":7487,"name":"int256","nodeType":"ElementaryTypeName","src":"34674:6:20","typeDescriptions":{}}},"id":7490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34674:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":7470,"id":7491,"nodeType":"Return","src":"34667:20:20"}]},"documentation":{"id":7464,"nodeType":"StructuredDocumentation","src":"34210:165:20","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":7493,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34389:8:20","nodeType":"FunctionDefinition","parameters":{"id":7467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7466,"mutability":"mutable","name":"value","nameLocation":"34406:5:20","nodeType":"VariableDeclaration","scope":7493,"src":"34398:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7465,"name":"uint256","nodeType":"ElementaryTypeName","src":"34398:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34397:15:20"},"returnParameters":{"id":7470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7493,"src":"34436:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7468,"name":"int256","nodeType":"ElementaryTypeName","src":"34436:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34435:8:20"},"scope":7504,"src":"34380:314:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7502,"nodeType":"Block","src":"34853:87:20","statements":[{"AST":{"nativeSrc":"34888:46:20","nodeType":"YulBlock","src":"34888:46:20","statements":[{"nativeSrc":"34902:22:20","nodeType":"YulAssignment","src":"34902:22:20","value":{"arguments":[{"arguments":[{"name":"b","nativeSrc":"34921:1:20","nodeType":"YulIdentifier","src":"34921:1:20"}],"functionName":{"name":"iszero","nativeSrc":"34914:6:20","nodeType":"YulIdentifier","src":"34914:6:20"},"nativeSrc":"34914:9:20","nodeType":"YulFunctionCall","src":"34914:9:20"}],"functionName":{"name":"iszero","nativeSrc":"34907:6:20","nodeType":"YulIdentifier","src":"34907:6:20"},"nativeSrc":"34907:17:20","nodeType":"YulFunctionCall","src":"34907:17:20"},"variableNames":[{"name":"u","nativeSrc":"34902:1:20","nodeType":"YulIdentifier","src":"34902:1:20"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":7496,"isOffset":false,"isSlot":false,"src":"34921:1:20","valueSize":1},{"declaration":7499,"isOffset":false,"isSlot":false,"src":"34902:1:20","valueSize":1}],"flags":["memory-safe"],"id":7501,"nodeType":"InlineAssembly","src":"34863:71:20"}]},"documentation":{"id":7494,"nodeType":"StructuredDocumentation","src":"34700:90:20","text":" @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump."},"id":7503,"implemented":true,"kind":"function","modifiers":[],"name":"toUint","nameLocation":"34804:6:20","nodeType":"FunctionDefinition","parameters":{"id":7497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7496,"mutability":"mutable","name":"b","nameLocation":"34816:1:20","nodeType":"VariableDeclaration","scope":7503,"src":"34811:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7495,"name":"bool","nodeType":"ElementaryTypeName","src":"34811:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"34810:8:20"},"returnParameters":{"id":7500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7499,"mutability":"mutable","name":"u","nameLocation":"34850:1:20","nodeType":"VariableDeclaration","scope":7503,"src":"34842:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7498,"name":"uint256","nodeType":"ElementaryTypeName","src":"34842:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34841:11:20"},"scope":7504,"src":"34795:145:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":7505,"src":"769:34173:20","usedErrors":[5749,5754,5761,5766],"usedEvents":[]}],"src":"192:34751:20"}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"id":21,"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SafeCast":[7504],"SignedMath":[7648]},"id":7649,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7506,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:21"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":7508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7649,"sourceUnit":7505,"src":"135:40:21","symbolAliases":[{"foreign":{"id":7507,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"143:8:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":7509,"nodeType":"StructuredDocumentation","src":"177:80:21","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":7648,"linearizedBaseContracts":[7648],"name":"SignedMath","nameLocation":"266:10:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":7538,"nodeType":"Block","src":"746:215:21","statements":[{"id":7537,"nodeType":"UncheckedBlock","src":"756:199:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7521,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"894:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7522,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7514,"src":"900:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":7523,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"904:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"900:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7525,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"899:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"arguments":[{"id":7530,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7512,"src":"932:9:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7528,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"916:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":7529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"925:6:21","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":7503,"src":"916:15:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":7531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"909:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":7526,"name":"int256","nodeType":"ElementaryTypeName","src":"909:6:21","typeDescriptions":{}}},"id":7532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"909:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"899:44:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7534,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"898:46:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"894:50:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":7520,"id":7536,"nodeType":"Return","src":"887:57:21"}]}]},"documentation":{"id":7510,"nodeType":"StructuredDocumentation","src":"283:374:21","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":7539,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"671:7:21","nodeType":"FunctionDefinition","parameters":{"id":7517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7512,"mutability":"mutable","name":"condition","nameLocation":"684:9:21","nodeType":"VariableDeclaration","scope":7539,"src":"679:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7511,"name":"bool","nodeType":"ElementaryTypeName","src":"679:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7514,"mutability":"mutable","name":"a","nameLocation":"702:1:21","nodeType":"VariableDeclaration","scope":7539,"src":"695:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7513,"name":"int256","nodeType":"ElementaryTypeName","src":"695:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":7516,"mutability":"mutable","name":"b","nameLocation":"712:1:21","nodeType":"VariableDeclaration","scope":7539,"src":"705:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7515,"name":"int256","nodeType":"ElementaryTypeName","src":"705:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"678:36:21"},"returnParameters":{"id":7520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7539,"src":"738:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7518,"name":"int256","nodeType":"ElementaryTypeName","src":"738:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"737:8:21"},"scope":7648,"src":"662:299:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7557,"nodeType":"Block","src":"1102:44:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7550,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7542,"src":"1127:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":7551,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7544,"src":"1131:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1127:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":7553,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7542,"src":"1134:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":7554,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7544,"src":"1137:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7549,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7539,"src":"1119:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":7555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1119:20:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":7548,"id":7556,"nodeType":"Return","src":"1112:27:21"}]},"documentation":{"id":7540,"nodeType":"StructuredDocumentation","src":"967:66:21","text":" @dev Returns the largest of two signed numbers."},"id":7558,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1047:3:21","nodeType":"FunctionDefinition","parameters":{"id":7545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7542,"mutability":"mutable","name":"a","nameLocation":"1058:1:21","nodeType":"VariableDeclaration","scope":7558,"src":"1051:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7541,"name":"int256","nodeType":"ElementaryTypeName","src":"1051:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":7544,"mutability":"mutable","name":"b","nameLocation":"1068:1:21","nodeType":"VariableDeclaration","scope":7558,"src":"1061:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7543,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1050:20:21"},"returnParameters":{"id":7548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7558,"src":"1094:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7546,"name":"int256","nodeType":"ElementaryTypeName","src":"1094:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1093:8:21"},"scope":7648,"src":"1038:108:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7576,"nodeType":"Block","src":"1288:44:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7569,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7561,"src":"1313:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7570,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7563,"src":"1317:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1313:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":7572,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7561,"src":"1320:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":7573,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7563,"src":"1323:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7568,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7539,"src":"1305:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":7574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1305:20:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":7567,"id":7575,"nodeType":"Return","src":"1298:27:21"}]},"documentation":{"id":7559,"nodeType":"StructuredDocumentation","src":"1152:67:21","text":" @dev Returns the smallest of two signed numbers."},"id":7577,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"1233:3:21","nodeType":"FunctionDefinition","parameters":{"id":7564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7561,"mutability":"mutable","name":"a","nameLocation":"1244:1:21","nodeType":"VariableDeclaration","scope":7577,"src":"1237:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7560,"name":"int256","nodeType":"ElementaryTypeName","src":"1237:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":7563,"mutability":"mutable","name":"b","nameLocation":"1254:1:21","nodeType":"VariableDeclaration","scope":7577,"src":"1247:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7562,"name":"int256","nodeType":"ElementaryTypeName","src":"1247:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1236:20:21"},"returnParameters":{"id":7567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7577,"src":"1280:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7565,"name":"int256","nodeType":"ElementaryTypeName","src":"1280:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1279:8:21"},"scope":7648,"src":"1224:108:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7620,"nodeType":"Block","src":"1537:162:21","statements":[{"assignments":[7588],"declarations":[{"constant":false,"id":7588,"mutability":"mutable","name":"x","nameLocation":"1606:1:21","nodeType":"VariableDeclaration","scope":7620,"src":"1599:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7587,"name":"int256","nodeType":"ElementaryTypeName","src":"1599:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":7601,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7589,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7580,"src":"1611:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":7590,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7582,"src":"1615:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1611:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7592,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1610:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7593,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7580,"src":"1622:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":7594,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7582,"src":"1626:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1622:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7596,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1621:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":7597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1621:12:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7599,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1620:14:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1610:24:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"1599:35:21"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7602,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7588,"src":"1651:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":7607,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7588,"src":"1671:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1663:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:21","typeDescriptions":{}}},"id":7608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1663:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":7609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:3:21","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1663:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1656:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":7603,"name":"int256","nodeType":"ElementaryTypeName","src":"1656:6:21","typeDescriptions":{}}},"id":7611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7612,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7580,"src":"1685:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":7613,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7582,"src":"1689:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1685:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1684:7:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1656:35:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1655:37:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1651:41:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":7586,"id":7619,"nodeType":"Return","src":"1644:48:21"}]},"documentation":{"id":7578,"nodeType":"StructuredDocumentation","src":"1338:126:21","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":7621,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"1478:7:21","nodeType":"FunctionDefinition","parameters":{"id":7583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7580,"mutability":"mutable","name":"a","nameLocation":"1493:1:21","nodeType":"VariableDeclaration","scope":7621,"src":"1486:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7579,"name":"int256","nodeType":"ElementaryTypeName","src":"1486:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":7582,"mutability":"mutable","name":"b","nameLocation":"1503:1:21","nodeType":"VariableDeclaration","scope":7621,"src":"1496:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7581,"name":"int256","nodeType":"ElementaryTypeName","src":"1496:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1485:20:21"},"returnParameters":{"id":7586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7621,"src":"1529:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7584,"name":"int256","nodeType":"ElementaryTypeName","src":"1529:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1528:8:21"},"scope":7648,"src":"1469:230:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7646,"nodeType":"Block","src":"1843:767:21","statements":[{"id":7645,"nodeType":"UncheckedBlock","src":"1853:751:21","statements":[{"assignments":[7630],"declarations":[{"constant":false,"id":7630,"mutability":"mutable","name":"mask","nameLocation":"2424:4:21","nodeType":"VariableDeclaration","scope":7645,"src":"2417:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7629,"name":"int256","nodeType":"ElementaryTypeName","src":"2417:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":7634,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7631,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7624,"src":"2431:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":7632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2436:3:21","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2431:8:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"2417:22:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7637,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7624,"src":"2576:1:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":7638,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7630,"src":"2580:4:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2576:8:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":7640,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2575:10:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":7641,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7630,"src":"2588:4:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2575:17:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2567:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7635,"name":"uint256","nodeType":"ElementaryTypeName","src":"2567:7:21","typeDescriptions":{}}},"id":7643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7628,"id":7644,"nodeType":"Return","src":"2560:33:21"}]}]},"documentation":{"id":7622,"nodeType":"StructuredDocumentation","src":"1705:78:21","text":" @dev Returns the absolute unsigned value of a signed value."},"id":7647,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1797:3:21","nodeType":"FunctionDefinition","parameters":{"id":7625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7624,"mutability":"mutable","name":"n","nameLocation":"1808:1:21","nodeType":"VariableDeclaration","scope":7647,"src":"1801:8:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7623,"name":"int256","nodeType":"ElementaryTypeName","src":"1801:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1800:10:21"},"returnParameters":{"id":7628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7647,"src":"1834:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7626,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1833:9:21"},"scope":7648,"src":"1788:822:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":7649,"src":"258:2354:21","usedErrors":[],"usedEvents":[]}],"src":"109:2504:21"}},"@openzeppelin/contracts/utils/structs/Checkpoints.sol":{"id":22,"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/Checkpoints.sol","exportedSymbols":{"Checkpoints":[9229],"Math":[5739]},"id":9230,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7650,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"201:24:22"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"../math/Math.sol","id":7652,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9230,"sourceUnit":5740,"src":"227:38:22","symbolAliases":[{"foreign":{"id":7651,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"235:4:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Checkpoints","contractDependencies":[],"contractKind":"library","documentation":{"id":7653,"nodeType":"StructuredDocumentation","src":"267:400:22","text":" @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\n time, and later looking up past values by block number. See {Votes} as an example.\n To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\n checkpoint for the current transaction block using the {push} function."},"fullyImplemented":true,"id":9229,"linearizedBaseContracts":[9229],"name":"Checkpoints","nameLocation":"676:11:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7654,"nodeType":"StructuredDocumentation","src":"694:82:22","text":" @dev A value was attempted to be inserted on a past checkpoint."},"errorSelector":"2520601d","id":7656,"name":"CheckpointUnorderedInsertion","nameLocation":"787:28:22","nodeType":"ErrorDefinition","parameters":{"id":7655,"nodeType":"ParameterList","parameters":[],"src":"815:2:22"},"src":"781:37:22"},{"canonicalName":"Checkpoints.Trace224","id":7661,"members":[{"constant":false,"id":7660,"mutability":"mutable","name":"_checkpoints","nameLocation":"866:12:22","nodeType":"VariableDeclaration","scope":7661,"src":"850:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"},"typeName":{"baseType":{"id":7658,"nodeType":"UserDefinedTypeName","pathNode":{"id":7657,"name":"Checkpoint224","nameLocations":["850:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"850:13:22"},"referencedDeclaration":7666,"src":"850:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"id":7659,"nodeType":"ArrayTypeName","src":"850:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"}},"visibility":"internal"}],"name":"Trace224","nameLocation":"831:8:22","nodeType":"StructDefinition","scope":9229,"src":"824:61:22","visibility":"public"},{"canonicalName":"Checkpoints.Checkpoint224","id":7666,"members":[{"constant":false,"id":7663,"mutability":"mutable","name":"_key","nameLocation":"929:4:22","nodeType":"VariableDeclaration","scope":7666,"src":"922:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7662,"name":"uint32","nodeType":"ElementaryTypeName","src":"922:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7665,"mutability":"mutable","name":"_value","nameLocation":"951:6:22","nodeType":"VariableDeclaration","scope":7666,"src":"943:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7664,"name":"uint224","nodeType":"ElementaryTypeName","src":"943:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"name":"Checkpoint224","nameLocation":"898:13:22","nodeType":"StructDefinition","scope":9229,"src":"891:73:22","visibility":"public"},{"body":{"id":7688,"nodeType":"Block","src":"1425:62:22","statements":[{"expression":{"arguments":[{"expression":{"id":7682,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7670,"src":"1450:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7683,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1455:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"1450:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"id":7684,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7672,"src":"1469:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7674,"src":"1474:5:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint224","typeString":"uint224"}],"id":7681,"name":"_insert","nodeType":"Identifier","overloadedDeclarations":[8061,8585,9109],"referencedDeclaration":8061,"src":"1442:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint32_$_t_uint224_$returns$_t_uint224_$_t_uint224_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint32,uint224) returns (uint224,uint224)"}},"id":7686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1442:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint224_$_t_uint224_$","typeString":"tuple(uint224,uint224)"}},"functionReturnParameters":7680,"id":7687,"nodeType":"Return","src":"1435:45:22"}]},"documentation":{"id":7667,"nodeType":"StructuredDocumentation","src":"970:302:22","text":" @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n Returns previous value and new value.\n IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\n library."},"id":7689,"implemented":true,"kind":"function","modifiers":[],"name":"push","nameLocation":"1286:4:22","nodeType":"FunctionDefinition","parameters":{"id":7675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7670,"mutability":"mutable","name":"self","nameLocation":"1317:4:22","nodeType":"VariableDeclaration","scope":7689,"src":"1300:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7669,"nodeType":"UserDefinedTypeName","pathNode":{"id":7668,"name":"Trace224","nameLocations":["1300:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"1300:8:22"},"referencedDeclaration":7661,"src":"1300:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"},{"constant":false,"id":7672,"mutability":"mutable","name":"key","nameLocation":"1338:3:22","nodeType":"VariableDeclaration","scope":7689,"src":"1331:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7671,"name":"uint32","nodeType":"ElementaryTypeName","src":"1331:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7674,"mutability":"mutable","name":"value","nameLocation":"1359:5:22","nodeType":"VariableDeclaration","scope":7689,"src":"1351:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7673,"name":"uint224","nodeType":"ElementaryTypeName","src":"1351:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"1290:80:22"},"returnParameters":{"id":7680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7677,"mutability":"mutable","name":"oldValue","nameLocation":"1397:8:22","nodeType":"VariableDeclaration","scope":7689,"src":"1389:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7676,"name":"uint224","nodeType":"ElementaryTypeName","src":"1389:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"},{"constant":false,"id":7679,"mutability":"mutable","name":"newValue","nameLocation":"1415:8:22","nodeType":"VariableDeclaration","scope":7689,"src":"1407:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7678,"name":"uint224","nodeType":"ElementaryTypeName","src":"1407:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"1388:36:22"},"scope":9229,"src":"1277:210:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7728,"nodeType":"Block","src":"1740:207:22","statements":[{"assignments":[7701],"declarations":[{"constant":false,"id":7701,"mutability":"mutable","name":"len","nameLocation":"1758:3:22","nodeType":"VariableDeclaration","scope":7728,"src":"1750:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7700,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7705,"initialValue":{"expression":{"expression":{"id":7702,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7693,"src":"1764:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1769:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"1764:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1782:6:22","memberName":"length","nodeType":"MemberAccess","src":"1764:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1750:38:22"},{"assignments":[7707],"declarations":[{"constant":false,"id":7707,"mutability":"mutable","name":"pos","nameLocation":"1806:3:22","nodeType":"VariableDeclaration","scope":7728,"src":"1798:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7706,"name":"uint256","nodeType":"ElementaryTypeName","src":"1798:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7715,"initialValue":{"arguments":[{"expression":{"id":7709,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7693,"src":"1831:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1836:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"1831:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"id":7711,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7695,"src":"1850:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":7712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1855:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":7713,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7701,"src":"1858:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7708,"name":"_lowerBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8165,8689,9213],"referencedDeclaration":8165,"src":"1812:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint32_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint32,uint256,uint256) view returns (uint256)"}},"id":7714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1798:64:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7716,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7707,"src":"1879:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7717,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7701,"src":"1886:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1879:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":7721,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7693,"src":"1910:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1915:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"1910:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"id":7723,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7707,"src":"1929:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7720,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"1896:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1896:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1934:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"1896:44:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":7726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1879:61:22","trueExpression":{"hexValue":"30","id":7719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1892:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":7699,"id":7727,"nodeType":"Return","src":"1872:68:22"}]},"documentation":{"id":7690,"nodeType":"StructuredDocumentation","src":"1493:154:22","text":" @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n there is none."},"id":7729,"implemented":true,"kind":"function","modifiers":[],"name":"lowerLookup","nameLocation":"1661:11:22","nodeType":"FunctionDefinition","parameters":{"id":7696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7693,"mutability":"mutable","name":"self","nameLocation":"1690:4:22","nodeType":"VariableDeclaration","scope":7729,"src":"1673:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7692,"nodeType":"UserDefinedTypeName","pathNode":{"id":7691,"name":"Trace224","nameLocations":["1673:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"1673:8:22"},"referencedDeclaration":7661,"src":"1673:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"},{"constant":false,"id":7695,"mutability":"mutable","name":"key","nameLocation":"1703:3:22","nodeType":"VariableDeclaration","scope":7729,"src":"1696:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7694,"name":"uint32","nodeType":"ElementaryTypeName","src":"1696:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1672:35:22"},"returnParameters":{"id":7699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7729,"src":"1731:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7697,"name":"uint224","nodeType":"ElementaryTypeName","src":"1731:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"1730:9:22"},"scope":9229,"src":"1652:295:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7770,"nodeType":"Block","src":"2202:209:22","statements":[{"assignments":[7741],"declarations":[{"constant":false,"id":7741,"mutability":"mutable","name":"len","nameLocation":"2220:3:22","nodeType":"VariableDeclaration","scope":7770,"src":"2212:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7740,"name":"uint256","nodeType":"ElementaryTypeName","src":"2212:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7745,"initialValue":{"expression":{"expression":{"id":7742,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7733,"src":"2226:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7743,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2231:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"2226:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2244:6:22","memberName":"length","nodeType":"MemberAccess","src":"2226:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2212:38:22"},{"assignments":[7747],"declarations":[{"constant":false,"id":7747,"mutability":"mutable","name":"pos","nameLocation":"2268:3:22","nodeType":"VariableDeclaration","scope":7770,"src":"2260:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7746,"name":"uint256","nodeType":"ElementaryTypeName","src":"2260:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7755,"initialValue":{"arguments":[{"expression":{"id":7749,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7733,"src":"2293:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7750,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2298:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"2293:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"id":7751,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7735,"src":"2312:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":7752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":7753,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7741,"src":"2320:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7748,"name":"_upperBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8113,8637,9161],"referencedDeclaration":8113,"src":"2274:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint32_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint32,uint256,uint256) view returns (uint256)"}},"id":7754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2260:64:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7756,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7747,"src":"2341:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2348:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2341:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":7761,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7733,"src":"2370:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2375:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"2370:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7763,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7747,"src":"2389:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2395:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2389:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7760,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"2356:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7767,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2398:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"2356:48:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":7768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2341:63:22","trueExpression":{"hexValue":"30","id":7759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2352:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":7739,"id":7769,"nodeType":"Return","src":"2334:70:22"}]},"documentation":{"id":7730,"nodeType":"StructuredDocumentation","src":"1953:156:22","text":" @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n if there is none."},"id":7771,"implemented":true,"kind":"function","modifiers":[],"name":"upperLookup","nameLocation":"2123:11:22","nodeType":"FunctionDefinition","parameters":{"id":7736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7733,"mutability":"mutable","name":"self","nameLocation":"2152:4:22","nodeType":"VariableDeclaration","scope":7771,"src":"2135:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7732,"nodeType":"UserDefinedTypeName","pathNode":{"id":7731,"name":"Trace224","nameLocations":["2135:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"2135:8:22"},"referencedDeclaration":7661,"src":"2135:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"},{"constant":false,"id":7735,"mutability":"mutable","name":"key","nameLocation":"2165:3:22","nodeType":"VariableDeclaration","scope":7771,"src":"2158:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7734,"name":"uint32","nodeType":"ElementaryTypeName","src":"2158:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2134:35:22"},"returnParameters":{"id":7739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7771,"src":"2193:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7737,"name":"uint224","nodeType":"ElementaryTypeName","src":"2193:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"2192:9:22"},"scope":9229,"src":"2114:297:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7855,"nodeType":"Block","src":"2810:512:22","statements":[{"assignments":[7783],"declarations":[{"constant":false,"id":7783,"mutability":"mutable","name":"len","nameLocation":"2828:3:22","nodeType":"VariableDeclaration","scope":7855,"src":"2820:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7782,"name":"uint256","nodeType":"ElementaryTypeName","src":"2820:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7787,"initialValue":{"expression":{"expression":{"id":7784,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7775,"src":"2834:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2839:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"2834:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:6:22","memberName":"length","nodeType":"MemberAccess","src":"2834:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2820:38:22"},{"assignments":[7789],"declarations":[{"constant":false,"id":7789,"mutability":"mutable","name":"low","nameLocation":"2877:3:22","nodeType":"VariableDeclaration","scope":7855,"src":"2869:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7788,"name":"uint256","nodeType":"ElementaryTypeName","src":"2869:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7791,"initialValue":{"hexValue":"30","id":7790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2883:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2869:15:22"},{"assignments":[7793],"declarations":[{"constant":false,"id":7793,"mutability":"mutable","name":"high","nameLocation":"2902:4:22","nodeType":"VariableDeclaration","scope":7855,"src":"2894:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7792,"name":"uint256","nodeType":"ElementaryTypeName","src":"2894:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7795,"initialValue":{"id":7794,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7783,"src":"2909:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2894:18:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7796,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7783,"src":"2927:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"35","id":7797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2933:1:22","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2927:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7830,"nodeType":"IfStatement","src":"2923:234:22","trueBody":{"id":7829,"nodeType":"Block","src":"2936:221:22","statements":[{"assignments":[7800],"declarations":[{"constant":false,"id":7800,"mutability":"mutable","name":"mid","nameLocation":"2958:3:22","nodeType":"VariableDeclaration","scope":7829,"src":"2950:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7799,"name":"uint256","nodeType":"ElementaryTypeName","src":"2950:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7807,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7801,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7783,"src":"2964:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":7804,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7783,"src":"2980:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7802,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"2970:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":7803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2975:4:22","memberName":"sqrt","nodeType":"MemberAccess","referencedDeclaration":5283,"src":"2970:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":7805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2970:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2964:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2950:34:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":7815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7808,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7777,"src":"3002:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"expression":{"id":7810,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7775,"src":"3022:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3027:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"3022:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"id":7812,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7800,"src":"3041:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7809,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"3008:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3008:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7814,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3046:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":7663,"src":"3008:42:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3002:48:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7827,"nodeType":"Block","src":"3101:46:22","statements":[{"expression":{"id":7825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7821,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7789,"src":"3119:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7822,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7800,"src":"3125:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":7823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3131:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3125:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3119:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7826,"nodeType":"ExpressionStatement","src":"3119:13:22"}]},"id":7828,"nodeType":"IfStatement","src":"2998:149:22","trueBody":{"id":7820,"nodeType":"Block","src":"3052:43:22","statements":[{"expression":{"id":7818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7816,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7793,"src":"3070:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7817,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7800,"src":"3077:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3070:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7819,"nodeType":"ExpressionStatement","src":"3070:10:22"}]}}]}},{"assignments":[7832],"declarations":[{"constant":false,"id":7832,"mutability":"mutable","name":"pos","nameLocation":"3175:3:22","nodeType":"VariableDeclaration","scope":7855,"src":"3167:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7831,"name":"uint256","nodeType":"ElementaryTypeName","src":"3167:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7840,"initialValue":{"arguments":[{"expression":{"id":7834,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7775,"src":"3200:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7835,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3205:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"3200:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"id":7836,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7777,"src":"3219:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7837,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7789,"src":"3224:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7838,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7793,"src":"3229:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7833,"name":"_upperBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8113,8637,9161],"referencedDeclaration":8113,"src":"3181:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint32_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint32,uint256,uint256) view returns (uint256)"}},"id":7839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3181:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3167:67:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7841,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7832,"src":"3252:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3259:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3252:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":7846,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7775,"src":"3281:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3286:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"3281:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7848,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7832,"src":"3300:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3306:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3300:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7845,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"3267:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3267:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3309:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"3267:48:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":7853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3252:63:22","trueExpression":{"hexValue":"30","id":7844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3263:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":7781,"id":7854,"nodeType":"Return","src":"3245:70:22"}]},"documentation":{"id":7772,"nodeType":"StructuredDocumentation","src":"2417:294:22","text":" @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n if there is none.\n NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n keys)."},"id":7856,"implemented":true,"kind":"function","modifiers":[],"name":"upperLookupRecent","nameLocation":"2725:17:22","nodeType":"FunctionDefinition","parameters":{"id":7778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7775,"mutability":"mutable","name":"self","nameLocation":"2760:4:22","nodeType":"VariableDeclaration","scope":7856,"src":"2743:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7774,"nodeType":"UserDefinedTypeName","pathNode":{"id":7773,"name":"Trace224","nameLocations":["2743:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"2743:8:22"},"referencedDeclaration":7661,"src":"2743:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"},{"constant":false,"id":7777,"mutability":"mutable","name":"key","nameLocation":"2773:3:22","nodeType":"VariableDeclaration","scope":7856,"src":"2766:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7776,"name":"uint32","nodeType":"ElementaryTypeName","src":"2766:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2742:35:22"},"returnParameters":{"id":7781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7856,"src":"2801:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7779,"name":"uint224","nodeType":"ElementaryTypeName","src":"2801:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"2800:9:22"},"scope":9229,"src":"2716:606:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7885,"nodeType":"Block","src":"3513:135:22","statements":[{"assignments":[7866],"declarations":[{"constant":false,"id":7866,"mutability":"mutable","name":"pos","nameLocation":"3531:3:22","nodeType":"VariableDeclaration","scope":7885,"src":"3523:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7865,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7870,"initialValue":{"expression":{"expression":{"id":7867,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7860,"src":"3537:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3542:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"3537:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3555:6:22","memberName":"length","nodeType":"MemberAccess","src":"3537:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3523:38:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7871,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7866,"src":"3578:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3585:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3578:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":7876,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7860,"src":"3607:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7877,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3612:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"3607:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7878,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7866,"src":"3626:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3632:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3626:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7875,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"3593:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7882,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3635:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"3593:48:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":7883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3578:63:22","trueExpression":{"hexValue":"30","id":7874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3589:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":7864,"id":7884,"nodeType":"Return","src":"3571:70:22"}]},"documentation":{"id":7857,"nodeType":"StructuredDocumentation","src":"3328:109:22","text":" @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints."},"id":7886,"implemented":true,"kind":"function","modifiers":[],"name":"latest","nameLocation":"3451:6:22","nodeType":"FunctionDefinition","parameters":{"id":7861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7860,"mutability":"mutable","name":"self","nameLocation":"3475:4:22","nodeType":"VariableDeclaration","scope":7886,"src":"3458:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7859,"nodeType":"UserDefinedTypeName","pathNode":{"id":7858,"name":"Trace224","nameLocations":["3458:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"3458:8:22"},"referencedDeclaration":7661,"src":"3458:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"}],"src":"3457:23:22"},"returnParameters":{"id":7864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7886,"src":"3504:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7862,"name":"uint224","nodeType":"ElementaryTypeName","src":"3504:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3503:9:22"},"scope":9229,"src":"3442:206:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7934,"nodeType":"Block","src":"3941:275:22","statements":[{"assignments":[7900],"declarations":[{"constant":false,"id":7900,"mutability":"mutable","name":"pos","nameLocation":"3959:3:22","nodeType":"VariableDeclaration","scope":7934,"src":"3951:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7899,"name":"uint256","nodeType":"ElementaryTypeName","src":"3951:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7904,"initialValue":{"expression":{"expression":{"id":7901,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7890,"src":"3965:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3970:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"3965:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3983:6:22","memberName":"length","nodeType":"MemberAccess","src":"3965:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3951:38:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7905,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7900,"src":"4003:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4010:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4003:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7932,"nodeType":"Block","src":"4064:146:22","statements":[{"assignments":[7916],"declarations":[{"constant":false,"id":7916,"mutability":"mutable","name":"ckpt","nameLocation":"4100:4:22","nodeType":"VariableDeclaration","scope":7932,"src":"4078:26:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"},"typeName":{"id":7915,"nodeType":"UserDefinedTypeName","pathNode":{"id":7914,"name":"Checkpoint224","nameLocations":["4078:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"4078:13:22"},"referencedDeclaration":7666,"src":"4078:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"visibility":"internal"}],"id":7924,"initialValue":{"arguments":[{"expression":{"id":7918,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7890,"src":"4121:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7919,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4126:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"4121:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7920,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7900,"src":"4140:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4146:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4140:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7917,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"4107:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4107:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4078:70:22"},{"expression":{"components":[{"hexValue":"74727565","id":7925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4170:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"id":7926,"name":"ckpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7916,"src":"4176:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4181:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":7663,"src":"4176:9:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"id":7928,"name":"ckpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7916,"src":"4187:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":7929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4192:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"4187:11:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"id":7930,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4169:30:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$_t_uint224_$","typeString":"tuple(bool,uint32,uint224)"}},"functionReturnParameters":7898,"id":7931,"nodeType":"Return","src":"4162:37:22"}]},"id":7933,"nodeType":"IfStatement","src":"3999:211:22","trueBody":{"id":7913,"nodeType":"Block","src":"4013:45:22","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":7908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4035:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":7909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4042:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":7910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4045:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":7911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4034:13:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0,int_const 0)"}},"functionReturnParameters":7898,"id":7912,"nodeType":"Return","src":"4027:20:22"}]}}]},"documentation":{"id":7887,"nodeType":"StructuredDocumentation","src":"3654:168:22","text":" @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n in the most recent checkpoint."},"id":7935,"implemented":true,"kind":"function","modifiers":[],"name":"latestCheckpoint","nameLocation":"3836:16:22","nodeType":"FunctionDefinition","parameters":{"id":7891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7890,"mutability":"mutable","name":"self","nameLocation":"3870:4:22","nodeType":"VariableDeclaration","scope":7935,"src":"3853:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7889,"nodeType":"UserDefinedTypeName","pathNode":{"id":7888,"name":"Trace224","nameLocations":["3853:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"3853:8:22"},"referencedDeclaration":7661,"src":"3853:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"}],"src":"3852:23:22"},"returnParameters":{"id":7898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7893,"mutability":"mutable","name":"exists","nameLocation":"3904:6:22","nodeType":"VariableDeclaration","scope":7935,"src":"3899:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7892,"name":"bool","nodeType":"ElementaryTypeName","src":"3899:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7895,"mutability":"mutable","name":"_key","nameLocation":"3919:4:22","nodeType":"VariableDeclaration","scope":7935,"src":"3912:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7894,"name":"uint32","nodeType":"ElementaryTypeName","src":"3912:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7897,"mutability":"mutable","name":"_value","nameLocation":"3933:6:22","nodeType":"VariableDeclaration","scope":7935,"src":"3925:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7896,"name":"uint224","nodeType":"ElementaryTypeName","src":"3925:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3898:42:22"},"scope":9229,"src":"3827:389:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7948,"nodeType":"Block","src":"4356:48:22","statements":[{"expression":{"expression":{"expression":{"id":7944,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"4373:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7945,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4378:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"4373:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4391:6:22","memberName":"length","nodeType":"MemberAccess","src":"4373:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7943,"id":7947,"nodeType":"Return","src":"4366:31:22"}]},"documentation":{"id":7936,"nodeType":"StructuredDocumentation","src":"4222:58:22","text":" @dev Returns the number of checkpoints."},"id":7949,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"4294:6:22","nodeType":"FunctionDefinition","parameters":{"id":7940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7939,"mutability":"mutable","name":"self","nameLocation":"4318:4:22","nodeType":"VariableDeclaration","scope":7949,"src":"4301:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7938,"nodeType":"UserDefinedTypeName","pathNode":{"id":7937,"name":"Trace224","nameLocations":["4301:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"4301:8:22"},"referencedDeclaration":7661,"src":"4301:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"}],"src":"4300:23:22"},"returnParameters":{"id":7943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7949,"src":"4347:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7941,"name":"uint256","nodeType":"ElementaryTypeName","src":"4347:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4346:9:22"},"scope":9229,"src":"4285:119:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7966,"nodeType":"Block","src":"4568:46:22","statements":[{"expression":{"baseExpression":{"expression":{"id":7961,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7953,"src":"4585:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224 storage pointer"}},"id":7962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4590:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":7660,"src":"4585:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage ref"}},"id":7964,"indexExpression":{"id":7963,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7955,"src":"4603:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4585:22:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage","typeString":"struct Checkpoints.Checkpoint224 storage ref"}},"functionReturnParameters":7960,"id":7965,"nodeType":"Return","src":"4578:29:22"}]},"documentation":{"id":7950,"nodeType":"StructuredDocumentation","src":"4410:61:22","text":" @dev Returns checkpoint at given position."},"id":7967,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"4485:2:22","nodeType":"FunctionDefinition","parameters":{"id":7956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7953,"mutability":"mutable","name":"self","nameLocation":"4505:4:22","nodeType":"VariableDeclaration","scope":7967,"src":"4488:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"},"typeName":{"id":7952,"nodeType":"UserDefinedTypeName","pathNode":{"id":7951,"name":"Trace224","nameLocations":["4488:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"4488:8:22"},"referencedDeclaration":7661,"src":"4488:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace224_$7661_storage_ptr","typeString":"struct Checkpoints.Trace224"}},"visibility":"internal"},{"constant":false,"id":7955,"mutability":"mutable","name":"pos","nameLocation":"4518:3:22","nodeType":"VariableDeclaration","scope":7967,"src":"4511:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7954,"name":"uint32","nodeType":"ElementaryTypeName","src":"4511:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4487:35:22"},"returnParameters":{"id":7960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7967,"src":"4546:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_memory_ptr","typeString":"struct Checkpoints.Checkpoint224"},"typeName":{"id":7958,"nodeType":"UserDefinedTypeName","pathNode":{"id":7957,"name":"Checkpoint224","nameLocations":["4546:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"4546:13:22"},"referencedDeclaration":7666,"src":"4546:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"visibility":"internal"}],"src":"4545:22:22"},"scope":9229,"src":"4476:138:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8060,"nodeType":"Block","src":"4947:765:22","statements":[{"assignments":[7984],"declarations":[{"constant":false,"id":7984,"mutability":"mutable","name":"pos","nameLocation":"4965:3:22","nodeType":"VariableDeclaration","scope":8060,"src":"4957:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7983,"name":"uint256","nodeType":"ElementaryTypeName","src":"4957:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7987,"initialValue":{"expression":{"id":7985,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7972,"src":"4971:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"}},"id":7986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4976:6:22","memberName":"length","nodeType":"MemberAccess","src":"4971:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4957:25:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7988,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7984,"src":"4997:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4997:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8058,"nodeType":"Block","src":"5598:108:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":8049,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7974,"src":"5643:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":8050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7976,"src":"5656:5:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint224","typeString":"uint224"}],"id":8048,"name":"Checkpoint224","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7666,"src":"5622:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"type(struct Checkpoints.Checkpoint224 storage pointer)"}},"id":8051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5637:4:22","5648:6:22"],"names":["_key","_value"],"nodeType":"FunctionCall","src":"5622:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_memory_ptr","typeString":"struct Checkpoints.Checkpoint224 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint224_$7666_memory_ptr","typeString":"struct Checkpoints.Checkpoint224 memory"}],"expression":{"id":8045,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7972,"src":"5612:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"}},"id":8047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5617:4:22","memberName":"push","nodeType":"MemberAccess","src":"5612:9:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint224_$7666_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,struct Checkpoints.Checkpoint224 storage ref)"}},"id":8052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5612:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8053,"nodeType":"ExpressionStatement","src":"5612:52:22"},{"expression":{"components":[{"hexValue":"30","id":8054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5686:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":8055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7976,"src":"5689:5:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"id":8056,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5685:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_uint224_$","typeString":"tuple(int_const 0,uint224)"}},"functionReturnParameters":7982,"id":8057,"nodeType":"Return","src":"5678:17:22"}]},"id":8059,"nodeType":"IfStatement","src":"4993:713:22","trueBody":{"id":8044,"nodeType":"Block","src":"5006:586:22","statements":[{"assignments":[7993],"declarations":[{"constant":false,"id":7993,"mutability":"mutable","name":"last","nameLocation":"5042:4:22","nodeType":"VariableDeclaration","scope":8044,"src":"5020:26:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"},"typeName":{"id":7992,"nodeType":"UserDefinedTypeName","pathNode":{"id":7991,"name":"Checkpoint224","nameLocations":["5020:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"5020:13:22"},"referencedDeclaration":7666,"src":"5020:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"visibility":"internal"}],"id":8000,"initialValue":{"arguments":[{"id":7995,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7972,"src":"5063:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7996,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7984,"src":"5069:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5075:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5069:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7994,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"5049:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":7999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5049:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"5020:57:22"},{"assignments":[8002],"declarations":[{"constant":false,"id":8002,"mutability":"mutable","name":"lastKey","nameLocation":"5098:7:22","nodeType":"VariableDeclaration","scope":8044,"src":"5091:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8001,"name":"uint32","nodeType":"ElementaryTypeName","src":"5091:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":8005,"initialValue":{"expression":{"id":8003,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"5108:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":8004,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5113:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":7663,"src":"5108:9:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"5091:26:22"},{"assignments":[8007],"declarations":[{"constant":false,"id":8007,"mutability":"mutable","name":"lastValue","nameLocation":"5139:9:22","nodeType":"VariableDeclaration","scope":8044,"src":"5131:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":8006,"name":"uint224","nodeType":"ElementaryTypeName","src":"5131:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"id":8010,"initialValue":{"expression":{"id":8008,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"5151:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":8009,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5156:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"5151:11:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"nodeType":"VariableDeclarationStatement","src":"5131:31:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":8013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8011,"name":"lastKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8002,"src":"5236:7:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":8012,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7974,"src":"5246:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5236:13:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8018,"nodeType":"IfStatement","src":"5232:89:22","trueBody":{"id":8017,"nodeType":"Block","src":"5251:70:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8014,"name":"CheckpointUnorderedInsertion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7656,"src":"5276:28:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8016,"nodeType":"RevertStatement","src":"5269:37:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":8021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8019,"name":"lastKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8002,"src":"5384:7:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":8020,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7974,"src":"5395:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5384:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8038,"nodeType":"Block","src":"5458:85:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":8033,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7974,"src":"5507:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":8034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7976,"src":"5520:5:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint224","typeString":"uint224"}],"id":8032,"name":"Checkpoint224","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7666,"src":"5486:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"type(struct Checkpoints.Checkpoint224 storage pointer)"}},"id":8035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5501:4:22","5512:6:22"],"names":["_key","_value"],"nodeType":"FunctionCall","src":"5486:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_memory_ptr","typeString":"struct Checkpoints.Checkpoint224 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint224_$7666_memory_ptr","typeString":"struct Checkpoints.Checkpoint224 memory"}],"expression":{"id":8029,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7972,"src":"5476:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"}},"id":8031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5481:4:22","memberName":"push","nodeType":"MemberAccess","src":"5476:9:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint224_$7666_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,struct Checkpoints.Checkpoint224 storage ref)"}},"id":8036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5476:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8037,"nodeType":"ExpressionStatement","src":"5476:52:22"}]},"id":8039,"nodeType":"IfStatement","src":"5380:163:22","trueBody":{"id":8028,"nodeType":"Block","src":"5400:52:22","statements":[{"expression":{"id":8026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8022,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"5418:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":8024,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5423:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":7665,"src":"5418:11:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8025,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7976,"src":"5432:5:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"5418:19:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":8027,"nodeType":"ExpressionStatement","src":"5418:19:22"}]}},{"expression":{"components":[{"id":8040,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8007,"src":"5564:9:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},{"id":8041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7976,"src":"5575:5:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"id":8042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5563:18:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint224_$_t_uint224_$","typeString":"tuple(uint224,uint224)"}},"functionReturnParameters":7982,"id":8043,"nodeType":"Return","src":"5556:25:22"}]}}]},"documentation":{"id":7968,"nodeType":"StructuredDocumentation","src":"4620:165:22","text":" @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n or by updating the last one."},"id":8061,"implemented":true,"kind":"function","modifiers":[],"name":"_insert","nameLocation":"4799:7:22","nodeType":"FunctionDefinition","parameters":{"id":7977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7972,"mutability":"mutable","name":"self","nameLocation":"4840:4:22","nodeType":"VariableDeclaration","scope":8061,"src":"4816:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"},"typeName":{"baseType":{"id":7970,"nodeType":"UserDefinedTypeName","pathNode":{"id":7969,"name":"Checkpoint224","nameLocations":["4816:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"4816:13:22"},"referencedDeclaration":7666,"src":"4816:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"id":7971,"nodeType":"ArrayTypeName","src":"4816:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"}},"visibility":"internal"},{"constant":false,"id":7974,"mutability":"mutable","name":"key","nameLocation":"4861:3:22","nodeType":"VariableDeclaration","scope":8061,"src":"4854:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7973,"name":"uint32","nodeType":"ElementaryTypeName","src":"4854:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7976,"mutability":"mutable","name":"value","nameLocation":"4882:5:22","nodeType":"VariableDeclaration","scope":8061,"src":"4874:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7975,"name":"uint224","nodeType":"ElementaryTypeName","src":"4874:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"4806:87:22"},"returnParameters":{"id":7982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7979,"mutability":"mutable","name":"oldValue","nameLocation":"4919:8:22","nodeType":"VariableDeclaration","scope":8061,"src":"4911:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7978,"name":"uint224","nodeType":"ElementaryTypeName","src":"4911:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"},{"constant":false,"id":7981,"mutability":"mutable","name":"newValue","nameLocation":"4937:8:22","nodeType":"VariableDeclaration","scope":8061,"src":"4929:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7980,"name":"uint224","nodeType":"ElementaryTypeName","src":"4929:7:22","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"4910:36:22"},"scope":9229,"src":"4790:922:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":8112,"nodeType":"Block","src":"6228:267:22","statements":[{"body":{"id":8108,"nodeType":"Block","src":"6257:211:22","statements":[{"assignments":[8081],"declarations":[{"constant":false,"id":8081,"mutability":"mutable","name":"mid","nameLocation":"6279:3:22","nodeType":"VariableDeclaration","scope":8108,"src":"6271:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8080,"name":"uint256","nodeType":"ElementaryTypeName","src":"6271:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8087,"initialValue":{"arguments":[{"id":8084,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8070,"src":"6298:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8085,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"6303:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8082,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"6285:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":8083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6290:7:22","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"6285:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":8086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6285:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6271:37:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":8094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":8089,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8066,"src":"6340:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"}},{"id":8090,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8081,"src":"6346:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8088,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"6326:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":8091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6326:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":8092,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6351:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":7663,"src":"6326:29:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":8093,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"6358:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6326:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8106,"nodeType":"Block","src":"6412:46:22","statements":[{"expression":{"id":8104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8100,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8070,"src":"6430:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8101,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8081,"src":"6436:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":8102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6442:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6436:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6430:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8105,"nodeType":"ExpressionStatement","src":"6430:13:22"}]},"id":8107,"nodeType":"IfStatement","src":"6322:136:22","trueBody":{"id":8099,"nodeType":"Block","src":"6363:43:22","statements":[{"expression":{"id":8097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8095,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"6381:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8096,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8081,"src":"6388:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6381:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8098,"nodeType":"ExpressionStatement","src":"6381:10:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8077,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8070,"src":"6245:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8078,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"6251:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6245:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8109,"nodeType":"WhileStatement","src":"6238:230:22"},{"expression":{"id":8110,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"6484:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8076,"id":8111,"nodeType":"Return","src":"6477:11:22"}]},"documentation":{"id":8062,"nodeType":"StructuredDocumentation","src":"5718:339:22","text":" @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n `high`.\n WARNING: `high` should not be greater than the array's length."},"id":8113,"implemented":true,"kind":"function","modifiers":[],"name":"_upperBinaryLookup","nameLocation":"6071:18:22","nodeType":"FunctionDefinition","parameters":{"id":8073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8066,"mutability":"mutable","name":"self","nameLocation":"6123:4:22","nodeType":"VariableDeclaration","scope":8113,"src":"6099:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"},"typeName":{"baseType":{"id":8064,"nodeType":"UserDefinedTypeName","pathNode":{"id":8063,"name":"Checkpoint224","nameLocations":["6099:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"6099:13:22"},"referencedDeclaration":7666,"src":"6099:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"id":8065,"nodeType":"ArrayTypeName","src":"6099:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"}},"visibility":"internal"},{"constant":false,"id":8068,"mutability":"mutable","name":"key","nameLocation":"6144:3:22","nodeType":"VariableDeclaration","scope":8113,"src":"6137:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8067,"name":"uint32","nodeType":"ElementaryTypeName","src":"6137:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":8070,"mutability":"mutable","name":"low","nameLocation":"6165:3:22","nodeType":"VariableDeclaration","scope":8113,"src":"6157:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8069,"name":"uint256","nodeType":"ElementaryTypeName","src":"6157:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8072,"mutability":"mutable","name":"high","nameLocation":"6186:4:22","nodeType":"VariableDeclaration","scope":8113,"src":"6178:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8071,"name":"uint256","nodeType":"ElementaryTypeName","src":"6178:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6089:107:22"},"returnParameters":{"id":8076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8113,"src":"6219:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8074,"name":"uint256","nodeType":"ElementaryTypeName","src":"6219:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6218:9:22"},"scope":9229,"src":"6062:433:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":8164,"nodeType":"Block","src":"7012:267:22","statements":[{"body":{"id":8160,"nodeType":"Block","src":"7041:211:22","statements":[{"assignments":[8133],"declarations":[{"constant":false,"id":8133,"mutability":"mutable","name":"mid","nameLocation":"7063:3:22","nodeType":"VariableDeclaration","scope":8160,"src":"7055:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8132,"name":"uint256","nodeType":"ElementaryTypeName","src":"7055:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8139,"initialValue":{"arguments":[{"id":8136,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8122,"src":"7082:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8137,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8124,"src":"7087:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8134,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"7069:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":8135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7074:7:22","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"7069:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":8138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7069:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7055:37:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":8146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":8141,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8118,"src":"7124:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"}},{"id":8142,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8133,"src":"7130:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8140,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8180,"src":"7110:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint224_$7666_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint224 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint224 storage pointer)"}},"id":8143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7110:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224 storage pointer"}},"id":8144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7135:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":7663,"src":"7110:29:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8145,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8120,"src":"7142:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"7110:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8158,"nodeType":"Block","src":"7199:43:22","statements":[{"expression":{"id":8156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8154,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8124,"src":"7217:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8155,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8133,"src":"7224:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7217:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8157,"nodeType":"ExpressionStatement","src":"7217:10:22"}]},"id":8159,"nodeType":"IfStatement","src":"7106:136:22","trueBody":{"id":8153,"nodeType":"Block","src":"7147:46:22","statements":[{"expression":{"id":8151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8147,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8122,"src":"7165:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8148,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8133,"src":"7171:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":8149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7177:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7171:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7165:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8152,"nodeType":"ExpressionStatement","src":"7165:13:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8129,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8122,"src":"7029:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8130,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8124,"src":"7035:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7029:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8161,"nodeType":"WhileStatement","src":"7022:230:22"},{"expression":{"id":8162,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8124,"src":"7268:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8128,"id":8163,"nodeType":"Return","src":"7261:11:22"}]},"documentation":{"id":8114,"nodeType":"StructuredDocumentation","src":"6501:340:22","text":" @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n `high`.\n WARNING: `high` should not be greater than the array's length."},"id":8165,"implemented":true,"kind":"function","modifiers":[],"name":"_lowerBinaryLookup","nameLocation":"6855:18:22","nodeType":"FunctionDefinition","parameters":{"id":8125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8118,"mutability":"mutable","name":"self","nameLocation":"6907:4:22","nodeType":"VariableDeclaration","scope":8165,"src":"6883:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"},"typeName":{"baseType":{"id":8116,"nodeType":"UserDefinedTypeName","pathNode":{"id":8115,"name":"Checkpoint224","nameLocations":["6883:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"6883:13:22"},"referencedDeclaration":7666,"src":"6883:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"id":8117,"nodeType":"ArrayTypeName","src":"6883:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"}},"visibility":"internal"},{"constant":false,"id":8120,"mutability":"mutable","name":"key","nameLocation":"6928:3:22","nodeType":"VariableDeclaration","scope":8165,"src":"6921:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8119,"name":"uint32","nodeType":"ElementaryTypeName","src":"6921:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":8122,"mutability":"mutable","name":"low","nameLocation":"6949:3:22","nodeType":"VariableDeclaration","scope":8165,"src":"6941:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8121,"name":"uint256","nodeType":"ElementaryTypeName","src":"6941:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8124,"mutability":"mutable","name":"high","nameLocation":"6970:4:22","nodeType":"VariableDeclaration","scope":8165,"src":"6962:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8123,"name":"uint256","nodeType":"ElementaryTypeName","src":"6962:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6873:107:22"},"returnParameters":{"id":8128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8165,"src":"7003:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8126,"name":"uint256","nodeType":"ElementaryTypeName","src":"7003:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7002:9:22"},"scope":9229,"src":"6846:433:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":8179,"nodeType":"Block","src":"7562:125:22","statements":[{"AST":{"nativeSrc":"7581:100:22","nodeType":"YulBlock","src":"7581:100:22","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7602:1:22","nodeType":"YulLiteral","src":"7602:1:22","type":"","value":"0"},{"name":"self.slot","nativeSrc":"7605:9:22","nodeType":"YulIdentifier","src":"7605:9:22"}],"functionName":{"name":"mstore","nativeSrc":"7595:6:22","nodeType":"YulIdentifier","src":"7595:6:22"},"nativeSrc":"7595:20:22","nodeType":"YulFunctionCall","src":"7595:20:22"},"nativeSrc":"7595:20:22","nodeType":"YulExpressionStatement","src":"7595:20:22"},{"nativeSrc":"7628:43:22","nodeType":"YulAssignment","src":"7628:43:22","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7657:1:22","nodeType":"YulLiteral","src":"7657:1:22","type":"","value":"0"},{"kind":"number","nativeSrc":"7660:4:22","nodeType":"YulLiteral","src":"7660:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"7647:9:22","nodeType":"YulIdentifier","src":"7647:9:22"},"nativeSrc":"7647:18:22","nodeType":"YulFunctionCall","src":"7647:18:22"},{"name":"pos","nativeSrc":"7667:3:22","nodeType":"YulIdentifier","src":"7667:3:22"}],"functionName":{"name":"add","nativeSrc":"7643:3:22","nodeType":"YulIdentifier","src":"7643:3:22"},"nativeSrc":"7643:28:22","nodeType":"YulFunctionCall","src":"7643:28:22"},"variableNames":[{"name":"result.slot","nativeSrc":"7628:11:22","nodeType":"YulIdentifier","src":"7628:11:22"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":8172,"isOffset":false,"isSlot":false,"src":"7667:3:22","valueSize":1},{"declaration":8176,"isOffset":false,"isSlot":true,"src":"7628:11:22","suffix":"slot","valueSize":1},{"declaration":8170,"isOffset":false,"isSlot":true,"src":"7605:9:22","suffix":"slot","valueSize":1}],"id":8178,"nodeType":"InlineAssembly","src":"7572:109:22"}]},"documentation":{"id":8166,"nodeType":"StructuredDocumentation","src":"7285:132:22","text":" @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds."},"id":8180,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeAccess","nameLocation":"7431:13:22","nodeType":"FunctionDefinition","parameters":{"id":8173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8170,"mutability":"mutable","name":"self","nameLocation":"7478:4:22","nodeType":"VariableDeclaration","scope":8180,"src":"7454:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"},"typeName":{"baseType":{"id":8168,"nodeType":"UserDefinedTypeName","pathNode":{"id":8167,"name":"Checkpoint224","nameLocations":["7454:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"7454:13:22"},"referencedDeclaration":7666,"src":"7454:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"id":8169,"nodeType":"ArrayTypeName","src":"7454:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint224_$7666_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint224[]"}},"visibility":"internal"},{"constant":false,"id":8172,"mutability":"mutable","name":"pos","nameLocation":"7500:3:22","nodeType":"VariableDeclaration","scope":8180,"src":"7492:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8171,"name":"uint256","nodeType":"ElementaryTypeName","src":"7492:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7444:65:22"},"returnParameters":{"id":8177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8176,"mutability":"mutable","name":"result","nameLocation":"7554:6:22","nodeType":"VariableDeclaration","scope":8180,"src":"7532:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"},"typeName":{"id":8175,"nodeType":"UserDefinedTypeName","pathNode":{"id":8174,"name":"Checkpoint224","nameLocations":["7532:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":7666,"src":"7532:13:22"},"referencedDeclaration":7666,"src":"7532:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint224_$7666_storage_ptr","typeString":"struct Checkpoints.Checkpoint224"}},"visibility":"internal"}],"src":"7531:30:22"},"scope":9229,"src":"7422:265:22","stateMutability":"pure","virtual":false,"visibility":"private"},{"canonicalName":"Checkpoints.Trace208","id":8185,"members":[{"constant":false,"id":8184,"mutability":"mutable","name":"_checkpoints","nameLocation":"7735:12:22","nodeType":"VariableDeclaration","scope":8185,"src":"7719:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"},"typeName":{"baseType":{"id":8182,"nodeType":"UserDefinedTypeName","pathNode":{"id":8181,"name":"Checkpoint208","nameLocations":["7719:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"7719:13:22"},"referencedDeclaration":8190,"src":"7719:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"id":8183,"nodeType":"ArrayTypeName","src":"7719:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"}},"visibility":"internal"}],"name":"Trace208","nameLocation":"7700:8:22","nodeType":"StructDefinition","scope":9229,"src":"7693:61:22","visibility":"public"},{"canonicalName":"Checkpoints.Checkpoint208","id":8190,"members":[{"constant":false,"id":8187,"mutability":"mutable","name":"_key","nameLocation":"7798:4:22","nodeType":"VariableDeclaration","scope":8190,"src":"7791:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8186,"name":"uint48","nodeType":"ElementaryTypeName","src":"7791:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8189,"mutability":"mutable","name":"_value","nameLocation":"7820:6:22","nodeType":"VariableDeclaration","scope":8190,"src":"7812:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8188,"name":"uint208","nodeType":"ElementaryTypeName","src":"7812:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"name":"Checkpoint208","nameLocation":"7767:13:22","nodeType":"StructDefinition","scope":9229,"src":"7760:73:22","visibility":"public"},{"body":{"id":8212,"nodeType":"Block","src":"8294:62:22","statements":[{"expression":{"arguments":[{"expression":{"id":8206,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8194,"src":"8319:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8324:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"8319:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"id":8208,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8196,"src":"8338:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":8209,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8198,"src":"8343:5:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":8205,"name":"_insert","nodeType":"Identifier","overloadedDeclarations":[8061,8585,9109],"referencedDeclaration":8585,"src":"8311:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint48_$_t_uint208_$returns$_t_uint208_$_t_uint208_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint48,uint208) returns (uint208,uint208)"}},"id":8210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8311:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"functionReturnParameters":8204,"id":8211,"nodeType":"Return","src":"8304:45:22"}]},"documentation":{"id":8191,"nodeType":"StructuredDocumentation","src":"7839:302:22","text":" @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\n Returns previous value and new value.\n IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\n library."},"id":8213,"implemented":true,"kind":"function","modifiers":[],"name":"push","nameLocation":"8155:4:22","nodeType":"FunctionDefinition","parameters":{"id":8199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8194,"mutability":"mutable","name":"self","nameLocation":"8186:4:22","nodeType":"VariableDeclaration","scope":8213,"src":"8169:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8193,"nodeType":"UserDefinedTypeName","pathNode":{"id":8192,"name":"Trace208","nameLocations":["8169:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"8169:8:22"},"referencedDeclaration":8185,"src":"8169:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"},{"constant":false,"id":8196,"mutability":"mutable","name":"key","nameLocation":"8207:3:22","nodeType":"VariableDeclaration","scope":8213,"src":"8200:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8195,"name":"uint48","nodeType":"ElementaryTypeName","src":"8200:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8198,"mutability":"mutable","name":"value","nameLocation":"8228:5:22","nodeType":"VariableDeclaration","scope":8213,"src":"8220:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8197,"name":"uint208","nodeType":"ElementaryTypeName","src":"8220:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"8159:80:22"},"returnParameters":{"id":8204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8201,"mutability":"mutable","name":"oldValue","nameLocation":"8266:8:22","nodeType":"VariableDeclaration","scope":8213,"src":"8258:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8200,"name":"uint208","nodeType":"ElementaryTypeName","src":"8258:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"},{"constant":false,"id":8203,"mutability":"mutable","name":"newValue","nameLocation":"8284:8:22","nodeType":"VariableDeclaration","scope":8213,"src":"8276:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8202,"name":"uint208","nodeType":"ElementaryTypeName","src":"8276:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"8257:36:22"},"scope":9229,"src":"8146:210:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":8252,"nodeType":"Block","src":"8609:207:22","statements":[{"assignments":[8225],"declarations":[{"constant":false,"id":8225,"mutability":"mutable","name":"len","nameLocation":"8627:3:22","nodeType":"VariableDeclaration","scope":8252,"src":"8619:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8224,"name":"uint256","nodeType":"ElementaryTypeName","src":"8619:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8229,"initialValue":{"expression":{"expression":{"id":8226,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8217,"src":"8633:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8638:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"8633:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8651:6:22","memberName":"length","nodeType":"MemberAccess","src":"8633:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8619:38:22"},{"assignments":[8231],"declarations":[{"constant":false,"id":8231,"mutability":"mutable","name":"pos","nameLocation":"8675:3:22","nodeType":"VariableDeclaration","scope":8252,"src":"8667:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8230,"name":"uint256","nodeType":"ElementaryTypeName","src":"8667:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8239,"initialValue":{"arguments":[{"expression":{"id":8233,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8217,"src":"8700:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8705:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"8700:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"id":8235,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8219,"src":"8719:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"hexValue":"30","id":8236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8724:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":8237,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8225,"src":"8727:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8232,"name":"_lowerBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8165,8689,9213],"referencedDeclaration":8689,"src":"8681:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint48_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint48,uint256,uint256) view returns (uint256)"}},"id":8238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8681:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8667:64:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8240,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8231,"src":"8748:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":8241,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8225,"src":"8755:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8748:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8245,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8217,"src":"8779:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8246,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8784:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"8779:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"id":8247,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8231,"src":"8798:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8244,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"8765:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8249,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8803:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"8765:44:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"id":8250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8748:61:22","trueExpression":{"hexValue":"30","id":8243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8761:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":8223,"id":8251,"nodeType":"Return","src":"8741:68:22"}]},"documentation":{"id":8214,"nodeType":"StructuredDocumentation","src":"8362:154:22","text":" @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n there is none."},"id":8253,"implemented":true,"kind":"function","modifiers":[],"name":"lowerLookup","nameLocation":"8530:11:22","nodeType":"FunctionDefinition","parameters":{"id":8220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8217,"mutability":"mutable","name":"self","nameLocation":"8559:4:22","nodeType":"VariableDeclaration","scope":8253,"src":"8542:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8216,"nodeType":"UserDefinedTypeName","pathNode":{"id":8215,"name":"Trace208","nameLocations":["8542:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"8542:8:22"},"referencedDeclaration":8185,"src":"8542:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"},{"constant":false,"id":8219,"mutability":"mutable","name":"key","nameLocation":"8572:3:22","nodeType":"VariableDeclaration","scope":8253,"src":"8565:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8218,"name":"uint48","nodeType":"ElementaryTypeName","src":"8565:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"8541:35:22"},"returnParameters":{"id":8223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8253,"src":"8600:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8221,"name":"uint208","nodeType":"ElementaryTypeName","src":"8600:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"8599:9:22"},"scope":9229,"src":"8521:295:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8294,"nodeType":"Block","src":"9071:209:22","statements":[{"assignments":[8265],"declarations":[{"constant":false,"id":8265,"mutability":"mutable","name":"len","nameLocation":"9089:3:22","nodeType":"VariableDeclaration","scope":8294,"src":"9081:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8264,"name":"uint256","nodeType":"ElementaryTypeName","src":"9081:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8269,"initialValue":{"expression":{"expression":{"id":8266,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"9095:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9100:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"9095:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9113:6:22","memberName":"length","nodeType":"MemberAccess","src":"9095:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9081:38:22"},{"assignments":[8271],"declarations":[{"constant":false,"id":8271,"mutability":"mutable","name":"pos","nameLocation":"9137:3:22","nodeType":"VariableDeclaration","scope":8294,"src":"9129:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8270,"name":"uint256","nodeType":"ElementaryTypeName","src":"9129:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8279,"initialValue":{"arguments":[{"expression":{"id":8273,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"9162:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9167:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"9162:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"id":8275,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8259,"src":"9181:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"hexValue":"30","id":8276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9186:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":8277,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8265,"src":"9189:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8272,"name":"_upperBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8113,8637,9161],"referencedDeclaration":8637,"src":"9143:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint48_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint48,uint256,uint256) view returns (uint256)"}},"id":8278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9143:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9129:64:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8280,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8271,"src":"9210:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9217:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8285,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"9239:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8286,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9244:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"9239:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8287,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8271,"src":"9258:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9264:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9258:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8284,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"9225:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9225:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9267:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"9225:48:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"id":8292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9210:63:22","trueExpression":{"hexValue":"30","id":8283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9221:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":8263,"id":8293,"nodeType":"Return","src":"9203:70:22"}]},"documentation":{"id":8254,"nodeType":"StructuredDocumentation","src":"8822:156:22","text":" @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n if there is none."},"id":8295,"implemented":true,"kind":"function","modifiers":[],"name":"upperLookup","nameLocation":"8992:11:22","nodeType":"FunctionDefinition","parameters":{"id":8260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8257,"mutability":"mutable","name":"self","nameLocation":"9021:4:22","nodeType":"VariableDeclaration","scope":8295,"src":"9004:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8256,"nodeType":"UserDefinedTypeName","pathNode":{"id":8255,"name":"Trace208","nameLocations":["9004:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"9004:8:22"},"referencedDeclaration":8185,"src":"9004:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"},{"constant":false,"id":8259,"mutability":"mutable","name":"key","nameLocation":"9034:3:22","nodeType":"VariableDeclaration","scope":8295,"src":"9027:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8258,"name":"uint48","nodeType":"ElementaryTypeName","src":"9027:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"9003:35:22"},"returnParameters":{"id":8263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8262,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8295,"src":"9062:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8261,"name":"uint208","nodeType":"ElementaryTypeName","src":"9062:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9061:9:22"},"scope":9229,"src":"8983:297:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8379,"nodeType":"Block","src":"9679:512:22","statements":[{"assignments":[8307],"declarations":[{"constant":false,"id":8307,"mutability":"mutable","name":"len","nameLocation":"9697:3:22","nodeType":"VariableDeclaration","scope":8379,"src":"9689:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8306,"name":"uint256","nodeType":"ElementaryTypeName","src":"9689:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8311,"initialValue":{"expression":{"expression":{"id":8308,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8299,"src":"9703:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9708:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"9703:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9721:6:22","memberName":"length","nodeType":"MemberAccess","src":"9703:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9689:38:22"},{"assignments":[8313],"declarations":[{"constant":false,"id":8313,"mutability":"mutable","name":"low","nameLocation":"9746:3:22","nodeType":"VariableDeclaration","scope":8379,"src":"9738:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8312,"name":"uint256","nodeType":"ElementaryTypeName","src":"9738:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8315,"initialValue":{"hexValue":"30","id":8314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9738:15:22"},{"assignments":[8317],"declarations":[{"constant":false,"id":8317,"mutability":"mutable","name":"high","nameLocation":"9771:4:22","nodeType":"VariableDeclaration","scope":8379,"src":"9763:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8316,"name":"uint256","nodeType":"ElementaryTypeName","src":"9763:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8319,"initialValue":{"id":8318,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8307,"src":"9778:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9763:18:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8320,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8307,"src":"9796:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"35","id":8321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9802:1:22","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"9796:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8354,"nodeType":"IfStatement","src":"9792:234:22","trueBody":{"id":8353,"nodeType":"Block","src":"9805:221:22","statements":[{"assignments":[8324],"declarations":[{"constant":false,"id":8324,"mutability":"mutable","name":"mid","nameLocation":"9827:3:22","nodeType":"VariableDeclaration","scope":8353,"src":"9819:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8323,"name":"uint256","nodeType":"ElementaryTypeName","src":"9819:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8331,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8325,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8307,"src":"9833:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":8328,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8307,"src":"9849:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8326,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"9839:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":8327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9844:4:22","memberName":"sqrt","nodeType":"MemberAccess","referencedDeclaration":5283,"src":"9839:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":8329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9839:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9833:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9819:34:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":8339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8332,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8301,"src":"9871:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"expression":{"id":8334,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8299,"src":"9891:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9896:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"9891:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"id":8336,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8324,"src":"9910:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8333,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"9877:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9877:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9915:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8187,"src":"9877:42:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"9871:48:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8351,"nodeType":"Block","src":"9970:46:22","statements":[{"expression":{"id":8349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8345,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8313,"src":"9988:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8346,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8324,"src":"9994:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":8347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10000:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9994:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9988:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8350,"nodeType":"ExpressionStatement","src":"9988:13:22"}]},"id":8352,"nodeType":"IfStatement","src":"9867:149:22","trueBody":{"id":8344,"nodeType":"Block","src":"9921:43:22","statements":[{"expression":{"id":8342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8340,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8317,"src":"9939:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8341,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8324,"src":"9946:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9939:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8343,"nodeType":"ExpressionStatement","src":"9939:10:22"}]}}]}},{"assignments":[8356],"declarations":[{"constant":false,"id":8356,"mutability":"mutable","name":"pos","nameLocation":"10044:3:22","nodeType":"VariableDeclaration","scope":8379,"src":"10036:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8355,"name":"uint256","nodeType":"ElementaryTypeName","src":"10036:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8364,"initialValue":{"arguments":[{"expression":{"id":8358,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8299,"src":"10069:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10074:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"10069:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"id":8360,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8301,"src":"10088:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":8361,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8313,"src":"10093:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8362,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8317,"src":"10098:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8357,"name":"_upperBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8113,8637,9161],"referencedDeclaration":8637,"src":"10050:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint48_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint48,uint256,uint256) view returns (uint256)"}},"id":8363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10050:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10036:67:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8365,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"10121:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10128:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10121:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8370,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8299,"src":"10150:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10155:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"10150:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8372,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"10169:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10175:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10169:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8369,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"10136:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10136:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8376,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10178:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"10136:48:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"id":8377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10121:63:22","trueExpression":{"hexValue":"30","id":8368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10132:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":8305,"id":8378,"nodeType":"Return","src":"10114:70:22"}]},"documentation":{"id":8296,"nodeType":"StructuredDocumentation","src":"9286:294:22","text":" @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n if there is none.\n NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n keys)."},"id":8380,"implemented":true,"kind":"function","modifiers":[],"name":"upperLookupRecent","nameLocation":"9594:17:22","nodeType":"FunctionDefinition","parameters":{"id":8302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8299,"mutability":"mutable","name":"self","nameLocation":"9629:4:22","nodeType":"VariableDeclaration","scope":8380,"src":"9612:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8298,"nodeType":"UserDefinedTypeName","pathNode":{"id":8297,"name":"Trace208","nameLocations":["9612:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"9612:8:22"},"referencedDeclaration":8185,"src":"9612:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"},{"constant":false,"id":8301,"mutability":"mutable","name":"key","nameLocation":"9642:3:22","nodeType":"VariableDeclaration","scope":8380,"src":"9635:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8300,"name":"uint48","nodeType":"ElementaryTypeName","src":"9635:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"9611:35:22"},"returnParameters":{"id":8305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8380,"src":"9670:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8303,"name":"uint208","nodeType":"ElementaryTypeName","src":"9670:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"9669:9:22"},"scope":9229,"src":"9585:606:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8409,"nodeType":"Block","src":"10382:135:22","statements":[{"assignments":[8390],"declarations":[{"constant":false,"id":8390,"mutability":"mutable","name":"pos","nameLocation":"10400:3:22","nodeType":"VariableDeclaration","scope":8409,"src":"10392:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8389,"name":"uint256","nodeType":"ElementaryTypeName","src":"10392:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8394,"initialValue":{"expression":{"expression":{"id":8391,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8384,"src":"10406:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8392,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10411:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"10406:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10424:6:22","memberName":"length","nodeType":"MemberAccess","src":"10406:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10392:38:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8395,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8390,"src":"10447:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10454:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10447:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8400,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8384,"src":"10476:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8401,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10481:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"10476:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8402,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8390,"src":"10495:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10501:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10495:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8399,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"10462:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10462:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8406,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10504:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"10462:48:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"id":8407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10447:63:22","trueExpression":{"hexValue":"30","id":8398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10458:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":8388,"id":8408,"nodeType":"Return","src":"10440:70:22"}]},"documentation":{"id":8381,"nodeType":"StructuredDocumentation","src":"10197:109:22","text":" @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints."},"id":8410,"implemented":true,"kind":"function","modifiers":[],"name":"latest","nameLocation":"10320:6:22","nodeType":"FunctionDefinition","parameters":{"id":8385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8384,"mutability":"mutable","name":"self","nameLocation":"10344:4:22","nodeType":"VariableDeclaration","scope":8410,"src":"10327:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8383,"nodeType":"UserDefinedTypeName","pathNode":{"id":8382,"name":"Trace208","nameLocations":["10327:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"10327:8:22"},"referencedDeclaration":8185,"src":"10327:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"}],"src":"10326:23:22"},"returnParameters":{"id":8388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8410,"src":"10373:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8386,"name":"uint208","nodeType":"ElementaryTypeName","src":"10373:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"10372:9:22"},"scope":9229,"src":"10311:206:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8458,"nodeType":"Block","src":"10810:275:22","statements":[{"assignments":[8424],"declarations":[{"constant":false,"id":8424,"mutability":"mutable","name":"pos","nameLocation":"10828:3:22","nodeType":"VariableDeclaration","scope":8458,"src":"10820:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8423,"name":"uint256","nodeType":"ElementaryTypeName","src":"10820:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8428,"initialValue":{"expression":{"expression":{"id":8425,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"10834:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10839:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"10834:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10852:6:22","memberName":"length","nodeType":"MemberAccess","src":"10834:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10820:38:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8429,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8424,"src":"10872:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10879:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10872:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8456,"nodeType":"Block","src":"10933:146:22","statements":[{"assignments":[8440],"declarations":[{"constant":false,"id":8440,"mutability":"mutable","name":"ckpt","nameLocation":"10969:4:22","nodeType":"VariableDeclaration","scope":8456,"src":"10947:26:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"},"typeName":{"id":8439,"nodeType":"UserDefinedTypeName","pathNode":{"id":8438,"name":"Checkpoint208","nameLocations":["10947:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"10947:13:22"},"referencedDeclaration":8190,"src":"10947:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"visibility":"internal"}],"id":8448,"initialValue":{"arguments":[{"expression":{"id":8442,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"10990:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10995:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"10990:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8444,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8424,"src":"11009:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11015:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11009:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8441,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"10976:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10976:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"10947:70:22"},{"expression":{"components":[{"hexValue":"74727565","id":8449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11039:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"id":8450,"name":"ckpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8440,"src":"11045:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11050:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8187,"src":"11045:9:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"expression":{"id":8452,"name":"ckpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8440,"src":"11056:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11061:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"11056:11:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"id":8454,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11038:30:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint48_$_t_uint208_$","typeString":"tuple(bool,uint48,uint208)"}},"functionReturnParameters":8422,"id":8455,"nodeType":"Return","src":"11031:37:22"}]},"id":8457,"nodeType":"IfStatement","src":"10868:211:22","trueBody":{"id":8437,"nodeType":"Block","src":"10882:45:22","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":8432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10904:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":8433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10911:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":8434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10914:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":8435,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10903:13:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0,int_const 0)"}},"functionReturnParameters":8422,"id":8436,"nodeType":"Return","src":"10896:20:22"}]}}]},"documentation":{"id":8411,"nodeType":"StructuredDocumentation","src":"10523:168:22","text":" @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n in the most recent checkpoint."},"id":8459,"implemented":true,"kind":"function","modifiers":[],"name":"latestCheckpoint","nameLocation":"10705:16:22","nodeType":"FunctionDefinition","parameters":{"id":8415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8414,"mutability":"mutable","name":"self","nameLocation":"10739:4:22","nodeType":"VariableDeclaration","scope":8459,"src":"10722:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8413,"nodeType":"UserDefinedTypeName","pathNode":{"id":8412,"name":"Trace208","nameLocations":["10722:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"10722:8:22"},"referencedDeclaration":8185,"src":"10722:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"}],"src":"10721:23:22"},"returnParameters":{"id":8422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8417,"mutability":"mutable","name":"exists","nameLocation":"10773:6:22","nodeType":"VariableDeclaration","scope":8459,"src":"10768:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8416,"name":"bool","nodeType":"ElementaryTypeName","src":"10768:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":8419,"mutability":"mutable","name":"_key","nameLocation":"10788:4:22","nodeType":"VariableDeclaration","scope":8459,"src":"10781:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8418,"name":"uint48","nodeType":"ElementaryTypeName","src":"10781:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8421,"mutability":"mutable","name":"_value","nameLocation":"10802:6:22","nodeType":"VariableDeclaration","scope":8459,"src":"10794:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8420,"name":"uint208","nodeType":"ElementaryTypeName","src":"10794:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"10767:42:22"},"scope":9229,"src":"10696:389:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8472,"nodeType":"Block","src":"11225:48:22","statements":[{"expression":{"expression":{"expression":{"id":8468,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8463,"src":"11242:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8469,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11247:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"11242:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11260:6:22","memberName":"length","nodeType":"MemberAccess","src":"11242:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8467,"id":8471,"nodeType":"Return","src":"11235:31:22"}]},"documentation":{"id":8460,"nodeType":"StructuredDocumentation","src":"11091:58:22","text":" @dev Returns the number of checkpoints."},"id":8473,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11163:6:22","nodeType":"FunctionDefinition","parameters":{"id":8464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8463,"mutability":"mutable","name":"self","nameLocation":"11187:4:22","nodeType":"VariableDeclaration","scope":8473,"src":"11170:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8462,"nodeType":"UserDefinedTypeName","pathNode":{"id":8461,"name":"Trace208","nameLocations":["11170:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"11170:8:22"},"referencedDeclaration":8185,"src":"11170:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"}],"src":"11169:23:22"},"returnParameters":{"id":8467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8473,"src":"11216:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8465,"name":"uint256","nodeType":"ElementaryTypeName","src":"11216:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11215:9:22"},"scope":9229,"src":"11154:119:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8490,"nodeType":"Block","src":"11437:46:22","statements":[{"expression":{"baseExpression":{"expression":{"id":8485,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8477,"src":"11454:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208 storage pointer"}},"id":8486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11459:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8184,"src":"11454:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage ref"}},"id":8488,"indexExpression":{"id":8487,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8479,"src":"11472:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11454:22:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage","typeString":"struct Checkpoints.Checkpoint208 storage ref"}},"functionReturnParameters":8484,"id":8489,"nodeType":"Return","src":"11447:29:22"}]},"documentation":{"id":8474,"nodeType":"StructuredDocumentation","src":"11279:61:22","text":" @dev Returns checkpoint at given position."},"id":8491,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"11354:2:22","nodeType":"FunctionDefinition","parameters":{"id":8480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8477,"mutability":"mutable","name":"self","nameLocation":"11374:4:22","nodeType":"VariableDeclaration","scope":8491,"src":"11357:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"},"typeName":{"id":8476,"nodeType":"UserDefinedTypeName","pathNode":{"id":8475,"name":"Trace208","nameLocations":["11357:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8185,"src":"11357:8:22"},"referencedDeclaration":8185,"src":"11357:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace208_$8185_storage_ptr","typeString":"struct Checkpoints.Trace208"}},"visibility":"internal"},{"constant":false,"id":8479,"mutability":"mutable","name":"pos","nameLocation":"11387:3:22","nodeType":"VariableDeclaration","scope":8491,"src":"11380:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8478,"name":"uint32","nodeType":"ElementaryTypeName","src":"11380:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"11356:35:22"},"returnParameters":{"id":8484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8491,"src":"11415:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208"},"typeName":{"id":8482,"nodeType":"UserDefinedTypeName","pathNode":{"id":8481,"name":"Checkpoint208","nameLocations":["11415:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"11415:13:22"},"referencedDeclaration":8190,"src":"11415:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"visibility":"internal"}],"src":"11414:22:22"},"scope":9229,"src":"11345:138:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8584,"nodeType":"Block","src":"11816:765:22","statements":[{"assignments":[8508],"declarations":[{"constant":false,"id":8508,"mutability":"mutable","name":"pos","nameLocation":"11834:3:22","nodeType":"VariableDeclaration","scope":8584,"src":"11826:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8507,"name":"uint256","nodeType":"ElementaryTypeName","src":"11826:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8511,"initialValue":{"expression":{"id":8509,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8496,"src":"11840:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"}},"id":8510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11845:6:22","memberName":"length","nodeType":"MemberAccess","src":"11840:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11826:25:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8512,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8508,"src":"11866:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":8513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11872:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11866:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8582,"nodeType":"Block","src":"12467:108:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":8573,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8498,"src":"12512:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":8574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8500,"src":"12525:5:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":8572,"name":"Checkpoint208","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8190,"src":"12491:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"type(struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["12506:4:22","12517:6:22"],"names":["_key","_value"],"nodeType":"FunctionCall","src":"12491:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208 memory"}],"expression":{"id":8569,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8496,"src":"12481:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"}},"id":8571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12486:4:22","memberName":"push","nodeType":"MemberAccess","src":"12481:9:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint208_$8190_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,struct Checkpoints.Checkpoint208 storage ref)"}},"id":8576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12481:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8577,"nodeType":"ExpressionStatement","src":"12481:52:22"},{"expression":{"components":[{"hexValue":"30","id":8578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12555:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":8579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8500,"src":"12558:5:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"id":8580,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12554:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_uint208_$","typeString":"tuple(int_const 0,uint208)"}},"functionReturnParameters":8506,"id":8581,"nodeType":"Return","src":"12547:17:22"}]},"id":8583,"nodeType":"IfStatement","src":"11862:713:22","trueBody":{"id":8568,"nodeType":"Block","src":"11875:586:22","statements":[{"assignments":[8517],"declarations":[{"constant":false,"id":8517,"mutability":"mutable","name":"last","nameLocation":"11911:4:22","nodeType":"VariableDeclaration","scope":8568,"src":"11889:26:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"},"typeName":{"id":8516,"nodeType":"UserDefinedTypeName","pathNode":{"id":8515,"name":"Checkpoint208","nameLocations":["11889:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"11889:13:22"},"referencedDeclaration":8190,"src":"11889:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"visibility":"internal"}],"id":8524,"initialValue":{"arguments":[{"id":8519,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8496,"src":"11932:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8520,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8508,"src":"11938:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11944:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11938:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8518,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"11918:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11918:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"11889:57:22"},{"assignments":[8526],"declarations":[{"constant":false,"id":8526,"mutability":"mutable","name":"lastKey","nameLocation":"11967:7:22","nodeType":"VariableDeclaration","scope":8568,"src":"11960:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8525,"name":"uint48","nodeType":"ElementaryTypeName","src":"11960:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":8529,"initialValue":{"expression":{"id":8527,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8517,"src":"11977:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11982:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8187,"src":"11977:9:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"11960:26:22"},{"assignments":[8531],"declarations":[{"constant":false,"id":8531,"mutability":"mutable","name":"lastValue","nameLocation":"12008:9:22","nodeType":"VariableDeclaration","scope":8568,"src":"12000:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8530,"name":"uint208","nodeType":"ElementaryTypeName","src":"12000:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"id":8534,"initialValue":{"expression":{"id":8532,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8517,"src":"12020:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12025:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"12020:11:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"nodeType":"VariableDeclarationStatement","src":"12000:31:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":8537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8535,"name":"lastKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8526,"src":"12105:7:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":8536,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8498,"src":"12115:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"12105:13:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8542,"nodeType":"IfStatement","src":"12101:89:22","trueBody":{"id":8541,"nodeType":"Block","src":"12120:70:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8538,"name":"CheckpointUnorderedInsertion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7656,"src":"12145:28:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12145:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8540,"nodeType":"RevertStatement","src":"12138:37:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":8545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8543,"name":"lastKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8526,"src":"12253:7:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":8544,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8498,"src":"12264:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"12253:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8562,"nodeType":"Block","src":"12327:85:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":8557,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8498,"src":"12376:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":8558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8500,"src":"12389:5:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint208","typeString":"uint208"}],"id":8556,"name":"Checkpoint208","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8190,"src":"12355:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"type(struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["12370:4:22","12381:6:22"],"names":["_key","_value"],"nodeType":"FunctionCall","src":"12355:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint208_$8190_memory_ptr","typeString":"struct Checkpoints.Checkpoint208 memory"}],"expression":{"id":8553,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8496,"src":"12345:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"}},"id":8555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12350:4:22","memberName":"push","nodeType":"MemberAccess","src":"12345:9:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint208_$8190_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,struct Checkpoints.Checkpoint208 storage ref)"}},"id":8560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12345:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8561,"nodeType":"ExpressionStatement","src":"12345:52:22"}]},"id":8563,"nodeType":"IfStatement","src":"12249:163:22","trueBody":{"id":8552,"nodeType":"Block","src":"12269:52:22","statements":[{"expression":{"id":8550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8546,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8517,"src":"12287:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8548,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12292:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8189,"src":"12287:11:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8500,"src":"12301:5:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"12287:19:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"id":8551,"nodeType":"ExpressionStatement","src":"12287:19:22"}]}},{"expression":{"components":[{"id":8564,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8531,"src":"12433:9:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},{"id":8565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8500,"src":"12444:5:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}}],"id":8566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12432:18:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint208_$_t_uint208_$","typeString":"tuple(uint208,uint208)"}},"functionReturnParameters":8506,"id":8567,"nodeType":"Return","src":"12425:25:22"}]}}]},"documentation":{"id":8492,"nodeType":"StructuredDocumentation","src":"11489:165:22","text":" @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n or by updating the last one."},"id":8585,"implemented":true,"kind":"function","modifiers":[],"name":"_insert","nameLocation":"11668:7:22","nodeType":"FunctionDefinition","parameters":{"id":8501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8496,"mutability":"mutable","name":"self","nameLocation":"11709:4:22","nodeType":"VariableDeclaration","scope":8585,"src":"11685:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"},"typeName":{"baseType":{"id":8494,"nodeType":"UserDefinedTypeName","pathNode":{"id":8493,"name":"Checkpoint208","nameLocations":["11685:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"11685:13:22"},"referencedDeclaration":8190,"src":"11685:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"id":8495,"nodeType":"ArrayTypeName","src":"11685:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"}},"visibility":"internal"},{"constant":false,"id":8498,"mutability":"mutable","name":"key","nameLocation":"11730:3:22","nodeType":"VariableDeclaration","scope":8585,"src":"11723:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8497,"name":"uint48","nodeType":"ElementaryTypeName","src":"11723:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8500,"mutability":"mutable","name":"value","nameLocation":"11751:5:22","nodeType":"VariableDeclaration","scope":8585,"src":"11743:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8499,"name":"uint208","nodeType":"ElementaryTypeName","src":"11743:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"11675:87:22"},"returnParameters":{"id":8506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8503,"mutability":"mutable","name":"oldValue","nameLocation":"11788:8:22","nodeType":"VariableDeclaration","scope":8585,"src":"11780:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8502,"name":"uint208","nodeType":"ElementaryTypeName","src":"11780:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"},{"constant":false,"id":8505,"mutability":"mutable","name":"newValue","nameLocation":"11806:8:22","nodeType":"VariableDeclaration","scope":8585,"src":"11798:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":8504,"name":"uint208","nodeType":"ElementaryTypeName","src":"11798:7:22","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"11779:36:22"},"scope":9229,"src":"11659:922:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":8636,"nodeType":"Block","src":"13097:267:22","statements":[{"body":{"id":8632,"nodeType":"Block","src":"13126:211:22","statements":[{"assignments":[8605],"declarations":[{"constant":false,"id":8605,"mutability":"mutable","name":"mid","nameLocation":"13148:3:22","nodeType":"VariableDeclaration","scope":8632,"src":"13140:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8604,"name":"uint256","nodeType":"ElementaryTypeName","src":"13140:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8611,"initialValue":{"arguments":[{"id":8608,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8594,"src":"13167:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8609,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"13172:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8606,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"13154:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":8607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13159:7:22","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"13154:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":8610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13154:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13140:37:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":8618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":8613,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8590,"src":"13209:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"}},{"id":8614,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8605,"src":"13215:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8612,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"13195:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13195:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13220:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8187,"src":"13195:29:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":8617,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8592,"src":"13227:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"13195:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8630,"nodeType":"Block","src":"13281:46:22","statements":[{"expression":{"id":8628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8624,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8594,"src":"13299:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8625,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8605,"src":"13305:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":8626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13311:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13305:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13299:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8629,"nodeType":"ExpressionStatement","src":"13299:13:22"}]},"id":8631,"nodeType":"IfStatement","src":"13191:136:22","trueBody":{"id":8623,"nodeType":"Block","src":"13232:43:22","statements":[{"expression":{"id":8621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8619,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"13250:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8620,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8605,"src":"13257:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13250:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8622,"nodeType":"ExpressionStatement","src":"13250:10:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8601,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8594,"src":"13114:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8602,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"13120:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13114:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8633,"nodeType":"WhileStatement","src":"13107:230:22"},{"expression":{"id":8634,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"13353:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8600,"id":8635,"nodeType":"Return","src":"13346:11:22"}]},"documentation":{"id":8586,"nodeType":"StructuredDocumentation","src":"12587:339:22","text":" @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n `high`.\n WARNING: `high` should not be greater than the array's length."},"id":8637,"implemented":true,"kind":"function","modifiers":[],"name":"_upperBinaryLookup","nameLocation":"12940:18:22","nodeType":"FunctionDefinition","parameters":{"id":8597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8590,"mutability":"mutable","name":"self","nameLocation":"12992:4:22","nodeType":"VariableDeclaration","scope":8637,"src":"12968:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"},"typeName":{"baseType":{"id":8588,"nodeType":"UserDefinedTypeName","pathNode":{"id":8587,"name":"Checkpoint208","nameLocations":["12968:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"12968:13:22"},"referencedDeclaration":8190,"src":"12968:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"id":8589,"nodeType":"ArrayTypeName","src":"12968:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"}},"visibility":"internal"},{"constant":false,"id":8592,"mutability":"mutable","name":"key","nameLocation":"13013:3:22","nodeType":"VariableDeclaration","scope":8637,"src":"13006:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8591,"name":"uint48","nodeType":"ElementaryTypeName","src":"13006:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8594,"mutability":"mutable","name":"low","nameLocation":"13034:3:22","nodeType":"VariableDeclaration","scope":8637,"src":"13026:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8593,"name":"uint256","nodeType":"ElementaryTypeName","src":"13026:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8596,"mutability":"mutable","name":"high","nameLocation":"13055:4:22","nodeType":"VariableDeclaration","scope":8637,"src":"13047:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8595,"name":"uint256","nodeType":"ElementaryTypeName","src":"13047:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12958:107:22"},"returnParameters":{"id":8600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8637,"src":"13088:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8598,"name":"uint256","nodeType":"ElementaryTypeName","src":"13088:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13087:9:22"},"scope":9229,"src":"12931:433:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":8688,"nodeType":"Block","src":"13881:267:22","statements":[{"body":{"id":8684,"nodeType":"Block","src":"13910:211:22","statements":[{"assignments":[8657],"declarations":[{"constant":false,"id":8657,"mutability":"mutable","name":"mid","nameLocation":"13932:3:22","nodeType":"VariableDeclaration","scope":8684,"src":"13924:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8656,"name":"uint256","nodeType":"ElementaryTypeName","src":"13924:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8663,"initialValue":{"arguments":[{"id":8660,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8646,"src":"13951:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8661,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"13956:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8658,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"13938:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":8659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13943:7:22","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"13938:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":8662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13938:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13924:37:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":8670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":8665,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8642,"src":"13993:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"}},{"id":8666,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8657,"src":"13999:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8664,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":8704,"src":"13979:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint208_$8190_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint208 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint208 storage pointer)"}},"id":8667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13979:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208 storage pointer"}},"id":8668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14004:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8187,"src":"13979:29:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8669,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8644,"src":"14011:3:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"13979:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8682,"nodeType":"Block","src":"14068:43:22","statements":[{"expression":{"id":8680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8678,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"14086:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8679,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8657,"src":"14093:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14086:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8681,"nodeType":"ExpressionStatement","src":"14086:10:22"}]},"id":8683,"nodeType":"IfStatement","src":"13975:136:22","trueBody":{"id":8677,"nodeType":"Block","src":"14016:46:22","statements":[{"expression":{"id":8675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8671,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8646,"src":"14034:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8672,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8657,"src":"14040:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":8673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14040:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14034:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8676,"nodeType":"ExpressionStatement","src":"14034:13:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8653,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8646,"src":"13898:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8654,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"13904:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13898:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8685,"nodeType":"WhileStatement","src":"13891:230:22"},{"expression":{"id":8686,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"14137:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8652,"id":8687,"nodeType":"Return","src":"14130:11:22"}]},"documentation":{"id":8638,"nodeType":"StructuredDocumentation","src":"13370:340:22","text":" @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n `high`.\n WARNING: `high` should not be greater than the array's length."},"id":8689,"implemented":true,"kind":"function","modifiers":[],"name":"_lowerBinaryLookup","nameLocation":"13724:18:22","nodeType":"FunctionDefinition","parameters":{"id":8649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8642,"mutability":"mutable","name":"self","nameLocation":"13776:4:22","nodeType":"VariableDeclaration","scope":8689,"src":"13752:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"},"typeName":{"baseType":{"id":8640,"nodeType":"UserDefinedTypeName","pathNode":{"id":8639,"name":"Checkpoint208","nameLocations":["13752:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"13752:13:22"},"referencedDeclaration":8190,"src":"13752:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"id":8641,"nodeType":"ArrayTypeName","src":"13752:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"}},"visibility":"internal"},{"constant":false,"id":8644,"mutability":"mutable","name":"key","nameLocation":"13797:3:22","nodeType":"VariableDeclaration","scope":8689,"src":"13790:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":8643,"name":"uint48","nodeType":"ElementaryTypeName","src":"13790:6:22","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":8646,"mutability":"mutable","name":"low","nameLocation":"13818:3:22","nodeType":"VariableDeclaration","scope":8689,"src":"13810:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8645,"name":"uint256","nodeType":"ElementaryTypeName","src":"13810:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8648,"mutability":"mutable","name":"high","nameLocation":"13839:4:22","nodeType":"VariableDeclaration","scope":8689,"src":"13831:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8647,"name":"uint256","nodeType":"ElementaryTypeName","src":"13831:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13742:107:22"},"returnParameters":{"id":8652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8689,"src":"13872:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8650,"name":"uint256","nodeType":"ElementaryTypeName","src":"13872:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13871:9:22"},"scope":9229,"src":"13715:433:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":8703,"nodeType":"Block","src":"14431:125:22","statements":[{"AST":{"nativeSrc":"14450:100:22","nodeType":"YulBlock","src":"14450:100:22","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14471:1:22","nodeType":"YulLiteral","src":"14471:1:22","type":"","value":"0"},{"name":"self.slot","nativeSrc":"14474:9:22","nodeType":"YulIdentifier","src":"14474:9:22"}],"functionName":{"name":"mstore","nativeSrc":"14464:6:22","nodeType":"YulIdentifier","src":"14464:6:22"},"nativeSrc":"14464:20:22","nodeType":"YulFunctionCall","src":"14464:20:22"},"nativeSrc":"14464:20:22","nodeType":"YulExpressionStatement","src":"14464:20:22"},{"nativeSrc":"14497:43:22","nodeType":"YulAssignment","src":"14497:43:22","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14526:1:22","nodeType":"YulLiteral","src":"14526:1:22","type":"","value":"0"},{"kind":"number","nativeSrc":"14529:4:22","nodeType":"YulLiteral","src":"14529:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"14516:9:22","nodeType":"YulIdentifier","src":"14516:9:22"},"nativeSrc":"14516:18:22","nodeType":"YulFunctionCall","src":"14516:18:22"},{"name":"pos","nativeSrc":"14536:3:22","nodeType":"YulIdentifier","src":"14536:3:22"}],"functionName":{"name":"add","nativeSrc":"14512:3:22","nodeType":"YulIdentifier","src":"14512:3:22"},"nativeSrc":"14512:28:22","nodeType":"YulFunctionCall","src":"14512:28:22"},"variableNames":[{"name":"result.slot","nativeSrc":"14497:11:22","nodeType":"YulIdentifier","src":"14497:11:22"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":8696,"isOffset":false,"isSlot":false,"src":"14536:3:22","valueSize":1},{"declaration":8700,"isOffset":false,"isSlot":true,"src":"14497:11:22","suffix":"slot","valueSize":1},{"declaration":8694,"isOffset":false,"isSlot":true,"src":"14474:9:22","suffix":"slot","valueSize":1}],"id":8702,"nodeType":"InlineAssembly","src":"14441:109:22"}]},"documentation":{"id":8690,"nodeType":"StructuredDocumentation","src":"14154:132:22","text":" @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds."},"id":8704,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeAccess","nameLocation":"14300:13:22","nodeType":"FunctionDefinition","parameters":{"id":8697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8694,"mutability":"mutable","name":"self","nameLocation":"14347:4:22","nodeType":"VariableDeclaration","scope":8704,"src":"14323:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"},"typeName":{"baseType":{"id":8692,"nodeType":"UserDefinedTypeName","pathNode":{"id":8691,"name":"Checkpoint208","nameLocations":["14323:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"14323:13:22"},"referencedDeclaration":8190,"src":"14323:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"id":8693,"nodeType":"ArrayTypeName","src":"14323:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint208_$8190_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint208[]"}},"visibility":"internal"},{"constant":false,"id":8696,"mutability":"mutable","name":"pos","nameLocation":"14369:3:22","nodeType":"VariableDeclaration","scope":8704,"src":"14361:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8695,"name":"uint256","nodeType":"ElementaryTypeName","src":"14361:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14313:65:22"},"returnParameters":{"id":8701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8700,"mutability":"mutable","name":"result","nameLocation":"14423:6:22","nodeType":"VariableDeclaration","scope":8704,"src":"14401:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"},"typeName":{"id":8699,"nodeType":"UserDefinedTypeName","pathNode":{"id":8698,"name":"Checkpoint208","nameLocations":["14401:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8190,"src":"14401:13:22"},"referencedDeclaration":8190,"src":"14401:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint208_$8190_storage_ptr","typeString":"struct Checkpoints.Checkpoint208"}},"visibility":"internal"}],"src":"14400:30:22"},"scope":9229,"src":"14291:265:22","stateMutability":"pure","virtual":false,"visibility":"private"},{"canonicalName":"Checkpoints.Trace160","id":8709,"members":[{"constant":false,"id":8708,"mutability":"mutable","name":"_checkpoints","nameLocation":"14604:12:22","nodeType":"VariableDeclaration","scope":8709,"src":"14588:28:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"},"typeName":{"baseType":{"id":8706,"nodeType":"UserDefinedTypeName","pathNode":{"id":8705,"name":"Checkpoint160","nameLocations":["14588:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"14588:13:22"},"referencedDeclaration":8714,"src":"14588:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"id":8707,"nodeType":"ArrayTypeName","src":"14588:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"}},"visibility":"internal"}],"name":"Trace160","nameLocation":"14569:8:22","nodeType":"StructDefinition","scope":9229,"src":"14562:61:22","visibility":"public"},{"canonicalName":"Checkpoints.Checkpoint160","id":8714,"members":[{"constant":false,"id":8711,"mutability":"mutable","name":"_key","nameLocation":"14667:4:22","nodeType":"VariableDeclaration","scope":8714,"src":"14660:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":8710,"name":"uint96","nodeType":"ElementaryTypeName","src":"14660:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":8713,"mutability":"mutable","name":"_value","nameLocation":"14689:6:22","nodeType":"VariableDeclaration","scope":8714,"src":"14681:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8712,"name":"uint160","nodeType":"ElementaryTypeName","src":"14681:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"Checkpoint160","nameLocation":"14636:13:22","nodeType":"StructDefinition","scope":9229,"src":"14629:73:22","visibility":"public"},{"body":{"id":8736,"nodeType":"Block","src":"15163:62:22","statements":[{"expression":{"arguments":[{"expression":{"id":8730,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8718,"src":"15188:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15193:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"15188:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"id":8732,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8720,"src":"15207:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":8733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8722,"src":"15212:5:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":8729,"name":"_insert","nodeType":"Identifier","overloadedDeclarations":[8061,8585,9109],"referencedDeclaration":9109,"src":"15180:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint96_$_t_uint160_$returns$_t_uint160_$_t_uint160_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint96,uint160) returns (uint160,uint160)"}},"id":8734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15180:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"functionReturnParameters":8728,"id":8735,"nodeType":"Return","src":"15173:45:22"}]},"documentation":{"id":8715,"nodeType":"StructuredDocumentation","src":"14708:302:22","text":" @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n Returns previous value and new value.\n IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\n library."},"id":8737,"implemented":true,"kind":"function","modifiers":[],"name":"push","nameLocation":"15024:4:22","nodeType":"FunctionDefinition","parameters":{"id":8723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8718,"mutability":"mutable","name":"self","nameLocation":"15055:4:22","nodeType":"VariableDeclaration","scope":8737,"src":"15038:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8717,"nodeType":"UserDefinedTypeName","pathNode":{"id":8716,"name":"Trace160","nameLocations":["15038:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"15038:8:22"},"referencedDeclaration":8709,"src":"15038:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"},{"constant":false,"id":8720,"mutability":"mutable","name":"key","nameLocation":"15076:3:22","nodeType":"VariableDeclaration","scope":8737,"src":"15069:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":8719,"name":"uint96","nodeType":"ElementaryTypeName","src":"15069:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":8722,"mutability":"mutable","name":"value","nameLocation":"15097:5:22","nodeType":"VariableDeclaration","scope":8737,"src":"15089:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8721,"name":"uint160","nodeType":"ElementaryTypeName","src":"15089:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"15028:80:22"},"returnParameters":{"id":8728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8725,"mutability":"mutable","name":"oldValue","nameLocation":"15135:8:22","nodeType":"VariableDeclaration","scope":8737,"src":"15127:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8724,"name":"uint160","nodeType":"ElementaryTypeName","src":"15127:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":8727,"mutability":"mutable","name":"newValue","nameLocation":"15153:8:22","nodeType":"VariableDeclaration","scope":8737,"src":"15145:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8726,"name":"uint160","nodeType":"ElementaryTypeName","src":"15145:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"15126:36:22"},"scope":9229,"src":"15015:210:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":8776,"nodeType":"Block","src":"15478:207:22","statements":[{"assignments":[8749],"declarations":[{"constant":false,"id":8749,"mutability":"mutable","name":"len","nameLocation":"15496:3:22","nodeType":"VariableDeclaration","scope":8776,"src":"15488:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8748,"name":"uint256","nodeType":"ElementaryTypeName","src":"15488:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8753,"initialValue":{"expression":{"expression":{"id":8750,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8741,"src":"15502:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15507:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"15502:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":8752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15520:6:22","memberName":"length","nodeType":"MemberAccess","src":"15502:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15488:38:22"},{"assignments":[8755],"declarations":[{"constant":false,"id":8755,"mutability":"mutable","name":"pos","nameLocation":"15544:3:22","nodeType":"VariableDeclaration","scope":8776,"src":"15536:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8754,"name":"uint256","nodeType":"ElementaryTypeName","src":"15536:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8763,"initialValue":{"arguments":[{"expression":{"id":8757,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8741,"src":"15569:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15574:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"15569:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"id":8759,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8743,"src":"15588:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"30","id":8760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15593:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":8761,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8749,"src":"15596:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8756,"name":"_lowerBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8165,8689,9213],"referencedDeclaration":9213,"src":"15550:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint96_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint96,uint256,uint256) view returns (uint256)"}},"id":8762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15550:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15536:64:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8764,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8755,"src":"15617:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":8765,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8749,"src":"15624:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15617:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8769,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8741,"src":"15648:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8770,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15653:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"15648:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"id":8771,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8755,"src":"15667:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8768,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"15634:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":8772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15634:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8773,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15672:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"15634:44:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":8774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15617:61:22","trueExpression":{"hexValue":"30","id":8767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15630:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":8747,"id":8775,"nodeType":"Return","src":"15610:68:22"}]},"documentation":{"id":8738,"nodeType":"StructuredDocumentation","src":"15231:154:22","text":" @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n there is none."},"id":8777,"implemented":true,"kind":"function","modifiers":[],"name":"lowerLookup","nameLocation":"15399:11:22","nodeType":"FunctionDefinition","parameters":{"id":8744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8741,"mutability":"mutable","name":"self","nameLocation":"15428:4:22","nodeType":"VariableDeclaration","scope":8777,"src":"15411:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8740,"nodeType":"UserDefinedTypeName","pathNode":{"id":8739,"name":"Trace160","nameLocations":["15411:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"15411:8:22"},"referencedDeclaration":8709,"src":"15411:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"},{"constant":false,"id":8743,"mutability":"mutable","name":"key","nameLocation":"15441:3:22","nodeType":"VariableDeclaration","scope":8777,"src":"15434:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":8742,"name":"uint96","nodeType":"ElementaryTypeName","src":"15434:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"15410:35:22"},"returnParameters":{"id":8747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8777,"src":"15469:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8745,"name":"uint160","nodeType":"ElementaryTypeName","src":"15469:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"15468:9:22"},"scope":9229,"src":"15390:295:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8818,"nodeType":"Block","src":"15940:209:22","statements":[{"assignments":[8789],"declarations":[{"constant":false,"id":8789,"mutability":"mutable","name":"len","nameLocation":"15958:3:22","nodeType":"VariableDeclaration","scope":8818,"src":"15950:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8788,"name":"uint256","nodeType":"ElementaryTypeName","src":"15950:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8793,"initialValue":{"expression":{"expression":{"id":8790,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8781,"src":"15964:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8791,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15969:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"15964:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":8792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15982:6:22","memberName":"length","nodeType":"MemberAccess","src":"15964:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15950:38:22"},{"assignments":[8795],"declarations":[{"constant":false,"id":8795,"mutability":"mutable","name":"pos","nameLocation":"16006:3:22","nodeType":"VariableDeclaration","scope":8818,"src":"15998:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8794,"name":"uint256","nodeType":"ElementaryTypeName","src":"15998:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8803,"initialValue":{"arguments":[{"expression":{"id":8797,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8781,"src":"16031:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16036:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"16031:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"id":8799,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"16050:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"30","id":8800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16055:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":8801,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8789,"src":"16058:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8796,"name":"_upperBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8113,8637,9161],"referencedDeclaration":9161,"src":"16012:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint96_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint96,uint256,uint256) view returns (uint256)"}},"id":8802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16012:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15998:64:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8804,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8795,"src":"16079:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16086:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16079:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8809,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8781,"src":"16108:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8810,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16113:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"16108:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8811,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8795,"src":"16127:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16133:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16127:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8808,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"16094:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":8814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16094:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16136:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"16094:48:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":8816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"16079:63:22","trueExpression":{"hexValue":"30","id":8807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16090:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":8787,"id":8817,"nodeType":"Return","src":"16072:70:22"}]},"documentation":{"id":8778,"nodeType":"StructuredDocumentation","src":"15691:156:22","text":" @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n if there is none."},"id":8819,"implemented":true,"kind":"function","modifiers":[],"name":"upperLookup","nameLocation":"15861:11:22","nodeType":"FunctionDefinition","parameters":{"id":8784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8781,"mutability":"mutable","name":"self","nameLocation":"15890:4:22","nodeType":"VariableDeclaration","scope":8819,"src":"15873:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8780,"nodeType":"UserDefinedTypeName","pathNode":{"id":8779,"name":"Trace160","nameLocations":["15873:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"15873:8:22"},"referencedDeclaration":8709,"src":"15873:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"},{"constant":false,"id":8783,"mutability":"mutable","name":"key","nameLocation":"15903:3:22","nodeType":"VariableDeclaration","scope":8819,"src":"15896:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":8782,"name":"uint96","nodeType":"ElementaryTypeName","src":"15896:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"15872:35:22"},"returnParameters":{"id":8787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8819,"src":"15931:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8785,"name":"uint160","nodeType":"ElementaryTypeName","src":"15931:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"15930:9:22"},"scope":9229,"src":"15852:297:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8903,"nodeType":"Block","src":"16548:512:22","statements":[{"assignments":[8831],"declarations":[{"constant":false,"id":8831,"mutability":"mutable","name":"len","nameLocation":"16566:3:22","nodeType":"VariableDeclaration","scope":8903,"src":"16558:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8830,"name":"uint256","nodeType":"ElementaryTypeName","src":"16558:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8835,"initialValue":{"expression":{"expression":{"id":8832,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8823,"src":"16572:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16577:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"16572:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":8834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16590:6:22","memberName":"length","nodeType":"MemberAccess","src":"16572:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16558:38:22"},{"assignments":[8837],"declarations":[{"constant":false,"id":8837,"mutability":"mutable","name":"low","nameLocation":"16615:3:22","nodeType":"VariableDeclaration","scope":8903,"src":"16607:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8836,"name":"uint256","nodeType":"ElementaryTypeName","src":"16607:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8839,"initialValue":{"hexValue":"30","id":8838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16621:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16607:15:22"},{"assignments":[8841],"declarations":[{"constant":false,"id":8841,"mutability":"mutable","name":"high","nameLocation":"16640:4:22","nodeType":"VariableDeclaration","scope":8903,"src":"16632:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8840,"name":"uint256","nodeType":"ElementaryTypeName","src":"16632:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8843,"initialValue":{"id":8842,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8831,"src":"16647:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16632:18:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8844,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8831,"src":"16665:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"35","id":8845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16671:1:22","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"16665:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8878,"nodeType":"IfStatement","src":"16661:234:22","trueBody":{"id":8877,"nodeType":"Block","src":"16674:221:22","statements":[{"assignments":[8848],"declarations":[{"constant":false,"id":8848,"mutability":"mutable","name":"mid","nameLocation":"16696:3:22","nodeType":"VariableDeclaration","scope":8877,"src":"16688:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8847,"name":"uint256","nodeType":"ElementaryTypeName","src":"16688:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8855,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8849,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8831,"src":"16702:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":8852,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8831,"src":"16718:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8850,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"16708:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":8851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16713:4:22","memberName":"sqrt","nodeType":"MemberAccess","referencedDeclaration":5283,"src":"16708:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":8853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16708:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16702:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16688:34:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":8863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8856,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8825,"src":"16740:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"expression":{"id":8858,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8823,"src":"16760:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8859,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16765:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"16760:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"id":8860,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8848,"src":"16779:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8857,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"16746:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":8861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16746:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16784:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8711,"src":"16746:42:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"16740:48:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8875,"nodeType":"Block","src":"16839:46:22","statements":[{"expression":{"id":8873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8869,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8837,"src":"16857:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8870,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8848,"src":"16863:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":8871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16869:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"16863:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16857:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8874,"nodeType":"ExpressionStatement","src":"16857:13:22"}]},"id":8876,"nodeType":"IfStatement","src":"16736:149:22","trueBody":{"id":8868,"nodeType":"Block","src":"16790:43:22","statements":[{"expression":{"id":8866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8864,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8841,"src":"16808:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8865,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8848,"src":"16815:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16808:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8867,"nodeType":"ExpressionStatement","src":"16808:10:22"}]}}]}},{"assignments":[8880],"declarations":[{"constant":false,"id":8880,"mutability":"mutable","name":"pos","nameLocation":"16913:3:22","nodeType":"VariableDeclaration","scope":8903,"src":"16905:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8879,"name":"uint256","nodeType":"ElementaryTypeName","src":"16905:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8888,"initialValue":{"arguments":[{"expression":{"id":8882,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8823,"src":"16938:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8883,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16943:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"16938:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"id":8884,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8825,"src":"16957:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":8885,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8837,"src":"16962:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8886,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8841,"src":"16967:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8881,"name":"_upperBinaryLookup","nodeType":"Identifier","overloadedDeclarations":[8113,8637,9161],"referencedDeclaration":9161,"src":"16919:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint96_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint96,uint256,uint256) view returns (uint256)"}},"id":8887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16919:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16905:67:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8889,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8880,"src":"16990:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16997:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16990:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8894,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8823,"src":"17019:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8895,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17024:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"17019:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8896,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8880,"src":"17038:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17044:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"17038:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8893,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"17005:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":8899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17005:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8900,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17047:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"17005:48:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":8901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"16990:63:22","trueExpression":{"hexValue":"30","id":8892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17001:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":8829,"id":8902,"nodeType":"Return","src":"16983:70:22"}]},"documentation":{"id":8820,"nodeType":"StructuredDocumentation","src":"16155:294:22","text":" @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n if there is none.\n NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n keys)."},"id":8904,"implemented":true,"kind":"function","modifiers":[],"name":"upperLookupRecent","nameLocation":"16463:17:22","nodeType":"FunctionDefinition","parameters":{"id":8826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8823,"mutability":"mutable","name":"self","nameLocation":"16498:4:22","nodeType":"VariableDeclaration","scope":8904,"src":"16481:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8822,"nodeType":"UserDefinedTypeName","pathNode":{"id":8821,"name":"Trace160","nameLocations":["16481:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"16481:8:22"},"referencedDeclaration":8709,"src":"16481:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"},{"constant":false,"id":8825,"mutability":"mutable","name":"key","nameLocation":"16511:3:22","nodeType":"VariableDeclaration","scope":8904,"src":"16504:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":8824,"name":"uint96","nodeType":"ElementaryTypeName","src":"16504:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"16480:35:22"},"returnParameters":{"id":8829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8904,"src":"16539:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8827,"name":"uint160","nodeType":"ElementaryTypeName","src":"16539:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"16538:9:22"},"scope":9229,"src":"16454:606:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8933,"nodeType":"Block","src":"17251:135:22","statements":[{"assignments":[8914],"declarations":[{"constant":false,"id":8914,"mutability":"mutable","name":"pos","nameLocation":"17269:3:22","nodeType":"VariableDeclaration","scope":8933,"src":"17261:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8913,"name":"uint256","nodeType":"ElementaryTypeName","src":"17261:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8918,"initialValue":{"expression":{"expression":{"id":8915,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8908,"src":"17275:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17280:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"17275:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":8917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17293:6:22","memberName":"length","nodeType":"MemberAccess","src":"17275:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17261:38:22"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8919,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8914,"src":"17316:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17323:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17316:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"arguments":[{"expression":{"id":8924,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8908,"src":"17345:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8925,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17350:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"17345:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8926,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8914,"src":"17364:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17370:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"17364:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8923,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"17331:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":8929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17331:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17373:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"17331:48:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":8931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"17316:63:22","trueExpression":{"hexValue":"30","id":8922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17327:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":8912,"id":8932,"nodeType":"Return","src":"17309:70:22"}]},"documentation":{"id":8905,"nodeType":"StructuredDocumentation","src":"17066:109:22","text":" @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints."},"id":8934,"implemented":true,"kind":"function","modifiers":[],"name":"latest","nameLocation":"17189:6:22","nodeType":"FunctionDefinition","parameters":{"id":8909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8908,"mutability":"mutable","name":"self","nameLocation":"17213:4:22","nodeType":"VariableDeclaration","scope":8934,"src":"17196:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8907,"nodeType":"UserDefinedTypeName","pathNode":{"id":8906,"name":"Trace160","nameLocations":["17196:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"17196:8:22"},"referencedDeclaration":8709,"src":"17196:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"}],"src":"17195:23:22"},"returnParameters":{"id":8912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8934,"src":"17242:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8910,"name":"uint160","nodeType":"ElementaryTypeName","src":"17242:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"17241:9:22"},"scope":9229,"src":"17180:206:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8982,"nodeType":"Block","src":"17679:275:22","statements":[{"assignments":[8948],"declarations":[{"constant":false,"id":8948,"mutability":"mutable","name":"pos","nameLocation":"17697:3:22","nodeType":"VariableDeclaration","scope":8982,"src":"17689:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8947,"name":"uint256","nodeType":"ElementaryTypeName","src":"17689:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8952,"initialValue":{"expression":{"expression":{"id":8949,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8938,"src":"17703:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8950,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17708:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"17703:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":8951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17721:6:22","memberName":"length","nodeType":"MemberAccess","src":"17703:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17689:38:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8953,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8948,"src":"17741:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17748:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17741:8:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8980,"nodeType":"Block","src":"17802:146:22","statements":[{"assignments":[8964],"declarations":[{"constant":false,"id":8964,"mutability":"mutable","name":"ckpt","nameLocation":"17838:4:22","nodeType":"VariableDeclaration","scope":8980,"src":"17816:26:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"},"typeName":{"id":8963,"nodeType":"UserDefinedTypeName","pathNode":{"id":8962,"name":"Checkpoint160","nameLocations":["17816:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"17816:13:22"},"referencedDeclaration":8714,"src":"17816:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"visibility":"internal"}],"id":8972,"initialValue":{"arguments":[{"expression":{"id":8966,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8938,"src":"17859:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8967,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17864:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"17859:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8968,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8948,"src":"17878:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":8969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17884:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"17878:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8965,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"17845:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":8971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17845:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"17816:70:22"},{"expression":{"components":[{"hexValue":"74727565","id":8973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17908:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"id":8974,"name":"ckpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8964,"src":"17914:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8975,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17919:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8711,"src":"17914:9:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"expression":{"id":8976,"name":"ckpt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8964,"src":"17925:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":8977,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17930:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"17925:11:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":8978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17907:30:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint96_$_t_uint160_$","typeString":"tuple(bool,uint96,uint160)"}},"functionReturnParameters":8946,"id":8979,"nodeType":"Return","src":"17900:37:22"}]},"id":8981,"nodeType":"IfStatement","src":"17737:211:22","trueBody":{"id":8961,"nodeType":"Block","src":"17751:45:22","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":8956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17773:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":8957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17780:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":8958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17783:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":8959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"17772:13:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0,int_const 0)"}},"functionReturnParameters":8946,"id":8960,"nodeType":"Return","src":"17765:20:22"}]}}]},"documentation":{"id":8935,"nodeType":"StructuredDocumentation","src":"17392:168:22","text":" @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n in the most recent checkpoint."},"id":8983,"implemented":true,"kind":"function","modifiers":[],"name":"latestCheckpoint","nameLocation":"17574:16:22","nodeType":"FunctionDefinition","parameters":{"id":8939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8938,"mutability":"mutable","name":"self","nameLocation":"17608:4:22","nodeType":"VariableDeclaration","scope":8983,"src":"17591:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8937,"nodeType":"UserDefinedTypeName","pathNode":{"id":8936,"name":"Trace160","nameLocations":["17591:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"17591:8:22"},"referencedDeclaration":8709,"src":"17591:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"}],"src":"17590:23:22"},"returnParameters":{"id":8946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8941,"mutability":"mutable","name":"exists","nameLocation":"17642:6:22","nodeType":"VariableDeclaration","scope":8983,"src":"17637:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8940,"name":"bool","nodeType":"ElementaryTypeName","src":"17637:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":8943,"mutability":"mutable","name":"_key","nameLocation":"17657:4:22","nodeType":"VariableDeclaration","scope":8983,"src":"17650:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":8942,"name":"uint96","nodeType":"ElementaryTypeName","src":"17650:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":8945,"mutability":"mutable","name":"_value","nameLocation":"17671:6:22","nodeType":"VariableDeclaration","scope":8983,"src":"17663:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":8944,"name":"uint160","nodeType":"ElementaryTypeName","src":"17663:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"17636:42:22"},"scope":9229,"src":"17565:389:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":8996,"nodeType":"Block","src":"18094:48:22","statements":[{"expression":{"expression":{"expression":{"id":8992,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8987,"src":"18111:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":8993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18116:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"18111:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":8994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18129:6:22","memberName":"length","nodeType":"MemberAccess","src":"18111:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8991,"id":8995,"nodeType":"Return","src":"18104:31:22"}]},"documentation":{"id":8984,"nodeType":"StructuredDocumentation","src":"17960:58:22","text":" @dev Returns the number of checkpoints."},"id":8997,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"18032:6:22","nodeType":"FunctionDefinition","parameters":{"id":8988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8987,"mutability":"mutable","name":"self","nameLocation":"18056:4:22","nodeType":"VariableDeclaration","scope":8997,"src":"18039:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":8986,"nodeType":"UserDefinedTypeName","pathNode":{"id":8985,"name":"Trace160","nameLocations":["18039:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"18039:8:22"},"referencedDeclaration":8709,"src":"18039:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"}],"src":"18038:23:22"},"returnParameters":{"id":8991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8997,"src":"18085:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8989,"name":"uint256","nodeType":"ElementaryTypeName","src":"18085:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18084:9:22"},"scope":9229,"src":"18023:119:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":9014,"nodeType":"Block","src":"18306:46:22","statements":[{"expression":{"baseExpression":{"expression":{"id":9009,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9001,"src":"18323:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160 storage pointer"}},"id":9010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18328:12:22","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":8708,"src":"18323:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage ref"}},"id":9012,"indexExpression":{"id":9011,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9003,"src":"18341:3:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18323:22:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage","typeString":"struct Checkpoints.Checkpoint160 storage ref"}},"functionReturnParameters":9008,"id":9013,"nodeType":"Return","src":"18316:29:22"}]},"documentation":{"id":8998,"nodeType":"StructuredDocumentation","src":"18148:61:22","text":" @dev Returns checkpoint at given position."},"id":9015,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"18223:2:22","nodeType":"FunctionDefinition","parameters":{"id":9004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9001,"mutability":"mutable","name":"self","nameLocation":"18243:4:22","nodeType":"VariableDeclaration","scope":9015,"src":"18226:21:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"},"typeName":{"id":9000,"nodeType":"UserDefinedTypeName","pathNode":{"id":8999,"name":"Trace160","nameLocations":["18226:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":8709,"src":"18226:8:22"},"referencedDeclaration":8709,"src":"18226:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_Trace160_$8709_storage_ptr","typeString":"struct Checkpoints.Trace160"}},"visibility":"internal"},{"constant":false,"id":9003,"mutability":"mutable","name":"pos","nameLocation":"18256:3:22","nodeType":"VariableDeclaration","scope":9015,"src":"18249:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9002,"name":"uint32","nodeType":"ElementaryTypeName","src":"18249:6:22","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"18225:35:22"},"returnParameters":{"id":9008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9015,"src":"18284:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_memory_ptr","typeString":"struct Checkpoints.Checkpoint160"},"typeName":{"id":9006,"nodeType":"UserDefinedTypeName","pathNode":{"id":9005,"name":"Checkpoint160","nameLocations":["18284:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"18284:13:22"},"referencedDeclaration":8714,"src":"18284:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"visibility":"internal"}],"src":"18283:22:22"},"scope":9229,"src":"18214:138:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":9108,"nodeType":"Block","src":"18685:765:22","statements":[{"assignments":[9032],"declarations":[{"constant":false,"id":9032,"mutability":"mutable","name":"pos","nameLocation":"18703:3:22","nodeType":"VariableDeclaration","scope":9108,"src":"18695:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9031,"name":"uint256","nodeType":"ElementaryTypeName","src":"18695:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9035,"initialValue":{"expression":{"id":9033,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9020,"src":"18709:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"}},"id":9034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18714:6:22","memberName":"length","nodeType":"MemberAccess","src":"18709:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18695:25:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9036,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9032,"src":"18735:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":9037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18741:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18735:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9106,"nodeType":"Block","src":"19336:108:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":9097,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9022,"src":"19381:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":9098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9024,"src":"19394:5:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":9096,"name":"Checkpoint160","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8714,"src":"19360:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"type(struct Checkpoints.Checkpoint160 storage pointer)"}},"id":9099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["19375:4:22","19386:6:22"],"names":["_key","_value"],"nodeType":"FunctionCall","src":"19360:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_memory_ptr","typeString":"struct Checkpoints.Checkpoint160 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint160_$8714_memory_ptr","typeString":"struct Checkpoints.Checkpoint160 memory"}],"expression":{"id":9093,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9020,"src":"19350:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"}},"id":9095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19355:4:22","memberName":"push","nodeType":"MemberAccess","src":"19350:9:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint160_$8714_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,struct Checkpoints.Checkpoint160 storage ref)"}},"id":9100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19350:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9101,"nodeType":"ExpressionStatement","src":"19350:52:22"},{"expression":{"components":[{"hexValue":"30","id":9102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19424:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":9103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9024,"src":"19427:5:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":9104,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19423:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_uint160_$","typeString":"tuple(int_const 0,uint160)"}},"functionReturnParameters":9030,"id":9105,"nodeType":"Return","src":"19416:17:22"}]},"id":9107,"nodeType":"IfStatement","src":"18731:713:22","trueBody":{"id":9092,"nodeType":"Block","src":"18744:586:22","statements":[{"assignments":[9041],"declarations":[{"constant":false,"id":9041,"mutability":"mutable","name":"last","nameLocation":"18780:4:22","nodeType":"VariableDeclaration","scope":9092,"src":"18758:26:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"},"typeName":{"id":9040,"nodeType":"UserDefinedTypeName","pathNode":{"id":9039,"name":"Checkpoint160","nameLocations":["18758:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"18758:13:22"},"referencedDeclaration":8714,"src":"18758:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"visibility":"internal"}],"id":9048,"initialValue":{"arguments":[{"id":9043,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9020,"src":"18801:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9044,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9032,"src":"18807:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":9045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18813:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18807:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9042,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"18787:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":9047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18787:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"18758:57:22"},{"assignments":[9050],"declarations":[{"constant":false,"id":9050,"mutability":"mutable","name":"lastKey","nameLocation":"18836:7:22","nodeType":"VariableDeclaration","scope":9092,"src":"18829:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":9049,"name":"uint96","nodeType":"ElementaryTypeName","src":"18829:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":9053,"initialValue":{"expression":{"id":9051,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9041,"src":"18846:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":9052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18851:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8711,"src":"18846:9:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"18829:26:22"},{"assignments":[9055],"declarations":[{"constant":false,"id":9055,"mutability":"mutable","name":"lastValue","nameLocation":"18877:9:22","nodeType":"VariableDeclaration","scope":9092,"src":"18869:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":9054,"name":"uint160","nodeType":"ElementaryTypeName","src":"18869:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":9058,"initialValue":{"expression":{"id":9056,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9041,"src":"18889:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":9057,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18894:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"18889:11:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"18869:31:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":9061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9059,"name":"lastKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9050,"src":"18974:7:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":9060,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9022,"src":"18984:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"18974:13:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9066,"nodeType":"IfStatement","src":"18970:89:22","trueBody":{"id":9065,"nodeType":"Block","src":"18989:70:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9062,"name":"CheckpointUnorderedInsertion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7656,"src":"19014:28:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19014:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9064,"nodeType":"RevertStatement","src":"19007:37:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":9069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9067,"name":"lastKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9050,"src":"19122:7:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":9068,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9022,"src":"19133:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"19122:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9086,"nodeType":"Block","src":"19196:85:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":9081,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9022,"src":"19245:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":9082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9024,"src":"19258:5:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":9080,"name":"Checkpoint160","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8714,"src":"19224:13:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"type(struct Checkpoints.Checkpoint160 storage pointer)"}},"id":9083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["19239:4:22","19250:6:22"],"names":["_key","_value"],"nodeType":"FunctionCall","src":"19224:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_memory_ptr","typeString":"struct Checkpoints.Checkpoint160 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint160_$8714_memory_ptr","typeString":"struct Checkpoints.Checkpoint160 memory"}],"expression":{"id":9077,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9020,"src":"19214:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"}},"id":9079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19219:4:22","memberName":"push","nodeType":"MemberAccess","src":"19214:9:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint160_$8714_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,struct Checkpoints.Checkpoint160 storage ref)"}},"id":9084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19214:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9085,"nodeType":"ExpressionStatement","src":"19214:52:22"}]},"id":9087,"nodeType":"IfStatement","src":"19118:163:22","trueBody":{"id":9076,"nodeType":"Block","src":"19138:52:22","statements":[{"expression":{"id":9074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":9070,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9041,"src":"19156:4:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":9072,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19161:6:22","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":8713,"src":"19156:11:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9024,"src":"19170:5:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"19156:19:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":9075,"nodeType":"ExpressionStatement","src":"19156:19:22"}]}},{"expression":{"components":[{"id":9088,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9055,"src":"19302:9:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":9089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9024,"src":"19313:5:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"id":9090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19301:18:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_uint160_$","typeString":"tuple(uint160,uint160)"}},"functionReturnParameters":9030,"id":9091,"nodeType":"Return","src":"19294:25:22"}]}}]},"documentation":{"id":9016,"nodeType":"StructuredDocumentation","src":"18358:165:22","text":" @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n or by updating the last one."},"id":9109,"implemented":true,"kind":"function","modifiers":[],"name":"_insert","nameLocation":"18537:7:22","nodeType":"FunctionDefinition","parameters":{"id":9025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9020,"mutability":"mutable","name":"self","nameLocation":"18578:4:22","nodeType":"VariableDeclaration","scope":9109,"src":"18554:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"},"typeName":{"baseType":{"id":9018,"nodeType":"UserDefinedTypeName","pathNode":{"id":9017,"name":"Checkpoint160","nameLocations":["18554:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"18554:13:22"},"referencedDeclaration":8714,"src":"18554:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"id":9019,"nodeType":"ArrayTypeName","src":"18554:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"}},"visibility":"internal"},{"constant":false,"id":9022,"mutability":"mutable","name":"key","nameLocation":"18599:3:22","nodeType":"VariableDeclaration","scope":9109,"src":"18592:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":9021,"name":"uint96","nodeType":"ElementaryTypeName","src":"18592:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":9024,"mutability":"mutable","name":"value","nameLocation":"18620:5:22","nodeType":"VariableDeclaration","scope":9109,"src":"18612:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":9023,"name":"uint160","nodeType":"ElementaryTypeName","src":"18612:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"18544:87:22"},"returnParameters":{"id":9030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9027,"mutability":"mutable","name":"oldValue","nameLocation":"18657:8:22","nodeType":"VariableDeclaration","scope":9109,"src":"18649:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":9026,"name":"uint160","nodeType":"ElementaryTypeName","src":"18649:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":9029,"mutability":"mutable","name":"newValue","nameLocation":"18675:8:22","nodeType":"VariableDeclaration","scope":9109,"src":"18667:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":9028,"name":"uint160","nodeType":"ElementaryTypeName","src":"18667:7:22","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"18648:36:22"},"scope":9229,"src":"18528:922:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":9160,"nodeType":"Block","src":"19966:267:22","statements":[{"body":{"id":9156,"nodeType":"Block","src":"19995:211:22","statements":[{"assignments":[9129],"declarations":[{"constant":false,"id":9129,"mutability":"mutable","name":"mid","nameLocation":"20017:3:22","nodeType":"VariableDeclaration","scope":9156,"src":"20009:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9128,"name":"uint256","nodeType":"ElementaryTypeName","src":"20009:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9135,"initialValue":{"arguments":[{"id":9132,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9118,"src":"20036:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9133,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9120,"src":"20041:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9130,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"20023:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":9131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20028:7:22","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"20023:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":9134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20023:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20009:37:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":9142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":9137,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9114,"src":"20078:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"}},{"id":9138,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9129,"src":"20084:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9136,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"20064:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":9139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20064:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":9140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20089:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8711,"src":"20064:29:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":9141,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9116,"src":"20096:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"20064:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9154,"nodeType":"Block","src":"20150:46:22","statements":[{"expression":{"id":9152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9148,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9118,"src":"20168:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9149,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9129,"src":"20174:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":9150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20180:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20174:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20168:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9153,"nodeType":"ExpressionStatement","src":"20168:13:22"}]},"id":9155,"nodeType":"IfStatement","src":"20060:136:22","trueBody":{"id":9147,"nodeType":"Block","src":"20101:43:22","statements":[{"expression":{"id":9145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9143,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9120,"src":"20119:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9144,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9129,"src":"20126:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20119:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9146,"nodeType":"ExpressionStatement","src":"20119:10:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9125,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9118,"src":"19983:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":9126,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9120,"src":"19989:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19983:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9157,"nodeType":"WhileStatement","src":"19976:230:22"},{"expression":{"id":9158,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9120,"src":"20222:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9124,"id":9159,"nodeType":"Return","src":"20215:11:22"}]},"documentation":{"id":9110,"nodeType":"StructuredDocumentation","src":"19456:339:22","text":" @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\n if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n `high`.\n WARNING: `high` should not be greater than the array's length."},"id":9161,"implemented":true,"kind":"function","modifiers":[],"name":"_upperBinaryLookup","nameLocation":"19809:18:22","nodeType":"FunctionDefinition","parameters":{"id":9121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9114,"mutability":"mutable","name":"self","nameLocation":"19861:4:22","nodeType":"VariableDeclaration","scope":9161,"src":"19837:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"},"typeName":{"baseType":{"id":9112,"nodeType":"UserDefinedTypeName","pathNode":{"id":9111,"name":"Checkpoint160","nameLocations":["19837:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"19837:13:22"},"referencedDeclaration":8714,"src":"19837:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"id":9113,"nodeType":"ArrayTypeName","src":"19837:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"}},"visibility":"internal"},{"constant":false,"id":9116,"mutability":"mutable","name":"key","nameLocation":"19882:3:22","nodeType":"VariableDeclaration","scope":9161,"src":"19875:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":9115,"name":"uint96","nodeType":"ElementaryTypeName","src":"19875:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":9118,"mutability":"mutable","name":"low","nameLocation":"19903:3:22","nodeType":"VariableDeclaration","scope":9161,"src":"19895:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9117,"name":"uint256","nodeType":"ElementaryTypeName","src":"19895:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9120,"mutability":"mutable","name":"high","nameLocation":"19924:4:22","nodeType":"VariableDeclaration","scope":9161,"src":"19916:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9119,"name":"uint256","nodeType":"ElementaryTypeName","src":"19916:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19827:107:22"},"returnParameters":{"id":9124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9161,"src":"19957:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9122,"name":"uint256","nodeType":"ElementaryTypeName","src":"19957:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19956:9:22"},"scope":9229,"src":"19800:433:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":9212,"nodeType":"Block","src":"20750:267:22","statements":[{"body":{"id":9208,"nodeType":"Block","src":"20779:211:22","statements":[{"assignments":[9181],"declarations":[{"constant":false,"id":9181,"mutability":"mutable","name":"mid","nameLocation":"20801:3:22","nodeType":"VariableDeclaration","scope":9208,"src":"20793:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9180,"name":"uint256","nodeType":"ElementaryTypeName","src":"20793:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9187,"initialValue":{"arguments":[{"id":9184,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9170,"src":"20820:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9185,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9172,"src":"20825:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9182,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"20807:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":9183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20812:7:22","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4468,"src":"20807:12:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":9186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20807:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20793:37:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":9194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":9189,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9166,"src":"20862:4:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"}},{"id":9190,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9181,"src":"20868:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage ref[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9188,"name":"_unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[8180,8704,9228],"referencedDeclaration":9228,"src":"20848:13:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Checkpoint160_$8714_storage_ptr_$","typeString":"function (struct Checkpoints.Checkpoint160 storage ref[] storage pointer,uint256) pure returns (struct Checkpoints.Checkpoint160 storage pointer)"}},"id":9191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20848:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160 storage pointer"}},"id":9192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20873:4:22","memberName":"_key","nodeType":"MemberAccess","referencedDeclaration":8711,"src":"20848:29:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":9193,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9168,"src":"20880:3:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"20848:35:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9206,"nodeType":"Block","src":"20937:43:22","statements":[{"expression":{"id":9204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9202,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9172,"src":"20955:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9203,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9181,"src":"20962:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20955:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9205,"nodeType":"ExpressionStatement","src":"20955:10:22"}]},"id":9207,"nodeType":"IfStatement","src":"20844:136:22","trueBody":{"id":9201,"nodeType":"Block","src":"20885:46:22","statements":[{"expression":{"id":9199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9195,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9170,"src":"20903:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9196,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9181,"src":"20909:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":9197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20915:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20909:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20903:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9200,"nodeType":"ExpressionStatement","src":"20903:13:22"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9177,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9170,"src":"20767:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":9178,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9172,"src":"20773:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20767:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9209,"nodeType":"WhileStatement","src":"20760:230:22"},{"expression":{"id":9210,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9172,"src":"21006:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9176,"id":9211,"nodeType":"Return","src":"20999:11:22"}]},"documentation":{"id":9162,"nodeType":"StructuredDocumentation","src":"20239:340:22","text":" @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\n if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n `high`.\n WARNING: `high` should not be greater than the array's length."},"id":9213,"implemented":true,"kind":"function","modifiers":[],"name":"_lowerBinaryLookup","nameLocation":"20593:18:22","nodeType":"FunctionDefinition","parameters":{"id":9173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9166,"mutability":"mutable","name":"self","nameLocation":"20645:4:22","nodeType":"VariableDeclaration","scope":9213,"src":"20621:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"},"typeName":{"baseType":{"id":9164,"nodeType":"UserDefinedTypeName","pathNode":{"id":9163,"name":"Checkpoint160","nameLocations":["20621:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"20621:13:22"},"referencedDeclaration":8714,"src":"20621:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"id":9165,"nodeType":"ArrayTypeName","src":"20621:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"}},"visibility":"internal"},{"constant":false,"id":9168,"mutability":"mutable","name":"key","nameLocation":"20666:3:22","nodeType":"VariableDeclaration","scope":9213,"src":"20659:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":9167,"name":"uint96","nodeType":"ElementaryTypeName","src":"20659:6:22","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":9170,"mutability":"mutable","name":"low","nameLocation":"20687:3:22","nodeType":"VariableDeclaration","scope":9213,"src":"20679:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9169,"name":"uint256","nodeType":"ElementaryTypeName","src":"20679:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9172,"mutability":"mutable","name":"high","nameLocation":"20708:4:22","nodeType":"VariableDeclaration","scope":9213,"src":"20700:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9171,"name":"uint256","nodeType":"ElementaryTypeName","src":"20700:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20611:107:22"},"returnParameters":{"id":9176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9213,"src":"20741:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9174,"name":"uint256","nodeType":"ElementaryTypeName","src":"20741:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20740:9:22"},"scope":9229,"src":"20584:433:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":9227,"nodeType":"Block","src":"21300:125:22","statements":[{"AST":{"nativeSrc":"21319:100:22","nodeType":"YulBlock","src":"21319:100:22","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21340:1:22","nodeType":"YulLiteral","src":"21340:1:22","type":"","value":"0"},{"name":"self.slot","nativeSrc":"21343:9:22","nodeType":"YulIdentifier","src":"21343:9:22"}],"functionName":{"name":"mstore","nativeSrc":"21333:6:22","nodeType":"YulIdentifier","src":"21333:6:22"},"nativeSrc":"21333:20:22","nodeType":"YulFunctionCall","src":"21333:20:22"},"nativeSrc":"21333:20:22","nodeType":"YulExpressionStatement","src":"21333:20:22"},{"nativeSrc":"21366:43:22","nodeType":"YulAssignment","src":"21366:43:22","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"21395:1:22","nodeType":"YulLiteral","src":"21395:1:22","type":"","value":"0"},{"kind":"number","nativeSrc":"21398:4:22","nodeType":"YulLiteral","src":"21398:4:22","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"21385:9:22","nodeType":"YulIdentifier","src":"21385:9:22"},"nativeSrc":"21385:18:22","nodeType":"YulFunctionCall","src":"21385:18:22"},{"name":"pos","nativeSrc":"21405:3:22","nodeType":"YulIdentifier","src":"21405:3:22"}],"functionName":{"name":"add","nativeSrc":"21381:3:22","nodeType":"YulIdentifier","src":"21381:3:22"},"nativeSrc":"21381:28:22","nodeType":"YulFunctionCall","src":"21381:28:22"},"variableNames":[{"name":"result.slot","nativeSrc":"21366:11:22","nodeType":"YulIdentifier","src":"21366:11:22"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":9220,"isOffset":false,"isSlot":false,"src":"21405:3:22","valueSize":1},{"declaration":9224,"isOffset":false,"isSlot":true,"src":"21366:11:22","suffix":"slot","valueSize":1},{"declaration":9218,"isOffset":false,"isSlot":true,"src":"21343:9:22","suffix":"slot","valueSize":1}],"id":9226,"nodeType":"InlineAssembly","src":"21310:109:22"}]},"documentation":{"id":9214,"nodeType":"StructuredDocumentation","src":"21023:132:22","text":" @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds."},"id":9228,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeAccess","nameLocation":"21169:13:22","nodeType":"FunctionDefinition","parameters":{"id":9221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9218,"mutability":"mutable","name":"self","nameLocation":"21216:4:22","nodeType":"VariableDeclaration","scope":9228,"src":"21192:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"},"typeName":{"baseType":{"id":9216,"nodeType":"UserDefinedTypeName","pathNode":{"id":9215,"name":"Checkpoint160","nameLocations":["21192:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"21192:13:22"},"referencedDeclaration":8714,"src":"21192:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"id":9217,"nodeType":"ArrayTypeName","src":"21192:15:22","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint160_$8714_storage_$dyn_storage_ptr","typeString":"struct Checkpoints.Checkpoint160[]"}},"visibility":"internal"},{"constant":false,"id":9220,"mutability":"mutable","name":"pos","nameLocation":"21238:3:22","nodeType":"VariableDeclaration","scope":9228,"src":"21230:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9219,"name":"uint256","nodeType":"ElementaryTypeName","src":"21230:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21182:65:22"},"returnParameters":{"id":9225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9224,"mutability":"mutable","name":"result","nameLocation":"21292:6:22","nodeType":"VariableDeclaration","scope":9228,"src":"21270:28:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"},"typeName":{"id":9223,"nodeType":"UserDefinedTypeName","pathNode":{"id":9222,"name":"Checkpoint160","nameLocations":["21270:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":8714,"src":"21270:13:22"},"referencedDeclaration":8714,"src":"21270:13:22","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint160_$8714_storage_ptr","typeString":"struct Checkpoints.Checkpoint160"}},"visibility":"internal"}],"src":"21269:30:22"},"scope":9229,"src":"21160:265:22","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":9230,"src":"668:20759:22","usedErrors":[7656],"usedEvents":[]}],"src":"201:21227:22"}},"@openzeppelin/contracts/utils/types/Time.sol":{"id":23,"ast":{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","exportedSymbols":{"Math":[5739],"SafeCast":[7504],"Time":[9503]},"id":9504,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":9231,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"104:24:23"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"../math/Math.sol","id":9233,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9504,"sourceUnit":5740,"src":"130:38:23","symbolAliases":[{"foreign":{"id":9232,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"138:4:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"../math/SafeCast.sol","id":9235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9504,"sourceUnit":7505,"src":"169:46:23","symbolAliases":[{"foreign":{"id":9234,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"177:8:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Time","contractDependencies":[],"contractKind":"library","documentation":{"id":9236,"nodeType":"StructuredDocumentation","src":"217:422:23","text":" @dev This library provides helpers for manipulating time-related objects.\n It uses the following types:\n - `uint48` for timepoints\n - `uint32` for durations\n While the library doesn't provide specific types for timepoints and duration, it does provide:\n - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n - additional helper functions"},"fullyImplemented":true,"id":9503,"linearizedBaseContracts":[9503],"name":"Time","nameLocation":"648:4:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":9238,"libraryName":{"id":9237,"name":"Time","nameLocations":["665:4:23"],"nodeType":"IdentifierPath","referencedDeclaration":9503,"src":"665:4:23"},"nodeType":"UsingForDirective","src":"659:17:23"},{"body":{"id":9250,"nodeType":"Block","src":"802:58:23","statements":[{"expression":{"arguments":[{"expression":{"id":9246,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"837:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"843:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"837:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9244,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"819:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":9245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"828:8:23","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":6494,"src":"819:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":9248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"819:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":9243,"id":9249,"nodeType":"Return","src":"812:41:23"}]},"documentation":{"id":9239,"nodeType":"StructuredDocumentation","src":"682:63:23","text":" @dev Get the block timestamp as a Timepoint."},"id":9251,"implemented":true,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"759:9:23","nodeType":"FunctionDefinition","parameters":{"id":9240,"nodeType":"ParameterList","parameters":[],"src":"768:2:23"},"returnParameters":{"id":9243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9251,"src":"794:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9241,"name":"uint48","nodeType":"ElementaryTypeName","src":"794:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"793:8:23"},"scope":9503,"src":"750:110:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":9263,"nodeType":"Block","src":"985:55:23","statements":[{"expression":{"arguments":[{"expression":{"id":9259,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"1020:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:6:23","memberName":"number","nodeType":"MemberAccess","src":"1020:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9257,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7504,"src":"1002:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$7504_$","typeString":"type(library SafeCast)"}},"id":9258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1011:8:23","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":6494,"src":"1002:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":9261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1002:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":9256,"id":9262,"nodeType":"Return","src":"995:38:23"}]},"documentation":{"id":9252,"nodeType":"StructuredDocumentation","src":"866:60:23","text":" @dev Get the block number as a Timepoint."},"id":9264,"implemented":true,"kind":"function","modifiers":[],"name":"blockNumber","nameLocation":"940:11:23","nodeType":"FunctionDefinition","parameters":{"id":9253,"nodeType":"ParameterList","parameters":[],"src":"951:2:23"},"returnParameters":{"id":9256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9264,"src":"977:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9254,"name":"uint48","nodeType":"ElementaryTypeName","src":"977:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"976:8:23"},"scope":9503,"src":"931:109:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"Time.Delay","id":9266,"name":"Delay","nameLocation":"2377:5:23","nodeType":"UserDefinedValueTypeDefinition","src":"2372:22:23","underlyingType":{"id":9265,"name":"uint112","nodeType":"ElementaryTypeName","src":"2386:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}},{"body":{"id":9280,"nodeType":"Block","src":"2572:44:23","statements":[{"expression":{"arguments":[{"id":9277,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9269,"src":"2600:8:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":9275,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9266,"src":"2589:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$9266_$","typeString":"type(Time.Delay)"}},"id":9276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2595:4:23","memberName":"wrap","nodeType":"MemberAccess","src":"2589:10:23","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint112_$returns$_t_userDefinedValueType$_Delay_$9266_$","typeString":"function (uint112) pure returns (Time.Delay)"}},"id":9278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"functionReturnParameters":9274,"id":9279,"nodeType":"Return","src":"2582:27:23"}]},"documentation":{"id":9267,"nodeType":"StructuredDocumentation","src":"2400:103:23","text":" @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature"},"id":9281,"implemented":true,"kind":"function","modifiers":[],"name":"toDelay","nameLocation":"2517:7:23","nodeType":"FunctionDefinition","parameters":{"id":9270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9269,"mutability":"mutable","name":"duration","nameLocation":"2532:8:23","nodeType":"VariableDeclaration","scope":9281,"src":"2525:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9268,"name":"uint32","nodeType":"ElementaryTypeName","src":"2525:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2524:17:23"},"returnParameters":{"id":9274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9281,"src":"2565:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9272,"nodeType":"UserDefinedTypeName","pathNode":{"id":9271,"name":"Delay","nameLocations":["2565:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"2565:5:23"},"referencedDeclaration":9266,"src":"2565:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"2564:7:23"},"scope":9503,"src":"2508:108:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":9318,"nodeType":"Block","src":"3016:159:23","statements":[{"expression":{"id":9303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":9296,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9290,"src":"3027:11:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9297,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9292,"src":"3040:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9298,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9294,"src":"3052:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":9299,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3026:33:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9300,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9285,"src":"3062:4:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"id":9301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3067:6:23","memberName":"unpack","nodeType":"MemberAccess","referencedDeclaration":9464,"src":"3062:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_Delay_$9266_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$9266_$","typeString":"function (Time.Delay) pure returns (uint32,uint32,uint48)"}},"id":9302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"src":"3026:49:23","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9304,"nodeType":"ExpressionStatement","src":"3026:49:23"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":9307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9305,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9294,"src":"3092:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":9306,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9287,"src":"3102:9:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"3092:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":9312,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9290,"src":"3136:11:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9313,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9292,"src":"3149:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9314,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9294,"src":"3161:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":9315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3135:33:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"id":9316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3092:76:23","trueExpression":{"components":[{"id":9308,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9292,"src":"3115:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":9309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3127:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":9310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3130:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":9311,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3114:18:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(uint32,int_const 0,int_const 0)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":9295,"id":9317,"nodeType":"Return","src":"3085:83:23"}]},"documentation":{"id":9282,"nodeType":"StructuredDocumentation","src":"2622:241:23","text":" @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered."},"id":9319,"implemented":true,"kind":"function","modifiers":[],"name":"_getFullAt","nameLocation":"2877:10:23","nodeType":"FunctionDefinition","parameters":{"id":9288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9285,"mutability":"mutable","name":"self","nameLocation":"2903:4:23","nodeType":"VariableDeclaration","scope":9319,"src":"2897:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9284,"nodeType":"UserDefinedTypeName","pathNode":{"id":9283,"name":"Delay","nameLocations":["2897:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"2897:5:23"},"referencedDeclaration":9266,"src":"2897:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":9287,"mutability":"mutable","name":"timepoint","nameLocation":"2924:9:23","nodeType":"VariableDeclaration","scope":9319,"src":"2917:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9286,"name":"uint48","nodeType":"ElementaryTypeName","src":"2917:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2887:52:23"},"returnParameters":{"id":9295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9290,"mutability":"mutable","name":"valueBefore","nameLocation":"2969:11:23","nodeType":"VariableDeclaration","scope":9319,"src":"2962:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9289,"name":"uint32","nodeType":"ElementaryTypeName","src":"2962:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9292,"mutability":"mutable","name":"valueAfter","nameLocation":"2989:10:23","nodeType":"VariableDeclaration","scope":9319,"src":"2982:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9291,"name":"uint32","nodeType":"ElementaryTypeName","src":"2982:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9294,"mutability":"mutable","name":"effect","nameLocation":"3008:6:23","nodeType":"VariableDeclaration","scope":9319,"src":"3001:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9293,"name":"uint48","nodeType":"ElementaryTypeName","src":"3001:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2961:54:23"},"scope":9503,"src":"2868:307:23","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":9338,"nodeType":"Block","src":"3499:53:23","statements":[{"expression":{"arguments":[{"id":9333,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9323,"src":"3527:4:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},{"arguments":[],"expression":{"argumentTypes":[],"id":9334,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9251,"src":"3533:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":9335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3533:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":9332,"name":"_getFullAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9319,"src":"3516:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_Delay_$9266_$_t_uint48_$returns$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"function (Time.Delay,uint48) pure returns (uint32,uint32,uint48)"}},"id":9336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3516:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":9331,"id":9337,"nodeType":"Return","src":"3509:36:23"}]},"documentation":{"id":9320,"nodeType":"StructuredDocumentation","src":"3181:207:23","text":" @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n effect timepoint is 0, then the pending value should not be considered."},"id":9339,"implemented":true,"kind":"function","modifiers":[],"name":"getFull","nameLocation":"3402:7:23","nodeType":"FunctionDefinition","parameters":{"id":9324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9323,"mutability":"mutable","name":"self","nameLocation":"3416:4:23","nodeType":"VariableDeclaration","scope":9339,"src":"3410:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9322,"nodeType":"UserDefinedTypeName","pathNode":{"id":9321,"name":"Delay","nameLocations":["3410:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"3410:5:23"},"referencedDeclaration":9266,"src":"3410:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"3409:12:23"},"returnParameters":{"id":9331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9326,"mutability":"mutable","name":"valueBefore","nameLocation":"3452:11:23","nodeType":"VariableDeclaration","scope":9339,"src":"3445:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9325,"name":"uint32","nodeType":"ElementaryTypeName","src":"3445:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9328,"mutability":"mutable","name":"valueAfter","nameLocation":"3472:10:23","nodeType":"VariableDeclaration","scope":9339,"src":"3465:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9327,"name":"uint32","nodeType":"ElementaryTypeName","src":"3465:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9330,"mutability":"mutable","name":"effect","nameLocation":"3491:6:23","nodeType":"VariableDeclaration","scope":9339,"src":"3484:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9329,"name":"uint48","nodeType":"ElementaryTypeName","src":"3484:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"3444:54:23"},"scope":9503,"src":"3393:159:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":9356,"nodeType":"Block","src":"3665:74:23","statements":[{"assignments":[9349,null,null],"declarations":[{"constant":false,"id":9349,"mutability":"mutable","name":"delay","nameLocation":"3683:5:23","nodeType":"VariableDeclaration","scope":9356,"src":"3676:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9348,"name":"uint32","nodeType":"ElementaryTypeName","src":"3676:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},null,null],"id":9353,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9350,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9343,"src":"3696:4:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"id":9351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3701:7:23","memberName":"getFull","nodeType":"MemberAccess","referencedDeclaration":9339,"src":"3696:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$9266_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$9266_$","typeString":"function (Time.Delay) view returns (uint32,uint32,uint48)"}},"id":9352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3696:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"VariableDeclarationStatement","src":"3675:35:23"},{"expression":{"id":9354,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9349,"src":"3727:5:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":9347,"id":9355,"nodeType":"Return","src":"3720:12:23"}]},"documentation":{"id":9340,"nodeType":"StructuredDocumentation","src":"3558:46:23","text":" @dev Get the current value."},"id":9357,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"3618:3:23","nodeType":"FunctionDefinition","parameters":{"id":9344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9343,"mutability":"mutable","name":"self","nameLocation":"3628:4:23","nodeType":"VariableDeclaration","scope":9357,"src":"3622:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9342,"nodeType":"UserDefinedTypeName","pathNode":{"id":9341,"name":"Delay","nameLocations":["3622:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"3622:5:23"},"referencedDeclaration":9266,"src":"3622:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"3621:12:23"},"returnParameters":{"id":9347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9357,"src":"3657:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9345,"name":"uint32","nodeType":"ElementaryTypeName","src":"3657:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3656:8:23"},"scope":9503,"src":"3609:130:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":9412,"nodeType":"Block","src":"4189:234:23","statements":[{"assignments":[9374],"declarations":[{"constant":false,"id":9374,"mutability":"mutable","name":"value","nameLocation":"4206:5:23","nodeType":"VariableDeclaration","scope":9412,"src":"4199:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9373,"name":"uint32","nodeType":"ElementaryTypeName","src":"4199:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":9378,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9375,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9361,"src":"4214:4:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"id":9376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4219:3:23","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":9357,"src":"4214:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$9266_$returns$_t_uint32_$attached_to$_t_userDefinedValueType$_Delay_$9266_$","typeString":"function (Time.Delay) view returns (uint32)"}},"id":9377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4199:25:23"},{"assignments":[9380],"declarations":[{"constant":false,"id":9380,"mutability":"mutable","name":"setback","nameLocation":"4241:7:23","nodeType":"VariableDeclaration","scope":9412,"src":"4234:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9379,"name":"uint32","nodeType":"ElementaryTypeName","src":"4234:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":9396,"initialValue":{"arguments":[{"arguments":[{"id":9385,"name":"minSetback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9365,"src":"4267:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":9388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9374,"src":"4279:5:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":9387,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9363,"src":"4287:8:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4279:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":9392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4317:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":9393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4279:39:23","trueExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":9391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9374,"src":"4298:5:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":9390,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9363,"src":"4306:8:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4298:16:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":9383,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"4258:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5739_$","typeString":"type(library Math)"}},"id":9384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4263:3:23","memberName":"max","nodeType":"MemberAccess","referencedDeclaration":4426,"src":"4258:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":9394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4258:61:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4251:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":9381,"name":"uint32","nodeType":"ElementaryTypeName","src":"4251:6:23","typeDescriptions":{}}},"id":9395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4251:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4234:86:23"},{"expression":{"id":9402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9397,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"4330:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":9401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":9398,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9251,"src":"4339:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":9399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4339:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":9400,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9380,"src":"4353:7:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4339:21:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"4330:30:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":9403,"nodeType":"ExpressionStatement","src":"4330:30:23"},{"expression":{"components":[{"arguments":[{"id":9405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9374,"src":"4383:5:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9406,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9363,"src":"4390:8:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9407,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"4400:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":9404,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9502,"src":"4378:4:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$_t_uint32_$_t_uint48_$returns$_t_userDefinedValueType$_Delay_$9266_$","typeString":"function (uint32,uint32,uint48) pure returns (Time.Delay)"}},"id":9408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4378:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},{"id":9409,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"4409:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":9410,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4377:39:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$9266_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"functionReturnParameters":9372,"id":9411,"nodeType":"Return","src":"4370:46:23"}]},"documentation":{"id":9358,"nodeType":"StructuredDocumentation","src":"3745:283:23","text":" @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n new delay becomes effective."},"id":9413,"implemented":true,"kind":"function","modifiers":[],"name":"withUpdate","nameLocation":"4042:10:23","nodeType":"FunctionDefinition","parameters":{"id":9366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9361,"mutability":"mutable","name":"self","nameLocation":"4068:4:23","nodeType":"VariableDeclaration","scope":9413,"src":"4062:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9360,"nodeType":"UserDefinedTypeName","pathNode":{"id":9359,"name":"Delay","nameLocations":["4062:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"4062:5:23"},"referencedDeclaration":9266,"src":"4062:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":9363,"mutability":"mutable","name":"newValue","nameLocation":"4089:8:23","nodeType":"VariableDeclaration","scope":9413,"src":"4082:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9362,"name":"uint32","nodeType":"ElementaryTypeName","src":"4082:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9365,"mutability":"mutable","name":"minSetback","nameLocation":"4114:10:23","nodeType":"VariableDeclaration","scope":9413,"src":"4107:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9364,"name":"uint32","nodeType":"ElementaryTypeName","src":"4107:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4052:78:23"},"returnParameters":{"id":9372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9369,"mutability":"mutable","name":"updatedDelay","nameLocation":"4160:12:23","nodeType":"VariableDeclaration","scope":9413,"src":"4154:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9368,"nodeType":"UserDefinedTypeName","pathNode":{"id":9367,"name":"Delay","nameLocations":["4154:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"4154:5:23"},"referencedDeclaration":9266,"src":"4154:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":9371,"mutability":"mutable","name":"effect","nameLocation":"4181:6:23","nodeType":"VariableDeclaration","scope":9413,"src":"4174:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9370,"name":"uint48","nodeType":"ElementaryTypeName","src":"4174:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4153:35:23"},"scope":9503,"src":"4033:390:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":9463,"nodeType":"Block","src":"4656:212:23","statements":[{"assignments":[9427],"declarations":[{"constant":false,"id":9427,"mutability":"mutable","name":"raw","nameLocation":"4674:3:23","nodeType":"VariableDeclaration","scope":9463,"src":"4666:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":9426,"name":"uint112","nodeType":"ElementaryTypeName","src":"4666:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"id":9432,"initialValue":{"arguments":[{"id":9430,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9417,"src":"4693:4:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}],"expression":{"id":9428,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9266,"src":"4680:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$9266_$","typeString":"type(Time.Delay)"}},"id":9429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4686:6:23","memberName":"unwrap","nodeType":"MemberAccess","src":"4680:12:23","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_Delay_$9266_$returns$_t_uint112_$","typeString":"function (Time.Delay) pure returns (uint112)"}},"id":9431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4680:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"VariableDeclarationStatement","src":"4666:32:23"},{"expression":{"id":9438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9433,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9422,"src":"4709:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9436,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9427,"src":"4729:3:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":9435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4722:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":9434,"name":"uint32","nodeType":"ElementaryTypeName","src":"4722:6:23","typeDescriptions":{}}},"id":9437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4722:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4709:24:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":9439,"nodeType":"ExpressionStatement","src":"4709:24:23"},{"expression":{"id":9447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9440,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9420,"src":"4743:11:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":9445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9443,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9427,"src":"4764:3:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":9444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4771:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4764:9:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":9442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4757:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":9441,"name":"uint32","nodeType":"ElementaryTypeName","src":"4757:6:23","typeDescriptions":{}}},"id":9446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4757:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4743:31:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":9448,"nodeType":"ExpressionStatement","src":"4743:31:23"},{"expression":{"id":9456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9449,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9424,"src":"4784:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":9454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9452,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9427,"src":"4800:3:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":9453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4807:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"4800:9:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":9451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4793:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":9450,"name":"uint48","nodeType":"ElementaryTypeName","src":"4793:6:23","typeDescriptions":{}}},"id":9455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"4784:26:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":9457,"nodeType":"ExpressionStatement","src":"4784:26:23"},{"expression":{"components":[{"id":9458,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9420,"src":"4829:11:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9459,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9422,"src":"4842:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":9460,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9424,"src":"4854:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":9461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4828:33:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":9425,"id":9462,"nodeType":"Return","src":"4821:40:23"}]},"documentation":{"id":9414,"nodeType":"StructuredDocumentation","src":"4429:117:23","text":" @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint)."},"id":9464,"implemented":true,"kind":"function","modifiers":[],"name":"unpack","nameLocation":"4560:6:23","nodeType":"FunctionDefinition","parameters":{"id":9418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9417,"mutability":"mutable","name":"self","nameLocation":"4573:4:23","nodeType":"VariableDeclaration","scope":9464,"src":"4567:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9416,"nodeType":"UserDefinedTypeName","pathNode":{"id":9415,"name":"Delay","nameLocations":["4567:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"4567:5:23"},"referencedDeclaration":9266,"src":"4567:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"4566:12:23"},"returnParameters":{"id":9425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9420,"mutability":"mutable","name":"valueBefore","nameLocation":"4609:11:23","nodeType":"VariableDeclaration","scope":9464,"src":"4602:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9419,"name":"uint32","nodeType":"ElementaryTypeName","src":"4602:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9422,"mutability":"mutable","name":"valueAfter","nameLocation":"4629:10:23","nodeType":"VariableDeclaration","scope":9464,"src":"4622:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9421,"name":"uint32","nodeType":"ElementaryTypeName","src":"4622:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9424,"mutability":"mutable","name":"effect","nameLocation":"4648:6:23","nodeType":"VariableDeclaration","scope":9464,"src":"4641:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9423,"name":"uint48","nodeType":"ElementaryTypeName","src":"4641:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4601:54:23"},"scope":9503,"src":"4551:317:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":9501,"nodeType":"Block","src":"5041:112:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":9498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":9493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":9484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":9481,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9471,"src":"5078:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":9480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5070:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":9479,"name":"uint112","nodeType":"ElementaryTypeName","src":"5070:7:23","typeDescriptions":{}}},"id":9482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5070:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":9483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5089:2:23","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5070:21:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"id":9485,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5069:23:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":9491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":9488,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9467,"src":"5104:11:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5096:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":9486,"name":"uint112","nodeType":"ElementaryTypeName","src":"5096:7:23","typeDescriptions":{}}},"id":9489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5096:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":9490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5120:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"5096:26:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"id":9492,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5095:28:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"5069:54:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":9496,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9469,"src":"5134:10:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5126:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":9494,"name":"uint112","nodeType":"ElementaryTypeName","src":"5126:7:23","typeDescriptions":{}}},"id":9497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5126:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"5069:76:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"expression":{"id":9477,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9266,"src":"5058:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$9266_$","typeString":"type(Time.Delay)"}},"id":9478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5064:4:23","memberName":"wrap","nodeType":"MemberAccess","src":"5058:10:23","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint112_$returns$_t_userDefinedValueType$_Delay_$9266_$","typeString":"function (uint112) pure returns (Time.Delay)"}},"id":9499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5058:88:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"functionReturnParameters":9476,"id":9500,"nodeType":"Return","src":"5051:95:23"}]},"documentation":{"id":9465,"nodeType":"StructuredDocumentation","src":"4874:64:23","text":" @dev pack the components into a Delay object."},"id":9502,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"4952:4:23","nodeType":"FunctionDefinition","parameters":{"id":9472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9467,"mutability":"mutable","name":"valueBefore","nameLocation":"4964:11:23","nodeType":"VariableDeclaration","scope":9502,"src":"4957:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9466,"name":"uint32","nodeType":"ElementaryTypeName","src":"4957:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9469,"mutability":"mutable","name":"valueAfter","nameLocation":"4984:10:23","nodeType":"VariableDeclaration","scope":9502,"src":"4977:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9468,"name":"uint32","nodeType":"ElementaryTypeName","src":"4977:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":9471,"mutability":"mutable","name":"effect","nameLocation":"5003:6:23","nodeType":"VariableDeclaration","scope":9502,"src":"4996:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9470,"name":"uint48","nodeType":"ElementaryTypeName","src":"4996:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4956:54:23"},"returnParameters":{"id":9476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9502,"src":"5034:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"},"typeName":{"id":9474,"nodeType":"UserDefinedTypeName","pathNode":{"id":9473,"name":"Delay","nameLocations":["5034:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":9266,"src":"5034:5:23"},"referencedDeclaration":9266,"src":"5034:5:23","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$9266","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"5033:7:23"},"scope":9503,"src":"4943:210:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":9504,"src":"640:4515:23","usedErrors":[],"usedEvents":[]}],"src":"104:5052:23"}},"contracts/PVMERC20Votes.sol":{"id":24,"ast":{"absolutePath":"contracts/PVMERC20Votes.sol","exportedSymbols":{"Checkpoints":[9229],"Context":[1594],"ECDSA":[3805],"EIP712":[4032],"ERC20":[1328],"ERC20Votes":[1538],"IERC20":[1406],"IERC20Errors":[718],"IERC20Metadata":[1564],"IERC5267":[650],"IERC5805":[661],"MessageHashUtils":[4118],"Nonces":[1662],"PVMERC20Votes":[9561],"SafeCast":[7504],"ShortString":[1720],"ShortStrings":[1931],"Time":[9503],"Votes":[625]},"id":9562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":9505,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol","id":9506,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9562,"sourceUnit":1539,"src":"58:71:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":9507,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9562,"sourceUnit":1329,"src":"130:55:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/governance/utils/Votes.sol","file":"@openzeppelin/contracts/governance/utils/Votes.sol","id":9508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9562,"sourceUnit":626,"src":"186:60:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","id":9509,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9562,"sourceUnit":4033,"src":"247:63:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9510,"name":"ERC20Votes","nameLocations":["338:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":1538,"src":"338:10:24"},"id":9511,"nodeType":"InheritanceSpecifier","src":"338:10:24"}],"canonicalName":"PVMERC20Votes","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":9561,"internalFunctionIDs":{"602":1,"616":2},"linearizedBaseContracts":[9561,1538,625,661,82,676,1662,4032,650,1328,718,1564,1406,1594],"name":"PVMERC20Votes","nameLocation":"321:13:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":9540,"nodeType":"Block","src":"576:49:24","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":9535,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"592:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":9536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"592:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9537,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9517,"src":"606:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9534,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"586:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":9538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"586:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9539,"nodeType":"ExpressionStatement","src":"586:32:24"}]},"id":9541,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":9524,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9513,"src":"526:4:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":9525,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9515,"src":"532:6:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":9526,"kind":"baseConstructorSpecifier","modifierName":{"id":9523,"name":"ERC20","nameLocations":["520:5:24"],"nodeType":"IdentifierPath","referencedDeclaration":1328,"src":"520:5:24"},"nodeType":"ModifierInvocation","src":"520:19:24"},{"arguments":[],"id":9528,"kind":"baseConstructorSpecifier","modifierName":{"id":9527,"name":"ERC20Votes","nameLocations":["540:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":1538,"src":"540:10:24"},"nodeType":"ModifierInvocation","src":"540:12:24"},{"arguments":[{"id":9530,"name":"name2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9519,"src":"560:5:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":9531,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9521,"src":"567:7:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":9532,"kind":"baseConstructorSpecifier","modifierName":{"id":9529,"name":"EIP712","nameLocations":["553:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4032,"src":"553:6:24"},"nodeType":"ModifierInvocation","src":"553:22:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":9522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9513,"mutability":"mutable","name":"name","nameLocation":"390:4:24","nodeType":"VariableDeclaration","scope":9541,"src":"376:18:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9512,"name":"string","nodeType":"ElementaryTypeName","src":"376:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":9515,"mutability":"mutable","name":"symbol","nameLocation":"418:6:24","nodeType":"VariableDeclaration","scope":9541,"src":"404:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9514,"name":"string","nodeType":"ElementaryTypeName","src":"404:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":9517,"mutability":"mutable","name":"totalSupply","nameLocation":"442:11:24","nodeType":"VariableDeclaration","scope":9541,"src":"434:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9516,"name":"uint256","nodeType":"ElementaryTypeName","src":"434:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9519,"mutability":"mutable","name":"name2","nameLocation":"477:5:24","nodeType":"VariableDeclaration","scope":9541,"src":"463:19:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9518,"name":"string","nodeType":"ElementaryTypeName","src":"463:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":9521,"mutability":"mutable","name":"version","nameLocation":"506:7:24","nodeType":"VariableDeclaration","scope":9541,"src":"492:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9520,"name":"string","nodeType":"ElementaryTypeName","src":"492:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"366:153:24"},"returnParameters":{"id":9533,"nodeType":"ParameterList","parameters":[],"src":"576:0:24"},"scope":9561,"src":"355:270:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1493],"body":{"id":9559,"nodeType":"Block","src":"738:48:24","statements":[{"expression":{"arguments":[{"id":9554,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9543,"src":"762:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9555,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9545,"src":"768:2:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9556,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9547,"src":"772:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9551,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"748:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PVMERC20Votes_$9561_$","typeString":"type(contract super PVMERC20Votes)"}},"id":9553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"754:7:24","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":1493,"src":"748:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":9557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"748:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9558,"nodeType":"ExpressionStatement","src":"748:31:24"}]},"id":9560,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"640:7:24","nodeType":"FunctionDefinition","overrides":{"id":9549,"nodeType":"OverrideSpecifier","overrides":[],"src":"729:8:24"},"parameters":{"id":9548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9543,"mutability":"mutable","name":"from","nameLocation":"665:4:24","nodeType":"VariableDeclaration","scope":9560,"src":"657:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9542,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9545,"mutability":"mutable","name":"to","nameLocation":"687:2:24","nodeType":"VariableDeclaration","scope":9560,"src":"679:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9544,"name":"address","nodeType":"ElementaryTypeName","src":"679:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9547,"mutability":"mutable","name":"amount","nameLocation":"707:6:24","nodeType":"VariableDeclaration","scope":9560,"src":"699:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9546,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"647:72:24"},"returnParameters":{"id":9550,"nodeType":"ParameterList","parameters":[],"src":"738:0:24"},"scope":9561,"src":"631:155:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":9562,"src":"312:476:24","usedErrors":[7,133,140,688,693,698,707,712,717,1426,1604,1728,1730,3468,3473,3478,5749,7656],"usedEvents":[16,25,630,1340,1349]}],"src":"32:757:24"}}},"contracts":{"@openzeppelin/contracts/governance/utils/IVotes.sol":{"IVotes":{"abi":[{"inputs":[{"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"VotesExpiredSignature","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousVotes","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotes","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\",\"errors\":{\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"}},\"kind\":\"dev\",\"methods\":{\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":\"IVotes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"delegate(address)":"5c19a95c","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"c3cda520","delegates(address)":"587cde1e","getPastTotalSupply(uint256)":"8e539e8c","getPastVotes(address,uint256)":"3a46b1a8","getVotes(address)":"9ab24eb0"}},"irOptimized":""}},"@openzeppelin/contracts/governance/utils/Votes.sol":{"Votes":{"abi":[{"inputs":[],"name":"CheckpointUnorderedInsertion","type":"error"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"},{"internalType":"uint48","name":"clock","type":"uint48"}],"name":"ERC5805FutureLookup","type":"error"},{"inputs":[],"name":"ERC6372InconsistentClock","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"inputs":[{"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"VotesExpiredSignature","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousVotes","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotes","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"CLOCK_MODE","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"clock","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is a base abstract contract that tracks voting units, which are a measure of voting power that can be transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative. This contract is often combined with a token contract such that voting units correspond to token units. For an example, see {ERC721Votes}. The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the cost of this history tracking optional. When using this module the derived contract must implement {_getVotingUnits} (for example, make it return {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the previous example, it would be included in {ERC721-_update}).\",\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC5805FutureLookup(uint256,uint48)\":[{\"details\":\"Lookup to future votes is not available.\"}],\"ERC6372InconsistentClock()\":[{\"details\":\"The clock was incorrectly modified.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in ERC-6372.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\"},\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"},\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/governance/utils/Votes.sol\":\"Votes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]},\"@openzeppelin/contracts/governance/utils/Votes.sol\":{\"keccak256\":\"0x3f91c79d6f55db9e4fc36e1cfe6a483a7b0f5be60fecbd979555071673746d47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b1e3c64cbeb2757a2a1a45c69f7f3984a93b0eadd1016341b64f9d94f89d7c4\",\"dweb:/ipfs/QmP1Mj14U4vMTFa2rv2nodMbWSCov2ac9Md8W2aUcgYdKX\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a\",\"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2\"]},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35\",\"dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x0c60057e7351874f086db8dc9291b7ada9ad62cb7725befd2991430d04a74572\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33cdfd1fc36410d45046f88ff9864350146b194736c32834baa38d99b843ffbe\",\"dweb:/ipfs/QmdVmqgFKjgEBURy4KUwWDA6J1LEg1BKcHcXsx4nkeHAD2\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0x93ce66a307d66cb14e95dbc8f20641cedf48b2d060bf3bda431d62a4493e6e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10d4122ee13fd8dcd2f468a86031665345d2dfdda76993d1f51201bdeb746f9d\",\"dweb:/ipfs/QmWxbbYEgyDCjwT4ZtNwujJwB4vdnR2qEKwL2Zrz9JoSDU\"]},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6\",\"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"CLOCK_MODE()":"4bf5d7e9","clock()":"91ddadf4","delegate(address)":"5c19a95c","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"c3cda520","delegates(address)":"587cde1e","eip712Domain()":"84b0196e","getPastTotalSupply(uint256)":"8e539e8c","getPastVotes(address,uint256)":"3a46b1a8","getVotes(address)":"9ab24eb0","nonces(address)":"7ecebe00"}},"irOptimized":""}},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"IERC5267":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"irOptimized":""}},"@openzeppelin/contracts/interfaces/IERC5805.sol":{"IERC5805":{"abi":[{"inputs":[{"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"VotesExpiredSignature","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousVotes","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotes","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"inputs":[],"name":"CLOCK_MODE","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"clock","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Description of the clock\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\"},\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5805.sol\":\"IERC5805\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a\",\"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2\"]},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"CLOCK_MODE()":"4bf5d7e9","clock()":"91ddadf4","delegate(address)":"5c19a95c","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"c3cda520","delegates(address)":"587cde1e","getPastTotalSupply(uint256)":"8e539e8c","getPastVotes(address,uint256)":"3a46b1a8","getVotes(address)":"9ab24eb0"}},"irOptimized":""}},"@openzeppelin/contracts/interfaces/IERC6372.sol":{"IERC6372":{"abi":[{"inputs":[],"name":"CLOCK_MODE","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"clock","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Description of the clock\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC6372.sol\":\"IERC6372\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"CLOCK_MODE()":"4bf5d7e9","clock()":"91ddadf4"}},"irOptimized":""}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{}},"irOptimized":""},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{}},"irOptimized":""},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{}},"irOptimized":""}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"irOptimized":""}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"irOptimized":""}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol":{"ERC20Votes":{"abi":[{"inputs":[],"name":"CheckpointUnorderedInsertion","type":"error"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"uint256","name":"increasedSupply","type":"uint256"},{"internalType":"uint256","name":"cap","type":"uint256"}],"name":"ERC20ExceededSafeSupply","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"},{"internalType":"uint48","name":"clock","type":"uint48"}],"name":"ERC5805FutureLookup","type":"error"},{"inputs":[],"name":"ERC6372InconsistentClock","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"inputs":[{"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"VotesExpiredSignature","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousVotes","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotes","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"CLOCK_MODE","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint32","name":"pos","type":"uint32"}],"name":"checkpoints","outputs":[{"components":[{"internalType":"uint48","name":"_key","type":"uint48"},{"internalType":"uint208","name":"_value","type":"uint208"}],"internalType":"struct Checkpoints.Checkpoint208","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"clock","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"numCheckpoints","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"struct Checkpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's, and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1. NOTE: This contract does not provide interface compatibility with Compound's COMP token. This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}. By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\",\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20ExceededSafeSupply(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded, introducing a risk of votes overflowing.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC5805FutureLookup(uint256,uint48)\":[{\"details\":\"Lookup to future votes is not available.\"}],\"ERC6372InconsistentClock()\":[{\"details\":\"The clock was incorrectly modified.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in ERC-6372.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":\"ERC20Votes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]},\"@openzeppelin/contracts/governance/utils/Votes.sol\":{\"keccak256\":\"0x3f91c79d6f55db9e4fc36e1cfe6a483a7b0f5be60fecbd979555071673746d47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b1e3c64cbeb2757a2a1a45c69f7f3984a93b0eadd1016341b64f9d94f89d7c4\",\"dweb:/ipfs/QmP1Mj14U4vMTFa2rv2nodMbWSCov2ac9Md8W2aUcgYdKX\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a\",\"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2\"]},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x62dc9346044aabf22d78541bd495aa6ca05a7f5100aed26196ba35d40b59fcb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5221df4501c74cd4493fee1a0f0788e02c4dc78c3c601e9f557f557c5a53ea92\",\"dweb:/ipfs/QmZpzyYY9dKLrgvYhXSHT93jwqb1UGvtGNMQk5dpECY5pa\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35\",\"dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x0c60057e7351874f086db8dc9291b7ada9ad62cb7725befd2991430d04a74572\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33cdfd1fc36410d45046f88ff9864350146b194736c32834baa38d99b843ffbe\",\"dweb:/ipfs/QmdVmqgFKjgEBURy4KUwWDA6J1LEg1BKcHcXsx4nkeHAD2\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0x93ce66a307d66cb14e95dbc8f20641cedf48b2d060bf3bda431d62a4493e6e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10d4122ee13fd8dcd2f468a86031665345d2dfdda76993d1f51201bdeb746f9d\",\"dweb:/ipfs/QmWxbbYEgyDCjwT4ZtNwujJwB4vdnR2qEKwL2Zrz9JoSDU\"]},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6\",\"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"CLOCK_MODE()":"4bf5d7e9","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","checkpoints(address,uint32)":"f1127ed8","clock()":"91ddadf4","decimals()":"313ce567","delegate(address)":"5c19a95c","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"c3cda520","delegates(address)":"587cde1e","eip712Domain()":"84b0196e","getPastTotalSupply(uint256)":"8e539e8c","getPastVotes(address,uint256)":"3a46b1a8","getVotes(address)":"9ab24eb0","name()":"06fdde03","nonces(address)":"7ecebe00","numCheckpoints(address)":"6fcfff45","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"irOptimized":""}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"irOptimized":""}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{}},"irOptimized":""}},"@openzeppelin/contracts/utils/Nonces.sol":{"Nonces":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"nonces(address)":"7ecebe00"}},"irOptimized":""}},"@openzeppelin/contracts/utils/Panic.sol":{"Panic":{"abi":[],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARRAY_OUT_OF_BOUNDS\":{\"details\":\"array out of bounds access\"},\"ASSERT\":{\"details\":\"used by the assert() builtin\"},\"DIVISION_BY_ZERO\":{\"details\":\"division or modulo by zero\"},\"EMPTY_ARRAY_POP\":{\"details\":\"empty array pop\"},\"ENUM_CONVERSION_ERROR\":{\"details\":\"enum conversion error\"},\"GENERIC\":{\"details\":\"generic / unspecified error\"},\"INVALID_INTERNAL_FUNCTION\":{\"details\":\"calling invalid internal function\"},\"RESOURCE_ERROR\":{\"details\":\"resource error (too large allocation or too large array)\"},\"STORAGE_ENCODING_ERROR\":{\"details\":\"invalid encoding in storage\"},\"UNDER_OVERFLOW\":{\"details\":\"arithmetic underflow or overflow\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Panic.sol\":\"Panic\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 12:\"@openzeppelin/contracts/utils/Panic.sol\"\nobject \"Panic_1714\" {\n    code {\n        {\n            /// @src 12:657:1972  \"library Panic {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Panic_1714_deployed\")\n            codecopy(_1, dataoffset(\"Panic_1714_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 12:\"@openzeppelin/contracts/utils/Panic.sol\"\n    object \"Panic_1714_deployed\" {\n        code {\n            {\n                /// @src 12:657:1972  \"library Panic {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c917cb031f32c87ff33f0c8ac99af62adcdaddf6ee68594758e4af28f145038064736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ShortStrings":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"}],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35\",\"dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 13:\"@openzeppelin/contracts/utils/ShortStrings.sol\"\nobject \"ShortStrings_1931\" {\n    code {\n        {\n            /// @src 13:1255:4301  \"library ShortStrings {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"ShortStrings_1931_deployed\")\n            codecopy(_1, dataoffset(\"ShortStrings_1931_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 13:\"@openzeppelin/contracts/utils/ShortStrings.sol\"\n    object \"ShortStrings_1931_deployed\" {\n        code {\n            {\n                /// @src 13:1255:4301  \"library ShortStrings {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122037f95a8c4f5b6a1da7c0b2b4168befee099f48b4d8ccaa23720914f5d43fefc564736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 14:\"@openzeppelin/contracts/utils/StorageSlot.sol\"\nobject \"StorageSlot_2055\" {\n    code {\n        {\n            /// @src 14:1407:4181  \"library StorageSlot {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"StorageSlot_2055_deployed\")\n            codecopy(_1, dataoffset(\"StorageSlot_2055_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 14:\"@openzeppelin/contracts/utils/StorageSlot.sol\"\n    object \"StorageSlot_2055_deployed\" {\n        code {\n            {\n                /// @src 14:1407:4181  \"library StorageSlot {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212202a12c211294a8cde5814e0ebebfc7a91ef8059c8084402720069b56ce2ba3c2164736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"},{"inputs":[],"name":"StringsInvalidAddressFormat","type":"error"},{"inputs":[],"name":"StringsInvalidChar","type":"error"}],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidAddressFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidChar\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}],\"StringsInvalidAddressFormat()\":[{\"details\":\"The string being parsed is not a properly formatted address.\"}],\"StringsInvalidChar()\":[{\"details\":\"The string being parsed contains characters that are not in scope of the given base.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 15:\"@openzeppelin/contracts/utils/Strings.sol\"\nobject \"Strings_3457\" {\n    code {\n        {\n            /// @src 15:297:19277  \"library Strings {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Strings_3457_deployed\")\n            codecopy(_1, dataoffset(\"Strings_3457_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 15:\"@openzeppelin/contracts/utils/Strings.sol\"\n    object \"Strings_3457_deployed\" {\n        code {\n            {\n                /// @src 15:297:19277  \"library Strings {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220259306a384bfc90c57a70645c65d99273d635e571da4e9878a407d34833633b164736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 16:\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\"\nobject \"ECDSA_3805\" {\n    code {\n        {\n            /// @src 16:344:7814  \"library ECDSA {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"ECDSA_3805_deployed\")\n            codecopy(_1, dataoffset(\"ECDSA_3805_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 16:\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\"\n    object \"ECDSA_3805_deployed\" {\n        code {\n            {\n                /// @src 16:344:7814  \"library ECDSA {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122080f2bc530faf478fbb8cf86f97d4f74e075b3da4447a743b3aa024946c23849464736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35\",\"dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x0c60057e7351874f086db8dc9291b7ada9ad62cb7725befd2991430d04a74572\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33cdfd1fc36410d45046f88ff9864350146b194736c32834baa38d99b843ffbe\",\"dweb:/ipfs/QmdVmqgFKjgEBURy4KUwWDA6J1LEg1BKcHcXsx4nkeHAD2\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]}},\"version\":1}","evm":{"bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"irOptimized":""}},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"MessageHashUtils":{"abi":[],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 18:\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\"\nobject \"MessageHashUtils_4118\" {\n    code {\n        {\n            /// @src 18:521:4250  \"library MessageHashUtils {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"MessageHashUtils_4118_deployed\")\n            codecopy(_1, dataoffset(\"MessageHashUtils_4118_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 18:\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\"\n    object \"MessageHashUtils_4118_deployed\" {\n        code {\n            {\n                /// @src 18:521:4250  \"library MessageHashUtils {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212208f049375983ba91fb8c9d2402b4b20936ab22be3cd963014ea1a527ca6a66a7b64736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 19:\"@openzeppelin/contracts/utils/math/Math.sol\"\nobject \"Math_5739\" {\n    code {\n        {\n            /// @src 19:281:32144  \"library Math {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Math_5739_deployed\")\n            codecopy(_1, dataoffset(\"Math_5739_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 19:\"@openzeppelin/contracts/utils/math/Math.sol\"\n    object \"Math_5739_deployed\" {\n        code {\n            {\n                /// @src 19:281:32144  \"library Math {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ee5ddd69a7c917c04bdaa27a416a75feaf9f9e03489d0860d06cfe6b963a575264736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 20:\"@openzeppelin/contracts/utils/math/SafeCast.sol\"\nobject \"SafeCast_7504\" {\n    code {\n        {\n            /// @src 20:769:34942  \"library SafeCast {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SafeCast_7504_deployed\")\n            codecopy(_1, dataoffset(\"SafeCast_7504_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 20:\"@openzeppelin/contracts/utils/math/SafeCast.sol\"\n    object \"SafeCast_7504_deployed\" {\n        code {\n            {\n                /// @src 20:769:34942  \"library SafeCast {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122024dbe81e0530c6c9465d6afa3f9b311cd4095de71ceac5f6c1cd6f7cf9e02eaa64736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 21:\"@openzeppelin/contracts/utils/math/SignedMath.sol\"\nobject \"SignedMath_7648\" {\n    code {\n        {\n            /// @src 21:258:2612  \"library SignedMath {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SignedMath_7648_deployed\")\n            codecopy(_1, dataoffset(\"SignedMath_7648_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 21:\"@openzeppelin/contracts/utils/math/SignedMath.sol\"\n    object \"SignedMath_7648_deployed\" {\n        code {\n            {\n                /// @src 21:258:2612  \"library SignedMath {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220d9dab798c31722d8f616aa3732abc8b3db47698ac32304af628dbedc99e334ab64736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/structs/Checkpoints.sol":{"Checkpoints":{"abi":[{"inputs":[],"name":"CheckpointUnorderedInsertion","type":"error"}],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library defines the `Trace*` struct, for checkpointing values as they change at different points in time, and later looking up past values by block number. See {Votes} as an example. To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new checkpoint for the current transaction block using the {push} function.\",\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":\"Checkpoints\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0x93ce66a307d66cb14e95dbc8f20641cedf48b2d060bf3bda431d62a4493e6e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10d4122ee13fd8dcd2f468a86031665345d2dfdda76993d1f51201bdeb746f9d\",\"dweb:/ipfs/QmWxbbYEgyDCjwT4ZtNwujJwB4vdnR2qEKwL2Zrz9JoSDU\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 22:\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\"\nobject \"Checkpoints_9229\" {\n    code {\n        {\n            /// @src 22:668:21427  \"library Checkpoints {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Checkpoints_9229_deployed\")\n            codecopy(_1, dataoffset(\"Checkpoints_9229_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 22:\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\"\n    object \"Checkpoints_9229_deployed\" {\n        code {\n            {\n                /// @src 22:668:21427  \"library Checkpoints {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220dbf1828bb3f982dc54173dbf0f774eb7ea8534df700302d871a1257813cdfd8b64736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"@openzeppelin/contracts/utils/types/Time.sol":{"Time":{"abi":[],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides helpers for manipulating time-related objects. It uses the following types: - `uint48` for timepoints - `uint32` for durations While the library doesn't provide specific types for timepoints and duration, it does provide: - a `Delay` type to represent duration that can be programmed to change value automatically at a given point - additional helper functions\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/types/Time.sol\":\"Time\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6\",\"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 4/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 220\n// Code size = 663 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20000]\n     5: jump @20 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30030\n    14: i32 a0 = a0 + 0\n    16: ecalli 4 // 'set_immutable_data'\n    18: jump @20\n      : @2 [@dyn 1] (gas: 71)\n    21: a1 = reverse s1\n    23: a2 = reverse s0\n    25: a3 = u64 [sp]\n    27: a3 = reverse a3\n    29: a4 = u64 [sp + 0x8]\n    32: a4 = reverse a4\n    34: u8 [a0 + 0x18] = a4\n    37: u8 [a0 + 0x10] = a3\n    40: u8 [a0 + 0x8] = a2\n    43: u8 [a0] = a1\n    45: a5 = a4 >> 0x38\n    48: u8 [a0 + 0x1f] = a5\n    51: a5 = a4 >> 0x30\n    54: u8 [a0 + 0x1e] = a5\n    57: a5 = a4 >> 0x28\n    60: u8 [a0 + 0x1d] = a5\n    63: a5 = a4 >> 0x20\n    66: u8 [a0 + 0x1c] = a5\n    69: a5 = a4 >> 0x18\n    72: u8 [a0 + 0x1b] = a5\n    75: a5 = a4 >> 0x10\n    78: u8 [a0 + 0x1a] = a5\n    81: a4 = a4 >> 0x8\n    84: u8 [a0 + 0x19] = a4\n    87: a4 = a3 >> 0x38\n    90: u8 [a0 + 0x17] = a4\n    93: a4 = a3 >> 0x30\n    96: u8 [a0 + 0x16] = a4\n    99: a4 = a3 >> 0x28\n   102: u8 [a0 + 0x15] = a4\n   105: a4 = a3 >> 0x20\n   108: u8 [a0 + 0x14] = a4\n   111: a4 = a3 >> 0x18\n   114: u8 [a0 + 0x13] = a4\n   117: a4 = a3 >> 0x10\n   120: u8 [a0 + 0x12] = a4\n   123: a3 = a3 >> 0x8\n   126: u8 [a0 + 0x11] = a3\n   129: a3 = a2 >> 0x38\n   132: u8 [a0 + 0xf] = a3\n   135: a3 = a2 >> 0x30\n   138: u8 [a0 + 0xe] = a3\n   141: a3 = a2 >> 0x28\n   144: u8 [a0 + 0xd] = a3\n   147: a3 = a2 >> 0x20\n   150: u8 [a0 + 0xc] = a3\n   153: a3 = a2 >> 0x18\n   156: u8 [a0 + 0xb] = a3\n   159: a3 = a2 >> 0x10\n   162: u8 [a0 + 0xa] = a3\n   165: a2 = a2 >> 0x8\n   168: u8 [a0 + 0x9] = a2\n   171: a2 = a1 >> 0x38\n   174: u8 [a0 + 0x7] = a2\n   177: a2 = a1 >> 0x30\n   180: u8 [a0 + 0x6] = a2\n   183: a2 = a1 >> 0x28\n   186: u8 [a0 + 0x5] = a2\n   189: a2 = a1 >> 0x20\n   192: u8 [a0 + 0x4] = a2\n   195: a2 = a1 >> 0x18\n   198: u8 [a0 + 0x3] = a2\n   201: a2 = a1 >> 0x10\n   204: u8 [a0 + 0x2] = a2\n   207: a1 = a1 >> 0x8\n   210: u8 [a0 + 0x1] = a1\n   213: ra = u64 [sp + 0x20]\n   216: s0 = u64 [sp + 0x18]\n   219: s1 = u64 [sp + 0x10]\n   222: sp = sp + 0x28\n   225: ret\n      : @3 (gas: 2)\n   227: i32 a2 = a0 >> 0x10\n   230: jump @8 if a2 != 0\n      : @4 (gas: 4)\n   233: a1 = a1 + a0\n   236: i32 a1 = a1 + 0x1f\n   239: a1 = a1 & 0xffffffffffffffe0\n   242: jump @8 if a1 >u 65536\n      : @5 (gas: 3)\n   248: a2 = 0x20008\n   253: a3 = i32 [0x20008]\n   258: jump @7 if a3 >=u a1\n      : @6 (gas: 2)\n   261: u32 [0x20008] = a1\n   266: fallthrough\n      : @7 (gas: 4)\n   267: a1 = 0x20010\n   272: i32 a0 = a0 + 0\n   274: a0 = a0 + a1\n   277: ret\n      : @8 (gas: 1)\n   279: trap\n      : @9 (gas: 6)\n   280: sp = sp + 0xfffffffffffffff0\n   283: u64 [sp + 0x8] = ra\n   286: u64 [sp] = s0\n   288: s0 = a0 & 0x1\n   291: ecalli 2 // 'call_data_size'\n   293: fallthrough\n      : @10 (gas: 2)\n   294: u32 [0x20004] = a0\n   299: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   302: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   306: ra = 6, jump @22\n      : @13 [@dyn 3] (gas: 26)\n   311: sp = sp + 0xffffffffffffffa0\n   314: u64 [sp + 0x58] = ra\n   317: u64 [sp + 0x50] = s0\n   320: u64 [sp + 0x48] = s1\n   323: s0 = sp + 0x60\n   326: sp = sp & 0xffffffffffffffe0\n   329: u64 [sp + 24] = 0\n   332: u64 [sp + 16] = 0\n   335: u64 [sp + 0] = 0x80\n   339: a0 = 0x40\n   342: a1 = sp\n   344: u64 [sp + 8] = 0\n   347: ra = 0x8\n   350: sp = sp + 0xffffffffffffffd8\n   353: u64 [sp + 0x20] = ra\n   356: u64 [sp + 0x18] = s0\n   359: u64 [sp + 0x10] = s1\n   362: a2 = u64 [a1]\n   364: u64 [sp + 0x8] = a2\n   367: a2 = u64 [a1 + 0x8]\n   370: u64 [sp] = a2\n   372: s0 = u64 [a1 + 0x10]\n   375: s1 = u64 [a1 + 0x18]\n   378: a1 = 0x20\n   381: ra = 0x2\n   384: jump @3\n      : @14 [@dyn 4] (gas: 7)\n   387: u64 [sp + 56] = 0\n   390: u64 [sp + 48] = 0\n   393: u64 [sp + 40] = 0\n   396: u64 [sp + 32] = 0\n   399: i32 a0 = sp + 0x20\n   402: ecalli 5 // 'value_transferred'\n   404: fallthrough\n      : @15 (gas: 8)\n   405: a0 = u64 [sp + 0x30]\n   408: a1 = u64 [sp + 0x38]\n   411: a2 = u64 [sp + 0x28]\n   414: a3 = u64 [sp + 0x20]\n   417: a1 = a1 | a2\n   420: a0 = a0 | a3\n   423: a0 = a0 | a1\n   426: jump @17 if a0 == 0\n      : @16 (gas: 7)\n   429: a1 = 0x20010\n   434: i32 a1 = a1 + 0\n   436: a0 = 0x1\n   439: a2 = 0\n   441: ra = 0xc\n   444: ecalli 3 // 'seal_return'\n   446: jump @22\n      : @17 (gas: 2)\n   449: a1 = i32 [0x20008]\n   454: jump @19 if a1 >u 127\n      : @18 (gas: 2)\n   458: u32 [0x20008] = 0x80\n   465: fallthrough\n      : @19 (gas: 26)\n   466: a0 = 0x20010\n   471: i32 a0 = a0 + 0x80\n   475: a1 = 0\n   477: a2 = 0\n   479: ecalli 1 // 'call_data_copy'\n   481: s1 = 0x30010\n   486: i32 a0 = s1 + 0\n   488: ecalli 0 // 'address'\n   489: a0 = u64 [0x30018]\n   494: a1 = i32 [0x30020]\n   499: a2 = u64 [0x30010]\n   504: a0 = reverse a0\n   506: a3 = a0 << 0x20\n   509: a1 = reverse a1\n   511: a1 = a1 >> 0x20\n   514: a1 = a1 | a3\n   517: a0 = a0 >> 0x20\n   520: a2 = reverse a2\n   522: a4 = a2 << 0x20\n   525: a0 = a0 | a4\n   528: a2 = a2 >> 0x20\n   531: u64 [0x30048] = 0\n   536: u64 [0x30040] = a2\n   541: u64 [0x30038] = a0\n   546: u64 [0x30030] = a1\n   551: jump @0\n      : @20 (gas: 3)\n   554: a0 = 0x80\n   558: a1 = 0\n   560: ra = 10, jump @3\n      : @21 [@dyn 5] (gas: 6)\n   565: i32 a1 = a0 + 0\n   567: a0 = 0\n   569: a2 = 0\n   571: ra = 0xc\n   574: ecalli 3 // 'seal_return'\n   576: fallthrough\n      : @22 [@dyn 6] (gas: 10)\n   577: sp = sp + 0xfffffffffffffff8\n   580: u64 [sp] = ra\n   582: a1 = 0x20010\n   587: i32 a1 = a1 + 0\n   589: a0 = 0x1\n   592: a2 = 0\n   594: ecalli 3 // 'seal_return'\n   596: a0 = 0\n   598: ra = 0xe\n   601: jump @9\n      : @23 [export #0: 'call'] (gas: 2)\n   604: a0 = 0\n   606: ra = 14, jump @9\n      : @24 [@dyn 7] [export #1: 'deploy'] (gas: 2)\n   611: a0 = 0x1\n   614: ra = 16, jump @9\n      : @25 [@dyn 8] (gas: 16)\n   619: a4 = u64 [a3]\n   621: u64 [sp + 0x18] = a4\n   624: a4 = u64 [a3 + 0x8]\n   627: u64 [sp + 0x20] = a4\n   630: a4 = u64 [a3 + 0x10]\n   633: u64 [sp + 0x28] = a4\n   636: a3 = u64 [a3 + 0x18]\n   639: u64 [sp + 0x30] = a3\n   642: s1 = u64 [a2]\n   644: a3 = u64 [a2 + 0x8]\n   647: u64 [sp] = a3\n   649: a3 = u64 [a2 + 0x10]\n   652: u64 [sp + 0x8] = a3\n   655: a2 = u64 [a2 + 0x18]\n   658: u64 [sp + 0x10] = a2\n   661: jump [t0]\n","bytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"deployedBytecode":{"object":"50564d00009d03000000000000010700c15000c00080030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102825c0463616c6c8263066465706c6f790682fe0802829715003201370183013502410263026b02390800000251082502330730000383770a042818026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832008b7910520931c8780883881f8488e05638000001253309080002390a080002ae8a093d080800020133081000028377c887073200009511f07b10087b158475010a02013d07040002510507501004095010060f019511a07b10587b15507b16489515608411e04911184911104901800033074064184911083300089511d87b10207b15187b161082897b19088289087b198285108286183308203300022863ff4911384911304911284911208317200a0501821730821838821928821a20d49808d4a707d4870751071733081000028388330701330933000c0a03288300390808000256187f0c2003080002800001330710000283778000330833090a01330610000383670a3a0718000339082000033a091000036f77977a206f88988820d4a8089877206f99979b20d4b70798992021034800033e094000033e073800033e0830000328d9fd33078000330850100ab3fe83783307330933000c0a03019511f87b103308100002838833070133090a03330733000e28bffe330750100ebafe330701501010b2fe82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b191032022142a52a2529499224499224499224499224499224499224499224494a920421240ca5496948842449924849929494244992344992249452420486a8424308a5242509218444a14a532855524828499294922400"},"methodIdentifiers":{}},"irOptimized":"/// @use-src 23:\"@openzeppelin/contracts/utils/types/Time.sol\"\nobject \"Time_9503\" {\n    code {\n        {\n            /// @src 23:640:5155  \"library Time {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Time_9503_deployed\")\n            codecopy(_1, dataoffset(\"Time_9503_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 23:\"@openzeppelin/contracts/utils/types/Time.sol\"\n    object \"Time_9503_deployed\" {\n        code {\n            {\n                /// @src 23:640:5155  \"library Time {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220dcddfc134f1db78e0273bbc43a6326542a5c0a41700f22b92667686dc607e0f464736f6c634300081c0033\"\n    }\n}\n","hash":"173b0d399f1248ac064523042527c41383f3069767308e67be13a294546b6aee","factoryDependencies":{}}},"contracts/PVMERC20Votes.sol":{"PVMERC20Votes":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"string","name":"name2","type":"string"},{"internalType":"string","name":"version","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CheckpointUnorderedInsertion","type":"error"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"uint256","name":"increasedSupply","type":"uint256"},{"internalType":"uint256","name":"cap","type":"uint256"}],"name":"ERC20ExceededSafeSupply","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"},{"internalType":"uint48","name":"clock","type":"uint48"}],"name":"ERC5805FutureLookup","type":"error"},{"inputs":[],"name":"ERC6372InconsistentClock","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"currentNonce","type":"uint256"}],"name":"InvalidAccountNonce","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"inputs":[{"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"VotesExpiredSignature","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousVotes","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newVotes","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"CLOCK_MODE","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint32","name":"pos","type":"uint32"}],"name":"checkpoints","outputs":[{"components":[{"internalType":"uint48","name":"_key","type":"uint48"},{"internalType":"uint208","name":"_value","type":"uint208"}],"internalType":"struct Checkpoints.Checkpoint208","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"clock","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"timepoint","type":"uint256"}],"name":"getPastVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"numCheckpoints","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"metadata":{"llvm_arguments":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Default","level_middle_end_size":"Z"},"revive_pallet_version":null,"revive_version":"0.1.0-dev.16+commit.0421869.llvm-18.1.8","solc_metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"struct Checkpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20ExceededSafeSupply(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded, introducing a risk of votes overflowing.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC5805FutureLookup(uint256,uint48)\":[{\"details\":\"Lookup to future votes is not available.\"}],\"ERC6372InconsistentClock()\":[{\"details\":\"The clock was incorrectly modified.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in ERC-6372.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PVMERC20Votes.sol\":\"PVMERC20Votes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]},\"@openzeppelin/contracts/governance/utils/Votes.sol\":{\"keccak256\":\"0x3f91c79d6f55db9e4fc36e1cfe6a483a7b0f5be60fecbd979555071673746d47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b1e3c64cbeb2757a2a1a45c69f7f3984a93b0eadd1016341b64f9d94f89d7c4\",\"dweb:/ipfs/QmP1Mj14U4vMTFa2rv2nodMbWSCov2ac9Md8W2aUcgYdKX\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a\",\"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2\"]},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x62dc9346044aabf22d78541bd495aa6ca05a7f5100aed26196ba35d40b59fcb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5221df4501c74cd4493fee1a0f0788e02c4dc78c3c601e9f557f557c5a53ea92\",\"dweb:/ipfs/QmZpzyYY9dKLrgvYhXSHT93jwqb1UGvtGNMQk5dpECY5pa\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35\",\"dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6\",\"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x0c60057e7351874f086db8dc9291b7ada9ad62cb7725befd2991430d04a74572\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33cdfd1fc36410d45046f88ff9864350146b194736c32834baa38d99b843ffbe\",\"dweb:/ipfs/QmdVmqgFKjgEBURy4KUwWDA6J1LEg1BKcHcXsx4nkeHAD2\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0x93ce66a307d66cb14e95dbc8f20641cedf48b2d060bf3bda431d62a4493e6e8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10d4122ee13fd8dcd2f468a86031665345d2dfdda76993d1f51201bdeb746f9d\",\"dweb:/ipfs/QmWxbbYEgyDCjwT4ZtNwujJwB4vdnR2qEKwL2Zrz9JoSDU\"]},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6\",\"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza\"]},\"contracts/PVMERC20Votes.sol\":{\"keccak256\":\"0x20c3ed4b90b5b4305881624acd8df0e045fce34e6a5c257edc85e757cbad26ce\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8d5791b590276e6d2693c00d5afe4e5e8012573ce5b7022d96c343c4567e8ecc\",\"dweb:/ipfs/QmQnyeHtWX3EhRSfZHnd5CnqBLhQszNRcfiq4kbB7axfTs\"]}},\"version\":1}","solc_version":"0.8.28+commit.7893614a.Emscripten.clang"},"evm":{"assembly":"// RO data = 0/0 bytes\n// RW data = 332/66144 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 19373\n// Code size = 66745 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 7)\n   112: sp = sp + 0xffffffffffffffe8\n   115: u64 [sp + 0x10] = ra\n   118: u64 [sp + 0x8] = s0\n   121: u64 [sp] = s1\n   123: s1 = 0x20148\n   128: s0 = i32 [0x20148]\n   133: jump @18 if s0 == 0\n      : @16 (gas: 5)\n   136: a0 = 0x30180\n   141: i32 a0 = a0 + 0\n   143: i32 a1 = s1 + 0\n   145: ecalli 9 // 'get_immutable_data'\n   147: fallthrough\n      : @17 (gas: 3)\n   148: a0 = i32 [0x20148]\n   153: u32 [0x20148] = 0\n   158: jump @19 if a0 <u s0\n      : @18 (gas: 5)\n   161: ra = u64 [sp + 0x10]\n   164: s0 = u64 [sp + 0x8]\n   167: s1 = u64 [sp]\n   169: sp = sp + 0x18\n   172: ret\n      : @19 (gas: 1)\n   174: trap\n      : @20 (gas: 2)\n   175: a1 = i32 [0x20148]\n   180: jump @91 if a1 == 0\n      : @21 (gas: 4)\n   184: a0 = 0x30180\n   189: i32 a0 = a0 + 0\n   191: ecalli 17 // 'set_immutable_data'\n   193: jump @91\n      : @22 (gas: 8)\n   196: sp = sp + 0xfffffffffffffff0\n   199: u64 [sp + 0x8] = ra\n   202: u64 [sp] = s0\n   204: a2 = a1\n   206: s0 = a0\n   208: a1 = 0x20\n   211: a0 = a2\n   213: ra = 2, jump @37\n      : @23 [@dyn 1] (gas: 100)\n   218: a1 = u8 [a0 + 0x1]\n   221: a2 = u8 [a0]\n   223: a3 = u8 [a0 + 0x2]\n   226: a4 = u8 [a0 + 0x3]\n   229: a1 = a1 << 0x8\n   232: a1 = a1 | a2\n   235: a3 = a3 << 0x10\n   238: a4 = a4 << 0x18\n   241: a3 = a3 | a4\n   244: a1 = a1 | a3\n   247: a2 = u8 [a0 + 0x5]\n   250: a3 = u8 [a0 + 0x4]\n   253: a4 = u8 [a0 + 0x6]\n   256: a5 = u8 [a0 + 0x7]\n   259: a2 = a2 << 0x8\n   262: a2 = a2 | a3\n   265: a4 = a4 << 0x10\n   268: a5 = a5 << 0x18\n   271: a4 = a4 | a5\n   274: a2 = a2 | a4\n   277: a2 = a2 << 0x20\n   280: t0 = a2 | a1\n   283: a2 = u8 [a0 + 0x9]\n   286: a3 = u8 [a0 + 0x8]\n   289: a4 = u8 [a0 + 0xa]\n   292: a5 = u8 [a0 + 0xb]\n   295: a2 = a2 << 0x8\n   298: a2 = a2 | a3\n   301: a4 = a4 << 0x10\n   304: a5 = a5 << 0x18\n   307: a4 = a4 | a5\n   310: a2 = a2 | a4\n   313: a3 = u8 [a0 + 0xd]\n   316: a4 = u8 [a0 + 0xc]\n   319: a5 = u8 [a0 + 0xe]\n   322: a1 = u8 [a0 + 0xf]\n   325: a3 = a3 << 0x8\n   328: a3 = a3 | a4\n   331: a5 = a5 << 0x10\n   334: a1 = a1 << 0x18\n   337: a1 = a1 | a5\n   340: a1 = a1 | a3\n   343: a1 = a1 << 0x20\n   346: t1 = a1 | a2\n   349: a1 = u8 [a0 + 0x11]\n   352: a3 = u8 [a0 + 0x10]\n   355: a4 = u8 [a0 + 0x12]\n   358: a5 = u8 [a0 + 0x13]\n   361: a1 = a1 << 0x8\n   364: a1 = a1 | a3\n   367: a4 = a4 << 0x10\n   370: a5 = a5 << 0x18\n   373: a4 = a4 | a5\n   376: a1 = a1 | a4\n   379: a3 = u8 [a0 + 0x15]\n   382: a4 = u8 [a0 + 0x14]\n   385: a5 = u8 [a0 + 0x16]\n   388: a2 = u8 [a0 + 0x17]\n   391: a3 = a3 << 0x8\n   394: a3 = a3 | a4\n   397: a5 = a5 << 0x10\n   400: a2 = a2 << 0x18\n   403: a2 = a2 | a5\n   406: a2 = a2 | a3\n   409: a2 = a2 << 0x20\n   412: a3 = a2 | a1\n   415: a1 = u8 [a0 + 0x19]\n   418: a2 = u8 [a0 + 0x18]\n   421: a4 = u8 [a0 + 0x1a]\n   424: a5 = u8 [a0 + 0x1b]\n   427: a1 = a1 << 0x8\n   430: a1 = a1 | a2\n   433: a4 = a4 << 0x10\n   436: a5 = a5 << 0x18\n   439: a4 = a4 | a5\n   442: a1 = a1 | a4\n   445: a2 = u8 [a0 + 0x1d]\n   448: a4 = u8 [a0 + 0x1c]\n   451: a5 = u8 [a0 + 0x1e]\n   454: a0 = u8 [a0 + 0x1f]\n   457: a2 = a2 << 0x8\n   460: a2 = a2 | a4\n   463: a5 = a5 << 0x10\n   466: a0 = a0 << 0x18\n   469: a0 = a0 | a5\n   472: a0 = a0 | a2\n   475: a0 = a0 << 0x20\n   478: a0 = a0 | a1\n   481: a0 = reverse a0\n   483: a1 = reverse a3\n   485: a2 = reverse t1\n   487: a3 = reverse t0\n   489: u64 [s0 + 0x18] = a3\n   492: u64 [s0 + 0x10] = a2\n   495: u64 [s0 + 0x8] = a1\n   498: u64 [s0] = a0\n   500: ra = u64 [sp + 0x8]\n   503: s0 = u64 [sp]\n   505: sp = sp + 0x10\n   508: ret\n      : @24 (gas: 12)\n   510: sp = sp + 0xffffffffffffffd8\n   513: u64 [sp + 0x20] = ra\n   516: u64 [sp + 0x18] = s0\n   519: u64 [sp + 0x10] = s1\n   522: a2 = u64 [a1]\n   524: u64 [sp + 0x8] = a2\n   527: a2 = u64 [a1 + 0x8]\n   530: u64 [sp] = a2\n   532: s0 = u64 [a1 + 0x10]\n   535: s1 = u64 [a1 + 0x18]\n   538: a1 = 0x20\n   541: ra = 4, jump @37\n      : @25 [@dyn 2] (gas: 71)\n   546: a1 = reverse s1\n   548: a2 = reverse s0\n   550: a3 = u64 [sp]\n   552: a3 = reverse a3\n   554: a4 = u64 [sp + 0x8]\n   557: a4 = reverse a4\n   559: u8 [a0 + 0x18] = a4\n   562: u8 [a0 + 0x10] = a3\n   565: u8 [a0 + 0x8] = a2\n   568: u8 [a0] = a1\n   570: a5 = a4 >> 0x38\n   573: u8 [a0 + 0x1f] = a5\n   576: a5 = a4 >> 0x30\n   579: u8 [a0 + 0x1e] = a5\n   582: a5 = a4 >> 0x28\n   585: u8 [a0 + 0x1d] = a5\n   588: a5 = a4 >> 0x20\n   591: u8 [a0 + 0x1c] = a5\n   594: a5 = a4 >> 0x18\n   597: u8 [a0 + 0x1b] = a5\n   600: a5 = a4 >> 0x10\n   603: u8 [a0 + 0x1a] = a5\n   606: a4 = a4 >> 0x8\n   609: u8 [a0 + 0x19] = a4\n   612: a4 = a3 >> 0x38\n   615: u8 [a0 + 0x17] = a4\n   618: a4 = a3 >> 0x30\n   621: u8 [a0 + 0x16] = a4\n   624: a4 = a3 >> 0x28\n   627: u8 [a0 + 0x15] = a4\n   630: a4 = a3 >> 0x20\n   633: u8 [a0 + 0x14] = a4\n   636: a4 = a3 >> 0x18\n   639: u8 [a0 + 0x13] = a4\n   642: a4 = a3 >> 0x10\n   645: u8 [a0 + 0x12] = a4\n   648: a3 = a3 >> 0x8\n   651: u8 [a0 + 0x11] = a3\n   654: a3 = a2 >> 0x38\n   657: u8 [a0 + 0xf] = a3\n   660: a3 = a2 >> 0x30\n   663: u8 [a0 + 0xe] = a3\n   666: a3 = a2 >> 0x28\n   669: u8 [a0 + 0xd] = a3\n   672: a3 = a2 >> 0x20\n   675: u8 [a0 + 0xc] = a3\n   678: a3 = a2 >> 0x18\n   681: u8 [a0 + 0xb] = a3\n   684: a3 = a2 >> 0x10\n   687: u8 [a0 + 0xa] = a3\n   690: a2 = a2 >> 0x8\n   693: u8 [a0 + 0x9] = a2\n   696: a2 = a1 >> 0x38\n   699: u8 [a0 + 0x7] = a2\n   702: a2 = a1 >> 0x30\n   705: u8 [a0 + 0x6] = a2\n   708: a2 = a1 >> 0x28\n   711: u8 [a0 + 0x5] = a2\n   714: a2 = a1 >> 0x20\n   717: u8 [a0 + 0x4] = a2\n   720: a2 = a1 >> 0x18\n   723: u8 [a0 + 0x3] = a2\n   726: a2 = a1 >> 0x10\n   729: u8 [a0 + 0x2] = a2\n   732: a1 = a1 >> 0x8\n   735: u8 [a0 + 0x1] = a1\n   738: ra = u64 [sp + 0x20]\n   741: s0 = u64 [sp + 0x18]\n   744: s1 = u64 [sp + 0x10]\n   747: sp = sp + 0x28\n   750: ret\n      : @26 [@dyn 3] (gas: 32)\n   752: a0 = reverse a0\n   754: a2 = reverse a2\n   756: a3 = reverse a3\n   758: a1 = reverse a1\n   760: u64 [sp + 0x18] = a1\n   763: u64 [sp + 0x10] = a3\n   766: u64 [sp + 0x8] = a2\n   769: u64 [sp] = a0\n   771: u64 [sp + 56] = 0\n   774: u64 [sp + 48] = 0\n   777: u64 [sp + 40] = 0\n   780: u64 [sp + 32] = 0\n   783: u32 [sp + 64] = 0x20\n   787: i32 a1 = sp + 0\n   789: i32 a3 = sp + 0x20\n   792: i32 a4 = sp + 0x40\n   795: a2 = 0xffffffffffffffff\n   798: a0 = 0\n   800: ecalli 10 // 'get_storage'\n   802: a0 = u64 [sp + 0x38]\n   805: a1 = u64 [sp + 0x30]\n   808: a2 = u64 [sp + 0x28]\n   811: a3 = u64 [sp + 0x20]\n   814: a0 = reverse a0\n   816: a1 = reverse a1\n   818: a2 = reverse a2\n   820: a3 = reverse a3\n   822: u64 [s1 + 0x18] = a3\n   825: u64 [s1 + 0x10] = a2\n   828: u64 [s1 + 0x8] = a1\n   831: u64 [s1] = a0\n   833: t0 = 8, jump @2229\n      : @27 [@dyn 4] (gas: 1)\n   839: ret\n      : @28 (gas: 40)\n   841: sp = sp + 0xffffffffffffffa0\n   844: u64 [sp + 0x58] = ra\n   847: u64 [sp + 0x50] = s0\n   850: s0 = sp + 0x60\n   853: sp = sp & 0xffffffffffffffe0\n   856: t0 = u64 [a0]\n   858: a3 = u64 [a0 + 0x8]\n   861: a4 = u64 [a0 + 0x10]\n   864: a0 = u64 [a0 + 0x18]\n   867: t1 = u64 [a1]\n   869: a2 = u64 [a1 + 0x8]\n   872: a5 = u64 [a1 + 0x10]\n   875: a1 = u64 [a1 + 0x18]\n   878: t2 = reverse a0\n   880: a4 = reverse a4\n   882: a3 = reverse a3\n   884: a0 = reverse t0\n   886: t0 = reverse a1\n   888: a5 = reverse a5\n   890: a2 = reverse a2\n   892: a1 = reverse t1\n   894: u64 [sp + 0x18] = a0\n   897: u64 [sp + 0x10] = a3\n   900: u64 [sp + 0x8] = a4\n   903: u64 [sp] = t2\n   905: u64 [sp + 0x38] = a1\n   908: u64 [sp + 0x30] = a2\n   911: u64 [sp + 0x28] = a5\n   914: u64 [sp + 0x20] = t0\n   917: i32 a1 = sp + 0\n   919: i32 a3 = sp + 0x20\n   922: a2 = 0xffffffffffffffff\n   925: a4 = 0x20\n   928: a0 = 0\n   930: ecalli 18 // 'set_storage'\n   932: sp = s0 + 0xffffffffffffffa0\n   935: ra = u64 [sp + 0x58]\n   938: s0 = u64 [sp + 0x50]\n   941: sp = sp + 0x60\n   944: ret\n      : @29 [@dyn 5] (gas: 18)\n   946: a4 = u64 [a3]\n   948: u64 [sp + 0x38] = a4\n   951: a4 = u64 [a3 + 0x8]\n   954: u64 [sp + 0x30] = a4\n   957: a4 = u64 [a3 + 0x10]\n   960: u64 [sp + 0x28] = a4\n   963: a3 = u64 [a3 + 0x18]\n   966: u64 [sp + 0x20] = a3\n   969: a3 = u64 [a2]\n   971: u64 [sp + 0x18] = a3\n   974: a3 = u64 [a2 + 0x8]\n   977: u64 [sp + 0x10] = a3\n   980: a3 = u64 [a2 + 0x10]\n   983: u64 [sp + 0x8] = a3\n   986: a2 = u64 [a2 + 0x18]\n   989: u64 [sp] = a2\n   991: s1 = a1\n   993: ra = 12, jump @37\n      : @30 [@dyn 6] (gas: 30)\n   998: a1 = u64 [sp]\n  1000: a1 = reverse a1\n  1002: a2 = u64 [sp + 0x8]\n  1005: a2 = reverse a2\n  1007: a3 = u64 [sp + 0x10]\n  1010: a3 = reverse a3\n  1012: a4 = u64 [sp + 0x18]\n  1015: a4 = reverse a4\n  1017: u64 [sp + 0x58] = a4\n  1020: u64 [sp + 0x50] = a3\n  1023: u64 [sp + 0x48] = a2\n  1026: u64 [sp + 0x40] = a1\n  1029: a1 = u64 [sp + 0x20]\n  1032: a1 = reverse a1\n  1034: a2 = u64 [sp + 0x28]\n  1037: a2 = reverse a2\n  1039: a3 = u64 [sp + 0x30]\n  1042: a3 = reverse a3\n  1044: a4 = u64 [sp + 0x38]\n  1047: a4 = reverse a4\n  1049: u64 [sp + 0x78] = a4\n  1052: u64 [sp + 0x70] = a3\n  1055: u64 [sp + 0x68] = a2\n  1058: u64 [sp + 0x60] = a1\n  1061: i32 a2 = a0 + 0\n  1063: i32 a3 = s1 + 0\n  1065: i32 a0 = sp + 0x40\n  1068: a1 = 0x2\n  1071: ecalli 8 // 'deposit_event'\n  1073: t0 = 14, jump @2309\n      : @31 [@dyn 7] (gas: 1)\n  1079: ret\n      : @32 (gas: 15)\n  1081: sp = sp + 0xffffffffffffff20\n  1085: u64 [sp + 0xd8] = ra\n  1089: u64 [sp + 0xd0] = s0\n  1093: u64 [sp + 0xc8] = s1\n  1097: s0 = sp + 0xe0\n  1101: sp = sp & 0xffffffffffffffe0\n  1104: a5 = u64 [a4]\n  1106: u64 [sp + 0x40] = a5\n  1109: a5 = u64 [a4 + 0x8]\n  1112: u64 [sp + 0x48] = a5\n  1115: a5 = u64 [a4 + 0x10]\n  1118: u64 [sp + 0x50] = a5\n  1121: a4 = u64 [a4 + 0x18]\n  1124: u64 [sp + 0x58] = a4\n  1127: t0 = 16, jump @2293\n      : @33 [@dyn 8] (gas: 2)\n  1133: u64 [sp + 0x38] = a1\n  1136: ra = 18, jump @37\n      : @34 [@dyn 9] (gas: 46)\n  1141: a1 = reverse s1\n  1143: u64 [sp + 0x78] = a1\n  1146: a1 = u64 [sp]\n  1148: a1 = reverse a1\n  1150: u64 [sp + 0x70] = a1\n  1153: a1 = u64 [sp + 0x8]\n  1156: a1 = reverse a1\n  1158: u64 [sp + 0x68] = a1\n  1161: a1 = u64 [sp + 0x10]\n  1164: a1 = reverse a1\n  1166: u64 [sp + 0x60] = a1\n  1169: a1 = u64 [sp + 0x18]\n  1172: a1 = reverse a1\n  1174: u64 [sp + 0x98] = a1\n  1178: a1 = u64 [sp + 0x20]\n  1181: a1 = reverse a1\n  1183: u64 [sp + 0x90] = a1\n  1187: a1 = u64 [sp + 0x28]\n  1190: a1 = reverse a1\n  1192: u64 [sp + 0x88] = a1\n  1196: a1 = u64 [sp + 0x30]\n  1199: a1 = reverse a1\n  1201: u64 [sp + 0x80] = a1\n  1205: a1 = u64 [sp + 0x40]\n  1208: a1 = reverse a1\n  1210: u64 [sp + 0xb8] = a1\n  1214: a1 = u64 [sp + 0x48]\n  1217: a1 = reverse a1\n  1219: u64 [sp + 0xb0] = a1\n  1223: a1 = u64 [sp + 0x50]\n  1226: a1 = reverse a1\n  1228: u64 [sp + 0xa8] = a1\n  1232: a1 = u64 [sp + 0x58]\n  1235: a1 = reverse a1\n  1237: u64 [sp + 0xa0] = a1\n  1241: i32 a2 = a0 + 0\n  1243: a3 = i32 [sp + 0x38]\n  1246: i32 a0 = sp + 0x60\n  1249: a1 = 0x3\n  1252: ecalli 8 // 'deposit_event'\n  1254: sp = s0 + 0xffffffffffffff20\n  1258: ra = u64 [sp + 0xd8]\n  1262: s0 = u64 [sp + 0xd0]\n  1266: s1 = u64 [sp + 0xc8]\n  1270: sp = sp + 0xe0\n  1274: ret\n      : @35 [@dyn 10] (gas: 2)\n  1276: u64 [sp + 0x58] = a1\n  1279: ra = 22, jump @37\n      : @36 [@dyn 11] (gas: 58)\n  1284: a1 = reverse s1\n  1286: u64 [sp + 0x98] = a1\n  1290: a1 = u64 [sp]\n  1292: a1 = reverse a1\n  1294: u64 [sp + 0x90] = a1\n  1298: a1 = u64 [sp + 0x8]\n  1301: a1 = reverse a1\n  1303: u64 [sp + 0x88] = a1\n  1307: a1 = u64 [sp + 0x10]\n  1310: a1 = reverse a1\n  1312: u64 [sp + 0x80] = a1\n  1316: a1 = u64 [sp + 0x18]\n  1319: a1 = reverse a1\n  1321: u64 [sp + 0xb8] = a1\n  1325: a1 = u64 [sp + 0x20]\n  1328: a1 = reverse a1\n  1330: u64 [sp + 0xb0] = a1\n  1334: a1 = u64 [sp + 0x28]\n  1337: a1 = reverse a1\n  1339: u64 [sp + 0xa8] = a1\n  1343: a1 = u64 [sp + 0x30]\n  1346: a1 = reverse a1\n  1348: u64 [sp + 0xa0] = a1\n  1352: a1 = u64 [sp + 0x38]\n  1355: a1 = reverse a1\n  1357: u64 [sp + 0xd8] = a1\n  1361: a1 = u64 [sp + 0x40]\n  1364: a1 = reverse a1\n  1366: u64 [sp + 0xd0] = a1\n  1370: a1 = u64 [sp + 0x48]\n  1373: a1 = reverse a1\n  1375: u64 [sp + 0xc8] = a1\n  1379: a1 = u64 [sp + 0x50]\n  1382: a1 = reverse a1\n  1384: u64 [sp + 0xc0] = a1\n  1388: a1 = u64 [sp + 0x60]\n  1391: a1 = reverse a1\n  1393: u64 [sp + 0xf8] = a1\n  1397: a1 = u64 [sp + 0x68]\n  1400: a1 = reverse a1\n  1402: u64 [sp + 0xf0] = a1\n  1406: a1 = u64 [sp + 0x70]\n  1409: a1 = reverse a1\n  1411: u64 [sp + 0xe8] = a1\n  1415: a1 = u64 [sp + 0x78]\n  1418: a1 = reverse a1\n  1420: u64 [sp + 0xe0] = a1\n  1424: i32 a2 = a0 + 0\n  1426: a3 = i32 [sp + 0x58]\n  1429: i32 a0 = sp + 0x80\n  1433: a1 = 0x4\n  1436: ecalli 8 // 'deposit_event'\n  1438: sp = s0 + 0xfffffffffffffee0\n  1442: ra = u64 [sp + 0x118]\n  1446: s0 = u64 [sp + 0x110]\n  1450: s1 = u64 [sp + 0x108]\n  1454: sp = sp + 0x120\n  1458: ret\n      : @37 (gas: 2)\n  1460: i32 a2 = a0 >> 0x10\n  1463: jump @42 if a2 != 0\n      : @38 (gas: 4)\n  1466: a1 = a1 + a0\n  1469: i32 a1 = a1 + 0x1f\n  1472: a1 = a1 & 0xffffffffffffffe0\n  1475: jump @42 if a1 >u 65536\n      : @39 (gas: 3)\n  1481: a2 = 0x20150\n  1486: a3 = i32 [0x20150]\n  1491: jump @41 if a3 >=u a1\n      : @40 (gas: 2)\n  1494: u32 [0x20150] = a1\n  1499: fallthrough\n      : @41 (gas: 4)\n  1500: a1 = 0x20160\n  1505: i32 a0 = a0 + 0\n  1507: a0 = a0 + a1\n  1510: ret\n      : @42 (gas: 1)\n  1512: trap\n      : @43 (gas: 6)\n  1513: sp = sp + 0xfffffffffffffff0\n  1516: u64 [sp + 0x8] = ra\n  1519: u64 [sp] = s0\n  1521: s0 = a0 & 0x1\n  1524: ecalli 5 // 'call_data_size'\n  1526: fallthrough\n      : @44 (gas: 2)\n  1527: u32 [0x2014c] = a0\n  1532: jump @46 if s0 == 0\n      : @45 (gas: 1)\n  1535: ra = 24, jump @47\n      : @46 [@dyn 12] (gas: 14)\n  1539: ra = 0x1a\n  1542: sp = sp + 0xffffffffffffffa0\n  1545: u64 [sp + 0x58] = ra\n  1548: u64 [sp + 0x50] = s0\n  1551: s0 = sp + 0x60\n  1554: sp = sp & 0xffffffffffffffe0\n  1557: u64 [sp + 24] = 0\n  1560: u64 [sp + 16] = 0\n  1563: u64 [sp + 0] = 0x80\n  1567: a0 = 0x40\n  1570: a1 = sp\n  1572: u64 [sp + 8] = 0\n  1575: ra = 0x56\n  1578: jump @24\n      : @47 [@dyn 13] (gas: 15)\n  1581: sp = sp + 0xfffffffffffffb20\n  1585: a0 = sp + 0x400\n  1589: u64 [a0 + 0xd8] = ra\n  1593: u64 [a0 + 0xd0] = s0\n  1597: u64 [a0 + 0xc8] = s1\n  1601: s0 = sp + 0x4e0\n  1605: sp = sp & 0xffffffffffffffe0\n  1608: a2 = sp + 0x400\n  1612: u64 [a2 + 152] = 0\n  1616: u64 [a2 + 144] = 0\n  1620: u64 [a2 + 128] = 0x160\n  1626: a0 = 0x40\n  1629: a1 = sp + 0x480\n  1633: u64 [a2 + 136] = 0\n  1637: ra = 28, jump @24\n      : @48 [@dyn 14] (gas: 11)\n  1642: a0 = sp + 0x400\n  1646: u64 [a0 + 184] = 0\n  1650: u64 [a0 + 176] = 0\n  1654: u64 [a0 + 168] = 0\n  1658: u64 [a0 + 160] = 0\n  1662: i32 a0 = sp + 0x4a0\n  1666: ra = 0x1e\n  1669: ecalli 19 // 'value_transferred'\n  1671: a4 = sp + 0x400\n  1675: t0 = 0x20\n  1678: jump @2362\n      : @49 [@dyn 15] (gas: 2)\n  1682: a4 = sp + 0x400\n  1686: t0 = 32, jump @2362\n      : @50 [@dyn 16] (gas: 1)\n  1692: jump @76 if a0 != 0\n      : @51 (gas: 13)\n  1696: s1 = i32 [0x2014c]\n  1701: a0 = s1 << 0x20\n  1704: a1 = a0 >> 0x20\n  1707: a2 = sp + 0x400\n  1711: u64 [a2 + 120] = 0\n  1714: u64 [a2 + 112] = 0\n  1717: u64 [a2 + 104] = 0\n  1720: a0 = sp + 0x460\n  1724: u64 [sp + 0x98] = a1\n  1728: u64 [a2 + 0x60] = a1\n  1731: ra = 0x22\n  1734: t0 = 0x8e\n  1738: jump @2371\n      : @52 [@dyn 17] (gas: 3)\n  1742: a0 = 0x160\n  1746: a1 = s1\n  1748: ra = 36, jump @37\n      : @53 [@dyn 18] (gas: 5)\n  1753: i32 a0 = a0 + 0\n  1755: a1 = s1\n  1757: a2 = 0\n  1759: ecalli 3 // 'call_data_copy'\n  1761: fallthrough\n      : @54 (gas: 1)\n  1762: jump @77 if s1 <=u 159\n      : @55 (gas: 3)\n  1768: a0 = sp + 0x440\n  1772: a1 = 0x160\n  1776: ra = 38, jump @22\n      : @56 [@dyn 19] (gas: 8)\n  1781: a0 = sp + 0x400\n  1785: t0 = u64 [a0 + 0x58]\n  1788: a1 = u64 [a0 + 0x50]\n  1791: a2 = u64 [a0 + 0x48]\n  1794: a3 = a1 | t0\n  1797: a4 = a2 <u 0x1\n  1800: a4 = 0 if a3 != 0\n  1802: jump @78 if a4 == 0\n      : @57 (gas: 30)\n  1806: a4 = u64 [sp + 0x98]\n  1810: a0 = a4 + 0x160\n  1814: a3 = u64 [sp + 0x440]\n  1818: a4 = a0 <u a4\n  1821: s1 = a4\n  1823: s1 = 0 if a4 != 0\n  1825: t1 = a3 + 0x160\n  1829: a3 = t1 <u a3\n  1832: a5 = a2 + a3\n  1835: a2 = a5 <u a2\n  1838: a2 = a3 if a3 == 0\n  1841: a2 = a2 + a1\n  1844: a1 = a2 <u a1\n  1847: a3 = t0 + a1\n  1850: a1 = sp + 0x300\n  1854: u64 [a1 + 248] = 0\n  1858: u64 [sp + 0x98] = a0\n  1862: u64 [a1 + 0xe0] = a0\n  1866: u64 [sp + 0x90] = a4\n  1870: u64 [a1 + 0xe8] = a4\n  1874: a4 = sp + 0x400\n  1878: u64 [a4] = t1\n  1880: u64 [a1 + 0xf0] = s1\n  1884: u64 [a4 + 0x8] = a5\n  1887: u64 [a4 + 0x10] = a2\n  1890: a0 = sp + 0x420\n  1894: a1 = sp + 0x400\n  1898: a2 = sp + 0x3e0\n  1902: u64 [a4 + 0x18] = a3\n  1905: ra = 40, jump @159\n      : @58 [@dyn 20] (gas: 12)\n  1910: a1 = sp + 0x400\n  1914: a0 = u64 [a1 + 0x38]\n  1917: u64 [sp + 0x70] = a0\n  1920: a0 = u64 [a1 + 0x30]\n  1923: u64 [sp + 0x78] = a0\n  1926: a0 = u64 [a1 + 0x28]\n  1929: u64 [sp + 0x80] = a0\n  1933: a0 = u64 [a1 + 0x20]\n  1936: u64 [sp + 0x88] = a0\n  1940: a0 = sp + 0x3c0\n  1944: a1 = 0x180\n  1948: ra = 42, jump @22\n      : @59 [@dyn 21] (gas: 8)\n  1953: a3 = sp + 0x300\n  1957: a0 = u64 [a3 + 0xd8]\n  1961: a1 = u64 [a3 + 0xd0]\n  1965: a2 = u64 [a3 + 0xc8]\n  1969: a3 = a1 | a0\n  1972: a4 = a2 <u 0x1\n  1975: a4 = 0 if a3 != 0\n  1977: jump @79 if a4 == 0\n      : @60 (gas: 2)\n  1981: a3 = u64 [sp + 0x3c0]\n  1985: t0 = 44, jump @2237\n      : @61 [@dyn 22] (gas: 15)\n  1991: u64 [sp + 888] = 0\n  1995: a0 = u64 [sp + 0x98]\n  1999: u64 [sp + 0x360] = a0\n  2003: a0 = u64 [sp + 0x90]\n  2007: u64 [sp + 0x368] = a0\n  2011: u64 [sp + 0x380] = a4\n  2015: a4 = sp + 0x300\n  2019: u64 [a4 + 0x70] = s1\n  2022: u64 [a4 + 0x88] = a5\n  2026: u64 [a4 + 0x90] = a2\n  2030: a0 = sp + 0x3a0\n  2034: a1 = sp + 0x380\n  2038: a2 = sp + 0x360\n  2042: u64 [a4 + 0x98] = a3\n  2046: ra = 46, jump @159\n      : @62 [@dyn 23] (gas: 12)\n  2051: a1 = sp + 0x300\n  2055: a0 = u64 [a1 + 0xb8]\n  2059: u64 [sp + 0x50] = a0\n  2062: a0 = u64 [a1 + 0xb0]\n  2066: u64 [sp + 0x58] = a0\n  2069: a0 = u64 [a1 + 0xa8]\n  2073: u64 [sp + 0x60] = a0\n  2076: a0 = u64 [a1 + 0xa0]\n  2080: u64 [sp + 0x68] = a0\n  2083: a0 = sp + 0x340\n  2087: a1 = 0x1a0\n  2091: ra = 48, jump @22\n      : @63 [@dyn 24] (gas: 12)\n  2096: a1 = sp + 0x300\n  2100: a0 = u64 [a1 + 0x58]\n  2103: u64 [sp + 0x30] = a0\n  2106: a0 = u64 [a1 + 0x50]\n  2109: u64 [sp + 0x38] = a0\n  2112: a0 = u64 [a1 + 0x48]\n  2115: u64 [sp + 0x40] = a0\n  2118: a0 = u64 [a1 + 0x40]\n  2121: u64 [sp + 0x48] = a0\n  2124: a0 = sp + 0x320\n  2128: a1 = 0x1c0\n  2132: ra = 50, jump @22\n      : @64 [@dyn 25] (gas: 8)\n  2137: a3 = sp + 0x300\n  2141: a0 = u64 [a3 + 0x38]\n  2144: a1 = u64 [a3 + 0x30]\n  2147: a2 = u64 [a3 + 0x28]\n  2150: a3 = a1 | a0\n  2153: a4 = a2 <u 0x1\n  2156: a4 = 0 if a3 != 0\n  2158: jump @80 if a4 == 0\n      : @65 (gas: 2)\n  2162: a3 = u64 [sp + 0x320]\n  2166: t0 = 52, jump @2237\n      : @66 [@dyn 26] (gas: 15)\n  2172: u64 [sp + 728] = 0\n  2176: a0 = u64 [sp + 0x98]\n  2180: u64 [sp + 0x2c0] = a0\n  2184: a0 = u64 [sp + 0x90]\n  2188: u64 [sp + 0x2c8] = a0\n  2192: u64 [sp + 0x2e0] = a4\n  2196: a4 = sp + 0x200\n  2200: u64 [a4 + 0xd0] = s1\n  2204: u64 [a4 + 0xe8] = a5\n  2208: u64 [a4 + 0xf0] = a2\n  2212: a0 = sp + 0x300\n  2216: a1 = sp + 0x2e0\n  2220: a2 = sp + 0x2c0\n  2224: u64 [a4 + 0xf8] = a3\n  2228: ra = 54, jump @159\n      : @67 [@dyn 27] (gas: 12)\n  2233: a1 = sp + 0x300\n  2237: a0 = u64 [a1 + 0x18]\n  2240: u64 [sp + 0x10] = a0\n  2243: a0 = u64 [a1 + 0x10]\n  2246: u64 [sp + 0x18] = a0\n  2249: a0 = u64 [a1 + 0x8]\n  2252: u64 [sp + 0x20] = a0\n  2255: a0 = u64 [a1]\n  2257: u64 [sp + 0x28] = a0\n  2260: a0 = sp + 0x2a0\n  2264: a1 = 0x1e0\n  2268: ra = 56, jump @22\n      : @68 [@dyn 28] (gas: 8)\n  2273: a3 = sp + 0x200\n  2277: a0 = u64 [a3 + 0xb8]\n  2281: a1 = u64 [a3 + 0xb0]\n  2285: a2 = u64 [a3 + 0xa8]\n  2289: a3 = a1 | a0\n  2292: a4 = a2 <u 0x1\n  2295: a4 = 0 if a3 != 0\n  2297: jump @81 if a4 == 0\n      : @69 (gas: 2)\n  2301: a3 = u64 [sp + 0x2a0]\n  2305: t0 = 58, jump @2237\n      : @70 [@dyn 29] (gas: 15)\n  2311: u64 [sp + 600] = 0\n  2315: a0 = u64 [sp + 0x98]\n  2319: u64 [sp + 0x240] = a0\n  2323: a0 = u64 [sp + 0x90]\n  2327: u64 [sp + 0x248] = a0\n  2331: u64 [sp + 0x260] = a4\n  2335: a4 = sp + 0x200\n  2339: u64 [a4 + 0x50] = s1\n  2342: u64 [a4 + 0x68] = a5\n  2345: u64 [a4 + 0x70] = a2\n  2348: a0 = sp + 0x280\n  2352: a1 = sp + 0x260\n  2356: a2 = sp + 0x240\n  2360: u64 [a4 + 0x78] = a3\n  2363: ra = 60, jump @159\n      : @71 [@dyn 30] (gas: 47)\n  2368: s1 = sp + 0x200\n  2372: a0 = u64 [s1 + 0x80]\n  2376: a1 = u64 [s1 + 0x88]\n  2380: a2 = u64 [s1 + 0x90]\n  2384: a3 = u64 [s1 + 0x98]\n  2388: u64 [sp + 0x1b8] = a3\n  2392: u64 [sp + 0x1b0] = a2\n  2396: u64 [sp + 0x1a8] = a1\n  2400: u64 [sp + 0x1a0] = a0\n  2404: a0 = u64 [sp + 0x10]\n  2407: u64 [sp + 0x1d8] = a0\n  2411: a0 = u64 [sp + 0x18]\n  2414: u64 [sp + 0x1d0] = a0\n  2418: a0 = u64 [sp + 0x20]\n  2421: u64 [sp + 0x1c8] = a0\n  2425: a0 = u64 [sp + 0x28]\n  2428: u64 [sp + 0x1c0] = a0\n  2432: a0 = u64 [sp + 0x30]\n  2435: u64 [sp + 0x1f8] = a0\n  2439: a0 = u64 [sp + 0x38]\n  2442: u64 [sp + 0x1f0] = a0\n  2446: a0 = u64 [sp + 0x40]\n  2449: u64 [sp + 0x1e8] = a0\n  2453: a0 = u64 [sp + 0x48]\n  2456: u64 [sp + 0x1e0] = a0\n  2460: a0 = u64 [sp + 0x50]\n  2463: u64 [s1 + 0x18] = a0\n  2466: a0 = u64 [sp + 0x58]\n  2469: u64 [s1 + 0x10] = a0\n  2472: a0 = u64 [sp + 0x60]\n  2475: u64 [s1 + 0x8] = a0\n  2478: a0 = u64 [sp + 0x68]\n  2481: u64 [s1] = a0\n  2483: a0 = u64 [sp + 0x70]\n  2486: u64 [s1 + 0x38] = a0\n  2489: a0 = u64 [sp + 0x78]\n  2492: u64 [s1 + 0x30] = a0\n  2495: a0 = u64 [sp + 0x80]\n  2499: u64 [s1 + 0x28] = a0\n  2502: a0 = sp + 0x220\n  2506: a1 = sp + 0x200\n  2510: a2 = sp + 0x1e0\n  2514: a3 = sp + 0x1c0\n  2518: a4 = sp + 0x1a0\n  2522: a5 = u64 [sp + 0x88]\n  2526: u64 [s1 + 0x20] = a5\n  2529: ra = 62, jump @184\n      : @72 [@dyn 31] (gas: 3)\n  2534: a0 = sp + 0x180\n  2538: a1 = 0x40\n  2541: ra = 64, jump @22\n      : @73 [@dyn 32] (gas: 5)\n  2546: a0 = u64 [sp + 0x198]\n  2550: a1 = u64 [sp + 0x190]\n  2554: a2 = u64 [sp + 0x188]\n  2558: s1 = u64 [sp + 0x180]\n  2562: t0 = 66, jump @2243\n      : @74 [@dyn 33] (gas: 1)\n  2568: jump @82 if a0 == 0\n      : @75 (gas: 1)\n  2571: trap\n      : @76 (gas: 6)\n  2572: a1 = 0x20160\n  2577: i32 a1 = a1 + 0\n  2579: a0 = 0x1\n  2582: a2 = 0\n  2584: ecalli 16 // 'seal_return'\n  2586: jump @82\n      : @77 (gas: 6)\n  2588: a1 = 0x20160\n  2593: i32 a1 = a1 + 0\n  2595: a0 = 0x1\n  2598: a2 = 0\n  2600: ecalli 16 // 'seal_return'\n  2602: jump @82\n      : @78 (gas: 6)\n  2604: a1 = 0x20160\n  2609: i32 a1 = a1 + 0\n  2611: a0 = 0x1\n  2614: a2 = 0\n  2616: ecalli 16 // 'seal_return'\n  2618: jump @82\n      : @79 (gas: 6)\n  2620: a1 = 0x20160\n  2625: i32 a1 = a1 + 0\n  2627: a0 = 0x1\n  2630: a2 = 0\n  2632: ecalli 16 // 'seal_return'\n  2634: jump @82\n      : @80 (gas: 6)\n  2636: a1 = 0x20160\n  2641: i32 a1 = a1 + 0\n  2643: a0 = 0x1\n  2646: a2 = 0\n  2648: ecalli 16 // 'seal_return'\n  2650: jump @82\n      : @81 (gas: 6)\n  2652: a1 = 0x20160\n  2657: i32 a1 = a1 + 0\n  2659: a0 = 0x1\n  2662: a2 = 0\n  2664: ecalli 16 // 'seal_return'\n  2666: fallthrough\n      : @82 (gas: 3)\n  2667: a0 = s1\n  2669: a1 = 0\n  2671: ra = 68, jump @37\n      : @83 [@dyn 34] (gas: 7)\n  2676: i32 a0 = a0 + 0\n  2678: a1 = 0\n  2680: a2 = 0\n  2682: ecalli 3 // 'call_data_copy'\n  2684: a0 = sp + 0x160\n  2688: a1 = 0x80\n  2692: ra = 70, jump @22\n      : @84 [@dyn 35] (gas: 13)\n  2697: a0 = u64 [sp + 0x178]\n  2701: a4 = 0x30180\n  2706: u64 [sp + 0x98] = a4\n  2710: a1 = u64 [sp + 0x170]\n  2714: a2 = u64 [sp + 0x168]\n  2718: a3 = u64 [sp + 0x160]\n  2722: u64 [0x30198] = a0\n  2727: u64 [0x30190] = a1\n  2732: u64 [0x30188] = a2\n  2737: u64 [0x30180] = a3\n  2742: a0 = sp + 0x140\n  2746: a1 = 0xa0\n  2750: ra = 72, jump @22\n      : @85 [@dyn 36] (gas: 12)\n  2755: a0 = u64 [sp + 0x158]\n  2759: a1 = u64 [sp + 0x150]\n  2763: a2 = u64 [sp + 0x148]\n  2767: a3 = u64 [sp + 0x140]\n  2771: a4 = u64 [sp + 0x98]\n  2775: u64 [a4 + 0x38] = a0\n  2778: u64 [a4 + 0x30] = a1\n  2781: u64 [a4 + 0x28] = a2\n  2784: u64 [a4 + 0x20] = a3\n  2787: a0 = sp + 0x120\n  2791: a1 = 0xc0\n  2795: ra = 74, jump @22\n      : @86 [@dyn 37] (gas: 12)\n  2800: a0 = u64 [sp + 0x138]\n  2804: a1 = u64 [sp + 0x130]\n  2808: a2 = u64 [sp + 0x128]\n  2812: a3 = u64 [sp + 0x120]\n  2816: a4 = u64 [sp + 0x98]\n  2820: u64 [a4 + 0x58] = a0\n  2823: u64 [a4 + 0x50] = a1\n  2826: u64 [a4 + 0x48] = a2\n  2829: u64 [a4 + 0x40] = a3\n  2832: a0 = sp + 0x100\n  2836: a1 = 0xe0\n  2840: ra = 76, jump @22\n      : @87 [@dyn 38] (gas: 12)\n  2845: a0 = u64 [sp + 0x118]\n  2849: a1 = u64 [sp + 0x110]\n  2853: a2 = u64 [sp + 0x108]\n  2857: a3 = u64 [sp + 0x100]\n  2861: a4 = u64 [sp + 0x98]\n  2865: u64 [a4 + 0x78] = a0\n  2868: u64 [a4 + 0x70] = a1\n  2871: u64 [a4 + 0x68] = a2\n  2874: u64 [a4 + 0x60] = a3\n  2877: a0 = sp + 0xe0\n  2881: a1 = 0x100\n  2885: ra = 78, jump @22\n      : @88 [@dyn 39] (gas: 12)\n  2890: a0 = u64 [sp + 0xf8]\n  2894: a1 = u64 [sp + 0xf0]\n  2898: a2 = u64 [sp + 0xe8]\n  2902: a3 = u64 [sp + 0xe0]\n  2906: a4 = u64 [sp + 0x98]\n  2910: u64 [a4 + 0x98] = a0\n  2914: u64 [a4 + 0x90] = a1\n  2918: u64 [a4 + 0x88] = a2\n  2922: u64 [a4 + 0x80] = a3\n  2926: a0 = sp + 0xc0\n  2930: a1 = 0x120\n  2934: ra = 80, jump @22\n      : @89 [@dyn 40] (gas: 12)\n  2939: a0 = u64 [sp + 0xd8]\n  2943: a1 = u64 [sp + 0xd0]\n  2947: a2 = u64 [sp + 0xc8]\n  2951: a3 = u64 [sp + 0xc0]\n  2955: a4 = u64 [sp + 0x98]\n  2959: u64 [a4 + 0xb8] = a0\n  2963: u64 [a4 + 0xb0] = a1\n  2967: u64 [a4 + 0xa8] = a2\n  2971: u64 [a4 + 0xa0] = a3\n  2975: a0 = sp + 0xa0\n  2979: a1 = 0x140\n  2983: ra = 82, jump @22\n      : @90 [@dyn 41] (gas: 10)\n  2988: a0 = u64 [sp + 0xb8]\n  2992: a1 = u64 [sp + 0xb0]\n  2996: a2 = u64 [sp + 0xa8]\n  3000: a3 = u64 [sp + 0xa0]\n  3004: a4 = u64 [sp + 0x98]\n  3008: u64 [a4 + 0xd8] = a0\n  3012: u64 [a4 + 0xd0] = a1\n  3016: u64 [a4 + 0xc8] = a2\n  3020: u64 [a4 + 0xc0] = a3\n  3024: jump @20\n      : @91 (gas: 3)\n  3027: a0 = s1\n  3029: a1 = 0\n  3031: ra = 84, jump @37\n      : @92 [@dyn 42] (gas: 5)\n  3036: i32 a1 = a0 + 0\n  3038: a0 = 0\n  3040: a2 = 0\n  3042: ecalli 16 // 'seal_return'\n  3044: jump @82\n      : @93 [@dyn 43] (gas: 2)\n  3047: a0 = i32 [0x2014c]\n  3052: jump @137 if a0 <u 4\n      : @94 (gas: 5)\n  3057: i32 a0 = sp + 0x20\n  3060: a1 = 0\n  3062: ra = 0x58\n  3065: ecalli 4 // 'call_data_load'\n  3067: fallthrough\n      : @95 [@dyn 44] (gas: 2)\n  3068: a0 = i32 [sp + 0x3c]\n  3071: jump @129 if a0 == 2226133358\n      : @96 (gas: 2)\n  3079: a1 = 0xffffffff8e539e8c\n  3085: jump @136 if a0 == a1\n      : @97 (gas: 1)\n  3089: jump @133 if a0 == 2447224308\n      : @98 (gas: 2)\n  3097: a1 = 0xffffffff95d89b41\n  3103: jump @128 if a0 == a1\n      : @99 (gas: 2)\n  3107: a1 = 0xffffffff9ab24eb0\n  3113: jump @116 if a0 == a1\n      : @100 (gas: 1)\n  3117: jump @123 if a0 == 2835717307\n      : @101 (gas: 1)\n  3125: jump @117 if a0 == 3285034272\n      : @102 (gas: 1)\n  3133: jump @131 if a0 == 3714247998\n      : @103 (gas: 2)\n  3141: a1 = 0xfffffffff1127ed8\n  3147: jump @120 if a0 == a1\n      : @104 (gas: 2)\n  3151: a1 = 0x6fdde03\n  3157: jump @118 if a0 == a1\n      : @105 (gas: 2)\n  3161: a1 = 0x95ea7b3\n  3167: jump @134 if a0 == a1\n      : @106 (gas: 1)\n  3171: jump @121 if a0 == 404098525\n      : @107 (gas: 2)\n  3179: a1 = 0x23b872dd\n  3185: jump @135 if a0 == a1\n      : @108 (gas: 1)\n  3189: jump @125 if a0 == 826074471\n      : @109 (gas: 2)\n  3197: a1 = 0x3a46b1a8\n  3203: jump @132 if a0 == a1\n      : @110 (gas: 1)\n  3207: jump @130 if a0 == 1274402793\n      : @111 (gas: 2)\n  3215: a1 = 0x587cde1e\n  3221: jump @119 if a0 == a1\n      : @112 (gas: 1)\n  3224: jump @124 if a0 == 1545185628\n      : @113 (gas: 1)\n  3232: jump @122 if a0 == 1875902277\n      : @114 (gas: 1)\n  3240: jump @126 if a0 != 1889567281\n      : @115 (gas: 1)\n  3248: ra = 90, jump @1219\n      : @116 [@dyn 45] (gas: 1)\n  3253: ra = 92, jump @1429\n      : @117 [@dyn 46] (gas: 16)\n  3259: ra = 0x5e\n  3262: sp = sp + 0xfffffffffffffaa0\n  3266: a0 = sp + 0x500\n  3270: u64 [a0 + 0x58] = ra\n  3273: u64 [a0 + 0x50] = s0\n  3276: u64 [a0 + 0x48] = s1\n  3279: s0 = sp + 0x560\n  3283: sp = sp & 0xffffffffffffffe0\n  3286: s1 = sp\n  3288: u64 [s1 + 1272] = 0\n  3292: u64 [s1 + 1264] = 0\n  3296: u64 [s1 + 1256] = 0\n  3300: u64 [s1 + 1248] = 0\n  3304: i32 a0 = s1 + 0x4e0\n  3308: ecalli 19 // 'value_transferred'\n  3310: jump @1477\n      : @118 [@dyn 47] (gas: 3)\n  3314: ra = 0x60\n  3317: t0 = 0x442\n  3321: jump @2255\n      : @119 [@dyn 48] (gas: 3)\n  3325: ra = 0x62\n  3328: t0 = 0x590\n  3332: jump @2291\n      : @120 [@dyn 49] (gas: 11)\n  3336: ra = 0x64\n  3339: sp = sp + 0xfffffffffffffce0\n  3343: a0 = sp + 0x300\n  3347: u64 [a0 + 0x18] = ra\n  3350: u64 [a0 + 0x10] = s0\n  3353: u64 [a0 + 0x8] = s1\n  3356: s0 = sp + 0x320\n  3360: sp = sp & 0xffffffffffffffe0\n  3363: s1 = sp\n  3365: t0 = 0x770\n  3369: jump @2286\n      : @121 [@dyn 50] (gas: 1)\n  3373: ra = 102, jump @998\n      : @122 [@dyn 51] (gas: 15)\n  3378: ra = 0x68\n  3381: sp = sp + 0xfffffffffffffe40\n  3385: u64 [sp + 0x1b8] = ra\n  3389: u64 [sp + 0x1b0] = s0\n  3393: u64 [sp + 0x1a8] = s1\n  3397: s0 = sp + 0x1c0\n  3401: sp = sp & 0xffffffffffffffe0\n  3404: s1 = sp\n  3406: u64 [s1 + 376] = 0\n  3410: u64 [s1 + 368] = 0\n  3414: u64 [s1 + 360] = 0\n  3418: u64 [s1 + 352] = 0\n  3422: i32 a0 = s1 + 0x160\n  3426: ecalli 19 // 'value_transferred'\n  3428: jump @1190\n      : @123 [@dyn 52] (gas: 1)\n  3431: ra = 106, jump @1454\n      : @124 [@dyn 53] (gas: 1)\n  3437: ra = 108, jump @1180\n      : @125 [@dyn 54] (gas: 1)\n  3442: ra = 110, jump @1059\n      : @126 [@dyn 55] (gas: 2)\n  3447: a1 = 0x7ecebe00\n  3453: jump @137 if a0 != a1\n      : @127 (gas: 3)\n  3457: ra = 0x70\n  3460: t0 = 0x5e8\n  3464: jump @2291\n      : @128 [@dyn 56] (gas: 3)\n  3468: ra = 0x72\n  3471: t0 = 0x68a\n  3475: jump @2255\n      : @129 [@dyn 57] (gas: 1)\n  3479: ra = 116, jump @1262\n      : @130 [@dyn 58] (gas: 1)\n  3484: ra = 118, jump @1127\n      : @131 [@dyn 59] (gas: 15)\n  3489: ra = 0x78\n  3492: sp = sp + 0xfffffffffffffe20\n  3496: u64 [sp + 0x1d8] = ra\n  3500: u64 [sp + 0x1d0] = s0\n  3504: u64 [sp + 0x1c8] = s1\n  3508: s0 = sp + 0x1e0\n  3512: sp = sp & 0xffffffffffffffe0\n  3515: s1 = sp\n  3517: u64 [s1 + 408] = 0\n  3521: u64 [s1 + 400] = 0\n  3525: u64 [s1 + 392] = 0\n  3529: u64 [s1 + 384] = 0\n  3533: i32 a0 = s1 + 0x180\n  3537: ecalli 19 // 'value_transferred'\n  3539: jump @1532\n      : @132 [@dyn 60] (gas: 1)\n  3543: ra = 122, jump @1073\n      : @133 [@dyn 61] (gas: 1)\n  3548: ra = 124, jump @1361\n      : @134 [@dyn 62] (gas: 11)\n  3553: ra = 0x7e\n  3556: sp = sp + 0xfffffffffffffca0\n  3560: a0 = sp + 0x300\n  3564: u64 [a0 + 0x58] = ra\n  3567: u64 [a0 + 0x50] = s0\n  3570: u64 [a0 + 0x48] = s1\n  3573: s0 = sp + 0x360\n  3577: sp = sp & 0xffffffffffffffe0\n  3580: s1 = sp\n  3582: t0 = 0x4a4\n  3586: jump @2368\n      : @135 [@dyn 63] (gas: 3)\n  3590: ra = 0x80\n  3594: t0 = 0x4f0\n  3598: jump @2343\n      : @136 [@dyn 64] (gas: 3)\n  3602: ra = 0x82\n  3606: t0 = 0x640\n  3610: jump @2343\n      : @137 [@dyn 65] (gas: 8)\n  3614: a1 = 0x20160\n  3619: i32 a1 = a1 + 0\n  3621: a0 = 0x1\n  3624: a2 = 0\n  3626: ra = 0x84\n  3630: ecalli 16 // 'seal_return'\n  3632: t0 = 0x86\n  3636: jump @2232\n      : @138 [@dyn 66] (gas: 1)\n  3640: t0 = 134, jump @2232\n      : @139 [@dyn 67] (gas: 1)\n  3647: ra = 136, jump @24\n      : @140 [@dyn 68] (gas: 7)\n  3653: u64 [sp + 24] = 0\n  3656: u64 [sp + 16] = 0\n  3659: u64 [sp + 0] = 0x41\n  3662: a0 = 0x4\n  3665: a1 = sp\n  3667: u64 [sp + 8] = 0\n  3670: ra = 138, jump @24\n      : @141 [@dyn 69] (gas: 2)\n  3676: a1 = i32 [0x20150]\n  3681: jump @143 if a1 >u 63\n      : @142 (gas: 2)\n  3685: u32 [0x20150] = 0x40\n  3691: fallthrough\n      : @143 (gas: 8)\n  3692: a1 = 0x20160\n  3697: i32 a1 = a1 + 0\n  3699: a0 = 0x1\n  3702: a2 = 0x24\n  3705: ra = 0x8c\n  3709: ecalli 16 // 'seal_return'\n  3711: t0 = 0x8e\n  3715: jump @2371\n      : @144 [@dyn 70] (gas: 1)\n  3719: t0 = 142, jump @2371\n      : @145 [@dyn 71] (gas: 18)\n  3726: a1 = u64 [a0]\n  3728: a2 = u64 [a0 + 0x18]\n  3731: a3 = u64 [a0 + 0x8]\n  3734: a4 = u64 [a0 + 0x10]\n  3737: a5 = a1 + 0x1f\n  3740: a1 = a5 <u a1\n  3743: a0 = a3 + a1\n  3746: a3 = a0 <u a3\n  3749: a3 = a1 if a1 == 0\n  3752: a1 = a4 + a3\n  3755: a3 = a1 <u a4\n  3758: a2 = a2 + a3\n  3761: a3 = a5 & 0xffffffffffffffe0\n  3764: a4 = a1 | a2\n  3767: a5 = a3 <u 0xfffffffffffffea0\n  3771: a5 = 0 if a0 != 0\n  3773: a5 = 0 if a4 != 0\n  3775: jump @148 if a5 == 0\n      : @146 (gas: 15)\n  3778: a4 = a3 + 0x160\n  3782: a3 = a4 <u a3\n  3785: a5 = a0 + a3\n  3788: a0 = a5 <u a0\n  3791: a0 = a3 if a3 == 0\n  3794: a0 = a0 + a1\n  3797: a1 = a0 <u a1\n  3800: a2 = a2 + a1\n  3803: u64 [sp] = a4\n  3805: u64 [sp + 0x8] = a5\n  3808: u64 [sp + 0x10] = a0\n  3811: a0 = 0x40\n  3814: a1 = sp\n  3816: u64 [sp + 0x18] = a2\n  3819: ra = 144, jump @24\n      : @147 [@dyn 72] (gas: 5)\n  3825: sp = s0 + 0xffffffffffffffd0\n  3828: ra = u64 [sp + 0x28]\n  3831: s0 = u64 [sp + 0x20]\n  3834: sp = sp + 0x30\n  3837: ret\n      : @148 (gas: 3)\n  3839: ra = 0x92\n  3843: t0 = 0x86\n  3847: jump @2232\n      : @149 [@dyn 73] (gas: 46)\n  3851: sp = sp + 0xffffffffffffffb0\n  3854: u64 [sp + 0x48] = ra\n  3857: u64 [sp + 0x40] = s0\n  3860: u64 [sp + 0x38] = s1\n  3863: s0 = sp + 0x50\n  3866: sp = sp & 0xfffffffffffffff0\n  3869: t0 = a0\n  3871: a2 = u64 [a1]\n  3873: t2 = u64 [a0 + 0x8]\n  3876: a5 = u64 [a1 + 0x8]\n  3879: t1 = u64 [a0]\n  3881: a3 = a2 + 0x1f\n  3884: ra = a3 <u a2\n  3887: a2 = a5 + ra\n  3890: a3 = a3 & 0xffffffffffffffe0\n  3893: u64 [sp + 0x8] = t1\n  3896: t1 = t1 + a3\n  3899: a4 = t1 <u a3\n  3902: a3 = a2 + t2\n  3905: a3 = a3 + a4\n  3908: s1 = a3 ^ a2\n  3911: a0 = a3 <u a2\n  3914: a0 = a4 if s1 == 0\n  3917: a4 = u64 [t0 + 0x18]\n  3920: a5 = a2 <u a5\n  3923: s1 = u64 [a1 + 0x10]\n  3926: t0 = u64 [t0 + 0x10]\n  3929: a1 = u64 [a1 + 0x18]\n  3932: a5 = ra if ra == 0\n  3935: a5 = a5 + s1\n  3938: s1 = a5 <u s1\n  3941: a2 = a5 + t0\n  3944: a0 = a0 + a2\n  3947: a5 = a2 <u a5\n  3950: a2 = a0 <u a2\n  3953: a1 = a1 + a4\n  3956: a1 = a1 + s1\n  3959: a1 = a1 + a5\n  3962: a5 = a1 + a2\n  3965: a1 = a5 >u 0\n  3967: a2 = a0 >u 0\n  3969: a2 = a1 if a5 != 0\n  3972: a1 = a0 | a5\n  3975: s1 = a3 >u 0\n  3977: s1 = a2 if a1 != 0\n  3980: jump @153 if s1 != 0\n      : @150 (gas: 13)\n  3983: a1 = u64 [sp + 0x8]\n  3986: a1 = t1 <u a1\n  3989: a2 = a3 ^ t2\n  3992: s1 = a3 <u t2\n  3995: s1 = a1 if a2 == 0\n  3998: a1 = a0 <u t0\n  4001: a2 = a5 ^ a4\n  4004: a4 = a5 <u a4\n  4007: a4 = a1 if a2 == 0\n  4010: a1 = a0 ^ t0\n  4013: a1 = a1 | a2\n  4016: a4 = s1 if a1 == 0\n  4019: jump @153 if a4 != 0\n      : @151 (gas: 7)\n  4022: u64 [sp + 0x10] = t1\n  4025: u64 [sp + 0x18] = a3\n  4028: u64 [sp + 0x20] = a0\n  4031: a0 = 0x40\n  4034: a1 = sp + 0x10\n  4037: u64 [sp + 0x28] = a5\n  4040: ra = 148, jump @24\n      : @152 [@dyn 74] (gas: 6)\n  4046: sp = s0 + 0xffffffffffffffb0\n  4049: ra = u64 [sp + 0x48]\n  4052: s0 = u64 [sp + 0x40]\n  4055: s1 = u64 [sp + 0x38]\n  4058: sp = sp + 0x50\n  4061: ret\n      : @153 (gas: 3)\n  4063: ra = 0x96\n  4067: t0 = 0x86\n  4071: jump @2232\n      : @154 [@dyn 75] (gas: 1)\n  4075: t0 = 152, jump @2372\n      : @155 [@dyn 76] (gas: 4)\n  4082: s1 = a0\n  4084: a0 = sp + 0x60\n  4087: a1 = 0x40\n  4090: ra = 154, jump @22\n      : @156 [@dyn 77] (gas: 19)\n  4096: a2 = u64 [sp + 0x60]\n  4099: u64 [sp] = a2\n  4101: a0 = u64 [sp + 0x68]\n  4104: u64 [sp + 0x18] = a0\n  4107: a1 = u64 [sp + 0x70]\n  4110: u64 [sp + 0x10] = a1\n  4113: a3 = u64 [sp + 0x78]\n  4116: u64 [sp + 0x8] = a3\n  4119: u64 [sp + 56] = 0\n  4122: u64 [sp + 48] = 0\n  4125: u64 [sp + 40] = 0\n  4128: u64 [sp + 32] = 0x40\n  4132: u64 [sp + 0x58] = a3\n  4135: u64 [sp + 0x50] = a1\n  4138: u64 [sp + 0x48] = a0\n  4141: a0 = sp + 0x40\n  4144: a1 = sp + 0x20\n  4147: u64 [sp + 0x40] = a2\n  4150: ra = 156, jump @149\n      : @157 [@dyn 78] (gas: 9)\n  4156: a0 = u64 [sp + 0x8]\n  4159: u64 [s1 + 0x18] = a0\n  4162: a0 = u64 [sp + 0x10]\n  4165: u64 [s1 + 0x10] = a0\n  4168: a0 = u64 [sp + 0x18]\n  4171: u64 [s1 + 0x8] = a0\n  4174: a0 = u64 [sp]\n  4176: u64 [s1] = a0\n  4178: t0 = 158, jump @2309\n      : @158 [@dyn 79] (gas: 1)\n  4185: ret\n      : @159 (gas: 37)\n  4187: sp = sp + 0xfffffffffffffe90\n  4191: u64 [sp + 0x168] = ra\n  4195: u64 [sp + 0x160] = s0\n  4199: u64 [sp + 0x158] = s1\n  4203: s0 = sp + 0x170\n  4207: sp = sp & 0xfffffffffffffff0\n  4210: t2 = u64 [a1]\n  4212: a4 = u64 [a2 + 0x8]\n  4215: ra = u64 [a1 + 0x8]\n  4218: s1 = u64 [a2]\n  4220: a3 = t2 + 0x1f\n  4223: t0 = a3 <u t2\n  4226: a5 = ra + t0\n  4229: u64 [sp + 0x20] = s1\n  4232: t1 = a3 <u s1\n  4235: a3 = a5 ^ a4\n  4238: u64 [sp + 0x28] = a4\n  4241: a4 = a5 <u a4\n  4244: a4 = t1 if a3 == 0\n  4247: s1 = u64 [a1 + 0x10]\n  4250: a3 = a5 <u ra\n  4253: a3 = t0 if t0 == 0\n  4256: a5 = u64 [a2 + 0x18]\n  4259: t0 = u64 [a1 + 0x18]\n  4262: t1 = u64 [a2 + 0x10]\n  4265: a3 = a3 + s1\n  4268: a1 = a3 <u s1\n  4271: a1 = a1 + t0\n  4274: a2 = a1 ^ a5\n  4277: u64 [sp + 0x10] = a5\n  4280: a1 = a1 <s a5\n  4283: a5 = a3 <u t1\n  4286: a1 = a5 if a2 == 0\n  4289: a3 = a3 ^ t1\n  4292: a2 = a2 | a3\n  4295: a4 = a1 if a2 != 0\n  4298: jump @181 if a4 == 0\n      : @160 (gas: 13)\n  4302: u64 [sp + 0x8] = a0\n  4305: u64 [sp + 0x18] = t1\n  4308: a0 = t2 | s1\n  4311: u64 [sp + 0x38] = ra\n  4314: u64 [sp + 0x30] = t0\n  4317: a1 = ra | t0\n  4320: a0 = a0 | a1\n  4323: a0 = a0 >> 0x20\n  4326: u64 [sp + 0x50] = s1\n  4329: a1 = a1 | s1\n  4332: a1 = a1 << 0x20\n  4335: a0 = a0 | a1\n  4338: jump @179 if a0 != 0\n      : @161 (gas: 4)\n  4342: a0 = sp + 0x130\n  4346: u64 [sp + 0x48] = t2\n  4349: a1 = t2\n  4351: ra = 160, jump @22\n      : @162 [@dyn 80] (gas: 10)\n  4357: a0 = u64 [sp + 0x148]\n  4361: a1 = u64 [sp + 0x140]\n  4365: a2 = u64 [sp + 0x138]\n  4369: u64 [sp + 0x80] = a0\n  4373: u64 [sp + 0x78] = a1\n  4376: a0 = a0 | a1\n  4379: u64 [sp + 0x88] = a2\n  4383: a1 = a2 <u 0x1\n  4386: a1 = 0 if a0 != 0\n  4388: jump @180 if a1 == 0\n      : @163 (gas: 4)\n  4392: s1 = u64 [sp + 0x130]\n  4396: a0 = sp + 0x110\n  4400: a1 = 0x40\n  4403: ra = 162, jump @22\n      : @164 [@dyn 81] (gas: 31)\n  4409: t0 = u64 [sp + 0x128]\n  4413: a5 = u64 [sp + 0x120]\n  4417: u64 [sp + 0x68] = a5\n  4420: t2 = u64 [sp + 0x118]\n  4424: u64 [sp + 0x60] = t2\n  4427: t1 = u64 [sp + 0x110]\n  4431: u64 [sp + 0x70] = t1\n  4434: a0 = s1 + 0x1f\n  4437: u64 [sp + 0x40] = s1\n  4440: a1 = a0 <u s1\n  4443: a2 = u64 [sp + 0x88]\n  4447: a1 = a1 + a2\n  4450: a1 = a1 & 0x1\n  4453: a0 = a0 & 0xffffffffffffffe0\n  4456: a2 = a0 + 0x20\n  4459: a0 = a2 <u a0\n  4462: a3 = a1 + a0\n  4465: a4 = a3 <u a1\n  4468: a4 = a0 if a0 == 0\n  4471: u64 [sp + 232] = 0\n  4475: u64 [sp + 0xd0] = a2\n  4479: s1 = t0\n  4481: u64 [sp + 0x108] = t0\n  4485: u64 [sp + 0x100] = a5\n  4489: u64 [sp + 0xf8] = t2\n  4493: u64 [sp + 0xf0] = t1\n  4497: u64 [sp + 0xd8] = a3\n  4501: a0 = sp + 0xf0\n  4505: a1 = sp + 0xd0\n  4509: u64 [sp + 0xe0] = a4\n  4513: ra = 164, jump @149\n      : @165 [@dyn 82] (gas: 8)\n  4519: u64 [sp + 0x58] = s1\n  4522: a1 = u64 [sp + 0x60]\n  4525: a0 = a1 | s1\n  4528: a1 = u64 [sp + 0x70]\n  4531: a2 = a1\n  4533: a3 = u64 [sp + 0x68]\n  4536: a1 = a1 | a3\n  4539: t0 = 166, jump @2313\n      : @166 [@dyn 83] (gas: 1)\n  4546: jump @179 if a0 != 0\n      : @167 (gas: 11)\n  4550: s1 = u64 [sp + 0x40]\n  4553: u64 [sp + 0xb0] = s1\n  4557: a0 = u64 [sp + 0x88]\n  4561: u64 [sp + 0xb8] = a0\n  4565: a0 = u64 [sp + 0x78]\n  4568: u64 [sp + 0xc0] = a0\n  4572: a1 = sp + 0xb0\n  4576: a0 = u64 [sp + 0x80]\n  4580: u64 [sp + 0xc8] = a0\n  4584: a0 = a2\n  4586: ra = 168, jump @24\n      : @168 [@dyn 84] (gas: 46)\n  4592: a0 = u64 [sp + 0x48]\n  4595: a3 = a0 + s1\n  4598: a2 = a3 <u a0\n  4601: ra = u64 [sp + 0x38]\n  4604: a0 = u64 [sp + 0x88]\n  4608: a0 = a0 + ra\n  4611: a0 = a0 + a2\n  4614: a4 = a0 ^ ra\n  4617: a1 = a0 <u ra\n  4620: a1 = a2 if a4 == 0\n  4623: t1 = u64 [sp + 0x50]\n  4626: a2 = u64 [sp + 0x78]\n  4629: a2 = a2 + t1\n  4632: a5 = a3 + 0x20\n  4635: t0 = a5 <u a3\n  4638: a4 = a0 + t0\n  4641: a3 = u64 [sp + 0x20]\n  4644: a5 = a3 <u a5\n  4647: t2 = u64 [sp + 0x70]\n  4650: a3 = u64 [sp + 0x28]\n  4653: s1 = a4 ^ a3\n  4656: a3 = a3 <u a4\n  4659: a5 = a3 if s1 != 0\n  4662: a3 = a2 <u t1\n  4665: t1 = u64 [sp + 0x30]\n  4668: s1 = u64 [sp + 0x80]\n  4672: s1 = s1 + t1\n  4675: a3 = a3 + s1\n  4678: a1 = a1 + a2\n  4681: a2 = a1 <u a2\n  4684: a2 = a2 + a3\n  4687: a0 = a4 <u a0\n  4690: a0 = t0 if t0 == 0\n  4693: a0 = a0 + a1\n  4696: a1 = a0 <u a1\n  4699: a1 = a1 + a2\n  4702: a3 = u64 [sp + 0x10]\n  4705: a2 = a1 ^ a3\n  4708: a1 = a3 <u a1\n  4711: a4 = u64 [sp + 0x18]\n  4714: a3 = a4 <u a0\n  4717: a1 = a3 if a2 == 0\n  4720: a0 = a0 ^ a4\n  4723: a0 = a0 | a2\n  4726: a5 = a1 if a0 != 0\n  4729: jump @182 if a5 != 0\n      : @169 (gas: 9)\n  4733: a0 = u64 [sp + 0x68]\n  4736: a1 = u64 [sp + 0x58]\n  4739: a1 = a1 | a0\n  4742: a0 = 0xffffffe0\n  4752: a2 = t2 <u a0\n  4755: a3 = u64 [sp + 0x60]\n  4758: a2 = 0 if a3 != 0\n  4760: a2 = 0 if a1 != 0\n  4762: jump @179 if a2 == 0\n      : @170 (gas: 10)\n  4766: a1 = u64 [sp + 0x50]\n  4769: a1 = a1 | t1\n  4772: s1 = u64 [sp + 0x48]\n  4775: a0 = s1 <u a0\n  4778: a0 = 0 if ra != 0\n  4780: a0 = 0 if a1 != 0\n  4782: a2 = u64 [sp + 0x80]\n  4786: a3 = u64 [sp + 0x78]\n  4789: a4 = u64 [sp + 0x88]\n  4793: jump @179 if a0 == 0\n      : @171 (gas: 9)\n  4797: a1 = u64 [sp + 0x40]\n  4800: a0 = a1 | a3\n  4803: a5 = a4 | a2\n  4806: a0 = a0 | a5\n  4809: a0 = a0 >> 0x20\n  4812: a5 = a5 | a3\n  4815: a5 = a5 << 0x20\n  4818: a0 = a0 | a5\n  4821: jump @179 if a0 != 0\n      : @172 (gas: 5)\n  4825: i32 a0 = t2 + 0x20\n  4828: i32 a2 = s1 + 0x20\n  4831: u64 [sp + 0x50] = a2\n  4834: s1 = a1\n  4836: ra = 170, jump @37\n      : @173 [@dyn 85] (gas: 4)\n  4842: u64 [sp + 0x48] = a0\n  4845: a0 = u64 [sp + 0x50]\n  4848: a1 = s1\n  4850: ra = 172, jump @37\n      : @174 [@dyn 86] (gas: 4)\n  4856: a1 = a0\n  4858: a0 = u64 [sp + 0x48]\n  4861: a2 = s1\n  4863: ra = 174, jump @0\n      : @175 [@dyn 87] (gas: 22)\n  4869: a1 = u64 [sp + 0x70]\n  4872: a0 = a1 + s1\n  4875: a1 = a0 <u a1\n  4878: s1 = u64 [sp + 0x60]\n  4881: a2 = u64 [sp + 0x88]\n  4885: a2 = a2 + s1\n  4888: a2 = a2 + a1\n  4891: a3 = a2 ^ s1\n  4894: a4 = a2 <u s1\n  4897: a4 = a1 if a3 == 0\n  4900: a5 = u64 [sp + 0x68]\n  4903: a1 = u64 [sp + 0x78]\n  4906: a1 = a1 + a5\n  4909: a4 = a4 + a1\n  4912: t0 = a4 <u a1\n  4915: a1 = a1 <u a5\n  4918: a5 = u64 [sp + 0x80]\n  4922: a3 = u64 [sp + 0x58]\n  4925: a5 = a5 + a3\n  4928: a1 = a1 + a5\n  4931: a1 = a1 + t0\n  4934: t0 = 176, jump @2353\n      : @176 [@dyn 88] (gas: 1)\n  4941: jump @179 if a3 == 0\n      : @177 (gas: 7)\n  4944: i32 a0 = a0 + 0x20\n  4947: u64 [sp + 168] = 0\n  4951: u64 [sp + 160] = 0\n  4955: u64 [sp + 152] = 0\n  4959: a1 = sp + 0x90\n  4963: u64 [sp + 144] = 0\n  4967: ra = 178, jump @24\n      : @178 [@dyn 89] (gas: 14)\n  4973: a0 = u64 [sp + 0x8]\n  4976: a1 = u64 [sp + 0x58]\n  4979: u64 [a0 + 0x18] = a1\n  4982: a1 = u64 [sp + 0x68]\n  4985: u64 [a0 + 0x10] = a1\n  4988: u64 [a0 + 0x8] = s1\n  4991: a1 = u64 [sp + 0x70]\n  4994: u64 [a0] = a1\n  4996: sp = s0 + 0xfffffffffffffe90\n  5000: ra = u64 [sp + 0x168]\n  5004: s0 = u64 [sp + 0x160]\n  5008: s1 = u64 [sp + 0x158]\n  5012: sp = sp + 0x170\n  5016: ret\n      : @179 (gas: 1)\n  5018: trap\n      : @180 (gas: 3)\n  5019: ra = 0xb4\n  5023: t0 = 0x86\n  5027: jump @2232\n      : @181 [@dyn 90] (gas: 2)\n  5031: a1 = 0x20160\n  5036: jump @183\n      : @182 (gas: 2)\n  5038: a1 = 0x20160\n  5043: fallthrough\n      : @183 (gas: 6)\n  5044: i32 a1 = a1 + 0\n  5046: a0 = 0x1\n  5049: a2 = 0\n  5051: ra = 0xb6\n  5055: ecalli 16 // 'seal_return'\n  5057: fallthrough\n      : @184 [@dyn 91] (gas: 23)\n  5058: sp = sp + 0xfffffffffffffa40\n  5062: a5 = sp + 0x500\n  5066: u64 [a5 + 0xb8] = ra\n  5070: u64 [a5 + 0xb0] = s0\n  5074: u64 [a5 + 0xa8] = s1\n  5078: s0 = sp + 0x5c0\n  5082: sp = sp & 0xffffffffffffffe0\n  5085: s1 = sp\n  5087: t1 = u64 [a0 + 0x10]\n  5090: t2 = u64 [a0 + 0x18]\n  5093: a5 = u64 [a0 + 0x8]\n  5096: t0 = u64 [a0]\n  5098: u64 [s1 + 0xc8] = a5\n  5102: u64 [s1 + 0xb8] = t2\n  5106: a0 = a5 | t2\n  5109: a5 = t0 | t1\n  5112: a5 = a5 | a0\n  5115: a5 = a5 >> 0x20\n  5118: u64 [s1 + 0xc0] = t1\n  5122: a0 = a0 | t1\n  5125: a0 = a0 << 0x20\n  5128: a0 = a0 | a5\n  5131: jump @253 if a0 != 0\n      : @185 (gas: 36)\n  5135: a0 = u64 [a4 + 0x18]\n  5138: u64 [s1 + 0x58] = a0\n  5141: a0 = u64 [a4 + 0x10]\n  5144: u64 [s1 + 0x50] = a0\n  5147: a0 = u64 [a4 + 0x8]\n  5150: u64 [s1 + 0x60] = a0\n  5153: a0 = u64 [a4]\n  5155: u64 [s1 + 0x68] = a0\n  5158: a0 = u64 [a3 + 0x18]\n  5161: u64 [s1 + 0x78] = a0\n  5164: a0 = u64 [a3 + 0x10]\n  5167: u64 [s1 + 0x70] = a0\n  5170: a0 = u64 [a3 + 0x8]\n  5173: u64 [s1 + 0x80] = a0\n  5177: a0 = u64 [a3]\n  5179: u64 [s1 + 0x88] = a0\n  5183: a0 = u64 [a2 + 0x18]\n  5186: u64 [s1 + 0x10] = a0\n  5189: a0 = u64 [a2 + 0x10]\n  5192: u64 [s1 + 0x18] = a0\n  5195: a0 = u64 [a2 + 0x8]\n  5198: u64 [s1 + 0x20] = a0\n  5201: a0 = u64 [a2]\n  5203: u64 [s1 + 0x28] = a0\n  5206: a0 = u64 [a1 + 0x18]\n  5209: u64 [s1 + 0x48] = a0\n  5212: a0 = u64 [a1 + 0x10]\n  5215: u64 [s1 + 0x40] = a0\n  5218: a0 = u64 [a1 + 0x8]\n  5221: u64 [s1 + 0x38] = a0\n  5224: a0 = u64 [a1]\n  5226: u64 [s1 + 0x30] = a0\n  5229: a0 = s1 + 0x480\n  5233: u64 [s1 + 0xd0] = t0\n  5237: a1 = t0\n  5239: ra = 184, jump @22\n      : @186 [@dyn 92] (gas: 12)\n  5245: a3 = s1 + 0x400\n  5249: a1 = u64 [a3 + 0x98]\n  5253: a0 = u64 [a3 + 0x90]\n  5257: a2 = u64 [a3 + 0x88]\n  5261: u64 [s1 + 0x98] = a0\n  5265: u64 [s1 + 0x90] = a1\n  5269: a1 = a1 | a0\n  5272: u64 [s1 + 0xa0] = a2\n  5276: a0 = a2 <u 0x1\n  5279: u64 [s1 + 0x138] = a1\n  5283: a0 = 0 if a1 != 0\n  5285: jump @254 if a0 == 0\n      : @187 (gas: 11)\n  5289: a0 = u64 [s1 + 0x480]\n  5293: u64 [s1 + 0xa8] = a0\n  5297: u64 [s1 + 1208] = 0\n  5301: u64 [s1 + 1200] = 0\n  5305: u64 [s1 + 1192] = 0\n  5309: u64 [s1 + 1184] = 0x3\n  5314: a0 = s1 + 0x460\n  5318: a1 = s1 + 0x4a0\n  5322: ra = 0xba\n  5326: t0 = 0x6\n  5329: jump @2259\n      : @188 [@dyn 93] (gas: 11)\n  5333: a2 = u64 [s1 + 0x460]\n  5337: a0 = u64 [s1 + 0x468]\n  5341: a1 = u64 [s1 + 0x470]\n  5345: a3 = u64 [s1 + 0x478]\n  5349: u64 [s1 + 0x438] = a3\n  5353: u64 [s1 + 0x430] = a1\n  5357: u64 [s1 + 0x428] = a0\n  5361: a0 = s1 + 0x440\n  5365: a1 = s1 + 0x420\n  5369: u64 [s1 + 0x420] = a2\n  5373: ra = 188, jump @255\n      : @189 [@dyn 94] (gas: 22)\n  5379: a5 = s1 + 0x400\n  5383: a2 = u64 [a5 + 0x40]\n  5386: a0 = u64 [a5 + 0x48]\n  5389: a1 = u64 [a5 + 0x50]\n  5392: a3 = u64 [a5 + 0x58]\n  5395: a4 = u64 [s1 + 0x90]\n  5399: u64 [s1 + 0x3f8] = a4\n  5403: a4 = u64 [s1 + 0x98]\n  5407: u64 [s1 + 0x3f0] = a4\n  5411: a4 = u64 [s1 + 0xa0]\n  5415: u64 [s1 + 0x3e8] = a4\n  5419: a4 = u64 [s1 + 0xa8]\n  5423: u64 [s1 + 0x3e0] = a4\n  5427: u64 [a5 + 0x18] = a3\n  5430: u64 [a5 + 0x10] = a1\n  5433: u64 [a5 + 0x8] = a0\n  5436: a0 = s1 + 0x400\n  5440: a1 = s1 + 0x3e0\n  5444: u64 [a5] = a2\n  5446: ra = 0xbe\n  5450: t0 = 0x12c\n  5454: jump @2331\n      : @190 [@dyn 95] (gas: 4)\n  5458: a5 = u64 [s1 + 0x98]\n  5462: a3 = u64 [s1 + 0xa8]\n  5466: a4 = u64 [s1 + 0xa0]\n  5470: t0 = 192, jump @2357\n      : @191 [@dyn 96] (gas: 6)\n  5477: t1 = u64 [s1 + 0x90]\n  5481: a2 = t1 >u 0\n  5483: a2 = a0 if t1 == 0\n  5486: a0 = u64 [s1 + 0x138]\n  5490: a2 = a1 if a0 == 0\n  5493: jump @200 if a2 == 0\n      : @192 (gas: 8)\n  5497: a3 = a3 & 0xffffffffffffffe0\n  5500: u64 [s1 + 0xb0] = a3\n  5504: a0 = sp + 0xffffffffffffffe0\n  5507: a0 = a0 & 0xffffffffffffffe0\n  5510: u64 [s1 + 0x120] = a0\n  5514: sp = a0\n  5516: a0 = s1 + 0x3a0\n  5520: ra = 194, jump @263\n      : @193 [@dyn 97] (gas: 24)\n  5526: ra = 0\n  5528: u64 [s1 + 312] = 0\n  5532: u64 [s1 + 304] = 0\n  5536: t0 = 0\n  5538: u64 [s1 + 296] = 0\n  5542: a4 = s1 + 0x300\n  5546: a3 = u64 [a4 + 0xb0]\n  5550: a0 = u64 [a4 + 0xb8]\n  5554: a1 = u64 [a4 + 0xa0]\n  5558: a2 = u64 [a4 + 0xa8]\n  5562: u64 [s1 + 0xf0] = a3\n  5566: a5 = u64 [s1 + 0x120]\n  5570: u64 [a5 + 0x10] = a3\n  5573: t1 = a0\n  5575: u64 [a5 + 0x18] = a0\n  5578: u64 [s1 + 0x118] = a1\n  5582: u64 [a5] = a1\n  5584: a0 = a5\n  5586: a5 = a2\n  5588: u64 [a0 + 0x8] = a2\n  5591: a2 = 0\n  5593: a4 = 0\n  5595: t2 = 0x20\n  5598: fallthrough\n      : @194 (gas: 23)\n  5599: u64 [s1 + 0x110] = a5\n  5603: a0 = u64 [s1 + 0xb0]\n  5607: u64 [s1 + 0x100] = a4\n  5611: a0 = a4 <u a0\n  5614: a4 = a0 ^ 0x1\n  5617: u64 [s1 + 0xf8] = t0\n  5621: a4 = 0x1 if t0 != 0\n  5624: a0 = u64 [s1 + 0x128]\n  5628: u64 [s1 + 0x108] = a2\n  5632: a0 = a0 | a2\n  5635: a4 = 0x1 if a0 != 0\n  5638: a1 = u64 [s1 + 0xd0]\n  5642: a1 = a1 + t2\n  5645: a3 = u64 [s1 + 0xc8]\n  5649: a3 = a3 + ra\n  5652: a2 = u64 [s1 + 0xc0]\n  5656: a0 = u64 [s1 + 0x138]\n  5660: a2 = a2 + a0\n  5663: a0 = u64 [s1 + 0xb8]\n  5667: a5 = u64 [s1 + 0x130]\n  5671: a0 = a0 + a5\n  5674: a5 = t2\n  5676: jump @204 if a4 != 0\n      : @195 (gas: 14)\n  5680: a4 = a1 <u a5\n  5683: a3 = a3 + a4\n  5686: u64 [s1 + 0xd8] = a5\n  5690: t0 = a3 ^ ra\n  5693: u64 [s1 + 0xe0] = ra\n  5697: a5 = a3 <u ra\n  5700: a5 = a4 if t0 == 0\n  5703: a5 = a5 + a2\n  5706: t0 = a5 <u a2\n  5709: a4 = u64 [s1 + 0x138]\n  5713: a2 = a2 <u a4\n  5716: a0 = a0 + a2\n  5719: a0 = a0 + t0\n  5722: t0 = 196, jump @2240\n      : @196 [@dyn 98] (gas: 2)\n  5729: u64 [s1 + 0xe8] = t1\n  5733: jump @253 if a0 != 0\n      : @197 (gas: 2)\n  5737: a0 = s1 + 0x140\n  5741: ra = 198, jump @22\n      : @198 [@dyn 99] (gas: 12)\n  5747: a0 = u64 [s1 + 0x158]\n  5751: a1 = u64 [s1 + 0x150]\n  5755: a2 = u64 [s1 + 0x148]\n  5759: a3 = u64 [s1 + 0x140]\n  5763: a4 = s1 + 0x400\n  5767: u64 [a4 + 0xd8] = a0\n  5771: u64 [a4 + 0xd0] = a1\n  5775: u64 [a4 + 0xc8] = a2\n  5779: u64 [a4 + 0xc0] = a3\n  5783: a1 = s1 + 0x4c0\n  5787: a0 = u64 [s1 + 0x120]\n  5791: ra = 200, jump @28\n      : @199 [@dyn 100] (gas: 55)\n  5797: t0 = u64 [s1 + 0x118]\n  5801: t0 = t0 + 0x1\n  5804: a0 = t0 <u 0x1\n  5807: t1 = u64 [s1 + 0x110]\n  5811: t1 = t1 + a0\n  5814: a0 = t0 | t1\n  5817: a0 = a0 <u 0x1\n  5820: a1 = u64 [s1 + 0xf0]\n  5824: a0 = a0 + a1\n  5827: a1 = a0 <u a1\n  5830: t2 = u64 [s1 + 0xe8]\n  5834: t2 = t2 + a1\n  5837: a1 = u64 [s1 + 0xd8]\n  5841: a2 = a1 + 0x20\n  5844: u64 [s1 + 0x110] = a2\n  5848: a3 = a2 <u a1\n  5851: a1 = u64 [s1 + 0xe0]\n  5855: a2 = a1 + a3\n  5858: u64 [s1 + 0xe8] = a2\n  5862: a4 = a2 <u a1\n  5865: a4 = a3 if a3 == 0\n  5868: a1 = u64 [s1 + 0x138]\n  5872: ra = a1 + a4\n  5875: a4 = ra <u a1\n  5878: a1 = u64 [s1 + 0x130]\n  5882: a1 = a1 + a4\n  5885: u64 [s1 + 0x130] = a1\n  5889: a1 = u64 [s1 + 0x100]\n  5893: a4 = a1 + 0x20\n  5896: a5 = a4 <u a1\n  5899: a2 = u64 [s1 + 0xf8]\n  5903: a1 = a2 + a5\n  5906: a2 = a1 <u a2\n  5909: a2 = a5 if a5 == 0\n  5912: a3 = u64 [s1 + 0x108]\n  5916: a2 = a2 + a3\n  5919: a5 = a2 <u a3\n  5922: a3 = u64 [s1 + 0x128]\n  5926: a3 = a3 + a5\n  5929: u64 [s1 + 0x128] = a3\n  5933: a5 = t1\n  5935: a3 = u64 [s1 + 0x120]\n  5939: u64 [a3 + 0x8] = t1\n  5942: u64 [s1 + 0x118] = t0\n  5946: u64 [a3] = t0\n  5948: u64 [a3 + 0x10] = a0\n  5951: t1 = t2\n  5953: u64 [a3 + 0x18] = t2\n  5956: u64 [s1 + 0xf0] = a0\n  5960: t2 = u64 [s1 + 0x110]\n  5964: a0 = u64 [s1 + 0xe8]\n  5968: u64 [s1 + 0x138] = ra\n  5972: ra = a0\n  5974: t0 = a1\n  5976: jump @194\n      : @200 (gas: 5)\n  5979: a0 = a3 | a5\n  5982: a1 = a4 | t1\n  5985: a0 = a0 | a1\n  5988: t0 = u64 [s1 + 0xd0]\n  5992: jump @214 if a0 == 0\n      : @201 (gas: 9)\n  5996: a0 = u64 [s1 + 0xc0]\n  6000: a1 = u64 [s1 + 0xb8]\n  6004: a0 = a0 | a1\n  6007: a1 = 0xffffffe0\n  6017: a1 = t0 <u a1\n  6020: a2 = u64 [s1 + 0xc8]\n  6024: a1 = 0 if a2 != 0\n  6026: a1 = 0 if a0 != 0\n  6028: jump @253 if a1 == 0\n      : @202 (gas: 3)\n  6032: i32 a1 = t0 + 0x20\n  6035: a0 = s1 + 0x3c0\n  6039: ra = 202, jump @22\n      : @203 [@dyn 101] (gas: 15)\n  6045: a1 = s1 + 0x300\n  6049: a0 = u64 [a1 + 0xd8]\n  6053: a2 = s1 + 0x100\n  6057: u64 [a2 + 0x30] = a0\n  6060: a0 = u64 [a1 + 0xd0]\n  6064: u64 [a2 + 0x28] = a0\n  6067: a0 = u64 [a1 + 0xc8]\n  6071: u64 [a2 + 0x18] = a0\n  6074: a0 = u64 [a1 + 0xc0]\n  6078: u64 [a2 + 0x20] = a0\n  6081: a3 = u64 [s1 + 0xa8]\n  6085: a4 = u64 [s1 + 0xa0]\n  6089: a2 = u64 [s1 + 0x98]\n  6093: t1 = u64 [s1 + 0x90]\n  6097: jump @215\n      : @204 (gas: 12)\n  6100: t2 = ra\n  6102: ra = a5\n  6104: t0 = u64 [s1 + 0xa8]\n  6108: a4 = u64 [s1 + 0xb0]\n  6112: a4 = a4 ^ t0\n  6115: a5 = u64 [s1 + 0x98]\n  6119: t1 = a4 | a5\n  6122: a5 = u64 [s1 + 0xa0]\n  6126: a4 = u64 [s1 + 0x90]\n  6130: a5 = a5 | a4\n  6133: a4 = t1 | a5\n  6136: jump @213 if a4 == 0\n      : @205 (gas: 12)\n  6140: a4 = a1 <u ra\n  6143: a3 = a3 + a4\n  6146: t0 = a3 ^ t2\n  6149: a5 = a3 <u t2\n  6152: a5 = a4 if t0 == 0\n  6155: a5 = a5 + a2\n  6158: t0 = a5 <u a2\n  6161: a4 = u64 [s1 + 0x138]\n  6165: a2 = a2 <u a4\n  6168: a0 = a0 + a2\n  6171: a0 = a0 + t0\n  6174: t0 = 204, jump @2240\n      : @206 [@dyn 102] (gas: 1)\n  6181: jump @253 if a0 != 0\n      : @207 (gas: 2)\n  6185: a0 = s1 + 0x380\n  6189: ra = 206, jump @22\n      : @208 [@dyn 103] (gas: 17)\n  6195: a1 = s1 + 0x300\n  6199: a0 = u64 [a1 + 0x98]\n  6203: u64 [s1 + 0x130] = a0\n  6207: a0 = u64 [a1 + 0x90]\n  6211: u64 [s1 + 0x128] = a0\n  6215: a0 = u64 [a1 + 0x88]\n  6219: u64 [s1 + 0x118] = a0\n  6223: a0 = u64 [a1 + 0x80]\n  6227: u64 [s1 + 0x110] = a0\n  6231: a0 = u64 [s1 + 0xa8]\n  6235: a0 = a0 << 0x3b\n  6238: a1 = a0 >> 0x38\n  6241: u64 [s1 + 0x138] = a1\n  6245: a2 = 0x80 - a1\n  6249: a0 = 0xffffffffffffffff\n  6252: a1 = 0xffffffffffffffff\n  6255: ra = 208, jump @2379\n      : @209 [@dyn 104] (gas: 6)\n  6262: u64 [s1 + 0x108] = a0\n  6266: u64 [s1 + 0xf0] = a1\n  6270: a0 = 0xffffffffffffffff\n  6273: a1 = 0xffffffffffffffff\n  6276: a2 = u64 [s1 + 0x138]\n  6280: ra = 210, jump @2374\n      : @210 [@dyn 105] (gas: 10)\n  6287: u64 [s1 + 0xf8] = a0\n  6291: u64 [s1 + 0x100] = a1\n  6295: a0 = u64 [s1 + 0xf0]\n  6299: a0 = a0 | a1\n  6302: u64 [s1 + 0xf0] = a0\n  6306: a0 = u64 [s1 + 0x138]\n  6310: a2 = a0 + 0xffffffffffffff80\n  6313: a0 = 0xffffffffffffffff\n  6316: a1 = 0xffffffffffffffff\n  6319: ra = 212, jump @2374\n      : @211 [@dyn 106] (gas: 29)\n  6326: a4 = u64 [s1 + 0x138]\n  6330: a2 = a4 <u 0x80\n  6334: a3 = u64 [s1 + 0xf0]\n  6338: a1 = a3 if a2 != 0\n  6341: a5 = u64 [s1 + 0xf8]\n  6345: a3 = u64 [s1 + 0x108]\n  6349: a3 = a3 | a5\n  6352: a3 = a0 if a2 == 0\n  6355: a1 = 0xffffffffffffffff if a4 == 0\n  6358: a3 = 0xffffffffffffffff if a4 == 0\n  6361: a4 = u64 [s1 + 0x100]\n  6365: a4 = 0 if a2 == 0\n  6367: a5 = 0 if a2 == 0\n  6369: a0 = u64 [s1 + 0x110]\n  6373: a0 = a0 & ~a3\n  6376: a2 = u64 [s1 + 0x118]\n  6380: a1 = a2 & ~a1\n  6383: a2 = u64 [s1 + 0x128]\n  6387: a2 = a2 & ~a5\n  6390: a3 = u64 [s1 + 0x130]\n  6394: a3 = a3 & ~a4\n  6397: a4 = s1 + 0x400\n  6401: u64 [a4 + 0xf8] = a3\n  6405: u64 [a4 + 0xf0] = a2\n  6409: u64 [a4 + 0xe8] = a1\n  6413: u64 [a4 + 0xe0] = a0\n  6417: a1 = s1 + 0x4e0\n  6421: a0 = u64 [s1 + 0x120]\n  6425: ra = 214, jump @28\n      : @212 [@dyn 107] (gas: 2)\n  6431: t0 = u64 [s1 + 0xa8]\n  6435: fallthrough\n      : @213 (gas: 27)\n  6436: a2 = u64 [s1 + 0x98]\n  6440: a0 = a2 >> 0x3f\n  6443: a1 = u64 [s1 + 0x90]\n  6447: a1 = a1 << 0x1\n  6450: a0 = a0 | a1\n  6453: a3 = u64 [s1 + 0xa0]\n  6457: a1 = a3 >> 0x3f\n  6460: a2 = a2 << 0x1\n  6463: a1 = a1 | a2\n  6466: a2 = t0 >> 0x3f\n  6469: a3 = a3 << 0x1\n  6472: a2 = a2 | a3\n  6475: a3 = t0 << 0x1\n  6478: a3 = a3 + 0x1\n  6481: u64 [s1 + 1304] = 0\n  6485: u64 [s1 + 1296] = 0\n  6489: u64 [s1 + 1288] = 0\n  6493: a5 = s1 + 0x500\n  6497: u64 [a5 + 0] = 0x3\n  6500: u64 [a5 + 0x20] = a3\n  6503: u64 [a5 + 0x28] = a2\n  6506: u64 [a5 + 0x30] = a1\n  6509: u64 [a5 + 0x38] = a0\n  6512: a0 = s1 + 0x500\n  6516: a1 = s1 + 0x520\n  6520: ra = 0xe0\n  6524: jump @28\n      : @214 (gas: 6)\n  6527: a2 = a5\n  6529: u64 [s1 + 288] = 0\n  6533: u64 [s1 + 280] = 0\n  6537: u64 [s1 + 296] = 0\n  6541: u64 [s1 + 304] = 0\n  6545: fallthrough\n      : @215 (gas: 20)\n  6546: a0 = a4 >> 0x3f\n  6549: a1 = a2 << 0x1\n  6552: a0 = a0 | a1\n  6555: u64 [s1 + 0x110] = a0\n  6559: a0 = a2 >> 0x3f\n  6562: a1 = t1 << 0x1\n  6565: a0 = a0 | a1\n  6568: u64 [s1 + 0x108] = a0\n  6572: a0 = a3 >> 0x3f\n  6575: a1 = a4 << 0x1\n  6578: a0 = a0 | a1\n  6581: u64 [s1 + 0x100] = a0\n  6585: a0 = a3 << 0x1\n  6588: u64 [s1 + 0xf8] = a0\n  6592: a1 = a3 << 0x3\n  6595: u64 [s1 + 0x138] = a1\n  6599: i32 a2 = 0x80 - a1\n  6603: a0 = 0xffffffffffffffff\n  6606: a1 = 0xffffffffffffffff\n  6609: ra = 216, jump @2379\n      : @216 [@dyn 108] (gas: 7)\n  6616: u64 [s1 + 0xd8] = a0\n  6620: u64 [s1 + 0xf0] = a1\n  6624: a0 = u64 [s1 + 0xa8]\n  6628: i32 a2 = a0 << 0x3\n  6631: a0 = 0xffffffffffffffff\n  6634: a1 = 0xffffffffffffffff\n  6637: ra = 218, jump @2374\n      : @217 [@dyn 109] (gas: 10)\n  6644: u64 [s1 + 0xe8] = a0\n  6648: u64 [s1 + 0xe0] = a1\n  6652: a1 = u64 [s1 + 0xd8]\n  6656: a0 = a0 | a1\n  6659: u64 [s1 + 0xd8] = a0\n  6663: a0 = u64 [s1 + 0x138]\n  6667: i32 a2 = a0 + 0xffffffffffffff80\n  6670: a0 = 0xffffffffffffffff\n  6673: a1 = 0xffffffffffffffff\n  6676: ra = 220, jump @2374\n      : @218 [@dyn 110] (gas: 7)\n  6683: a4 = u64 [s1 + 0x138]\n  6687: a2 = a4 <u 0x80\n  6691: a3 = u64 [s1 + 0xd8]\n  6695: a0 = a3 if a2 != 0\n  6698: a5 = u64 [s1 + 0xe0]\n  6702: a3 = u64 [s1 + 0xf0]\n  6706: t0 = 222, jump @2361\n      : @219 [@dyn 111] (gas: 31)\n  6713: a4 = u64 [s1 + 0xe8]\n  6717: a4 = 0 if a2 == 0\n  6719: a1 = u64 [s1 + 0x118]\n  6723: a1 = a1 & ~a3\n  6726: a2 = u64 [s1 + 0x120]\n  6730: a0 = a2 & ~a0\n  6733: a2 = u64 [s1 + 0x128]\n  6737: a2 = a2 & ~a4\n  6740: a3 = u64 [s1 + 0x130]\n  6744: a3 = a3 & ~a5\n  6747: a4 = u64 [s1 + 0xf8]\n  6751: a0 = a0 | a4\n  6754: a5 = s1 + 0x100\n  6758: a4 = u64 [a5]\n  6760: a1 = a1 | a4\n  6763: a4 = u64 [a5 + 0x8]\n  6766: a3 = a3 | a4\n  6769: a4 = u64 [a5 + 0x10]\n  6772: a2 = a2 | a4\n  6775: a5 = s1 + 0x500\n  6779: u64 [a5 + 64] = 0x3\n  6783: u64 [a5 + 0x70] = a2\n  6786: u64 [a5 + 0x78] = a3\n  6789: u64 [a5 + 0x68] = a1\n  6792: u64 [a5 + 0x60] = a0\n  6795: u64 [s1 + 1368] = 0\n  6799: u64 [s1 + 1360] = 0\n  6803: u64 [s1 + 1352] = 0\n  6807: a0 = s1 + 0x540\n  6811: a1 = s1 + 0x560\n  6815: ra = 224, jump @28\n      : @220 [@dyn 112] (gas: 10)\n  6821: a0 = u64 [s1 + 0x30]\n  6824: u64 [s1 + 0x360] = a0\n  6828: a0 = u64 [s1 + 0x38]\n  6831: u64 [s1 + 0x368] = a0\n  6835: a0 = u64 [s1 + 0x40]\n  6838: u64 [s1 + 0x370] = a0\n  6842: a0 = s1 + 0x360\n  6846: a1 = u64 [s1 + 0x48]\n  6849: u64 [s1 + 0x378] = a1\n  6853: ra = 226, jump @303\n      : @221 [@dyn 113] (gas: 13)\n  6859: a0 = u64 [s1 + 0x78]\n  6862: u64 [s1 + 0x338] = a0\n  6866: a0 = u64 [s1 + 0x70]\n  6869: u64 [s1 + 0x330] = a0\n  6873: a0 = u64 [s1 + 0x80]\n  6877: u64 [s1 + 0x328] = a0\n  6881: a0 = s1 + 0x340\n  6885: a1 = s1 + 0x320\n  6889: a2 = u64 [s1 + 0x88]\n  6893: u64 [s1 + 0x320] = a2\n  6897: ra = 0xe4\n  6901: t0 = 0x1ae\n  6905: jump @2235\n      : @222 [@dyn 114] (gas: 12)\n  6909: a4 = s1 + 0x300\n  6913: a2 = u64 [a4 + 0x40]\n  6916: a0 = u64 [a4 + 0x48]\n  6919: a1 = u64 [a4 + 0x50]\n  6922: a3 = u64 [a4 + 0x58]\n  6925: u64 [a4 + 0x18] = a3\n  6928: u64 [a4 + 0x10] = a1\n  6931: u64 [a4 + 0x8] = a0\n  6934: a0 = 0x120\n  6938: a1 = s1 + 0x300\n  6942: u64 [a4] = a2\n  6944: ra = 230, jump @24\n      : @223 [@dyn 115] (gas: 13)\n  6950: a0 = u64 [s1 + 0x58]\n  6953: u64 [s1 + 0x2d8] = a0\n  6957: a0 = u64 [s1 + 0x50]\n  6960: u64 [s1 + 0x2d0] = a0\n  6964: a0 = u64 [s1 + 0x60]\n  6967: u64 [s1 + 0x2c8] = a0\n  6971: a0 = s1 + 0x2e0\n  6975: a1 = s1 + 0x2c0\n  6979: a2 = u64 [s1 + 0x68]\n  6982: u64 [s1 + 0x2c0] = a2\n  6986: ra = 0xe8\n  6990: t0 = 0x1f0\n  6994: jump @2235\n      : @224 [@dyn 116] (gas: 12)\n  6998: a4 = s1 + 0x200\n  7002: a2 = u64 [a4 + 0xe0]\n  7006: a0 = u64 [a4 + 0xe8]\n  7010: a1 = u64 [a4 + 0xf0]\n  7014: a3 = u64 [a4 + 0xf8]\n  7018: u64 [a4 + 0xb8] = a3\n  7022: u64 [a4 + 0xb0] = a1\n  7026: u64 [a4 + 0xa8] = a0\n  7030: a0 = 0x140\n  7034: a1 = s1 + 0x2a0\n  7038: u64 [a4 + 0xa0] = a2\n  7042: ra = 234, jump @24\n      : @225 [@dyn 117] (gas: 12)\n  7048: a1 = u64 [s1 + 0x88]\n  7052: a3 = u64 [s1 + 0x70]\n  7055: a0 = a1 | a3\n  7058: a2 = u64 [s1 + 0x78]\n  7061: a4 = u64 [s1 + 0x80]\n  7065: a2 = a2 | a4\n  7068: a0 = a0 | a2\n  7071: a0 = a0 >> 0x20\n  7074: a2 = a2 | a3\n  7077: a2 = a2 << 0x20\n  7080: a0 = a0 | a2\n  7083: jump @253 if a0 != 0\n      : @226 (gas: 2)\n  7087: a0 = s1 + 0x280\n  7091: ra = 236, jump @22\n      : @227 [@dyn 118] (gas: 10)\n  7097: a4 = u64 [s1 + 0x88]\n  7101: a0 = u64 [s1 + 0x78]\n  7104: a1 = u64 [s1 + 0x70]\n  7107: a0 = a0 | a1\n  7110: a1 = 0xffffffe0\n  7120: a1 = a4 <u a1\n  7123: a2 = u64 [s1 + 0x80]\n  7127: a1 = 0 if a2 != 0\n  7129: a1 = 0 if a0 != 0\n  7131: jump @253 if a1 == 0\n      : @228 (gas: 13)\n  7135: a3 = s1 + 0x200\n  7139: a0 = u64 [a3 + 0x98]\n  7143: a5 = u64 [a3 + 0x90]\n  7147: a1 = u64 [a3 + 0x80]\n  7151: a2 = u64 [a3 + 0x88]\n  7155: a3 = a1 | a5\n  7158: a0 = a0 | a2\n  7161: a3 = a3 | a0\n  7164: a3 = a3 >> 0x20\n  7167: a0 = a0 | a5\n  7170: a0 = a0 << 0x20\n  7173: a0 = a0 | a3\n  7176: jump @253 if a0 != 0\n      : @229 (gas: 3)\n  7180: i32 a0 = a4 + 0x20\n  7183: u64 [s1 + 0x138] = a1\n  7187: ra = 238, jump @37\n      : @230 [@dyn 119] (gas: 1)\n  7193: t0 = 240, jump @2342\n      : @231 [@dyn 120] (gas: 5)\n  7200: ra = 0xf2\n  7204: ecalli 11 // 'hash_keccak_256'\n  7206: a3 = u64 [s1 + 0x130]\n  7210: t0 = 0xf4\n  7214: jump @2224\n      : @232 [@dyn 121] (gas: 2)\n  7218: a3 = u64 [s1 + 0x130]\n  7222: t0 = 244, jump @2224\n      : @233 [@dyn 122] (gas: 8)\n  7229: a3 = s1 + 0x200\n  7233: u64 [a3 + 0x78] = a2\n  7236: u64 [a3 + 0x70] = a1\n  7239: u64 [a3 + 0x68] = a0\n  7242: a0 = 0xe0\n  7246: a1 = s1 + 0x260\n  7250: u64 [a3 + 0x60] = a4\n  7253: ra = 246, jump @24\n      : @234 [@dyn 123] (gas: 12)\n  7259: a1 = u64 [s1 + 0x68]\n  7262: a3 = u64 [s1 + 0x50]\n  7265: a0 = a1 | a3\n  7268: a2 = u64 [s1 + 0x60]\n  7271: a4 = u64 [s1 + 0x58]\n  7274: a2 = a2 | a4\n  7277: a0 = a0 | a2\n  7280: a0 = a0 >> 0x20\n  7283: a2 = a2 | a3\n  7286: a2 = a2 << 0x20\n  7289: a0 = a0 | a2\n  7292: jump @253 if a0 != 0\n      : @235 (gas: 2)\n  7296: a0 = s1 + 0x240\n  7300: ra = 248, jump @22\n      : @236 [@dyn 124] (gas: 10)\n  7306: a4 = u64 [s1 + 0x68]\n  7309: a0 = u64 [s1 + 0x50]\n  7312: a1 = u64 [s1 + 0x58]\n  7315: a0 = a0 | a1\n  7318: a1 = 0xffffffe0\n  7328: a1 = a4 <u a1\n  7331: a2 = u64 [s1 + 0x60]\n  7334: a1 = 0 if a2 != 0\n  7336: a1 = 0 if a0 != 0\n  7338: jump @253 if a1 == 0\n      : @237 (gas: 13)\n  7342: a3 = s1 + 0x200\n  7346: a0 = u64 [a3 + 0x58]\n  7349: a5 = u64 [a3 + 0x50]\n  7352: a1 = u64 [a3 + 0x40]\n  7355: a2 = u64 [a3 + 0x48]\n  7358: a3 = a1 | a5\n  7361: a0 = a0 | a2\n  7364: a3 = a3 | a0\n  7367: a3 = a3 >> 0x20\n  7370: a0 = a0 | a5\n  7373: a0 = a0 << 0x20\n  7376: a0 = a0 | a3\n  7379: jump @253 if a0 != 0\n      : @238 (gas: 3)\n  7383: i32 a0 = a4 + 0x20\n  7386: u64 [s1 + 0x138] = a1\n  7390: ra = 250, jump @37\n      : @239 [@dyn 125] (gas: 1)\n  7396: t0 = 252, jump @2342\n      : @240 [@dyn 126] (gas: 5)\n  7403: ra = 0xfe\n  7407: ecalli 11 // 'hash_keccak_256'\n  7409: a3 = u64 [s1 + 0x130]\n  7413: t0 = 0x100\n  7417: jump @2224\n      : @241 [@dyn 127] (gas: 2)\n  7421: a3 = u64 [s1 + 0x130]\n  7425: t0 = 256, jump @2224\n      : @242 [@dyn 128] (gas: 7)\n  7432: u64 [s1 + 0x238] = a2\n  7436: u64 [s1 + 0x230] = a1\n  7440: u64 [s1 + 0x228] = a0\n  7444: a0 = 0x100\n  7448: a1 = s1 + 0x220\n  7452: u64 [s1 + 0x220] = a4\n  7456: ra = 258, jump @24\n      : @243 [@dyn 129] (gas: 15)\n  7462: i32 a0 = s1 + 0x580\n  7466: ecalli 7 // 'chain_id'\n  7468: a4 = s1 + 0x500\n  7472: a2 = u64 [a4 + 0x80]\n  7476: a0 = u64 [a4 + 0x88]\n  7480: a1 = u64 [a4 + 0x90]\n  7484: a3 = u64 [a4 + 0x98]\n  7488: a4 = s1 + 0x200\n  7492: u64 [a4 + 0x18] = a3\n  7495: u64 [a4 + 0x10] = a1\n  7498: u64 [a4 + 0x8] = a0\n  7501: a0 = 0xa0\n  7505: a1 = s1 + 0x200\n  7509: u64 [a4] = a2\n  7511: ra = 260, jump @24\n      : @244 [@dyn 130] (gas: 2)\n  7517: a0 = s1 + 0x1e0\n  7521: ra = 262, jump @477\n      : @245 [@dyn 131] (gas: 11)\n  7527: a2 = u64 [s1 + 0x1e0]\n  7531: a0 = u64 [s1 + 0x1e8]\n  7535: a1 = u64 [s1 + 0x1f0]\n  7539: a3 = u64 [s1 + 0x1f8]\n  7543: u64 [s1 + 0x1d8] = a3\n  7547: u64 [s1 + 0x1d0] = a1\n  7551: u64 [s1 + 0x1c8] = a0\n  7555: a0 = 0x80\n  7559: a1 = s1 + 0x1c0\n  7563: u64 [s1 + 0x1c0] = a2\n  7567: ra = 264, jump @24\n      : @246 [@dyn 132] (gas: 9)\n  7573: a0 = 0x30160\n  7578: u64 [s1 + 0x138] = a0\n  7582: i32 a0 = a0 + 0\n  7584: u64 [s1 + 0x130] = a0\n  7588: ra = 0x10a\n  7592: ecalli 0 // 'address'\n  7593: a2 = u64 [s1 + 0x138]\n  7597: t0 = 0x10c\n  7601: jump @2242\n      : @247 [@dyn 133] (gas: 2)\n  7605: a2 = u64 [s1 + 0x138]\n  7609: t0 = 268, jump @2242\n      : @248 [@dyn 134] (gas: 4)\n  7616: a0 = 0xc0\n  7620: a1 = s1 + 0x1a0\n  7624: u64 [s1 + 0x1a0] = a3\n  7628: ra = 270, jump @24\n      : @249 [@dyn 135] (gas: 4)\n  7634: a0 = u64 [s1 + 0x130]\n  7638: ra = 0x110\n  7642: ecalli 6 // 'caller'\n  7644: fallthrough\n      : @250 [@dyn 136] (gas: 3)\n  7645: a4 = s1 + 0x100\n  7649: a2 = u64 [a4 + 0x38]\n  7652: t0 = 274, jump @2231\n      : @251 [@dyn 137] (gas: 15)\n  7659: a2 = u64 [s1 + 0x10]\n  7662: u64 [a4 + 0x78] = a2\n  7665: a2 = u64 [s1 + 0x18]\n  7668: u64 [a4 + 0x70] = a2\n  7671: a2 = u64 [s1 + 0x20]\n  7674: u64 [a4 + 0x68] = a2\n  7677: a2 = u64 [s1 + 0x28]\n  7680: u64 [a4 + 0x60] = a2\n  7683: u64 [s1 + 408] = 0\n  7687: u64 [a4 + 0x90] = a1\n  7691: u64 [a4 + 0x88] = a0\n  7695: a0 = s1 + 0x180\n  7699: a1 = s1 + 0x160\n  7703: u64 [a4 + 0x80] = a3\n  7707: ra = 276, jump @347\n      : @252 [@dyn 138] (gas: 7)\n  7713: sp = s0 + 0xfffffffffffffa40\n  7717: a0 = sp + 0x500\n  7721: ra = u64 [a0 + 0xb8]\n  7725: s0 = u64 [a0 + 0xb0]\n  7729: s1 = u64 [a0 + 0xa8]\n  7733: sp = sp + 0x5c0\n  7737: ret\n      : @253 (gas: 1)\n  7739: trap\n      : @254 (gas: 3)\n  7740: ra = 0x116\n  7744: t0 = 0x86\n  7748: jump @2232\n      : @255 [@dyn 139] (gas: 33)\n  7752: sp = sp + 0xffffffffffffffa0\n  7755: u64 [sp + 0x58] = ra\n  7758: u64 [sp + 0x50] = s0\n  7761: u64 [sp + 0x48] = s1\n  7764: s0 = sp + 0x60\n  7767: sp = sp & 0xfffffffffffffff0\n  7770: a2 = u64 [a1 + 0x10]\n  7773: a5 = u64 [a1 + 0x8]\n  7776: a4 = u64 [a1]\n  7778: a1 = u64 [a1 + 0x18]\n  7781: t0 = a2 << 0x3f\n  7784: a3 = a5 >> 0x1\n  7787: t0 = a3 | t0\n  7790: a3 = a1 << 0x3f\n  7793: a2 = a2 >> 0x1\n  7796: a3 = a3 | a2\n  7799: a5 = a5 << 0x3f\n  7802: a2 = a4 >> 0x1\n  7805: a5 = a5 | a2\n  7808: t1 = a1 >> 0x1\n  7811: a4 = a4 & 0x1\n  7814: a1 = -a4\n  7816: s1 = a4 <u 0x1\n  7819: a2 = a5 & 0x7f\n  7822: t2 = a1 & a3\n  7825: a3 = a1 & t0\n  7828: a2 = a5 if a4 != 0\n  7831: a4 = a1 & t1\n  7834: a1 = a2 <u 0x20\n  7837: a1 = 0 if a3 != 0\n  7839: a5 = t2 | a4\n  7842: a1 = 0 if a5 != 0\n  7844: jump @258 if s1 != a1\n      : @256 (gas: 5)\n  7847: u64 [a0] = a2\n  7849: u64 [a0 + 0x8] = a3\n  7852: u64 [a0 + 0x10] = t2\n  7855: u64 [a0 + 0x18] = a4\n  7858: t0 = 280, jump @2229\n      : @257 [@dyn 140] (gas: 1)\n  7865: ret\n      : @258 (gas: 8)\n  7867: u64 [sp + 48] = 0\n  7870: u64 [sp + 40] = 0\n  7873: u64 [sp + 32] = 0\n  7876: a0 = 0x4e487b7100000000\n  7886: a1 = sp + 0x20\n  7889: u64 [sp + 0x38] = a0\n  7892: a0 = 0\n  7894: ra = 282, jump @24\n      : @259 [@dyn 141] (gas: 7)\n  7900: u64 [sp + 24] = 0\n  7903: u64 [sp + 16] = 0\n  7906: u64 [sp + 0] = 0x22\n  7909: a0 = 0x4\n  7912: a1 = sp\n  7914: u64 [sp + 8] = 0\n  7917: ra = 284, jump @24\n      : @260 [@dyn 142] (gas: 2)\n  7923: a1 = i32 [0x20150]\n  7928: jump @262 if a1 >u 63\n      : @261 (gas: 2)\n  7932: u32 [0x20150] = 0x40\n  7938: fallthrough\n      : @262 (gas: 7)\n  7939: a1 = 0x20160\n  7944: i32 a1 = a1 + 0\n  7946: a0 = 0x1\n  7949: a2 = 0x24\n  7952: ra = 0x11e\n  7956: ecalli 16 // 'seal_return'\n  7958: fallthrough\n      : @263 [@dyn 143] (gas: 15)\n  7959: sp = sp + 0xffffffffffffffa0\n  7962: u64 [sp + 0x58] = ra\n  7965: u64 [sp + 0x50] = s0\n  7968: u64 [sp + 0x48] = s1\n  7971: s0 = sp + 0x60\n  7974: sp = sp & 0xffffffffffffffe0\n  7977: s1 = sp\n  7979: u64 [s1 + 0x18] = a0\n  7982: u64 [s1 + 56] = 0\n  7985: u64 [s1 + 48] = 0\n  7988: u64 [s1 + 40] = 0\n  7991: a1 = s1 + 0x20\n  7994: u64 [s1 + 32] = 0x3\n  7998: a0 = 0\n  8000: ra = 288, jump @24\n      : @264 [@dyn 144] (gas: 2)\n  8006: a1 = i32 [0x20150]\n  8011: jump @266 if a1 >u 31\n      : @265 (gas: 4)\n  8015: a1 = 0x20\n  8018: u32 [0x20150] = a1\n  8023: t0 = 0x122\n  8027: jump @2260\n      : @266 (gas: 1)\n  8031: t0 = 290, jump @2260\n      : @267 [@dyn 145] (gas: 20)\n  8038: a0 = 0x20160\n  8043: i32 a0 = a0 + 0\n  8045: i32 a2 = a2 + 0\n  8047: a1 = 0x20\n  8050: ecalli 11 // 'hash_keccak_256'\n  8052: a3 = u64 [s1 + 0x10]\n  8055: a0 = u64 [a3 + 0x18]\n  8058: a1 = u64 [a3 + 0x10]\n  8061: a2 = u64 [a3 + 0x8]\n  8064: a3 = u64 [a3]\n  8066: a0 = reverse a0\n  8068: a1 = reverse a1\n  8070: a2 = reverse a2\n  8072: a3 = reverse a3\n  8074: a4 = u64 [s1 + 0x18]\n  8077: u64 [a4 + 0x18] = a3\n  8080: u64 [a4 + 0x10] = a2\n  8083: u64 [a4 + 0x8] = a1\n  8086: u64 [a4] = a0\n  8088: t0 = 292, jump @2229\n      : @268 [@dyn 146] (gas: 1)\n  8095: ret\n      : @269 (gas: 19)\n  8097: sp = sp + 0xffffffffffffffa0\n  8100: u64 [sp + 0x58] = ra\n  8103: u64 [sp + 0x50] = s0\n  8106: u64 [sp + 0x48] = s1\n  8109: s0 = sp + 0x60\n  8112: sp = sp & 0xffffffffffffffe0\n  8115: s1 = sp\n  8117: a2 = u64 [a1]\n  8119: a3 = u64 [a1 + 0x8]\n  8122: a4 = u64 [a1 + 0x10]\n  8125: a1 = u64 [a1 + 0x18]\n  8128: u64 [s1 + 0x18] = a0\n  8131: u64 [s1 + 0x38] = a1\n  8134: u64 [s1 + 0x30] = a4\n  8137: u64 [s1 + 0x28] = a3\n  8140: a1 = s1 + 0x20\n  8143: u64 [s1 + 0x20] = a2\n  8146: a0 = 0\n  8148: ra = 294, jump @24\n      : @270 [@dyn 147] (gas: 2)\n  8154: a1 = i32 [0x20150]\n  8159: jump @272 if a1 >u 31\n      : @271 (gas: 4)\n  8163: a1 = 0x20\n  8166: u32 [0x20150] = a1\n  8171: t0 = 0x128\n  8175: jump @2260\n      : @272 (gas: 1)\n  8179: t0 = 296, jump @2260\n      : @273 [@dyn 148] (gas: 20)\n  8186: a0 = 0x20160\n  8191: i32 a0 = a0 + 0\n  8193: i32 a2 = a2 + 0\n  8195: a1 = 0x20\n  8198: ecalli 11 // 'hash_keccak_256'\n  8200: a3 = u64 [s1 + 0x10]\n  8203: a0 = u64 [a3 + 0x18]\n  8206: a1 = u64 [a3 + 0x10]\n  8209: a2 = u64 [a3 + 0x8]\n  8212: a3 = u64 [a3]\n  8214: a0 = reverse a0\n  8216: a1 = reverse a1\n  8218: a2 = reverse a2\n  8220: a3 = reverse a3\n  8222: a4 = u64 [s1 + 0x18]\n  8225: u64 [a4 + 0x18] = a3\n  8228: u64 [a4 + 0x10] = a2\n  8231: u64 [a4 + 0x8] = a1\n  8234: u64 [a4] = a0\n  8236: t0 = 298, jump @2229\n      : @274 [@dyn 149] (gas: 1)\n  8243: ret\n      : @275 [@dyn 150] (gas: 9)\n  8245: t0 = u64 [a0 + 0x18]\n  8248: a4 = u64 [a0 + 0x10]\n  8251: a3 = u64 [a0]\n  8253: a5 = u64 [a0 + 0x8]\n  8256: a0 = a4 | t0\n  8259: a2 = a3 <u 0x20\n  8262: a2 = 0 if a5 != 0\n  8264: a2 = 0 if a0 != 0\n  8266: jump @287 if a2 != 0\n      : @276 (gas: 19)\n  8270: u64 [s1 + 0x30] = a3\n  8273: u64 [s1 + 0x38] = a5\n  8276: u64 [s1 + 0x48] = a4\n  8279: u64 [s1 + 0x20] = t0\n  8282: a0 = u64 [a1 + 0x18]\n  8285: u64 [s1 + 0x40] = a0\n  8288: a0 = u64 [a1 + 0x10]\n  8291: u64 [s1 + 0x18] = a0\n  8294: a0 = u64 [a1 + 0x8]\n  8297: u64 [s1 + 0x58] = a0\n  8300: a0 = u64 [a1]\n  8302: u64 [s1 + 0x50] = a0\n  8305: u64 [s1 + 120] = 0\n  8308: u64 [s1 + 112] = 0\n  8311: u64 [s1 + 104] = 0\n  8314: a1 = s1 + 0x60\n  8317: u64 [s1 + 96] = 0x3\n  8321: a0 = 0\n  8323: ra = 302, jump @24\n      : @277 [@dyn 151] (gas: 2)\n  8329: a1 = i32 [0x20150]\n  8334: jump @279 if a1 >u 31\n      : @278 (gas: 4)\n  8338: a1 = 0x20\n  8341: u32 [0x20150] = a1\n  8346: t0 = 0x130\n  8350: jump @2356\n      : @279 (gas: 1)\n  8354: t0 = 304, jump @2356\n      : @280 [@dyn 152] (gas: 8)\n  8361: a0 = 0x20160\n  8366: i32 a0 = a0 + 0\n  8368: i32 a2 = a2 + 0\n  8370: a1 = 0x20\n  8373: ra = 0x132\n  8377: ecalli 11 // 'hash_keccak_256'\n  8379: t0 = 0x134\n  8383: jump @2314\n      : @281 [@dyn 153] (gas: 1)\n  8387: t0 = 308, jump @2314\n      : @282 [@dyn 154] (gas: 71)\n  8394: t0 = u64 [s1 + 0x18]\n  8397: a2 = a2 + t0\n  8400: u64 [s1 + 0x10] = a2\n  8403: a2 = a2 << 0x3b\n  8406: a4 = a3 >> 0x5\n  8409: a2 = a2 | a4\n  8412: a3 = a3 << 0x3b\n  8415: a1 = a1 >> 0x5\n  8418: a0 = a1 | a3\n  8421: a1 = t1 <u 0x20\n  8424: a1 = 0 if a5 != 0\n  8426: a4 = u64 [s1 + 0x28]\n  8429: t1 = u64 [a4 + 0x18]\n  8432: a5 = u64 [a4 + 0x10]\n  8435: a3 = u64 [s1 + 0x40]\n  8438: a4 = t0 | a3\n  8441: a1 = 0 if a4 != 0\n  8443: ra = reverse t1\n  8445: a3 = reverse a5\n  8447: a2 = 0 if a1 != 0\n  8449: a0 = 0 if a1 != 0\n  8451: a0 = a0 + ra\n  8454: u64 [s1 + 0x58] = a0\n  8457: a0 = a0 <u ra\n  8460: a5 = a3 + a0\n  8463: a2 = a2 + a5\n  8466: u64 [s1 + 0x50] = a2\n  8469: a5 = a2 ^ a3\n  8472: a2 = a2 <u a3\n  8475: a2 = a0 if a5 == 0\n  8478: u64 [s1 + 0x8] = a2\n  8481: a0 = u64 [s1 + 0x30]\n  8484: t2 = a0 + 0x1f\n  8487: a2 = t2 <u a0\n  8490: a0 = u64 [s1 + 0x38]\n  8493: a4 = a0 + a2\n  8496: a5 = a4 <u a0\n  8499: a5 = a2 if a2 == 0\n  8502: t1 = u64 [s1 + 0x48]\n  8505: t1 = t1 + a5\n  8508: a2 = t1 << 0x3b\n  8511: a0 = a4 >> 0x5\n  8514: a0 = a0 | a2\n  8517: a4 = a4 << 0x3b\n  8520: a2 = t2 >> 0x5\n  8523: a2 = a2 | a4\n  8526: a2 = a2 + ra\n  8529: u64 [s1 + 0x38] = a2\n  8532: a2 = a2 <u ra\n  8535: a4 = a3 + a2\n  8538: a4 = a4 + a0\n  8541: a0 = a4 ^ a3\n  8544: u64 [s1 + 0x30] = a4\n  8547: a3 = a4 <u a3\n  8550: a3 = a2 if a0 == 0\n  8553: a2 = u64 [s1 + 0x10]\n  8556: a0 = a2 <u t0\n  8559: a4 = u64 [s1 + 0x40]\n  8562: a0 = a0 + a4\n  8565: a2 = a2 >> 0x5\n  8568: a4 = a0 << 0x3b\n  8571: a2 = a2 | a4\n  8574: a4 = u64 [s1 + 0x28]\n  8577: t0 = u64 [a4]\n  8579: a4 = u64 [a4 + 0x8]\n  8582: a0 = a0 >> 0x5\n  8585: a2 = 0 if a1 != 0\n  8587: a0 = 0 if a1 != 0\n  8589: a1 = reverse a4\n  8591: a4 = reverse t0\n  8593: t0 = 310, jump @2355\n      : @283 [@dyn 155] (gas: 25)\n  8600: t0 = a0 + a2\n  8603: a0 = u64 [s1 + 0x48]\n  8606: a0 = t1 <u a0\n  8609: a2 = u64 [s1 + 0x20]\n  8612: a0 = a0 + a2\n  8615: a2 = t1 >> 0x5\n  8618: a5 = a0 << 0x3b\n  8621: a2 = a2 | a5\n  8624: ra = u64 [s1 + 0x58]\n  8627: a0 = a0 >> 0x5\n  8630: a0 = a0 + a4\n  8633: a4 = u64 [s1 + 0x50]\n  8636: a2 = a2 + a1\n  8639: a1 = a2 <u a1\n  8642: a0 = a0 + a1\n  8645: a3 = a3 + a2\n  8648: u64 [s1 + 0x28] = a3\n  8651: a1 = a3 <u a2\n  8654: a0 = a0 + a1\n  8657: u64 [s1 + 0x20] = a0\n  8660: a0 = sp + 0xffffffffffffffe0\n  8663: a5 = a0 & 0xffffffffffffffe0\n  8666: sp = a5\n  8668: u64 [s1 + 0x18] = a5\n  8671: fallthrough\n      : @284 (gas: 20)\n  8672: a0 = u64 [s1 + 0x38]\n  8675: a0 = ra <u a0\n  8678: a2 = u64 [s1 + 0x30]\n  8681: a1 = a4 ^ a2\n  8684: a2 = a4 <u a2\n  8687: a2 = a0 if a1 == 0\n  8690: a0 = u64 [s1 + 0x28]\n  8693: t1 = t2 <u a0\n  8696: a3 = u64 [s1 + 0x20]\n  8699: a1 = t0 ^ a3\n  8702: a3 = t0 <u a3\n  8705: a3 = t1 if a1 == 0\n  8708: a0 = t2 ^ a0\n  8711: a0 = a0 | a1\n  8714: a3 = a2 if a0 == 0\n  8717: u64 [a5] = ra\n  8719: u64 [a5 + 0x8] = a4\n  8722: u64 [a5 + 0x10] = t2\n  8725: u64 [a5 + 0x18] = t0\n  8728: jump @287 if a3 == 0\n      : @285 (gas: 11)\n  8731: u64 [s1 + 152] = 0\n  8735: u64 [s1 + 144] = 0\n  8739: u64 [s1 + 136] = 0\n  8743: u64 [s1 + 128] = 0\n  8747: a1 = s1 + 0x80\n  8751: a0 = a5\n  8753: u64 [s1 + 0x58] = ra\n  8756: u64 [s1 + 0x50] = a4\n  8759: u64 [s1 + 0x48] = t0\n  8762: u64 [s1 + 0x40] = t2\n  8765: ra = 312, jump @28\n      : @286 [@dyn 156] (gas: 15)\n  8771: a5 = u64 [s1 + 0x18]\n  8774: t0 = u64 [s1 + 0x48]\n  8777: a4 = u64 [s1 + 0x50]\n  8780: ra = u64 [s1 + 0x58]\n  8783: ra = ra + 0x1\n  8786: a0 = ra <u 0x1\n  8789: a4 = a4 + a0\n  8792: a0 = ra | a4\n  8795: a0 = a0 <u 0x1\n  8798: a1 = u64 [s1 + 0x40]\n  8801: a0 = a0 + a1\n  8804: a1 = a0 <u a1\n  8807: t0 = t0 + a1\n  8810: t2 = a0\n  8812: jump @284\n      : @287 (gas: 1)\n  8815: t0 = 314, jump @2350\n      : @288 [@dyn 157] (gas: 1)\n  8822: ret\n      : @289 [@dyn 158] (gas: 9)\n  8824: t0 = u64 [a1 + 0x18]\n  8827: t1 = u64 [a1 + 0x10]\n  8830: a5 = u64 [a1]\n  8832: a4 = u64 [a1 + 0x8]\n  8835: a1 = t1 | t0\n  8838: a3 = a5 <u 0x20\n  8841: a3 = 0 if a4 != 0\n  8843: a3 = 0 if a1 != 0\n  8845: jump @301 if a3 != 0\n      : @290 (gas: 23)\n  8849: u64 [s1 + 0x30] = a5\n  8852: u64 [s1 + 0x38] = a4\n  8855: u64 [s1 + 0x48] = t1\n  8858: u64 [s1 + 0x20] = t0\n  8861: a1 = u64 [a2 + 0x18]\n  8864: u64 [s1 + 0x40] = a1\n  8867: a1 = u64 [a2 + 0x10]\n  8870: u64 [s1 + 0x18] = a1\n  8873: a1 = u64 [a2 + 0x8]\n  8876: u64 [s1 + 0x58] = a1\n  8879: a1 = u64 [a2]\n  8881: u64 [s1 + 0x50] = a1\n  8884: a2 = u64 [a0 + 0x18]\n  8887: a1 = u64 [a0 + 0x10]\n  8890: a3 = u64 [a0 + 0x8]\n  8893: a0 = u64 [a0]\n  8895: u64 [s1 + 0x60] = a0\n  8898: u64 [s1 + 0x68] = a3\n  8901: u64 [s1 + 0x70] = a1\n  8904: a1 = s1 + 0x60\n  8907: u64 [s1 + 0x78] = a2\n  8910: a0 = 0\n  8912: ra = 318, jump @24\n      : @291 [@dyn 159] (gas: 2)\n  8918: a1 = i32 [0x20150]\n  8923: jump @293 if a1 >u 31\n      : @292 (gas: 4)\n  8927: a1 = 0x20\n  8930: u32 [0x20150] = a1\n  8935: t0 = 0x140\n  8939: jump @2356\n      : @293 (gas: 1)\n  8943: t0 = 320, jump @2356\n      : @294 [@dyn 160] (gas: 8)\n  8950: a0 = 0x20160\n  8955: i32 a0 = a0 + 0\n  8957: i32 a2 = a2 + 0\n  8959: a1 = 0x20\n  8962: ra = 0x142\n  8966: ecalli 11 // 'hash_keccak_256'\n  8968: t0 = 0x144\n  8972: jump @2314\n      : @295 [@dyn 161] (gas: 1)\n  8976: t0 = 324, jump @2314\n      : @296 [@dyn 162] (gas: 71)\n  8983: t0 = u64 [s1 + 0x18]\n  8986: a2 = a2 + t0\n  8989: u64 [s1 + 0x10] = a2\n  8992: a2 = a2 << 0x3b\n  8995: a4 = a3 >> 0x5\n  8998: a2 = a2 | a4\n  9001: a3 = a3 << 0x3b\n  9004: a1 = a1 >> 0x5\n  9007: a0 = a1 | a3\n  9010: a1 = t1 <u 0x20\n  9013: a1 = 0 if a5 != 0\n  9015: a4 = u64 [s1 + 0x28]\n  9018: t1 = u64 [a4 + 0x18]\n  9021: a5 = u64 [a4 + 0x10]\n  9024: a3 = u64 [s1 + 0x40]\n  9027: a4 = t0 | a3\n  9030: a1 = 0 if a4 != 0\n  9032: ra = reverse t1\n  9034: a3 = reverse a5\n  9036: a2 = 0 if a1 != 0\n  9038: a0 = 0 if a1 != 0\n  9040: a0 = a0 + ra\n  9043: u64 [s1 + 0x58] = a0\n  9046: a0 = a0 <u ra\n  9049: a5 = a3 + a0\n  9052: a2 = a2 + a5\n  9055: u64 [s1 + 0x50] = a2\n  9058: a5 = a2 ^ a3\n  9061: a2 = a2 <u a3\n  9064: a2 = a0 if a5 == 0\n  9067: u64 [s1 + 0x8] = a2\n  9070: a0 = u64 [s1 + 0x30]\n  9073: t2 = a0 + 0x1f\n  9076: a2 = t2 <u a0\n  9079: a0 = u64 [s1 + 0x38]\n  9082: a4 = a0 + a2\n  9085: a5 = a4 <u a0\n  9088: a5 = a2 if a2 == 0\n  9091: t1 = u64 [s1 + 0x48]\n  9094: t1 = t1 + a5\n  9097: a2 = t1 << 0x3b\n  9100: a0 = a4 >> 0x5\n  9103: a0 = a0 | a2\n  9106: a4 = a4 << 0x3b\n  9109: a2 = t2 >> 0x5\n  9112: a2 = a2 | a4\n  9115: a2 = a2 + ra\n  9118: u64 [s1 + 0x38] = a2\n  9121: a2 = a2 <u ra\n  9124: a4 = a3 + a2\n  9127: a4 = a4 + a0\n  9130: a0 = a4 ^ a3\n  9133: u64 [s1 + 0x30] = a4\n  9136: a3 = a4 <u a3\n  9139: a3 = a2 if a0 == 0\n  9142: a2 = u64 [s1 + 0x10]\n  9145: a0 = a2 <u t0\n  9148: a4 = u64 [s1 + 0x40]\n  9151: a0 = a0 + a4\n  9154: a2 = a2 >> 0x5\n  9157: a4 = a0 << 0x3b\n  9160: a2 = a2 | a4\n  9163: a4 = u64 [s1 + 0x28]\n  9166: t0 = u64 [a4]\n  9168: a4 = u64 [a4 + 0x8]\n  9171: a0 = a0 >> 0x5\n  9174: a2 = 0 if a1 != 0\n  9176: a0 = 0 if a1 != 0\n  9178: a1 = reverse a4\n  9180: a4 = reverse t0\n  9182: t0 = 326, jump @2355\n      : @297 [@dyn 163] (gas: 25)\n  9189: t0 = a0 + a2\n  9192: a0 = u64 [s1 + 0x48]\n  9195: a0 = t1 <u a0\n  9198: a2 = u64 [s1 + 0x20]\n  9201: a0 = a0 + a2\n  9204: a2 = t1 >> 0x5\n  9207: a5 = a0 << 0x3b\n  9210: a2 = a2 | a5\n  9213: ra = u64 [s1 + 0x58]\n  9216: a0 = a0 >> 0x5\n  9219: a0 = a0 + a4\n  9222: a4 = u64 [s1 + 0x50]\n  9225: a2 = a2 + a1\n  9228: a1 = a2 <u a1\n  9231: a0 = a0 + a1\n  9234: a3 = a3 + a2\n  9237: u64 [s1 + 0x28] = a3\n  9240: a1 = a3 <u a2\n  9243: a0 = a0 + a1\n  9246: u64 [s1 + 0x20] = a0\n  9249: a0 = sp + 0xffffffffffffffe0\n  9252: a5 = a0 & 0xffffffffffffffe0\n  9255: sp = a5\n  9257: u64 [s1 + 0x18] = a5\n  9260: fallthrough\n      : @298 (gas: 20)\n  9261: a0 = u64 [s1 + 0x38]\n  9264: a0 = ra <u a0\n  9267: a2 = u64 [s1 + 0x30]\n  9270: a1 = a4 ^ a2\n  9273: a2 = a4 <u a2\n  9276: a2 = a0 if a1 == 0\n  9279: a0 = u64 [s1 + 0x28]\n  9282: t1 = t2 <u a0\n  9285: a3 = u64 [s1 + 0x20]\n  9288: a1 = t0 ^ a3\n  9291: a3 = t0 <u a3\n  9294: a3 = t1 if a1 == 0\n  9297: a0 = t2 ^ a0\n  9300: a0 = a0 | a1\n  9303: a3 = a2 if a0 == 0\n  9306: u64 [a5] = ra\n  9308: u64 [a5 + 0x8] = a4\n  9311: u64 [a5 + 0x10] = t2\n  9314: u64 [a5 + 0x18] = t0\n  9317: jump @301 if a3 == 0\n      : @299 (gas: 11)\n  9320: u64 [s1 + 152] = 0\n  9324: u64 [s1 + 144] = 0\n  9328: u64 [s1 + 136] = 0\n  9332: u64 [s1 + 128] = 0\n  9336: a1 = s1 + 0x80\n  9340: a0 = a5\n  9342: u64 [s1 + 0x58] = ra\n  9345: u64 [s1 + 0x50] = a4\n  9348: u64 [s1 + 0x48] = t0\n  9351: u64 [s1 + 0x40] = t2\n  9354: ra = 328, jump @28\n      : @300 [@dyn 164] (gas: 15)\n  9360: a5 = u64 [s1 + 0x18]\n  9363: t0 = u64 [s1 + 0x48]\n  9366: a4 = u64 [s1 + 0x50]\n  9369: ra = u64 [s1 + 0x58]\n  9372: ra = ra + 0x1\n  9375: a0 = ra <u 0x1\n  9378: a4 = a4 + a0\n  9381: a0 = ra | a4\n  9384: a0 = a0 <u 0x1\n  9387: a1 = u64 [s1 + 0x40]\n  9390: a0 = a0 + a1\n  9393: a1 = a0 <u a1\n  9396: t0 = t0 + a1\n  9399: t2 = a0\n  9401: jump @298\n      : @301 (gas: 1)\n  9404: t0 = 330, jump @2350\n      : @302 [@dyn 165] (gas: 1)\n  9411: ret\n      : @303 (gas: 23)\n  9413: sp = sp + 0xfffffffffffffcc0\n  9417: a1 = sp + 0x300\n  9421: u64 [a1 + 0x38] = ra\n  9424: u64 [a1 + 0x30] = s0\n  9427: u64 [a1 + 0x28] = s1\n  9430: s0 = sp + 0x340\n  9434: sp = sp & 0xffffffffffffffe0\n  9437: s1 = sp\n  9439: a3 = u64 [a0 + 0x10]\n  9442: a4 = u64 [a0 + 0x18]\n  9445: a2 = u64 [a0 + 0x8]\n  9448: a1 = u64 [a0]\n  9450: u64 [s1 + 0x48] = a2\n  9453: u64 [s1 + 0x38] = a4\n  9456: a0 = a2 | a4\n  9459: a2 = a1 | a3\n  9462: a2 = a2 | a0\n  9465: a2 = a2 >> 0x20\n  9468: u64 [s1 + 0x40] = a3\n  9471: a0 = a0 | a3\n  9474: a0 = a0 << 0x20\n  9477: a0 = a0 | a2\n  9480: jump @345 if a0 != 0\n      : @304 (gas: 3)\n  9484: a0 = s1 + 0x220\n  9488: u64 [s1 + 0x50] = a1\n  9491: ra = 332, jump @22\n      : @305 [@dyn 166] (gas: 12)\n  9497: a3 = s1 + 0x200\n  9501: a1 = u64 [a3 + 0x38]\n  9504: a0 = u64 [a3 + 0x30]\n  9507: a2 = u64 [a3 + 0x28]\n  9510: u64 [s1 + 0x18] = a0\n  9513: u64 [s1 + 0x10] = a1\n  9516: a1 = a1 | a0\n  9519: u64 [s1 + 0x20] = a2\n  9522: a0 = a2 <u 0x1\n  9525: u64 [s1 + 0xb8] = a1\n  9529: a0 = 0 if a1 != 0\n  9531: jump @346 if a0 == 0\n      : @306 (gas: 11)\n  9535: a0 = u64 [s1 + 0x220]\n  9539: u64 [s1 + 0x28] = a0\n  9542: u64 [s1 + 600] = 0\n  9546: u64 [s1 + 592] = 0\n  9550: u64 [s1 + 584] = 0\n  9554: u64 [s1 + 576] = 0x4\n  9559: a0 = s1 + 0x200\n  9563: a1 = s1 + 0x240\n  9567: ra = 0x14e\n  9571: t0 = 0x6\n  9574: jump @2259\n      : @307 [@dyn 167] (gas: 12)\n  9578: a4 = s1 + 0x200\n  9582: a2 = u64 [a4]\n  9584: a0 = u64 [a4 + 0x8]\n  9587: a1 = u64 [a4 + 0x10]\n  9590: a3 = u64 [a4 + 0x18]\n  9593: u64 [s1 + 0x1d8] = a3\n  9597: u64 [s1 + 0x1d0] = a1\n  9601: u64 [s1 + 0x1c8] = a0\n  9605: a0 = s1 + 0x1e0\n  9609: a1 = s1 + 0x1c0\n  9613: u64 [s1 + 0x1c0] = a2\n  9617: ra = 336, jump @255\n      : @308 [@dyn 168] (gas: 28)\n  9623: a5 = s1 + 0x100\n  9627: a0 = u64 [a5 + 0xe0]\n  9631: a1 = u64 [a5 + 0xe8]\n  9635: a2 = u64 [a5 + 0xf0]\n  9639: a3 = u64 [a5 + 0xf8]\n  9643: a4 = u64 [s1 + 0x10]\n  9646: u64 [a5 + 0x78] = a4\n  9649: a4 = u64 [s1 + 0x18]\n  9652: u64 [a5 + 0x70] = a4\n  9655: a4 = u64 [s1 + 0x20]\n  9658: u64 [a5 + 0x68] = a4\n  9661: a4 = u64 [s1 + 0x28]\n  9664: u64 [a5 + 0x60] = a4\n  9667: u64 [a5 + 0x98] = a3\n  9671: u64 [a5 + 0x90] = a2\n  9675: u64 [a5 + 0x88] = a1\n  9679: u64 [a5 + 0x80] = a0\n  9683: u64 [s1 + 440] = 0\n  9687: u64 [s1 + 432] = 0\n  9691: u64 [s1 + 424] = 0\n  9695: a0 = s1 + 0x1a0\n  9699: a1 = s1 + 0x180\n  9703: a2 = s1 + 0x160\n  9707: a3 = 0x4\n  9710: u64 [a5 + 0xa0] = a3\n  9714: ra = 0x152\n  9718: t0 = 0x13c\n  9722: jump @2331\n      : @309 [@dyn 169] (gas: 4)\n  9726: a5 = u64 [s1 + 0x18]\n  9729: a3 = u64 [s1 + 0x28]\n  9732: a4 = u64 [s1 + 0x20]\n  9735: t0 = 340, jump @2357\n      : @310 [@dyn 170] (gas: 6)\n  9742: t0 = u64 [s1 + 0x10]\n  9745: a2 = t0 >u 0\n  9747: a2 = a0 if t0 == 0\n  9750: a0 = u64 [s1 + 0xb8]\n  9754: a2 = a1 if a0 == 0\n  9757: jump @321 if a2 == 0\n      : @311 (gas: 3)\n  9761: a3 = a3 & 0xffffffffffffffe0\n  9764: u64 [s1 + 0x30] = a3\n  9767: t0 = 342, jump @2303\n      : @312 [@dyn 171] (gas: 2)\n  9774: a0 = 0x4\n  9777: t0 = 344, jump @2334\n      : @313 [@dyn 172] (gas: 1)\n  9784: ra = 346, jump @269\n      : @314 [@dyn 173] (gas: 24)\n  9790: ra = 0\n  9792: u64 [s1 + 184] = 0\n  9796: u64 [s1 + 176] = 0\n  9800: t0 = 0\n  9802: u64 [s1 + 168] = 0\n  9806: a4 = s1 + 0x100\n  9810: a3 = u64 [a4 + 0x30]\n  9813: a0 = u64 [a4 + 0x38]\n  9816: a1 = u64 [a4 + 0x20]\n  9819: a2 = u64 [a4 + 0x28]\n  9822: u64 [s1 + 0x70] = a3\n  9825: a5 = u64 [s1 + 0xa0]\n  9829: u64 [a5 + 0x10] = a3\n  9832: t1 = a0\n  9834: u64 [a5 + 0x18] = a0\n  9837: u64 [s1 + 0x98] = a1\n  9841: u64 [a5] = a1\n  9843: a0 = a5\n  9845: a5 = a2\n  9847: u64 [a0 + 0x8] = a2\n  9850: a2 = 0\n  9852: a4 = 0\n  9854: t2 = 0x20\n  9857: fallthrough\n      : @315 (gas: 23)\n  9858: u64 [s1 + 0x90] = a5\n  9862: a0 = u64 [s1 + 0x30]\n  9865: u64 [s1 + 0x80] = a4\n  9869: a0 = a4 <u a0\n  9872: a4 = a0 ^ 0x1\n  9875: u64 [s1 + 0x78] = t0\n  9878: a4 = 0x1 if t0 != 0\n  9881: a0 = u64 [s1 + 0xa8]\n  9885: u64 [s1 + 0x88] = a2\n  9889: a0 = a0 | a2\n  9892: a4 = 0x1 if a0 != 0\n  9895: a1 = u64 [s1 + 0x50]\n  9898: a1 = a1 + t2\n  9901: a3 = u64 [s1 + 0x48]\n  9904: a3 = a3 + ra\n  9907: a2 = u64 [s1 + 0x40]\n  9910: a0 = u64 [s1 + 0xb8]\n  9914: a2 = a2 + a0\n  9917: a0 = u64 [s1 + 0x38]\n  9920: a5 = u64 [s1 + 0xb0]\n  9924: a0 = a0 + a5\n  9927: a5 = t2\n  9929: jump @325 if a4 != 0\n      : @316 (gas: 14)\n  9933: a4 = a1 <u a5\n  9936: a3 = a3 + a4\n  9939: u64 [s1 + 0x58] = a5\n  9942: t0 = a3 ^ ra\n  9945: u64 [s1 + 0x60] = ra\n  9948: a5 = a3 <u ra\n  9951: a5 = a4 if t0 == 0\n  9954: a5 = a5 + a2\n  9957: t0 = a5 <u a2\n  9960: a4 = u64 [s1 + 0xb8]\n  9964: a2 = a2 <u a4\n  9967: a0 = a0 + a2\n  9970: a0 = a0 + t0\n  9973: t0 = 348, jump @2240\n      : @317 [@dyn 174] (gas: 2)\n  9980: u64 [s1 + 0x68] = t1\n  9983: jump @345 if a0 != 0\n      : @318 (gas: 2)\n  9987: a0 = s1 + 0xc0\n  9991: ra = 350, jump @22\n      : @319 [@dyn 175] (gas: 12)\n  9997: a0 = u64 [s1 + 0xd8]\n 10001: a1 = u64 [s1 + 0xd0]\n 10005: a2 = u64 [s1 + 0xc8]\n 10009: a3 = u64 [s1 + 0xc0]\n 10013: a4 = s1 + 0x200\n 10017: u64 [a4 + 0x78] = a0\n 10020: u64 [a4 + 0x70] = a1\n 10023: u64 [a4 + 0x68] = a2\n 10026: u64 [a4 + 0x60] = a3\n 10029: a1 = s1 + 0x260\n 10033: a0 = u64 [s1 + 0xa0]\n 10037: ra = 352, jump @28\n      : @320 [@dyn 176] (gas: 55)\n 10043: t0 = u64 [s1 + 0x98]\n 10047: t0 = t0 + 0x1\n 10050: a0 = t0 <u 0x1\n 10053: t1 = u64 [s1 + 0x90]\n 10057: t1 = t1 + a0\n 10060: a0 = t0 | t1\n 10063: a0 = a0 <u 0x1\n 10066: a1 = u64 [s1 + 0x70]\n 10069: a0 = a0 + a1\n 10072: a1 = a0 <u a1\n 10075: t2 = u64 [s1 + 0x68]\n 10078: t2 = t2 + a1\n 10081: a1 = u64 [s1 + 0x58]\n 10084: a2 = a1 + 0x20\n 10087: u64 [s1 + 0x90] = a2\n 10091: a3 = a2 <u a1\n 10094: a1 = u64 [s1 + 0x60]\n 10097: a2 = a1 + a3\n 10100: u64 [s1 + 0x68] = a2\n 10103: a4 = a2 <u a1\n 10106: a4 = a3 if a3 == 0\n 10109: a1 = u64 [s1 + 0xb8]\n 10113: ra = a1 + a4\n 10116: a4 = ra <u a1\n 10119: a1 = u64 [s1 + 0xb0]\n 10123: a1 = a1 + a4\n 10126: u64 [s1 + 0xb0] = a1\n 10130: a1 = u64 [s1 + 0x80]\n 10134: a4 = a1 + 0x20\n 10137: a5 = a4 <u a1\n 10140: a2 = u64 [s1 + 0x78]\n 10143: a1 = a2 + a5\n 10146: a2 = a1 <u a2\n 10149: a2 = a5 if a5 == 0\n 10152: a3 = u64 [s1 + 0x88]\n 10156: a2 = a2 + a3\n 10159: a5 = a2 <u a3\n 10162: a3 = u64 [s1 + 0xa8]\n 10166: a3 = a3 + a5\n 10169: u64 [s1 + 0xa8] = a3\n 10173: a5 = t1\n 10175: a3 = u64 [s1 + 0xa0]\n 10179: u64 [a3 + 0x8] = t1\n 10182: u64 [s1 + 0x98] = t0\n 10186: u64 [a3] = t0\n 10188: u64 [a3 + 0x10] = a0\n 10191: t1 = t2\n 10193: u64 [a3 + 0x18] = t2\n 10196: u64 [s1 + 0x70] = a0\n 10199: t2 = u64 [s1 + 0x90]\n 10203: a0 = u64 [s1 + 0x68]\n 10206: u64 [s1 + 0xb8] = ra\n 10210: ra = a0\n 10212: t0 = a1\n 10214: jump @315\n      : @321 (gas: 4)\n 10217: a0 = a3 | a5\n 10220: a1 = a4 | t0\n 10223: a0 = a0 | a1\n 10226: jump @337 if a0 == 0\n      : @322 (gas: 10)\n 10230: a0 = u64 [s1 + 0x40]\n 10233: a1 = u64 [s1 + 0x38]\n 10236: a0 = a0 | a1\n 10239: a1 = 0xffffffe0\n 10249: a2 = u64 [s1 + 0x50]\n 10252: a1 = a2 <u a1\n 10255: a3 = u64 [s1 + 0x48]\n 10258: a1 = 0 if a3 != 0\n 10260: a1 = 0 if a0 != 0\n 10262: jump @345 if a1 == 0\n      : @323 (gas: 3)\n 10266: i32 a1 = a2 + 0x20\n 10269: a0 = s1 + 0x140\n 10273: ra = 354, jump @22\n      : @324 [@dyn 177] (gas: 14)\n 10279: a1 = s1 + 0x100\n 10283: a0 = u64 [a1 + 0x58]\n 10286: u64 [s1 + 0xb0] = a0\n 10290: a0 = u64 [a1 + 0x50]\n 10293: u64 [s1 + 0xa8] = a0\n 10297: a0 = u64 [a1 + 0x48]\n 10300: u64 [s1 + 0x98] = a0\n 10304: a0 = u64 [a1 + 0x40]\n 10307: u64 [s1 + 0xa0] = a0\n 10311: a3 = u64 [s1 + 0x28]\n 10314: a4 = u64 [s1 + 0x20]\n 10317: a2 = u64 [s1 + 0x18]\n 10320: t0 = u64 [s1 + 0x10]\n 10323: jump @338\n      : @325 (gas: 12)\n 10326: t2 = ra\n 10328: ra = a5\n 10330: t0 = u64 [s1 + 0x28]\n 10333: a4 = u64 [s1 + 0x30]\n 10336: a4 = a4 ^ t0\n 10339: a5 = u64 [s1 + 0x18]\n 10342: t1 = a4 | a5\n 10345: a5 = u64 [s1 + 0x20]\n 10348: a4 = u64 [s1 + 0x10]\n 10351: a5 = a5 | a4\n 10354: a4 = t1 | a5\n 10357: jump @336 if a4 == 0\n      : @326 (gas: 12)\n 10361: a4 = a1 <u ra\n 10364: a3 = a3 + a4\n 10367: t0 = a3 ^ t2\n 10370: a5 = a3 <u t2\n 10373: a5 = a4 if t0 == 0\n 10376: a5 = a5 + a2\n 10379: t0 = a5 <u a2\n 10382: a4 = u64 [s1 + 0xb8]\n 10386: a2 = a2 <u a4\n 10389: a0 = a0 + a2\n 10392: a0 = a0 + t0\n 10395: t0 = 356, jump @2240\n      : @327 [@dyn 178] (gas: 1)\n 10402: jump @345 if a0 != 0\n      : @328 (gas: 2)\n 10406: a0 = s1 + 0xe0\n 10410: ra = 358, jump @22\n      : @329 [@dyn 179] (gas: 1)\n 10416: t0 = 360, jump @2227\n      : @330 [@dyn 180] (gas: 1)\n 10423: ra = 362, jump @2379\n      : @331 [@dyn 181] (gas: 6)\n 10430: u64 [s1 + 0x88] = a0\n 10434: u64 [s1 + 0x70] = a1\n 10437: a0 = 0xffffffffffffffff\n 10440: a1 = 0xffffffffffffffff\n 10443: a2 = u64 [s1 + 0xb8]\n 10447: ra = 364, jump @2374\n      : @332 [@dyn 182] (gas: 1)\n 10454: t0 = 366, jump @2285\n      : @333 [@dyn 183] (gas: 1)\n 10461: ra = 368, jump @2374\n      : @334 [@dyn 184] (gas: 29)\n 10468: a4 = u64 [s1 + 0xb8]\n 10472: a2 = a4 <u 0x80\n 10476: a3 = u64 [s1 + 0x70]\n 10479: a1 = a3 if a2 != 0\n 10482: a5 = u64 [s1 + 0x78]\n 10485: a3 = u64 [s1 + 0x88]\n 10489: a3 = a3 | a5\n 10492: a3 = a0 if a2 == 0\n 10495: a1 = 0xffffffffffffffff if a4 == 0\n 10498: a3 = 0xffffffffffffffff if a4 == 0\n 10501: a4 = u64 [s1 + 0x80]\n 10505: a4 = 0 if a2 == 0\n 10507: a5 = 0 if a2 == 0\n 10509: a0 = u64 [s1 + 0x90]\n 10513: a0 = a0 & ~a3\n 10516: a2 = u64 [s1 + 0x98]\n 10520: a1 = a2 & ~a1\n 10523: a2 = u64 [s1 + 0xa8]\n 10527: a2 = a2 & ~a5\n 10530: a3 = u64 [s1 + 0xb0]\n 10534: a3 = a3 & ~a4\n 10537: a4 = s1 + 0x200\n 10541: u64 [a4 + 0x98] = a3\n 10545: u64 [a4 + 0x90] = a2\n 10549: u64 [a4 + 0x88] = a1\n 10553: u64 [a4 + 0x80] = a0\n 10557: a1 = s1 + 0x280\n 10561: a0 = u64 [s1 + 0xa0]\n 10565: ra = 370, jump @28\n      : @335 [@dyn 185] (gas: 2)\n 10571: t0 = u64 [s1 + 0x28]\n 10574: fallthrough\n      : @336 (gas: 27)\n 10575: a2 = u64 [s1 + 0x18]\n 10578: a0 = a2 >> 0x3f\n 10581: a1 = u64 [s1 + 0x10]\n 10584: a1 = a1 << 0x1\n 10587: a0 = a0 | a1\n 10590: a3 = u64 [s1 + 0x20]\n 10593: a1 = a3 >> 0x3f\n 10596: a2 = a2 << 0x1\n 10599: a1 = a1 | a2\n 10602: a2 = t0 >> 0x3f\n 10605: a3 = a3 << 0x1\n 10608: a2 = a2 | a3\n 10611: a3 = t0 << 0x1\n 10614: a3 = a3 + 0x1\n 10617: u64 [s1 + 696] = 0\n 10621: u64 [s1 + 688] = 0\n 10625: u64 [s1 + 680] = 0\n 10629: a5 = s1 + 0x200\n 10633: u64 [a5 + 160] = 0x4\n 10638: u64 [a5 + 0xc0] = a3\n 10642: u64 [a5 + 0xc8] = a2\n 10646: u64 [a5 + 0xd0] = a1\n 10650: u64 [a5 + 0xd8] = a0\n 10654: a0 = s1 + 0x2a0\n 10658: a1 = s1 + 0x2c0\n 10662: ra = 0x17e\n 10666: jump @28\n      : @337 (gas: 6)\n 10669: a2 = a5\n 10671: u64 [s1 + 160] = 0\n 10675: u64 [s1 + 152] = 0\n 10679: u64 [s1 + 168] = 0\n 10683: u64 [s1 + 176] = 0\n 10687: fallthrough\n      : @338 (gas: 20)\n 10688: a0 = a4 >> 0x3f\n 10691: a1 = a2 << 0x1\n 10694: a0 = a0 | a1\n 10697: u64 [s1 + 0x90] = a0\n 10701: a0 = a2 >> 0x3f\n 10704: a1 = t0 << 0x1\n 10707: a0 = a0 | a1\n 10710: u64 [s1 + 0x88] = a0\n 10714: a0 = a3 >> 0x3f\n 10717: a1 = a4 << 0x1\n 10720: a0 = a0 | a1\n 10723: u64 [s1 + 0x80] = a0\n 10727: a0 = a3 << 0x1\n 10730: u64 [s1 + 0x78] = a0\n 10733: a1 = a3 << 0x3\n 10736: u64 [s1 + 0xb8] = a1\n 10740: i32 a2 = 0x80 - a1\n 10744: a0 = 0xffffffffffffffff\n 10747: a1 = 0xffffffffffffffff\n 10750: ra = 372, jump @2379\n      : @339 [@dyn 186] (gas: 7)\n 10757: u64 [s1 + 0x58] = a0\n 10760: u64 [s1 + 0x70] = a1\n 10763: a0 = u64 [s1 + 0x28]\n 10766: i32 a2 = a0 << 0x3\n 10769: a0 = 0xffffffffffffffff\n 10772: a1 = 0xffffffffffffffff\n 10775: ra = 374, jump @2374\n      : @340 [@dyn 187] (gas: 10)\n 10782: u64 [s1 + 0x68] = a0\n 10785: u64 [s1 + 0x60] = a1\n 10788: a1 = u64 [s1 + 0x58]\n 10791: a0 = a0 | a1\n 10794: u64 [s1 + 0x58] = a0\n 10797: a0 = u64 [s1 + 0xb8]\n 10801: i32 a2 = a0 + 0xffffffffffffff80\n 10804: a0 = 0xffffffffffffffff\n 10807: a1 = 0xffffffffffffffff\n 10810: ra = 376, jump @2374\n      : @341 [@dyn 188] (gas: 7)\n 10817: a4 = u64 [s1 + 0xb8]\n 10821: a2 = a4 <u 0x80\n 10825: a3 = u64 [s1 + 0x58]\n 10828: a0 = a3 if a2 != 0\n 10831: a5 = u64 [s1 + 0x60]\n 10834: a3 = u64 [s1 + 0x70]\n 10837: t0 = 378, jump @2361\n      : @342 [@dyn 189] (gas: 25)\n 10844: a4 = u64 [s1 + 0x68]\n 10847: a4 = 0 if a2 == 0\n 10849: a1 = u64 [s1 + 0x98]\n 10853: a1 = a1 & ~a3\n 10856: a2 = u64 [s1 + 0xa0]\n 10860: a0 = a2 & ~a0\n 10863: a2 = u64 [s1 + 0xa8]\n 10867: a2 = a2 & ~a4\n 10870: a3 = u64 [s1 + 0xb0]\n 10874: a3 = a3 & ~a5\n 10877: a4 = u64 [s1 + 0x78]\n 10880: a0 = a0 | a4\n 10883: a4 = u64 [s1 + 0x80]\n 10887: a1 = a1 | a4\n 10890: a4 = u64 [s1 + 0x88]\n 10894: a3 = a3 | a4\n 10897: a4 = u64 [s1 + 0x90]\n 10901: a2 = a2 | a4\n 10904: u64 [s1 + 736] = 0x4\n 10909: a4 = s1 + 0x300\n 10913: u64 [a4 + 0x10] = a2\n 10916: u64 [a4 + 0x18] = a3\n 10919: u64 [a4 + 0x8] = a1\n 10922: u64 [a4] = a0\n 10924: t0 = 380, jump @2368\n      : @343 [@dyn 190] (gas: 3)\n 10931: a0 = s1 + 0x2e0\n 10935: a1 = s1 + 0x300\n 10939: ra = 382, jump @28\n      : @344 [@dyn 191] (gas: 7)\n 10945: sp = s0 + 0xfffffffffffffcc0\n 10949: a0 = sp + 0x300\n 10953: ra = u64 [a0 + 0x38]\n 10956: s0 = u64 [a0 + 0x30]\n 10959: s1 = u64 [a0 + 0x28]\n 10962: sp = sp + 0x340\n 10966: ret\n      : @345 (gas: 1)\n 10968: trap\n      : @346 (gas: 3)\n 10969: ra = 0x180\n 10973: t0 = 0x86\n 10977: jump @2232\n      : @347 [@dyn 192] (gas: 20)\n 10981: sp = sp + 0xfffffffffffffc40\n 10985: a2 = sp + 0x300\n 10989: u64 [a2 + 0xb8] = ra\n 10993: u64 [a2 + 0xb0] = s0\n 10997: u64 [a2 + 0xa8] = s1\n 11001: s0 = sp + 0x3c0\n 11005: sp = sp & 0xffffffffffffffe0\n 11008: s1 = sp\n 11010: a2 = u64 [a0 + 0x10]\n 11013: a3 = u64 [a0 + 0x8]\n 11016: a4 = u64 [a0]\n 11018: u64 [s1 + 0x40] = a2\n 11021: a2 = a2 << 0x20\n 11024: a5 = a2 >> 0x20\n 11027: u64 [s1 + 0x78] = a3\n 11030: u64 [s1 + 0x70] = a4\n 11033: a2 = a4 | a3\n 11036: u64 [s1 + 0x60] = a5\n 11039: a2 = a2 | a5\n 11042: jump @373 if a2 == 0\n      : @348 (gas: 19)\n 11046: a2 = u64 [a1 + 0x18]\n 11049: u64 [s1 + 0x98] = a2\n 11053: a2 = u64 [a1 + 0x10]\n 11056: u64 [s1 + 0x90] = a2\n 11060: a2 = u64 [a1 + 0x8]\n 11063: u64 [s1 + 0x88] = a2\n 11067: a1 = u64 [a1]\n 11069: u64 [s1 + 0x80] = a1\n 11073: a0 = u64 [a0 + 0x18]\n 11076: u64 [s1 + 0x38] = a0\n 11079: u64 [s1 + 824] = 0\n 11083: u64 [s1 + 816] = 0\n 11087: u64 [s1 + 808] = 0\n 11091: u64 [s1 + 800] = 0x2\n 11096: a0 = s1 + 0x300\n 11100: a1 = s1 + 0x320\n 11104: ra = 0x182\n 11108: t0 = 0x6\n 11111: jump @2259\n      : @349 [@dyn 193] (gas: 38)\n 11115: t2 = u64 [s1 + 0x318]\n 11119: a1 = s1 + 0x300\n 11123: a0 = u64 [a1 + 0x10]\n 11126: a4 = u64 [a1]\n 11128: a5 = u64 [a1 + 0x8]\n 11131: a1 = sp + 0xffffffffffffffe0\n 11134: a1 = a1 & 0xffffffffffffffe0\n 11137: sp = a1\n 11139: a3 = u64 [s1 + 0x88]\n 11143: a3 = a3 + a5\n 11146: t0 = u64 [s1 + 0x80]\n 11150: t0 = t0 + a4\n 11153: a4 = t0 <u a4\n 11156: a3 = a3 + a4\n 11159: t1 = a3 ^ a5\n 11162: a2 = a3 <u a5\n 11165: a2 = a4 if t1 == 0\n 11168: a4 = u64 [s1 + 0x90]\n 11172: a4 = a4 + a0\n 11175: a5 = a4 + a2\n 11178: t1 = a5 <u a4\n 11181: ra = u64 [s1 + 0x98]\n 11185: ra = ra + t2\n 11188: a4 = a4 <u a0\n 11191: a4 = a4 + ra\n 11194: ra = a4 + t1\n 11197: t1 = a5 <u a0\n 11200: a4 = t2 ^ ra\n 11203: t2 = ra <u t2\n 11206: t2 = t1 if a4 == 0\n 11209: a0 = a0 ^ a5\n 11212: a0 = a0 | a4\n 11215: t2 = a2 if a0 == 0\n 11218: u64 [a1 + 0x10] = a5\n 11221: u64 [a1 + 0x8] = a3\n 11224: u64 [a1] = t0\n 11226: u64 [a1 + 0x18] = ra\n 11229: jump @372 if t2 != 0\n      : @350 (gas: 6)\n 11233: u64 [s1 + 856] = 0\n 11237: u64 [s1 + 848] = 0\n 11241: u64 [s1 + 840] = 0\n 11245: u64 [s1 + 832] = 0x2\n 11250: a0 = s1 + 0x340\n 11254: ra = 388, jump @28\n      : @351 [@dyn 194] (gas: 15)\n 11260: a0 = sp + 0xffffffffffffffe0\n 11263: a0 = a0 & 0xffffffffffffffe0\n 11266: u64 [s1 + 0x68] = a0\n 11269: sp = a0\n 11271: u64 [s1 + 760] = 0\n 11275: a0 = u64 [s1 + 0x60]\n 11278: a2 = s1 + 0x200\n 11282: u64 [a2 + 0xf0] = a0\n 11286: a0 = u64 [s1 + 0x78]\n 11289: u64 [a2 + 0xe8] = a0\n 11293: a1 = s1 + 0x2e0\n 11297: a0 = u64 [s1 + 0x70]\n 11300: u64 [a2 + 0xe0] = a0\n 11304: a0 = 0\n 11306: ra = 390, jump @24\n      : @352 [@dyn 195] (gas: 1)\n 11312: t0 = 392, jump @2286\n      : @353 [@dyn 196] (gas: 4)\n 11319: a0 = 0x20\n 11322: a1 = s1 + 0x2c0\n 11326: u64 [s1 + 704] = 0\n 11330: ra = 394, jump @24\n      : @354 [@dyn 197] (gas: 3)\n 11336: a2 = 0x20150\n 11341: a0 = i32 [0x20150]\n 11346: jump @356 if a0 >u 63\n      : @355 (gas: 2)\n 11350: u32 [0x20150] = 0x40\n 11356: fallthrough\n      : @356 (gas: 29)\n 11357: u64 [s1 + 0x20] = a2\n 11360: a0 = sp + 0xffffffffffffffe0\n 11363: a2 = a0 & 0xffffffffffffffe0\n 11366: u64 [s1 + 0x58] = a2\n 11369: sp = a2\n 11371: a0 = 0x20160\n 11376: i32 a0 = a0 + 0\n 11378: i32 a2 = a2 + 0\n 11380: a1 = 0x40\n 11383: u64 [s1 + 0x18] = a0\n 11386: ecalli 11 // 'hash_keccak_256'\n 11388: a3 = u64 [s1 + 0x58]\n 11391: a0 = u64 [a3 + 0x18]\n 11394: a1 = u64 [a3 + 0x10]\n 11397: a2 = u64 [a3 + 0x8]\n 11400: a3 = u64 [a3]\n 11402: a0 = reverse a0\n 11404: a4 = reverse a1\n 11406: a2 = reverse a2\n 11408: a3 = reverse a3\n 11410: a1 = u64 [s1 + 0x68]\n 11413: u64 [a1 + 0x18] = a3\n 11416: u64 [a1 + 0x10] = a2\n 11419: u64 [a1 + 0x8] = a4\n 11422: u64 [a1] = a0\n 11424: a0 = s1 + 0x2a0\n 11428: ra = 0x18c\n 11432: t0 = 0x6\n 11435: jump @2259\n      : @357 [@dyn 198] (gas: 30)\n 11439: a0 = u64 [s1 + 0x2a8]\n 11443: a1 = u64 [s1 + 0x2a0]\n 11447: t0 = u64 [s1 + 0x2b8]\n 11451: a3 = u64 [s1 + 0x2b0]\n 11455: a4 = u64 [s1 + 0x88]\n 11459: a4 = a4 + a0\n 11462: a5 = u64 [s1 + 0x80]\n 11466: a5 = a5 + a1\n 11469: a1 = a5 <u a1\n 11472: a4 = a4 + a1\n 11475: a2 = a4 ^ a0\n 11478: a0 = a4 <u a0\n 11481: a0 = a1 if a2 == 0\n 11484: a1 = u64 [s1 + 0x90]\n 11488: a1 = a1 + a3\n 11491: a2 = u64 [s1 + 0x98]\n 11495: t0 = t0 + a2\n 11498: a2 = a1 <u a3\n 11501: a2 = a2 + t0\n 11504: a0 = a0 + a1\n 11507: a1 = a0 <u a1\n 11510: a1 = a1 + a2\n 11513: a2 = s1 + 0x300\n 11517: u64 [a2 + 0x60] = a5\n 11520: u64 [a2 + 0x68] = a4\n 11523: u64 [a2 + 0x70] = a0\n 11526: u64 [a2 + 0x78] = a1\n 11529: a1 = s1 + 0x360\n 11533: a0 = u64 [s1 + 0x68]\n 11536: ra = 398, jump @28\n      : @358 [@dyn 199] (gas: 3)\n 11542: a0 = s1 + 0x280\n 11546: a1 = 0x40\n 11549: ra = 400, jump @22\n      : @359 [@dyn 200] (gas: 25)\n 11555: a5 = s1 + 0x200\n 11559: a2 = u64 [a5 + 0x98]\n 11563: u64 [s1 + 0x58] = a2\n 11566: a1 = u64 [a5 + 0x90]\n 11570: u64 [s1 + 0x50] = a1\n 11573: a3 = u64 [a5 + 0x88]\n 11577: u64 [s1 + 0x48] = a3\n 11580: a4 = u64 [a5 + 0x80]\n 11584: u64 [s1 + 0x68] = a4\n 11587: a0 = u64 [s1 + 0x98]\n 11591: u64 [a5 + 0x38] = a0\n 11594: a0 = u64 [s1 + 0x90]\n 11598: u64 [a5 + 0x30] = a0\n 11601: a0 = u64 [s1 + 0x88]\n 11605: u64 [a5 + 0x28] = a0\n 11608: a0 = u64 [s1 + 0x80]\n 11612: u64 [a5 + 0x20] = a0\n 11615: u64 [a5 + 0x58] = a2\n 11618: u64 [a5 + 0x50] = a1\n 11621: u64 [a5 + 0x48] = a3\n 11624: a0 = s1 + 0x260\n 11628: a1 = s1 + 0x240\n 11632: a2 = s1 + 0x220\n 11636: u64 [a5 + 0x40] = a4\n 11639: ra = 402, jump @558\n      : @360 [@dyn 201] (gas: 7)\n 11645: a2 = u64 [s1 + 0x48]\n 11648: a0 = u64 [s1 + 0x58]\n 11651: a0 = a0 | a2\n 11654: a3 = u64 [s1 + 0x50]\n 11657: a1 = u64 [s1 + 0x68]\n 11660: a1 = a1 | a3\n 11663: t0 = 404, jump @2313\n      : @361 [@dyn 202] (gas: 1)\n 11670: jump @371 if a0 != 0\n      : @362 (gas: 27)\n 11674: ra = a3\n 11676: a4 = s1 + 0x200\n 11680: a0 = u64 [a4 + 0x68]\n 11683: a1 = u64 [a4 + 0x78]\n 11686: u64 [s1 + 0x30] = a1\n 11689: t1 = u64 [s1 + 0x260]\n 11693: a3 = u64 [a4 + 0x70]\n 11696: a4 = a0 ^ a2\n 11699: a5 = a0 <u a2\n 11702: t0 = u64 [s1 + 0x68]\n 11705: a1 = t1 <u t0\n 11708: a5 = a1 if a4 == 0\n 11711: a4 = a3 - ra\n 11714: t2 = a4 - a5\n 11717: a4 = a4 <u a5\n 11720: u64 [s1 + 0x28] = a4\n 11723: a3 = a3 <u ra\n 11726: a5 = u64 [s1 + 0x58]\n 11729: a4 = u64 [s1 + 0x30]\n 11732: a5 = a4 - a5\n 11735: a5 = a5 - a3\n 11738: a3 = u64 [s1 + 0x28]\n 11741: a5 = a5 - a3\n 11744: a0 = a0 - a2\n 11747: a0 = a0 - a1\n 11750: a1 = t1 - t0\n 11753: t0 = 406, jump @2220\n      : @363 [@dyn 203] (gas: 3)\n 11760: a5 = u64 [s1 + 0x78]\n 11763: t0 = u64 [s1 + 0x70]\n 11766: jump @371 if a0 != 0\n      : @364 (gas: 3)\n 11770: u64 [s1 + 472] = 0\n 11774: u64 [s1 + 0x1c0] = t0\n 11778: t0 = 408, jump @2359\n      : @365 [@dyn 204] (gas: 18)\n 11785: u64 [s1 + 480] = 0\n 11789: u64 [s1 + 0x1c8] = a5\n 11793: a0 = u64 [0x20000]\n 11798: a2 = u64 [0x20008]\n 11803: a3 = u64 [0x20010]\n 11808: a4 = u64 [0x20018]\n 11813: a5 = s1 + 0x200\n 11817: u64 [a5 + 0x18] = a0\n 11820: u64 [a5 + 0x10] = a2\n 11823: u64 [a5 + 0x8] = a3\n 11826: u64 [a5] = a4\n 11828: a2 = s1 + 0x200\n 11832: a3 = s1 + 0x1e0\n 11836: a4 = s1 + 0x1c0\n 11840: a0 = u64 [s1 + 0x60]\n 11843: u64 [s1 + 0x1d0] = a0\n 11847: a0 = u64 [s1 + 0x68]\n 11850: ra = 410, jump @32\n      : @366 [@dyn 205] (gas: 1)\n 11856: t0 = 412, jump @2358\n      : @367 [@dyn 206] (gas: 6)\n 11863: u64 [s1 + 896] = 0x2\n 11868: a0 = s1 + 0x1a0\n 11872: a1 = s1 + 0x380\n 11876: ra = 0x19e\n 11880: t0 = 0x6\n 11883: jump @2259\n      : @368 [@dyn 207] (gas: 9)\n 11887: a3 = u64 [s1 + 0x1b8]\n 11891: a2 = u64 [s1 + 0x1b0]\n 11895: a4 = 0xffff\n 11900: a0 = a3 ^ a4\n 11903: a0 = a0 | ~a2\n 11906: a1 = a3 >> 0x10\n 11909: a1 = a1 >u 0\n 11911: a1 = 0 if a0 == 0\n 11913: jump @378 if a1 != 0\n      : @369 (gas: 51)\n 11917: a0 = u64 [s1 + 0x80]\n 11921: a3 = s1 + 0x100\n 11925: u64 [a3 + 0x60] = a0\n 11928: a0 = u64 [s1 + 0x70]\n 11931: u64 [a3 + 0x80] = a0\n 11935: a0 = u64 [s1 + 0x88]\n 11939: u64 [a3 + 0x68] = a0\n 11942: a0 = u64 [s1 + 0x78]\n 11945: u64 [a3 + 0x88] = a0\n 11949: a0 = u64 [s1 + 0x90]\n 11953: u64 [a3 + 0x70] = a0\n 11956: a0 = u64 [s1 + 0x40]\n 11959: u64 [a3 + 0x90] = a0\n 11963: a0 = u64 [s1 + 0x98]\n 11967: u64 [a3 + 0x78] = a0\n 11970: a0 = s1 + 0x180\n 11974: a1 = s1 + 0x160\n 11978: a2 = u64 [s1 + 0x38]\n 11981: u64 [a3 + 0x98] = a2\n 11985: ra = 0x1a0\n 11989: sp = sp + 0xfffffffffffffaa0\n 11993: a2 = sp + 0x500\n 11997: u64 [a2 + 0x58] = ra\n 12000: u64 [a2 + 0x50] = s0\n 12003: u64 [a2 + 0x48] = s1\n 12006: s0 = sp + 0x560\n 12010: sp = sp & 0xffffffffffffffe0\n 12013: s1 = sp\n 12015: a2 = u64 [a0 + 0x10]\n 12018: u64 [s1 + 0x48] = a2\n 12021: a2 = u64 [a0 + 0x8]\n 12024: u64 [s1 + 0x50] = a2\n 12027: a0 = u64 [a0]\n 12029: u64 [s1 + 0x58] = a0\n 12032: a2 = u64 [a1]\n 12034: a0 = u64 [a1 + 0x8]\n 12037: a3 = u64 [a1 + 0x10]\n 12040: a1 = u64 [a1 + 0x18]\n 12043: u64 [s1 + 0x60] = a1\n 12046: u64 [s1 + 0x438] = a1\n 12050: u64 [s1 + 0x68] = a3\n 12053: u64 [s1 + 0x430] = a3\n 12057: u64 [s1 + 0x70] = a0\n 12060: u64 [s1 + 0x428] = a0\n 12064: a0 = s1 + 0x440\n 12068: a1 = s1 + 0x420\n 12072: u64 [s1 + 0x78] = a2\n 12075: u64 [s1 + 0x420] = a2\n 12079: ra = 0x29a\n 12083: t0 = 0x2e4\n 12087: jump @2372\n      : @370 [@dyn 208] (gas: 7)\n 12091: sp = s0 + 0xfffffffffffffc40\n 12095: a0 = sp + 0x300\n 12099: ra = u64 [a0 + 0xb8]\n 12103: s0 = u64 [a0 + 0xb0]\n 12107: s1 = u64 [a0 + 0xa8]\n 12111: sp = sp + 0x3c0\n 12115: ret\n      : @371 (gas: 1)\n 12117: trap\n      : @372 (gas: 3)\n 12118: ra = 0x1a2\n 12122: t0 = 0x28e\n 12126: jump @2232\n      : @373 [@dyn 209] (gas: 8)\n 12130: u64 [s1 + 208] = 0\n 12134: u64 [s1 + 200] = 0\n 12138: u64 [s1 + 192] = 0\n 12142: a0 = 0xec442f0500000000\n 12152: a1 = s1 + 0xc0\n 12156: u64 [s1 + 0xd8] = a0\n 12160: a0 = 0\n 12162: ra = 420, jump @24\n      : @374 [@dyn 210] (gas: 7)\n 12168: u64 [s1 + 184] = 0\n 12172: u64 [s1 + 176] = 0\n 12176: u64 [s1 + 168] = 0\n 12180: a0 = 0x4\n 12183: a1 = s1 + 0xa0\n 12187: u64 [s1 + 160] = 0\n 12191: ra = 422, jump @24\n      : @375 [@dyn 211] (gas: 2)\n 12197: a1 = i32 [0x20150]\n 12202: jump @377 if a1 >u 63\n      : @376 (gas: 2)\n 12206: u32 [0x20150] = 0x40\n 12212: fallthrough\n      : @377 (gas: 6)\n 12213: a1 = 0x20160\n 12218: i32 a1 = a1 + 0\n 12220: a0 = 0x1\n 12223: a2 = 0x24\n 12226: ecalli 16 // 'seal_return'\n 12228: fallthrough\n      : @378 (gas: 15)\n 12229: a0 = u64 [s1 + 0x1a8]\n 12233: u64 [s1 + 0x90] = a0\n 12237: a0 = u64 [s1 + 0x1a0]\n 12241: u64 [s1 + 0x98] = a0\n 12245: u64 [s1 + 336] = 0\n 12249: u64 [s1 + 328] = 0\n 12253: u64 [s1 + 320] = 0\n 12257: a0 = 0x1cb15d2600000000\n 12267: a1 = s1 + 0x140\n 12271: u64 [s1 + 0x158] = a0\n 12275: a0 = 0\n 12277: u64 [s1 + 0x88] = a2\n 12281: u64 [s1 + 0x80] = a3\n 12285: u64 [s1 + 0x78] = a4\n 12288: ra = 424, jump @24\n      : @379 [@dyn 212] (gas: 20)\n 12294: a0 = u64 [s1 + 0x78]\n 12297: u64 [s1 + 0xf8] = a0\n 12301: u64 [s1 + 240] = 0xffffffffffffffff\n 12306: u64 [s1 + 232] = 0xffffffffffffffff\n 12311: u64 [s1 + 224] = 0xffffffffffffffff\n 12316: a0 = u64 [s1 + 0x80]\n 12320: a4 = s1 + 0x100\n 12324: u64 [a4 + 0x18] = a0\n 12327: a0 = u64 [s1 + 0x88]\n 12331: u64 [a4 + 0x10] = a0\n 12334: a0 = u64 [s1 + 0x90]\n 12338: u64 [a4 + 0x8] = a0\n 12341: a0 = s1 + 0x120\n 12345: a1 = s1 + 0x100\n 12349: a2 = s1 + 0xe0\n 12353: a3 = u64 [s1 + 0x98]\n 12357: u64 [a4] = a3\n 12359: ra = 0x1aa\n 12363: t0 = 0x280\n 12367: jump @2367\n      : @380 [@dyn 213] (gas: 3)\n 12371: a0 = u64 [s1 + 0x20]\n 12374: a0 = i32 [a0]\n 12376: jump @382 if a0 >u 95\n      : @381 (gas: 3)\n 12380: a1 = u64 [s1 + 0x20]\n 12383: u32 [a1 + 0] = 0x60\n 12386: fallthrough\n      : @382 (gas: 7)\n 12387: a0 = 0x1\n 12390: a2 = 0x44\n 12393: a1 = u64 [s1 + 0x18]\n 12396: ra = 0x1ac\n 12400: ecalli 16 // 'seal_return'\n 12402: t0 = 0x1ae\n 12406: jump @2235\n      : @383 [@dyn 214] (gas: 1)\n 12410: t0 = 430, jump @2235\n      : @384 [@dyn 215] (gas: 1)\n 12417: jump @428 if a2 != 0\n      : @385 (gas: 3)\n 12421: a0 = s1 + 0x240\n 12425: u64 [s1 + 0x38] = a1\n 12428: ra = 432, jump @22\n      : @386 [@dyn 216] (gas: 1)\n 12434: t0 = 434, jump @2295\n      : @387 [@dyn 217] (gas: 1)\n 12441: jump @406 if a1 != 0\n      : @388 (gas: 7)\n 12445: u64 [s1 + 0x8] = a5\n 12448: u64 [s1 + 0x10] = a4\n 12451: u64 [s1 + 0x28] = a2\n 12454: a1 = a3 <u 0x1\n 12457: a1 = 0 if a0 != 0\n 12459: u64 [s1 + 0x18] = a3\n 12462: jump @429 if a1 == 0\n      : @389 (gas: 9)\n 12466: u64 [s1 + 632] = 0\n 12470: u64 [s1 + 624] = 0\n 12474: u64 [s1 + 616] = 0\n 12478: u64 [s1 + 608] = 0x5\n 12483: a0 = s1 + 0x1e0\n 12487: a1 = s1 + 0x260\n 12491: ra = 0x1b4\n 12495: t0 = 0x6\n 12498: jump @2259\n      : @390 [@dyn 218] (gas: 1)\n 12502: t0 = 438, jump @2261\n      : @391 [@dyn 219] (gas: 1)\n 12509: ra = 440, jump @255\n      : @392 [@dyn 220] (gas: 1)\n 12515: t0 = 442, jump @2218\n      : @393 [@dyn 221] (gas: 5)\n 12522: a3 = 0x5\n 12525: u64 [s1 + 0x180] = a3\n 12529: ra = 0x1bc\n 12533: t0 = 0x13c\n 12537: jump @2331\n      : @394 [@dyn 222] (gas: 4)\n 12541: a0 = u64 [s1 + 0x28]\n 12544: a0 = a0 & 0xffffffffffffffe0\n 12547: u64 [s1 + 0x30] = a0\n 12550: t0 = 446, jump @2303\n      : @395 [@dyn 223] (gas: 2)\n 12557: a0 = 0x5\n 12560: t0 = 448, jump @2334\n      : @396 [@dyn 224] (gas: 1)\n 12567: ra = 450, jump @269\n      : @397 [@dyn 225] (gas: 23)\n 12573: t2 = 0\n 12575: u64 [s1 + 184] = 0\n 12579: u64 [s1 + 176] = 0\n 12583: a4 = 0\n 12585: a5 = 0\n 12587: t0 = 0\n 12589: u64 [s1 + 168] = 0\n 12593: a0 = s1 + 0x100\n 12597: a3 = u64 [a0 + 0x30]\n 12600: t1 = u64 [s1 + 0x138]\n 12604: a1 = u64 [a0 + 0x20]\n 12607: a2 = u64 [a0 + 0x28]\n 12610: u64 [s1 + 0x68] = a3\n 12613: a0 = u64 [s1 + 0xa0]\n 12617: u64 [a0 + 0x10] = a3\n 12620: a3 = t1\n 12622: u64 [a0 + 0x18] = t1\n 12625: u64 [s1 + 0x88] = a1\n 12629: u64 [a0] = a1\n 12631: u64 [s1 + 0x80] = a2\n 12635: u64 [a0 + 0x8] = a2\n 12638: t1 = 0x20\n 12641: fallthrough\n      : @398 (gas: 23)\n 12642: ra = a3\n 12644: a0 = u64 [s1 + 0x30]\n 12647: u64 [s1 + 0x78] = a4\n 12650: a0 = a4 <u a0\n 12653: a4 = a0 ^ 0x1\n 12656: u64 [s1 + 0x70] = a5\n 12659: a4 = 0x1 if a5 != 0\n 12662: a0 = u64 [s1 + 0xa8]\n 12666: a0 = t0 | a0\n 12669: a4 = 0x1 if a0 != 0\n 12672: a1 = u64 [s1 + 0x38]\n 12675: a1 = a1 + t1\n 12678: a3 = u64 [s1 + 0x40]\n 12681: a3 = a3 + t2\n 12684: a2 = u64 [s1 + 0x48]\n 12687: a0 = u64 [s1 + 0xb8]\n 12691: a2 = a2 + a0\n 12694: a0 = u64 [s1 + 0x50]\n 12697: a5 = u64 [s1 + 0xb0]\n 12701: a0 = a0 + a5\n 12704: u64 [s1 + 0x98] = t2\n 12708: u64 [s1 + 0x90] = t1\n 12712: jump @410 if a4 != 0\n      : @399 (gas: 13)\n 12716: u64 [s1 + 0x58] = t0\n 12719: a4 = a1 <u t1\n 12722: a3 = a3 + a4\n 12725: t0 = a3 ^ t2\n 12728: a5 = a3 <u t2\n 12731: a5 = a4 if t0 == 0\n 12734: a5 = a5 + a2\n 12737: t0 = a5 <u a2\n 12740: a4 = u64 [s1 + 0xb8]\n 12744: a2 = a2 <u a4\n 12747: a0 = a0 + a2\n 12750: a0 = a0 + t0\n 12753: t0 = 452, jump @2352\n      : @400 [@dyn 226] (gas: 1)\n 12760: jump @428 if a0 != 0\n      : @401 (gas: 2)\n 12764: a0 = s1 + 0xc0\n 12768: ra = 454, jump @22\n      : @402 [@dyn 227] (gas: 1)\n 12774: t0 = 456, jump @2316\n      : @403 [@dyn 228] (gas: 1)\n 12781: ra = 458, jump @28\n      : @404 [@dyn 229] (gas: 46)\n 12787: t0 = u64 [s1 + 0x88]\n 12791: t0 = t0 + 0x1\n 12794: a0 = t0 <u 0x1\n 12797: t1 = u64 [s1 + 0x80]\n 12801: t1 = t1 + a0\n 12804: a0 = t0 | t1\n 12807: a0 = a0 <u 0x1\n 12810: a1 = u64 [s1 + 0x68]\n 12813: a0 = a0 + a1\n 12816: a1 = a0 <u a1\n 12819: t2 = u64 [s1 + 0x60]\n 12822: t2 = t2 + a1\n 12825: a1 = u64 [s1 + 0x90]\n 12829: a2 = a1 + 0x20\n 12832: u64 [s1 + 0x60] = a2\n 12835: a3 = a2 <u a1\n 12838: a1 = u64 [s1 + 0x98]\n 12842: a2 = a1 + a3\n 12845: u64 [s1 + 0x90] = a2\n 12849: a4 = a2 <u a1\n 12852: a4 = a3 if a3 == 0\n 12855: a1 = u64 [s1 + 0xb8]\n 12859: ra = a1 + a4\n 12862: a4 = ra <u a1\n 12865: a1 = u64 [s1 + 0xb0]\n 12869: a1 = a1 + a4\n 12872: u64 [s1 + 0xb0] = a1\n 12876: a1 = u64 [s1 + 0x78]\n 12879: a4 = a1 + 0x20\n 12882: a5 = a4 <u a1\n 12885: a2 = u64 [s1 + 0x70]\n 12888: a1 = a2 + a5\n 12891: a2 = a1 <u a2\n 12894: a2 = a5 if a5 == 0\n 12897: a3 = u64 [s1 + 0x58]\n 12900: a2 = a2 + a3\n 12903: a5 = a2 <u a3\n 12906: a3 = u64 [s1 + 0xa8]\n 12910: a3 = a3 + a5\n 12913: u64 [s1 + 0xa8] = a3\n 12917: a3 = t1\n 12919: u64 [s1 + 0x80] = a3\n 12923: a5 = u64 [s1 + 0xa0]\n 12927: u64 [a5 + 0x8] = a3\n 12930: a3 = t0\n 12932: t0 = 460, jump @2299\n      : @405 [@dyn 230] (gas: 2)\n 12939: t0 = a2\n 12941: jump @398\n      : @406 (gas: 1)\n 12944: t0 = 462, jump @2288\n      : @407 [@dyn 231] (gas: 1)\n 12951: ra = 464, jump @506\n      : @408 [@dyn 232] (gas: 1)\n 12957: t0 = 466, jump @2344\n      : @409 [@dyn 233] (gas: 1)\n 12964: jump @426\n      : @410 (gas: 10)\n 12967: t0 = u64 [s1 + 0x28]\n 12970: a4 = u64 [s1 + 0x30]\n 12973: a4 = a4 ^ t0\n 12976: t2 = u64 [s1 + 0x10]\n 12979: a4 = a4 | t2\n 12982: t1 = u64 [s1 + 0x18]\n 12985: ra = u64 [s1 + 0x8]\n 12988: a5 = t1 | ra\n 12991: a4 = a4 | a5\n 12994: jump @422 if a4 == 0\n      : @411 (gas: 14)\n 12998: a4 = u64 [s1 + 0x90]\n 13002: a4 = a1 <u a4\n 13005: a3 = a3 + a4\n 13008: a5 = u64 [s1 + 0x98]\n 13012: t0 = a3 ^ a5\n 13015: a5 = a3 <u a5\n 13018: a5 = a4 if t0 == 0\n 13021: a5 = a5 + a2\n 13024: t0 = a5 <u a2\n 13027: a4 = u64 [s1 + 0xb8]\n 13031: a2 = a2 <u a4\n 13034: a0 = a0 + a2\n 13037: a0 = a0 + t0\n 13040: t0 = 468, jump @2240\n      : @412 [@dyn 234] (gas: 1)\n 13047: jump @428 if a0 != 0\n      : @413 (gas: 2)\n 13051: a0 = s1 + 0xe0\n 13055: ra = 470, jump @22\n      : @414 [@dyn 235] (gas: 1)\n 13061: t0 = 472, jump @2227\n      : @415 [@dyn 236] (gas: 1)\n 13068: ra = 474, jump @2379\n      : @416 [@dyn 237] (gas: 6)\n 13075: u64 [s1 + 0x88] = a0\n 13079: u64 [s1 + 0x70] = a1\n 13082: a0 = 0xffffffffffffffff\n 13085: a1 = 0xffffffffffffffff\n 13088: a2 = u64 [s1 + 0xb8]\n 13092: ra = 476, jump @2374\n      : @417 [@dyn 238] (gas: 1)\n 13099: t0 = 478, jump @2285\n      : @418 [@dyn 239] (gas: 1)\n 13106: ra = 480, jump @2374\n      : @419 [@dyn 240] (gas: 1)\n 13113: t0 = 482, jump @2216\n      : @420 [@dyn 241] (gas: 1)\n 13120: ra = 484, jump @28\n      : @421 [@dyn 242] (gas: 5)\n 13126: t0 = u64 [s1 + 0x28]\n 13129: t1 = u64 [s1 + 0x18]\n 13132: t2 = u64 [s1 + 0x10]\n 13135: ra = u64 [s1 + 0x8]\n 13138: fallthrough\n      : @422 (gas: 12)\n 13139: a0 = t2 >> 0x3f\n 13142: a1 = ra << 0x1\n 13145: a0 = a0 | a1\n 13148: a1 = t1 >> 0x3f\n 13151: a2 = t2 << 0x1\n 13154: a1 = a1 | a2\n 13157: a2 = t0 >> 0x3f\n 13160: a3 = t1 << 0x1\n 13163: a2 = a2 | a3\n 13166: a3 = t0 << 0x1\n 13169: a3 = a3 + 0x1\n 13172: t0 = 486, jump @2286\n      : @423 [@dyn 243] (gas: 2)\n 13179: a4 = 0x5\n 13182: t0 = 488, jump @2345\n      : @424 [@dyn 244] (gas: 1)\n 13189: ra = 490, jump @28\n      : @425 [@dyn 245] (gas: 7)\n 13195: a1 = u64 [s1 + 0x20]\n 13198: u64 [a1 + 24] = 0\n 13201: u64 [a1 + 16] = 0\n 13204: u64 [a1 + 8] = 0\n 13207: u64 [a1 + 0] = 0xff\n 13211: t0 = 0x1ec\n 13215: jump @2263\n      : @426 (gas: 1)\n 13219: t0 = 492, jump @2263\n      : @427 [@dyn 246] (gas: 1)\n 13226: ret\n      : @428 (gas: 1)\n 13228: trap\n      : @429 (gas: 3)\n 13229: ra = 0x1ee\n 13233: t0 = 0x86\n 13237: jump @2232\n      : @430 [@dyn 247] (gas: 1)\n 13241: t0 = 496, jump @2235\n      : @431 [@dyn 248] (gas: 1)\n 13248: jump @475 if a2 != 0\n      : @432 (gas: 3)\n 13252: a0 = s1 + 0x240\n 13256: u64 [s1 + 0x38] = a1\n 13259: ra = 498, jump @22\n      : @433 [@dyn 249] (gas: 1)\n 13265: t0 = 500, jump @2295\n      : @434 [@dyn 250] (gas: 1)\n 13272: jump @453 if a1 != 0\n      : @435 (gas: 7)\n 13276: u64 [s1 + 0x8] = a5\n 13279: u64 [s1 + 0x10] = a4\n 13282: u64 [s1 + 0x28] = a2\n 13285: a1 = a3 <u 0x1\n 13288: a1 = 0 if a0 != 0\n 13290: u64 [s1 + 0x18] = a3\n 13293: jump @476 if a1 == 0\n      : @436 (gas: 9)\n 13297: u64 [s1 + 632] = 0\n 13301: u64 [s1 + 624] = 0\n 13305: u64 [s1 + 616] = 0\n 13309: u64 [s1 + 608] = 0x6\n 13314: a0 = s1 + 0x1e0\n 13318: a1 = s1 + 0x260\n 13322: ra = 0x1f6\n 13326: t0 = 0x6\n 13329: jump @2259\n      : @437 [@dyn 251] (gas: 1)\n 13333: t0 = 504, jump @2261\n      : @438 [@dyn 252] (gas: 1)\n 13340: ra = 506, jump @255\n      : @439 [@dyn 253] (gas: 1)\n 13346: t0 = 508, jump @2218\n      : @440 [@dyn 254] (gas: 5)\n 13353: a3 = 0x6\n 13356: u64 [s1 + 0x180] = a3\n 13360: ra = 0x1fe\n 13364: t0 = 0x13c\n 13368: jump @2331\n      : @441 [@dyn 255] (gas: 4)\n 13372: a0 = u64 [s1 + 0x28]\n 13375: a0 = a0 & 0xffffffffffffffe0\n 13378: u64 [s1 + 0x30] = a0\n 13381: t0 = 512, jump @2303\n      : @442 [@dyn 256] (gas: 2)\n 13388: a0 = 0x6\n 13391: t0 = 514, jump @2334\n      : @443 [@dyn 257] (gas: 1)\n 13398: ra = 516, jump @269\n      : @444 [@dyn 258] (gas: 23)\n 13404: t2 = 0\n 13406: u64 [s1 + 184] = 0\n 13410: u64 [s1 + 176] = 0\n 13414: a4 = 0\n 13416: a5 = 0\n 13418: t0 = 0\n 13420: u64 [s1 + 168] = 0\n 13424: a0 = s1 + 0x100\n 13428: a3 = u64 [a0 + 0x30]\n 13431: t1 = u64 [s1 + 0x138]\n 13435: a1 = u64 [a0 + 0x20]\n 13438: a2 = u64 [a0 + 0x28]\n 13441: u64 [s1 + 0x68] = a3\n 13444: a0 = u64 [s1 + 0xa0]\n 13448: u64 [a0 + 0x10] = a3\n 13451: a3 = t1\n 13453: u64 [a0 + 0x18] = t1\n 13456: u64 [s1 + 0x88] = a1\n 13460: u64 [a0] = a1\n 13462: u64 [s1 + 0x80] = a2\n 13466: u64 [a0 + 0x8] = a2\n 13469: t1 = 0x20\n 13472: fallthrough\n      : @445 (gas: 23)\n 13473: ra = a3\n 13475: a0 = u64 [s1 + 0x30]\n 13478: u64 [s1 + 0x78] = a4\n 13481: a0 = a4 <u a0\n 13484: a4 = a0 ^ 0x1\n 13487: u64 [s1 + 0x70] = a5\n 13490: a4 = 0x1 if a5 != 0\n 13493: a0 = u64 [s1 + 0xa8]\n 13497: a0 = t0 | a0\n 13500: a4 = 0x1 if a0 != 0\n 13503: a1 = u64 [s1 + 0x38]\n 13506: a1 = a1 + t1\n 13509: a3 = u64 [s1 + 0x40]\n 13512: a3 = a3 + t2\n 13515: a2 = u64 [s1 + 0x48]\n 13518: a0 = u64 [s1 + 0xb8]\n 13522: a2 = a2 + a0\n 13525: a0 = u64 [s1 + 0x50]\n 13528: a5 = u64 [s1 + 0xb0]\n 13532: a0 = a0 + a5\n 13535: u64 [s1 + 0x98] = t2\n 13539: u64 [s1 + 0x90] = t1\n 13543: jump @457 if a4 != 0\n      : @446 (gas: 13)\n 13547: u64 [s1 + 0x58] = t0\n 13550: a4 = a1 <u t1\n 13553: a3 = a3 + a4\n 13556: t0 = a3 ^ t2\n 13559: a5 = a3 <u t2\n 13562: a5 = a4 if t0 == 0\n 13565: a5 = a5 + a2\n 13568: t0 = a5 <u a2\n 13571: a4 = u64 [s1 + 0xb8]\n 13575: a2 = a2 <u a4\n 13578: a0 = a0 + a2\n 13581: a0 = a0 + t0\n 13584: t0 = 518, jump @2352\n      : @447 [@dyn 259] (gas: 1)\n 13591: jump @475 if a0 != 0\n      : @448 (gas: 2)\n 13595: a0 = s1 + 0xc0\n 13599: ra = 520, jump @22\n      : @449 [@dyn 260] (gas: 1)\n 13605: t0 = 522, jump @2316\n      : @450 [@dyn 261] (gas: 1)\n 13612: ra = 524, jump @28\n      : @451 [@dyn 262] (gas: 46)\n 13618: t0 = u64 [s1 + 0x88]\n 13622: t0 = t0 + 0x1\n 13625: a0 = t0 <u 0x1\n 13628: t1 = u64 [s1 + 0x80]\n 13632: t1 = t1 + a0\n 13635: a0 = t0 | t1\n 13638: a0 = a0 <u 0x1\n 13641: a1 = u64 [s1 + 0x68]\n 13644: a0 = a0 + a1\n 13647: a1 = a0 <u a1\n 13650: t2 = u64 [s1 + 0x60]\n 13653: t2 = t2 + a1\n 13656: a1 = u64 [s1 + 0x90]\n 13660: a2 = a1 + 0x20\n 13663: u64 [s1 + 0x60] = a2\n 13666: a3 = a2 <u a1\n 13669: a1 = u64 [s1 + 0x98]\n 13673: a2 = a1 + a3\n 13676: u64 [s1 + 0x90] = a2\n 13680: a4 = a2 <u a1\n 13683: a4 = a3 if a3 == 0\n 13686: a1 = u64 [s1 + 0xb8]\n 13690: ra = a1 + a4\n 13693: a4 = ra <u a1\n 13696: a1 = u64 [s1 + 0xb0]\n 13700: a1 = a1 + a4\n 13703: u64 [s1 + 0xb0] = a1\n 13707: a1 = u64 [s1 + 0x78]\n 13710: a4 = a1 + 0x20\n 13713: a5 = a4 <u a1\n 13716: a2 = u64 [s1 + 0x70]\n 13719: a1 = a2 + a5\n 13722: a2 = a1 <u a2\n 13725: a2 = a5 if a5 == 0\n 13728: a3 = u64 [s1 + 0x58]\n 13731: a2 = a2 + a3\n 13734: a5 = a2 <u a3\n 13737: a3 = u64 [s1 + 0xa8]\n 13741: a3 = a3 + a5\n 13744: u64 [s1 + 0xa8] = a3\n 13748: a3 = t1\n 13750: u64 [s1 + 0x80] = a3\n 13754: a5 = u64 [s1 + 0xa0]\n 13758: u64 [a5 + 0x8] = a3\n 13761: a3 = t0\n 13763: t0 = 526, jump @2299\n      : @452 [@dyn 263] (gas: 2)\n 13770: t0 = a2\n 13772: jump @445\n      : @453 (gas: 1)\n 13775: t0 = 528, jump @2288\n      : @454 [@dyn 264] (gas: 1)\n 13782: ra = 530, jump @506\n      : @455 [@dyn 265] (gas: 1)\n 13788: t0 = 532, jump @2344\n      : @456 [@dyn 266] (gas: 1)\n 13795: jump @473\n      : @457 (gas: 10)\n 13798: t0 = u64 [s1 + 0x28]\n 13801: a4 = u64 [s1 + 0x30]\n 13804: a4 = a4 ^ t0\n 13807: t2 = u64 [s1 + 0x10]\n 13810: a4 = a4 | t2\n 13813: t1 = u64 [s1 + 0x18]\n 13816: ra = u64 [s1 + 0x8]\n 13819: a5 = t1 | ra\n 13822: a4 = a4 | a5\n 13825: jump @469 if a4 == 0\n      : @458 (gas: 14)\n 13829: a4 = u64 [s1 + 0x90]\n 13833: a4 = a1 <u a4\n 13836: a3 = a3 + a4\n 13839: a5 = u64 [s1 + 0x98]\n 13843: t0 = a3 ^ a5\n 13846: a5 = a3 <u a5\n 13849: a5 = a4 if t0 == 0\n 13852: a5 = a5 + a2\n 13855: t0 = a5 <u a2\n 13858: a4 = u64 [s1 + 0xb8]\n 13862: a2 = a2 <u a4\n 13865: a0 = a0 + a2\n 13868: a0 = a0 + t0\n 13871: t0 = 534, jump @2240\n      : @459 [@dyn 267] (gas: 1)\n 13878: jump @475 if a0 != 0\n      : @460 (gas: 2)\n 13882: a0 = s1 + 0xe0\n 13886: ra = 536, jump @22\n      : @461 [@dyn 268] (gas: 1)\n 13892: t0 = 538, jump @2227\n      : @462 [@dyn 269] (gas: 1)\n 13899: ra = 540, jump @2379\n      : @463 [@dyn 270] (gas: 6)\n 13906: u64 [s1 + 0x88] = a0\n 13910: u64 [s1 + 0x70] = a1\n 13913: a0 = 0xffffffffffffffff\n 13916: a1 = 0xffffffffffffffff\n 13919: a2 = u64 [s1 + 0xb8]\n 13923: ra = 542, jump @2374\n      : @464 [@dyn 271] (gas: 1)\n 13930: t0 = 544, jump @2285\n      : @465 [@dyn 272] (gas: 1)\n 13937: ra = 546, jump @2374\n      : @466 [@dyn 273] (gas: 1)\n 13944: t0 = 548, jump @2216\n      : @467 [@dyn 274] (gas: 1)\n 13951: ra = 550, jump @28\n      : @468 [@dyn 275] (gas: 5)\n 13957: t0 = u64 [s1 + 0x28]\n 13960: t1 = u64 [s1 + 0x18]\n 13963: t2 = u64 [s1 + 0x10]\n 13966: ra = u64 [s1 + 0x8]\n 13969: fallthrough\n      : @469 (gas: 12)\n 13970: a0 = t2 >> 0x3f\n 13973: a1 = ra << 0x1\n 13976: a0 = a0 | a1\n 13979: a1 = t1 >> 0x3f\n 13982: a2 = t2 << 0x1\n 13985: a1 = a1 | a2\n 13988: a2 = t0 >> 0x3f\n 13991: a3 = t1 << 0x1\n 13994: a2 = a2 | a3\n 13997: a3 = t0 << 0x1\n 14000: a3 = a3 + 0x1\n 14003: t0 = 552, jump @2286\n      : @470 [@dyn 276] (gas: 2)\n 14010: a4 = 0x6\n 14013: t0 = 554, jump @2345\n      : @471 [@dyn 277] (gas: 1)\n 14020: ra = 556, jump @28\n      : @472 [@dyn 278] (gas: 7)\n 14026: a1 = u64 [s1 + 0x20]\n 14029: u64 [a1 + 24] = 0\n 14032: u64 [a1 + 16] = 0\n 14035: u64 [a1 + 8] = 0\n 14038: u64 [a1 + 0] = 0xff\n 14042: t0 = 0x22e\n 14046: jump @2263\n      : @473 (gas: 1)\n 14050: t0 = 558, jump @2263\n      : @474 [@dyn 279] (gas: 1)\n 14057: ret\n      : @475 (gas: 1)\n 14059: trap\n      : @476 (gas: 3)\n 14060: ra = 0x230\n 14064: t0 = 0x86\n 14068: jump @2232\n      : @477 [@dyn 280] (gas: 12)\n 14072: sp = sp + 0xfffffffffffffdc0\n 14076: a1 = sp + 0x200\n 14080: u64 [a1 + 0x38] = ra\n 14083: u64 [a1 + 0x30] = s0\n 14086: u64 [a1 + 0x28] = s1\n 14089: s0 = sp + 0x240\n 14093: sp = sp & 0xffffffffffffffe0\n 14096: s1 = sp\n 14098: u64 [s1 + 0x18] = a0\n 14101: a0 = s1 + 0x1e0\n 14105: a1 = 0xe0\n 14109: ra = 562, jump @22\n      : @478 [@dyn 281] (gas: 11)\n 14115: a0 = u64 [s1 + 0x1f8]\n 14119: u64 [s1 + 0x58] = a0\n 14122: a0 = u64 [s1 + 0x1f0]\n 14126: u64 [s1 + 0x50] = a0\n 14129: a0 = u64 [s1 + 0x1e8]\n 14133: u64 [s1 + 0x48] = a0\n 14136: a0 = u64 [s1 + 0x1e0]\n 14140: u64 [s1 + 0x40] = a0\n 14143: a0 = s1 + 0x1c0\n 14147: a1 = 0x100\n 14151: ra = 564, jump @22\n      : @479 [@dyn 282] (gas: 11)\n 14157: a0 = u64 [s1 + 0x1d8]\n 14161: u64 [s1 + 0x38] = a0\n 14164: a0 = u64 [s1 + 0x1d0]\n 14168: u64 [s1 + 0x30] = a0\n 14171: a0 = u64 [s1 + 0x1c8]\n 14175: u64 [s1 + 0x28] = a0\n 14178: a0 = u64 [s1 + 0x1c0]\n 14182: u64 [s1 + 0x20] = a0\n 14185: a0 = s1 + 0x1a0\n 14189: a1 = 0x40\n 14192: ra = 566, jump @22\n      : @480 [@dyn 283] (gas: 25)\n 14198: a1 = s1 + 0x100\n 14202: a0 = u64 [a1 + 0xa0]\n 14206: a3 = u64 [a1 + 0xb8]\n 14210: a2 = u64 [a1 + 0xa8]\n 14214: a5 = u64 [a1 + 0xb0]\n 14218: a4 = a0 + 0x20\n 14221: u64 [s1 + 0x78] = a0\n 14224: a0 = a4 <u a0\n 14227: a1 = a2 + a0\n 14230: u64 [s1 + 0x70] = a2\n 14233: a2 = a1 <u a2\n 14236: a2 = a0 if a0 == 0\n 14239: a2 = a2 + a5\n 14242: u64 [s1 + 0x60] = a5\n 14245: a0 = a2 <u a5\n 14248: u64 [s1 + 0x68] = a3\n 14251: a0 = a0 + a3\n 14254: a3 = a4 | a2\n 14257: a0 = a0 | a1\n 14260: a3 = a3 | a0\n 14263: a3 = a3 >> 0x20\n 14266: a0 = a0 | a2\n 14269: a0 = a0 << 0x20\n 14272: a0 = a0 | a3\n 14275: jump @505 if a0 != 0\n      : @481 (gas: 13)\n 14279: a0 = u64 [0x20020]\n 14284: a3 = s1 + 0x100\n 14288: u64 [a3 + 0x98] = a0\n 14292: a0 = u64 [0x20028]\n 14297: a1 = u64 [0x20030]\n 14302: a2 = u64 [0x20038]\n 14307: u64 [a3 + 0x90] = a0\n 14311: u64 [a3 + 0x88] = a1\n 14315: a1 = s1 + 0x180\n 14319: u64 [a3 + 0x80] = a2\n 14323: u64 [s1 + 0x10] = a4\n 14326: a0 = a4\n 14328: ra = 568, jump @24\n      : @482 [@dyn 284] (gas: 3)\n 14334: a1 = u64 [s1 + 0x78]\n 14337: a0 = a1 + 0x40\n 14340: t0 = 570, jump @2210\n      : @483 [@dyn 285] (gas: 1)\n 14347: jump @505 if a1 != 0\n      : @484 (gas: 11)\n 14351: a1 = u64 [s1 + 0x40]\n 14354: a3 = s1 + 0x100\n 14358: u64 [a3 + 0x60] = a1\n 14361: a1 = u64 [s1 + 0x48]\n 14364: u64 [a3 + 0x68] = a1\n 14367: a1 = u64 [s1 + 0x50]\n 14370: u64 [a3 + 0x70] = a1\n 14373: a1 = s1 + 0x160\n 14377: a2 = u64 [s1 + 0x58]\n 14380: u64 [a3 + 0x78] = a2\n 14383: ra = 572, jump @24\n      : @485 [@dyn 286] (gas: 3)\n 14389: a1 = u64 [s1 + 0x78]\n 14392: a0 = a1 + 0x60\n 14395: t0 = 574, jump @2210\n      : @486 [@dyn 287] (gas: 1)\n 14402: jump @505 if a1 != 0\n      : @487 (gas: 11)\n 14406: a1 = u64 [s1 + 0x20]\n 14409: a3 = s1 + 0x100\n 14413: u64 [a3 + 0x40] = a1\n 14416: a1 = u64 [s1 + 0x28]\n 14419: u64 [a3 + 0x48] = a1\n 14422: a1 = u64 [s1 + 0x30]\n 14425: u64 [a3 + 0x50] = a1\n 14428: a1 = s1 + 0x140\n 14432: a2 = u64 [s1 + 0x38]\n 14435: u64 [a3 + 0x58] = a2\n 14438: ra = 576, jump @24\n      : @488 [@dyn 288] (gas: 4)\n 14444: i32 a0 = s1 + 0x200\n 14448: ra = 0x242\n 14452: ecalli 7 // 'chain_id'\n 14454: fallthrough\n      : @489 [@dyn 289] (gas: 3)\n 14455: a1 = u64 [s1 + 0x78]\n 14458: a0 = a1 + 0x80\n 14462: t0 = 580, jump @2210\n      : @490 [@dyn 290] (gas: 1)\n 14469: jump @505 if a1 != 0\n      : @491 (gas: 12)\n 14473: a5 = s1 + 0x200\n 14477: a2 = u64 [a5]\n 14479: a1 = u64 [a5 + 0x8]\n 14482: a3 = u64 [a5 + 0x10]\n 14485: a4 = u64 [a5 + 0x18]\n 14488: a5 = s1 + 0x100\n 14492: u64 [a5 + 0x38] = a4\n 14495: u64 [a5 + 0x30] = a3\n 14498: u64 [a5 + 0x28] = a1\n 14501: a1 = s1 + 0x120\n 14505: u64 [a5 + 0x20] = a2\n 14508: ra = 582, jump @24\n      : @492 [@dyn 291] (gas: 6)\n 14514: a0 = 0x30160\n 14519: u64 [s1 + 0x58] = a0\n 14522: i32 a0 = a0 + 0\n 14524: ra = 0x248\n 14528: ecalli 0 // 'address'\n 14529: fallthrough\n      : @493 [@dyn 292] (gas: 3)\n 14530: a1 = u64 [s1 + 0x78]\n 14533: a0 = a1 + 0xa0\n 14537: t0 = 586, jump @2210\n      : @494 [@dyn 293] (gas: 1)\n 14544: jump @505 if a1 != 0\n      : @495 (gas: 2)\n 14548: a3 = u64 [s1 + 0x58]\n 14551: t0 = 588, jump @2273\n      : @496 [@dyn 294] (gas: 7)\n 14558: u64 [s1 + 280] = 0\n 14562: a4 = s1 + 0x100\n 14566: u64 [a4 + 0x10] = a3\n 14569: u64 [a4 + 0x8] = a1\n 14572: a1 = s1 + 0x100\n 14576: u64 [a4] = a2\n 14578: ra = 590, jump @24\n      : @497 [@dyn 295] (gas: 12)\n 14584: a0 = u64 [s1 + 0x78]\n 14587: a3 = u64 [s1 + 0x60]\n 14590: a0 = a0 | a3\n 14593: a1 = u64 [s1 + 0x70]\n 14596: a2 = u64 [s1 + 0x68]\n 14599: a1 = a1 | a2\n 14602: a0 = a0 | a1\n 14605: a0 = a0 >> 0x20\n 14608: a1 = a1 | a3\n 14611: a1 = a1 << 0x20\n 14614: a0 = a0 | a1\n 14617: jump @505 if a0 != 0\n      : @498 (gas: 7)\n 14621: u64 [s1 + 248] = 0\n 14625: u64 [s1 + 240] = 0\n 14629: u64 [s1 + 232] = 0\n 14633: a1 = s1 + 0xe0\n 14637: u64 [s1 + 224] = 0xa0\n 14643: a0 = u64 [s1 + 0x78]\n 14646: ra = 592, jump @24\n      : @499 [@dyn 296] (gas: 15)\n 14652: u64 [s1 + 184] = 0\n 14656: u64 [s1 + 176] = 0\n 14660: u64 [s1 + 168] = 0\n 14664: u64 [s1 + 160] = 0xc0\n 14670: a0 = u64 [s1 + 0x68]\n 14673: u64 [s1 + 0xd8] = a0\n 14677: a0 = u64 [s1 + 0x60]\n 14680: u64 [s1 + 0xd0] = a0\n 14684: a0 = u64 [s1 + 0x70]\n 14687: u64 [s1 + 0xc8] = a0\n 14691: a0 = s1 + 0xc0\n 14695: a1 = s1 + 0xa0\n 14699: a2 = u64 [s1 + 0x78]\n 14702: u64 [s1 + 0xc0] = a2\n 14706: ra = 594, jump @149\n      : @500 [@dyn 297] (gas: 3)\n 14712: a0 = s1 + 0x80\n 14716: a1 = u64 [s1 + 0x78]\n 14719: ra = 596, jump @22\n      : @501 [@dyn 298] (gas: 5)\n 14725: a0 = u64 [s1 + 0x98]\n 14729: a3 = u64 [s1 + 0x90]\n 14733: a2 = u64 [s1 + 0x88]\n 14737: a1 = u64 [s1 + 0x80]\n 14741: t0 = 598, jump @2333\n      : @502 [@dyn 299] (gas: 1)\n 14748: jump @505 if a0 != 0\n      : @503 (gas: 3)\n 14751: a0 = u64 [s1 + 0x10]\n 14754: u64 [s1 + 0x78] = a1\n 14757: ra = 600, jump @37\n      : @504 [@dyn 300] (gas: 29)\n 14763: a1 = sp + 0xffffffffffffffe0\n 14766: a2 = a1 & 0xffffffffffffffe0\n 14769: u64 [s1 + 0x70] = a2\n 14772: sp = a2\n 14774: i32 a0 = a0 + 0\n 14776: a1 = i32 [s1 + 0x78]\n 14779: i32 a2 = a2 + 0\n 14781: ecalli 11 // 'hash_keccak_256'\n 14783: a3 = u64 [s1 + 0x70]\n 14786: a0 = u64 [a3 + 0x18]\n 14789: a1 = u64 [a3 + 0x10]\n 14792: a2 = u64 [a3 + 0x8]\n 14795: a3 = u64 [a3]\n 14797: a0 = reverse a0\n 14799: a1 = reverse a1\n 14801: a2 = reverse a2\n 14803: a3 = reverse a3\n 14805: a4 = u64 [s1 + 0x18]\n 14808: u64 [a4 + 0x18] = a3\n 14811: u64 [a4 + 0x10] = a2\n 14814: u64 [a4 + 0x8] = a1\n 14817: u64 [a4] = a0\n 14819: sp = s0 + 0xfffffffffffffdc0\n 14823: a0 = sp + 0x200\n 14827: ra = u64 [a0 + 0x38]\n 14830: s0 = u64 [a0 + 0x30]\n 14833: s1 = u64 [a0 + 0x28]\n 14836: sp = sp + 0x240\n 14840: ret\n      : @505 (gas: 1)\n 14842: trap\n      : @506 (gas: 22)\n 14843: sp = sp + 0xfffffffffffffe30\n 14847: u64 [sp + 0x1c8] = ra\n 14851: u64 [sp + 0x1c0] = s0\n 14855: u64 [sp + 0x1b8] = s1\n 14859: s0 = sp + 0x1d0\n 14863: sp = sp & 0xfffffffffffffff0\n 14866: a3 = u64 [a1 + 0x10]\n 14869: a4 = u64 [a1 + 0x18]\n 14872: a2 = u64 [a1 + 0x8]\n 14875: s1 = u64 [a1]\n 14877: u64 [sp + 0x88] = a2\n 14881: u64 [sp + 0x78] = a4\n 14884: a1 = a2 | a4\n 14887: a2 = s1 | a3\n 14890: a2 = a2 | a1\n 14893: a2 = a2 >> 0x20\n 14896: u64 [sp + 0x80] = a3\n 14900: a1 = a1 | a3\n 14903: a1 = a1 << 0x20\n 14906: a1 = a1 | a2\n 14909: u64 [sp + 0x68] = a0\n 14912: jump @538 if a1 != 0\n      : @507 (gas: 3)\n 14916: a0 = sp + 0x190\n 14920: a1 = s1\n 14922: ra = 602, jump @22\n      : @508 [@dyn 301] (gas: 9)\n 14928: a0 = u64 [sp + 0x1a8]\n 14932: a1 = u64 [sp + 0x1a0]\n 14936: a2 = u64 [sp + 0x190]\n 14940: a3 = u64 [sp + 0x198]\n 14944: a0 = a0 | a1\n 14947: a1 = a2 <u 0x20\n 14950: a1 = 0 if a3 != 0\n 14952: a1 = 0 if a0 != 0\n 14954: jump @520 if a1 == 0\n      : @509 (gas: 3)\n 14958: a0 = sp + 0x170\n 14962: a1 = s1\n 14964: ra = 604, jump @22\n      : @510 [@dyn 302] (gas: 3)\n 14970: a0 = u64 [sp + 0x80]\n 14974: a1 = u64 [sp + 0x78]\n 14977: t0 = 606, jump @2349\n      : @511 [@dyn 303] (gas: 4)\n 14984: a2 = u64 [sp + 0x88]\n 14988: a1 = 0 if a2 != 0\n 14990: a1 = 0 if a0 != 0\n 14992: jump @538 if a1 == 0\n      : @512 (gas: 11)\n 14996: a0 = u64 [sp + 0x188]\n 15000: u64 [sp + 0x70] = a0\n 15003: a0 = u64 [sp + 0x180]\n 15007: u64 [sp + 0x78] = a0\n 15010: a0 = u64 [sp + 0x178]\n 15014: u64 [sp + 0x80] = a0\n 15018: a0 = u64 [sp + 0x170]\n 15022: u64 [sp + 0x88] = a0\n 15026: i32 a1 = s1 + 0x20\n 15029: a0 = sp + 0x150\n 15033: ra = 608, jump @22\n      : @513 [@dyn 304] (gas: 19)\n 15039: a3 = u64 [sp + 0x70]\n 15042: s1 = u64 [sp + 0x78]\n 15045: a5 = u64 [sp + 0x80]\n 15049: t0 = u64 [sp + 0x88]\n 15053: a0 = u64 [sp + 0x168]\n 15057: u64 [sp + 0x60] = a0\n 15060: ra = u64 [sp + 0x160]\n 15064: t2 = u64 [sp + 0x158]\n 15068: t1 = u64 [sp + 0x150]\n 15072: a0 = a5 >u 0\n 15074: a1 = t0 <u 0x20\n 15077: a1 = a1 ^ 0x1\n 15080: a1 = a0 if a5 != 0\n 15083: a0 = s1 >u 0\n 15085: a2 = a3 >u 0\n 15087: a2 = a0 if a3 == 0\n 15090: a0 = s1 | a3\n 15093: a2 = a1 if a0 == 0\n 15096: jump @518 if a2 != 0\n      : @514 (gas: 13)\n 15100: a0 = t0 | s1\n 15103: a1 = a5 | a3\n 15106: a0 = a0 | a1\n 15109: u64 [sp + 0x48] = a0\n 15112: a0 = t0 << 0x3\n 15115: u64 [sp] = a0\n 15117: i32 a2 = 0x100 - a0\n 15121: a0 = 0xffffffffffffffff\n 15124: a1 = 0xffffffffffffffff\n 15127: u64 [sp + 0x58] = t1\n 15130: u64 [sp + 0x50] = t2\n 15133: u64 [sp + 0x30] = ra\n 15136: ra = 610, jump @2379\n      : @515 [@dyn 305] (gas: 17)\n 15143: u64 [sp + 0x28] = a0\n 15146: u64 [sp + 0x8] = a1\n 15149: s1 = u64 [sp]\n 15151: a4 = 0x100 - s1\n 15155: u64 [sp + 0x20] = a4\n 15158: a3 = a4 <u 0x80\n 15162: u64 [sp + 0x18] = a3\n 15165: a2 = a1\n 15167: a2 = 0 if a3 == 0\n 15169: u64 [sp + 0x40] = a2\n 15172: a2 = a0\n 15174: a2 = 0 if a3 == 0\n 15176: u64 [sp + 0x38] = a2\n 15179: i32 a2 = 0x80 - a4\n 15183: a0 = 0xffffffffffffffff\n 15186: a1 = 0xffffffffffffffff\n 15189: ra = 612, jump @2374\n      : @516 [@dyn 306] (gas: 8)\n 15196: u64 [sp + 0x10] = a0\n 15199: a0 = u64 [sp + 0x8]\n 15202: a0 = a0 | a1\n 15205: u64 [sp + 0x8] = a0\n 15208: i32 a2 = 0x80 - s1\n 15212: a0 = 0xffffffffffffffff\n 15215: a1 = 0xffffffffffffffff\n 15218: ra = 614, jump @2379\n      : @517 [@dyn 307] (gas: 31)\n 15225: t2 = u64 [sp + 0x50]\n 15228: t1 = u64 [sp + 0x58]\n 15231: a3 = u64 [sp + 0x70]\n 15234: s1 = u64 [sp + 0x78]\n 15237: a5 = u64 [sp + 0x80]\n 15241: t0 = u64 [sp + 0x88]\n 15245: ra = u64 [sp + 0x18]\n 15248: a2 = u64 [sp + 0x8]\n 15251: a1 = a2 if ra != 0\n 15254: a2 = u64 [sp + 0x28]\n 15257: a4 = u64 [sp + 0x10]\n 15260: a2 = a2 | a4\n 15263: a2 = a0 if ra == 0\n 15266: a4 = u64 [sp + 0x20]\n 15269: a1 = 0xffffffffffffffff if a4 == 0\n 15272: a2 = 0xffffffffffffffff if a4 == 0\n 15275: a0 = u64 [sp + 0x48]\n 15278: a2 = 0 if a0 == 0\n 15280: a1 = 0 if a0 == 0\n 15282: ra = u64 [sp + 0x38]\n 15285: ra = 0 if a0 == 0\n 15287: a4 = u64 [sp + 0x40]\n 15290: a4 = 0 if a0 == 0\n 15292: t2 = t2 & a4\n 15295: t1 = t1 & ra\n 15298: a0 = u64 [sp + 0x60]\n 15301: a0 = a0 & a1\n 15304: ra = u64 [sp + 0x30]\n 15307: ra = ra & a2\n 15310: a4 = u64 [sp + 0x68]\n 15313: jump @519\n      : @518 (gas: 3)\n 15315: a4 = u64 [sp + 0x68]\n 15318: a0 = u64 [sp + 0x60]\n 15321: fallthrough\n      : @519 (gas: 14)\n 15322: a0 = a0 | a3\n 15325: a1 = ra | s1\n 15328: a2 = t2 | a5\n 15331: a3 = t1 | t0\n 15334: u64 [a4] = a3\n 15336: u64 [a4 + 0x8] = a2\n 15339: u64 [a4 + 0x10] = a1\n 15342: u64 [a4 + 0x18] = a0\n 15345: sp = s0 + 0xfffffffffffffe30\n 15349: ra = u64 [sp + 0x1c8]\n 15353: s0 = u64 [sp + 0x1c0]\n 15357: s1 = u64 [sp + 0x1b8]\n 15361: sp = sp + 0x1d0\n 15365: ret\n      : @520 (gas: 4)\n 15367: u64 [sp + 0x50] = s1\n 15370: a0 = sp + 0x130\n 15374: a1 = 0x40\n 15377: ra = 616, jump @22\n      : @521 [@dyn 308] (gas: 16)\n 15383: a0 = u64 [sp + 0x148]\n 15387: a2 = u64 [sp + 0x140]\n 15391: a3 = u64 [sp + 0x138]\n 15395: a1 = u64 [sp + 0x130]\n 15399: u64 [sp + 0x60] = a0\n 15402: u64 [sp + 0x68] = a3\n 15405: a0 = a0 | a3\n 15408: u64 [sp + 0x70] = a1\n 15411: a1 = a1 | a2\n 15414: a1 = a1 | a0\n 15417: a1 = a1 >> 0x20\n 15420: u64 [sp + 0x58] = a2\n 15423: a0 = a0 | a2\n 15426: a0 = a0 << 0x20\n 15429: a0 = a0 | a1\n 15432: jump @538 if a0 != 0\n      : @522 (gas: 8)\n 15436: u64 [sp + 288] = 0\n 15440: u64 [sp + 280] = 0\n 15444: u64 [sp + 272] = 0\n 15448: a0 = 0x305a27a900000000\n 15458: a1 = sp + 0x110\n 15462: u64 [sp + 0x128] = a0\n 15466: a0 = u64 [sp + 0x70]\n 15469: ra = 618, jump @24\n      : @523 [@dyn 309] (gas: 12)\n 15475: a0 = u64 [sp + 0x60]\n 15478: a1 = u64 [sp + 0x58]\n 15481: a2 = a1 | a0\n 15484: s1 = 0x100000000\n 15494: a0 = 0xfffffffc\n 15504: a1 = u64 [sp + 0x70]\n 15507: a0 = a1 <u a0\n 15510: a1 = u64 [sp + 0x68]\n 15513: a0 = 0 if a1 != 0\n 15515: u64 [sp + 0x48] = a2\n 15518: a0 = 0 if a2 != 0\n 15520: jump @538 if a0 == 0\n      : @524 (gas: 8)\n 15524: a0 = u64 [sp + 0x70]\n 15527: i32 a0 = a0 + 0x4\n 15530: u64 [sp + 264] = 0\n 15534: u64 [sp + 256] = 0\n 15538: u64 [sp + 240] = 0x20\n 15543: a1 = sp + 0xf0\n 15547: u64 [sp + 248] = 0\n 15551: ra = 620, jump @24\n      : @525 [@dyn 310] (gas: 3)\n 15557: a0 = sp + 0xd0\n 15561: a1 = u64 [sp + 0x50]\n 15564: ra = 622, jump @22\n      : @526 [@dyn 311] (gas: 8)\n 15570: a0 = s1 + 0xffffffffffffffdc\n 15573: a1 = u64 [sp + 0x70]\n 15576: a0 = a1 <u a0\n 15579: a1 = u64 [sp + 0x68]\n 15582: a0 = 0 if a1 != 0\n 15584: a1 = u64 [sp + 0x48]\n 15587: a0 = 0 if a1 != 0\n 15589: jump @538 if a0 == 0\n      : @527 (gas: 16)\n 15593: a2 = u64 [sp + 0xe8]\n 15597: a3 = u64 [sp + 0xe0]\n 15601: a4 = u64 [sp + 0xd8]\n 15605: a1 = u64 [sp + 0xd0]\n 15609: s1 = u64 [sp + 0x70]\n 15612: i32 a0 = s1 + 0x24\n 15615: u64 [sp + 0x40] = a1\n 15618: u64 [sp + 0xb0] = a1\n 15622: u64 [sp + 0x28] = a4\n 15625: u64 [sp + 0xb8] = a4\n 15629: u64 [sp + 0x30] = a3\n 15632: u64 [sp + 0xc0] = a3\n 15636: a1 = sp + 0xb0\n 15640: u64 [sp + 0x38] = a2\n 15643: u64 [sp + 0xc8] = a2\n 15647: ra = 624, jump @24\n      : @528 [@dyn 312] (gas: 7)\n 15653: a1 = 0xffffffbc\n 15663: a1 = s1 <u a1\n 15666: a2 = u64 [sp + 0x68]\n 15669: a1 = 0 if a2 != 0\n 15671: a2 = u64 [sp + 0x48]\n 15674: a1 = 0 if a2 != 0\n 15676: jump @538 if a1 == 0\n      : @529 (gas: 10)\n 15680: a1 = u64 [sp + 0x80]\n 15684: a2 = u64 [sp + 0x78]\n 15687: a1 = a1 | a2\n 15690: a0 = 0xffffffe0\n 15700: a2 = u64 [sp + 0x50]\n 15703: a0 = a2 <u a0\n 15706: a2 = u64 [sp + 0x88]\n 15710: a0 = 0 if a2 != 0\n 15712: a0 = 0 if a1 != 0\n 15714: jump @538 if a0 == 0\n      : @530 (gas: 12)\n 15718: a0 = u64 [sp + 0x40]\n 15721: a2 = u64 [sp + 0x30]\n 15724: a0 = a0 | a2\n 15727: a1 = u64 [sp + 0x38]\n 15730: a3 = u64 [sp + 0x28]\n 15733: a1 = a1 | a3\n 15736: a0 = a0 | a1\n 15739: a0 = a0 >> 0x20\n 15742: a1 = a1 | a2\n 15745: a1 = a1 << 0x20\n 15748: a0 = a0 | a1\n 15751: jump @538 if a0 != 0\n      : @531 (gas: 8)\n 15755: a0 = u64 [sp + 0x70]\n 15758: i32 a0 = a0 + 0x44\n 15761: a1 = u64 [sp + 0x50]\n 15764: i32 a1 = a1 + 0x20\n 15767: u64 [sp + 0x88] = a1\n 15771: s1 = u64 [sp + 0x40]\n 15774: a1 = s1\n 15776: ra = 626, jump @37\n      : @532 [@dyn 313] (gas: 4)\n 15782: u64 [sp + 0x80] = a0\n 15786: a0 = u64 [sp + 0x88]\n 15790: a1 = s1\n 15792: ra = 628, jump @37\n      : @533 [@dyn 314] (gas: 4)\n 15798: a1 = a0\n 15800: a0 = u64 [sp + 0x80]\n 15804: a2 = s1\n 15806: ra = 630, jump @0\n      : @534 [@dyn 315] (gas: 6)\n 15812: a0 = u64 [sp + 0x70]\n 15815: a0 = a0 + s1\n 15818: a1 = a0 <u s1\n 15821: a2 = u64 [sp + 0x68]\n 15824: a4 = u64 [sp + 0x28]\n 15827: t0 = 632, jump @2324\n      : @535 [@dyn 316] (gas: 17)\n 15834: a1 = u64 [sp + 0x58]\n 15837: a5 = u64 [sp + 0x30]\n 15840: a1 = a1 + a5\n 15843: a4 = a4 + a1\n 15846: a3 = a4 <u a1\n 15849: a1 = a1 <u a5\n 15852: a5 = u64 [sp + 0x60]\n 15855: s1 = u64 [sp + 0x38]\n 15858: a5 = a5 + s1\n 15861: a1 = a1 + a5\n 15864: a1 = a1 + a3\n 15867: a1 = a1 | a4\n 15870: s1 = 0xffffffbc\n 15880: a3 = a0 <u s1\n 15883: a3 = 0 if a2 != 0\n 15885: a3 = 0 if a1 != 0\n 15887: jump @538 if a3 == 0\n      : @536 (gas: 7)\n 15890: i32 a0 = a0 + 0x44\n 15893: u64 [sp + 168] = 0\n 15897: u64 [sp + 160] = 0\n 15901: u64 [sp + 152] = 0\n 15905: a1 = sp + 0x90\n 15909: u64 [sp + 144] = 0\n 15913: ra = 634, jump @24\n      : @537 [@dyn 317] (gas: 5)\n 15919: a0 = u64 [sp + 0x40]\n 15922: a0 = a0 + 0x1f\n 15925: a1 = 0x1ffffffe0\n 15935: a0 = a0 & a1\n 15938: jump @539 if a0 <u s1\n      : @538 (gas: 1)\n 15941: trap\n      : @539 (gas: 4)\n 15942: i32 s1 = a0 + 0x44\n 15945: a0 = u64 [sp + 0x70]\n 15948: a1 = s1\n 15950: ra = 636, jump @37\n      : @540 [@dyn 318] (gas: 7)\n 15956: i32 a1 = a0 + 0\n 15958: a0 = 0x1\n 15961: a2 = s1\n 15963: ra = 0x27e\n 15967: ecalli 16 // 'seal_return'\n 15969: t0 = 0x280\n 15973: jump @2367\n      : @541 [@dyn 319] (gas: 1)\n 15977: t0 = 640, jump @2367\n      : @542 [@dyn 320] (gas: 20)\n 15984: a3 = u64 [a2]\n 15986: u64 [sp + 0x18] = a3\n 15989: a3 = u64 [a2 + 0x8]\n 15992: u64 [sp + 0x10] = a3\n 15995: a3 = u64 [a2 + 0x10]\n 15998: u64 [sp + 0x8] = a3\n 16001: a2 = u64 [a2 + 0x18]\n 16004: u64 [sp] = a2\n 16006: a2 = u64 [a1]\n 16008: a3 = u64 [a1 + 0x8]\n 16011: a4 = u64 [a1 + 0x10]\n 16014: a1 = u64 [a1 + 0x18]\n 16017: s1 = a0\n 16019: u64 [sp + 0x58] = a1\n 16022: u64 [sp + 0x50] = a4\n 16025: u64 [sp + 0x48] = a3\n 16028: a0 = 0x4\n 16031: a1 = sp + 0x40\n 16034: u64 [sp + 0x40] = a2\n 16037: ra = 642, jump @24\n      : @543 [@dyn 321] (gas: 5)\n 16043: a0 = u64 [sp]\n 16045: u64 [sp + 0x38] = a0\n 16048: a0 = u64 [sp + 0x8]\n 16051: u64 [sp + 0x30] = a0\n 16054: t0 = 644, jump @2360\n      : @544 [@dyn 322] (gas: 1)\n 16061: ra = 646, jump @24\n      : @545 [@dyn 323] (gas: 6)\n 16067: u64 [s1 + 24] = 0\n 16070: u64 [s1 + 16] = 0\n 16073: u64 [s1 + 8] = 0\n 16076: a0 = 0x44\n 16079: u64 [s1] = a0\n 16081: t0 = 648, jump @2307\n      : @546 [@dyn 324] (gas: 1)\n 16088: ret\n      : @547 (gas: 22)\n 16090: sp = sp + 0xffffffffffffff50\n 16094: u64 [sp + 0xa8] = ra\n 16098: u64 [sp + 0xa0] = s0\n 16102: u64 [sp + 0x98] = s1\n 16106: s0 = sp + 0xb0\n 16110: sp = sp & 0xfffffffffffffff0\n 16113: a5 = u64 [a1 + 0x10]\n 16116: a4 = u64 [a1 + 0x18]\n 16119: s1 = u64 [a1 + 0x8]\n 16122: t0 = u64 [a1]\n 16124: u64 [sp + 0x40] = a4\n 16127: u64 [sp + 0x38] = s1\n 16130: a1 = s1 | a4\n 16133: a4 = t0 | a5\n 16136: a4 = a4 | a1\n 16139: a4 = a4 >> 0x20\n 16142: u64 [sp + 0x48] = a5\n 16145: a1 = a1 | a5\n 16148: a1 = a1 << 0x20\n 16151: a1 = a1 | a4\n 16154: u64 [sp + 0x30] = a0\n 16157: jump @552 if a1 != 0\n      : @548 (gas: 20)\n 16161: s1 = t0\n 16163: a0 = u64 [a3 + 0x18]\n 16166: u64 [sp + 0x28] = a0\n 16169: a0 = u64 [a3 + 0x10]\n 16172: u64 [sp + 0x20] = a0\n 16175: a0 = u64 [a3 + 0x8]\n 16178: u64 [sp + 0x18] = a0\n 16181: a0 = u64 [a3]\n 16183: u64 [sp + 0x10] = a0\n 16186: a0 = u64 [a2 + 0x18]\n 16189: a1 = u64 [a2 + 0x10]\n 16192: a3 = u64 [a2 + 0x8]\n 16195: a2 = u64 [a2]\n 16197: u64 [sp + 0x70] = a2\n 16200: u64 [sp + 0x78] = a3\n 16203: u64 [sp + 0x80] = a1\n 16207: a1 = sp + 0x70\n 16210: u64 [sp + 0x88] = a0\n 16214: a0 = t0\n 16216: ra = 650, jump @24\n      : @549 [@dyn 325] (gas: 9)\n 16222: a2 = u64 [sp + 0x48]\n 16225: a3 = u64 [sp + 0x40]\n 16228: a0 = a2 | a3\n 16231: a1 = 0xffffffe0\n 16241: a1 = s1 <u a1\n 16244: a4 = u64 [sp + 0x38]\n 16247: a1 = 0 if a4 != 0\n 16249: a1 = 0 if a0 != 0\n 16251: jump @552 if a1 == 0\n      : @550 (gas: 23)\n 16254: a0 = s1 + 0x40\n 16257: u64 [sp + 0x8] = a0\n 16260: a0 = a0 <u s1\n 16263: a1 = a4 + a0\n 16266: u64 [sp] = a1\n 16268: a1 = a1 <u a4\n 16271: a1 = a0 if a0 == 0\n 16274: a1 = a1 + a2\n 16277: u64 [sp + 0x38] = a1\n 16280: a0 = a1 <u a2\n 16283: a0 = a0 + a3\n 16286: u64 [sp + 0x48] = a0\n 16289: i32 a0 = s1 + 0x20\n 16292: a1 = u64 [sp + 0x10]\n 16295: u64 [sp + 0x50] = a1\n 16298: a1 = u64 [sp + 0x18]\n 16301: u64 [sp + 0x58] = a1\n 16304: a1 = u64 [sp + 0x20]\n 16307: u64 [sp + 0x60] = a1\n 16310: a1 = sp + 0x50\n 16313: a2 = u64 [sp + 0x28]\n 16316: u64 [sp + 0x68] = a2\n 16319: ra = 652, jump @24\n      : @551 [@dyn 326] (gas: 15)\n 16325: a0 = u64 [sp + 0x30]\n 16328: a1 = u64 [sp + 0x38]\n 16331: u64 [a0 + 0x10] = a1\n 16334: a1 = u64 [sp]\n 16336: u64 [a0 + 0x8] = a1\n 16339: a1 = u64 [sp + 0x8]\n 16342: u64 [a0] = a1\n 16344: a1 = u64 [sp + 0x48]\n 16347: u64 [a0 + 0x18] = a1\n 16350: sp = s0 + 0xffffffffffffff50\n 16354: ra = u64 [sp + 0xa8]\n 16358: s0 = u64 [sp + 0xa0]\n 16362: s1 = u64 [sp + 0x98]\n 16366: sp = sp + 0xb0\n 16370: ret\n      : @552 (gas: 1)\n 16372: trap\n      : @553 [@dyn 327] (gas: 1)\n 16373: ra = 656, jump @24\n      : @554 [@dyn 328] (gas: 7)\n 16379: u64 [sp + 24] = 0\n 16382: u64 [sp + 16] = 0\n 16385: u64 [sp + 0] = 0x11\n 16388: a0 = 0x4\n 16391: a1 = sp\n 16393: u64 [sp + 8] = 0\n 16396: ra = 658, jump @24\n      : @555 [@dyn 329] (gas: 2)\n 16402: a1 = i32 [0x20150]\n 16407: jump @557 if a1 >u 63\n      : @556 (gas: 2)\n 16411: u32 [0x20150] = 0x40\n 16417: fallthrough\n      : @557 (gas: 7)\n 16418: a1 = 0x20160\n 16423: i32 a1 = a1 + 0\n 16425: a0 = 0x1\n 16428: a2 = 0x24\n 16431: ra = 0x294\n 16435: ecalli 16 // 'seal_return'\n 16437: fallthrough\n      : @558 [@dyn 330] (gas: 12)\n 16438: a4 = u64 [a1 + 0x10]\n 16441: t0 = u64 [a1 + 0x18]\n 16444: a5 = u64 [a1 + 0x8]\n 16447: t1 = u64 [a1]\n 16449: a1 = a5 | t0\n 16452: a3 = t1 | a4\n 16455: a3 = a3 | a1\n 16458: a3 = a3 >> 0x20\n 16461: a1 = a1 | a4\n 16464: a1 = a1 << 0x20\n 16467: a1 = a1 | a3\n 16470: jump @562 if a1 != 0\n      : @559 (gas: 30)\n 16473: sp = sp + 0xffffffffffffffa0\n 16476: u64 [sp + 0x58] = ra\n 16479: u64 [sp + 0x50] = s0\n 16482: u64 [sp + 0x48] = s1\n 16485: s0 = sp + 0x60\n 16488: sp = sp & 0xfffffffffffffff0\n 16491: s1 = a0\n 16493: t2 = u64 [a2 + 0x18]\n 16496: ra = u64 [a2 + 0x10]\n 16499: a3 = u64 [a2 + 0x8]\n 16502: a2 = u64 [a2]\n 16504: a0 = t1 + 0x20\n 16507: u64 [sp + 0x18] = a0\n 16510: a0 = a0 <u t1\n 16513: a1 = a5 + a0\n 16516: u64 [sp + 0x10] = a1\n 16519: a5 = a1 <u a5\n 16522: a5 = a0 if a0 == 0\n 16525: a5 = a5 + a4\n 16528: u64 [sp] = a5\n 16530: a0 = a5 <u a4\n 16533: a0 = a0 + t0\n 16536: u64 [sp + 0x8] = a0\n 16539: u64 [sp + 0x20] = a2\n 16542: u64 [sp + 0x28] = a3\n 16545: u64 [sp + 0x30] = ra\n 16548: a1 = sp + 0x20\n 16551: u64 [sp + 0x38] = t2\n 16554: a0 = t1\n 16556: ra = 662, jump @24\n      : @560 [@dyn 331] (gas: 9)\n 16562: a0 = u64 [sp]\n 16564: u64 [s1 + 0x10] = a0\n 16567: a0 = u64 [sp + 0x10]\n 16570: u64 [s1 + 0x8] = a0\n 16573: a0 = u64 [sp + 0x18]\n 16576: u64 [s1] = a0\n 16578: a0 = u64 [sp + 0x8]\n 16581: u64 [s1 + 0x18] = a0\n 16584: t0 = 664, jump @2229\n      : @561 [@dyn 332] (gas: 1)\n 16591: ret\n      : @562 (gas: 1)\n 16593: trap\n      : @563 [@dyn 333] (gas: 4)\n 16594: i32 a0 = s1 + 0x460\n 16598: ra = 0x29c\n 16602: ecalli 1 // 'block_number'\n 16604: fallthrough\n      : @564 [@dyn 334] (gas: 6)\n 16605: a4 = s1 + 0x400\n 16609: a0 = u64 [a4 + 0x78]\n 16612: a1 = u64 [a4 + 0x68]\n 16615: a2 = u16 [s1 + 0x466]\n 16619: a3 = u64 [a4 + 0x70]\n 16622: t0 = 670, jump @2268\n      : @565 [@dyn 335] (gas: 1)\n 16629: jump @605 if a0 != 0\n      : @566 (gas: 9)\n 16633: u64 [s1 + 1208] = 0\n 16637: u64 [s1 + 1200] = 0\n 16641: u64 [s1 + 1192] = 0\n 16645: u64 [s1 + 1184] = 0xa\n 16650: a0 = s1 + 0x400\n 16654: a1 = s1 + 0x4a0\n 16658: ra = 0x2a0\n 16662: t0 = 0x6\n 16665: jump @2259\n      : @567 [@dyn 336] (gas: 9)\n 16669: a0 = s1 + 0x400\n 16673: a3 = u64 [a0 + 0x18]\n 16676: a2 = u64 [a0 + 0x10]\n 16679: a4 = u64 [a0 + 0x8]\n 16682: a5 = u64 [a0]\n 16684: a0 = a4 | a3\n 16687: a1 = a5 | a2\n 16690: a0 = a0 | a1\n 16693: jump @576 if a0 == 0\n      : @568 (gas: 11)\n 16697: u64 [s1 + 0x28] = a5\n 16700: u64 [s1 + 0x30] = a4\n 16703: u64 [s1 + 0x38] = a3\n 16706: u64 [s1 + 0x40] = a2\n 16709: u64 [s1 + 1016] = 0\n 16713: u64 [s1 + 1008] = 0\n 16717: u64 [s1 + 1000] = 0\n 16721: a1 = s1 + 0x3e0\n 16725: u64 [s1 + 992] = 0xa\n 16730: a0 = 0\n 16732: ra = 674, jump @24\n      : @569 [@dyn 337] (gas: 2)\n 16738: a1 = i32 [0x20150]\n 16743: jump @571 if a1 >u 31\n      : @570 (gas: 2)\n 16747: u32 [0x20150] = 0x20\n 16753: fallthrough\n      : @571 (gas: 11)\n 16754: a0 = sp + 0xffffffffffffffe0\n 16757: a2 = a0 & 0xffffffffffffffe0\n 16760: u64 [s1 + 0x20] = a2\n 16763: sp = a2\n 16765: a0 = 0x20160\n 16770: i32 a0 = a0 + 0\n 16772: i32 a2 = a2 + 0\n 16774: a1 = 0x20\n 16777: ra = 0x2a4\n 16781: ecalli 11 // 'hash_keccak_256'\n 16783: fallthrough\n      : @572 [@dyn 338] (gas: 27)\n 16784: a3 = u64 [s1 + 0x20]\n 16787: a0 = u64 [a3]\n 16789: a1 = u64 [a3 + 0x8]\n 16792: a2 = u64 [a3 + 0x18]\n 16795: a3 = u64 [a3 + 0x10]\n 16798: t0 = reverse a0\n 16800: a1 = reverse a1\n 16802: a0 = reverse a2\n 16804: a2 = reverse a3\n 16806: a4 = u64 [s1 + 0x30]\n 16809: a2 = a2 + a4\n 16812: a3 = u64 [s1 + 0x28]\n 16815: a0 = a0 + a3\n 16818: a3 = a0 <u a3\n 16821: a2 = a2 + a3\n 16824: a5 = a2 ^ a4\n 16827: a4 = a2 <u a4\n 16830: a4 = a3 if a5 == 0\n 16833: a5 = u64 [s1 + 0x40]\n 16836: a1 = a1 + a5\n 16839: a4 = a4 + a1\n 16842: t1 = a4 <u a1\n 16845: a3 = u64 [s1 + 0x38]\n 16848: t0 = t0 + a3\n 16851: a1 = a1 <u a5\n 16854: a1 = a1 + t0\n 16857: t0 = 678, jump @2248\n      : @573 [@dyn 339] (gas: 10)\n 16864: a3 = s1 + 0x400\n 16868: u64 [a3 + 0xc0] = a0\n 16872: u64 [a3 + 0xc8] = a2\n 16876: u64 [a3 + 0xd0] = a4\n 16880: u64 [a3 + 0xd8] = a1\n 16884: a0 = s1 + 0x3c0\n 16888: a1 = s1 + 0x4c0\n 16892: ra = 0x2a8\n 16896: t0 = 0x6\n 16899: jump @2259\n      : @574 [@dyn 340] (gas: 6)\n 16903: a0 = s1 + 0x300\n 16907: a4 = u64 [a0 + 0xd8]\n 16911: a1 = u64 [a0 + 0xd0]\n 16915: a2 = u16 [s1 + 0x3c6]\n 16919: a3 = u64 [a0 + 0xc8]\n 16923: t0 = 682, jump @2234\n      : @575 [@dyn 341] (gas: 1)\n 16930: jump @577\n      : @576 (gas: 4)\n 16932: a2 = 0\n 16934: a1 = 0\n 16936: a4 = 0\n 16938: fallthrough\n      : @577 (gas: 4)\n 16939: a3 = u64 [s1 + 0x78]\n 16942: u64 [s1 + 0x340] = a3\n 16946: u64 [s1 + 0x360] = a2\n 16950: t0 = 684, jump @2358\n      : @578 [@dyn 342] (gas: 15)\n 16957: u64 [s1 + 896] = 0x1\n 16962: a2 = u64 [s1 + 0x70]\n 16965: u64 [s1 + 0x348] = a2\n 16969: u64 [s1 + 0x368] = a1\n 16973: a1 = u64 [s1 + 0x68]\n 16976: u64 [s1 + 0x350] = a1\n 16980: u64 [s1 + 0x370] = a0\n 16984: a0 = u64 [s1 + 0x60]\n 16987: u64 [s1 + 0x358] = a0\n 16991: a0 = s1 + 0x3a0\n 16995: a1 = s1 + 0x380\n 16999: a2 = s1 + 0x360\n 17003: a3 = s1 + 0x340\n 17007: u64 [s1 + 0x378] = a4\n 17011: ra = 686, jump @842\n      : @579 [@dyn 343] (gas: 13)\n 17017: a1 = s1 + 0x300\n 17021: a0 = u64 [a1 + 0xa0]\n 17025: u64 [s1 + 0x40] = a0\n 17028: a0 = u64 [a1 + 0xa8]\n 17032: u64 [s1 + 0x38] = a0\n 17035: a0 = u64 [a1 + 0xb0]\n 17039: u64 [s1 + 0x30] = a0\n 17042: a0 = u64 [a1 + 0xb8]\n 17046: u64 [s1 + 0x28] = a0\n 17049: i32 a0 = s1 + 0x4e0\n 17053: ra = 0x2b0\n 17057: ecalli 1 // 'block_number'\n 17059: fallthrough\n      : @580 [@dyn 344] (gas: 13)\n 17060: a0 = u64 [s1 + 0x4e0]\n 17064: a0 = a0 << 0x10\n 17067: a4 = a0 >> 0x10\n 17070: a0 = u64 [s1 + 0x28]\n 17073: a5 = s1 + 0x200\n 17077: u64 [a5 + 0xb8] = a0\n 17081: a0 = u64 [s1 + 0x30]\n 17084: u64 [a5 + 0xb0] = a0\n 17088: a0 = u64 [s1 + 0x38]\n 17091: u64 [a5 + 0xa8] = a0\n 17095: a0 = u64 [s1 + 0x40]\n 17098: u64 [a5 + 0xa0] = a0\n 17102: t0 = 690, jump @2286\n      : @581 [@dyn 345] (gas: 1)\n 17109: t0 = 692, jump @2368\n      : @582 [@dyn 346] (gas: 9)\n 17116: u64 [a5 + 224] = 0xa\n 17121: a0 = s1 + 0x300\n 17125: a1 = s1 + 0x2e0\n 17129: a2 = s1 + 0x2c0\n 17133: a3 = s1 + 0x2a0\n 17137: u64 [a5 + 0xc0] = a4\n 17141: ra = 0x2b6\n 17145: t0 = 0x3ec\n 17149: jump @2212\n      : @583 [@dyn 347] (gas: 9)\n 17153: a0 = u64 [s1 + 0x48]\n 17156: a0 = a0 << 0x20\n 17159: a2 = a0 >> 0x20\n 17162: a0 = u64 [s1 + 0x58]\n 17165: a1 = u64 [s1 + 0x50]\n 17168: a0 = a0 | a1\n 17171: u64 [s1 + 0x40] = a2\n 17174: a0 = a0 | a2\n 17177: jump @586 if a0 != 0\n      : @584 (gas: 13)\n 17180: a0 = u64 [s1 + 0x78]\n 17183: u64 [s1 + 0x260] = a0\n 17187: a0 = u64 [s1 + 0x70]\n 17190: u64 [s1 + 0x268] = a0\n 17194: a0 = u64 [s1 + 0x68]\n 17197: u64 [s1 + 0x270] = a0\n 17201: a0 = s1 + 0x280\n 17205: a1 = s1 + 0x260\n 17209: a2 = u64 [s1 + 0x60]\n 17212: u64 [s1 + 0x278] = a2\n 17216: ra = 0x2b8\n 17220: t0 = 0x2e4\n 17224: jump @2372\n      : @585 [@dyn 348] (gas: 12)\n 17228: a0 = u64 [s1 + 0x60]\n 17231: a3 = s1 + 0x200\n 17235: u64 [a3 + 0x18] = a0\n 17238: a0 = u64 [s1 + 0x68]\n 17241: u64 [a3 + 0x10] = a0\n 17244: a0 = u64 [s1 + 0x70]\n 17247: u64 [a3 + 0x8] = a0\n 17250: a0 = s1 + 0x220\n 17254: a1 = s1 + 0x200\n 17258: a2 = u64 [s1 + 0x78]\n 17261: u64 [a3] = a2\n 17263: ra = 698, jump @625\n      : @586 [@dyn 349] (gas: 1)\n 17269: t0 = 700, jump @2359\n      : @587 [@dyn 350] (gas: 4)\n 17276: a1 = s1 + 0x1e0\n 17280: u64 [s1 + 480] = 0\n 17284: a0 = 0\n 17286: ra = 702, jump @24\n      : @588 [@dyn 351] (gas: 7)\n 17292: u64 [s1 + 472] = 0\n 17296: u64 [s1 + 464] = 0\n 17300: u64 [s1 + 456] = 0\n 17304: a0 = 0x20\n 17307: a1 = s1 + 0x1c0\n 17311: u64 [s1 + 448] = 0x8\n 17316: ra = 704, jump @24\n      : @589 [@dyn 352] (gas: 3)\n 17322: a1 = 0x20150\n 17327: a0 = i32 [0x20150]\n 17332: jump @591 if a0 >u 63\n      : @590 (gas: 2)\n 17336: u32 [0x20150] = 0x40\n 17342: fallthrough\n      : @591 (gas: 3)\n 17343: a0 = 0xffffffff\n 17353: u64 [s1 + 0x48] = a0\n 17356: t0 = 706, jump @2356\n      : @592 [@dyn 353] (gas: 10)\n 17363: a0 = 0x20160\n 17368: i32 a0 = a0 + 0\n 17370: i32 a2 = a2 + 0\n 17372: u64 [s1 + 0x38] = a1\n 17375: a1 = 0x40\n 17378: u64 [s1 + 0x30] = a0\n 17381: ra = 0x2c4\n 17385: ecalli 11 // 'hash_keccak_256'\n 17387: t0 = 0x2c6\n 17391: jump @2317\n      : @593 [@dyn 354] (gas: 1)\n 17395: t0 = 710, jump @2317\n      : @594 [@dyn 355] (gas: 10)\n 17402: a4 = s1 + 0x500\n 17406: u64 [a4 + 0x18] = a3\n 17409: u64 [a4 + 0x10] = a2\n 17412: u64 [a4 + 0x8] = a1\n 17415: u64 [a4] = a0\n 17417: a0 = s1 + 0x1a0\n 17421: a1 = s1 + 0x500\n 17425: ra = 0x2c8\n 17429: t0 = 0x6\n 17432: jump @2259\n      : @595 [@dyn 356] (gas: 16)\n 17436: a0 = u64 [s1 + 0x1b0]\n 17440: u64 [s1 + 0x28] = a0\n 17443: a0 = u64 [s1 + 0x1a8]\n 17447: u64 [s1 + 0x20] = a0\n 17450: a0 = u64 [s1 + 0x1a0]\n 17454: u64 [s1 + 0x18] = a0\n 17457: u64 [s1 + 408] = 0\n 17461: a0 = u64 [s1 + 0x40]\n 17464: u64 [s1 + 0x190] = a0\n 17468: a0 = u64 [s1 + 0x50]\n 17471: u64 [s1 + 0x188] = a0\n 17475: a1 = s1 + 0x180\n 17479: a0 = u64 [s1 + 0x58]\n 17482: u64 [s1 + 0x180] = a0\n 17486: a0 = 0\n 17488: ra = 714, jump @24\n      : @596 [@dyn 357] (gas: 7)\n 17494: u64 [s1 + 376] = 0\n 17498: u64 [s1 + 368] = 0\n 17502: u64 [s1 + 352] = 0x8\n 17507: a0 = 0x20\n 17510: a1 = s1 + 0x160\n 17514: u64 [s1 + 360] = 0\n 17518: ra = 716, jump @24\n      : @597 [@dyn 358] (gas: 3)\n 17524: a1 = u64 [s1 + 0x38]\n 17527: a0 = i32 [a1]\n 17529: jump @599 if a0 >u 63\n      : @598 (gas: 2)\n 17533: u32 [a1 + 0] = 0x40\n 17536: fallthrough\n      : @599 (gas: 8)\n 17537: a0 = u64 [s1 + 0x18]\n 17540: a0 = a0 & 0xffffffffffffffff\n 17543: u64 [s1 + 0x58] = a0\n 17546: a0 = u64 [s1 + 0x20]\n 17549: a0 = a0 & 0xffffffffffffffff\n 17552: u64 [s1 + 0x50] = a0\n 17555: a0 = u64 [s1 + 0x48]\n 17558: t0 = 718, jump @2310\n      : @600 [@dyn 359] (gas: 4)\n 17565: ra = 0x2d0\n 17569: ecalli 11 // 'hash_keccak_256'\n 17571: t0 = 0x2d2\n 17575: jump @2249\n      : @601 [@dyn 360] (gas: 1)\n 17579: t0 = 722, jump @2249\n      : @602 [@dyn 361] (gas: 10)\n 17586: a4 = s1 + 0x500\n 17590: u64 [a4 + 0x38] = a3\n 17593: u64 [a4 + 0x30] = a2\n 17596: u64 [a4 + 0x28] = a1\n 17599: u64 [a4 + 0x20] = a0\n 17602: a0 = s1 + 0x140\n 17606: a1 = s1 + 0x520\n 17610: ra = 0x2d4\n 17614: t0 = 0x6\n 17617: jump @2259\n      : @603 [@dyn 362] (gas: 33)\n 17621: a4 = s1 + 0x100\n 17625: a0 = u64 [a4 + 0x40]\n 17628: a1 = u64 [a4 + 0x48]\n 17631: a2 = u64 [a4 + 0x50]\n 17634: a0 = a0 & 0xffffffffffffffff\n 17637: a1 = a1 & 0xffffffffffffffff\n 17640: a3 = u64 [s1 + 0x48]\n 17643: a2 = a2 & a3\n 17646: a3 = u64 [s1 + 0x60]\n 17649: u64 [s1 + 0xf8] = a3\n 17653: a3 = u64 [s1 + 0x68]\n 17656: u64 [s1 + 0xf0] = a3\n 17660: a3 = u64 [s1 + 0x70]\n 17663: u64 [s1 + 0xe8] = a3\n 17667: a3 = u64 [s1 + 0x78]\n 17670: u64 [s1 + 0xe0] = a3\n 17674: u64 [s1 + 280] = 0\n 17678: u64 [a4 + 0x10] = a2\n 17681: u64 [a4 + 0x8] = a1\n 17684: u64 [a4] = a0\n 17686: u64 [s1 + 312] = 0\n 17690: a0 = u64 [s1 + 0x40]\n 17693: u64 [a4 + 0x30] = a0\n 17696: a0 = u64 [s1 + 0x50]\n 17699: u64 [a4 + 0x28] = a0\n 17702: a0 = s1 + 0x120\n 17706: a1 = s1 + 0x100\n 17710: a2 = s1 + 0xe0\n 17714: a3 = u64 [s1 + 0x58]\n 17717: u64 [a4 + 0x20] = a3\n 17720: ra = 0x2d6\n 17724: t0 = 0x384\n 17728: jump @2275\n      : @604 [@dyn 363] (gas: 7)\n 17732: sp = s0 + 0xfffffffffffffaa0\n 17736: a0 = sp + 0x500\n 17740: ra = u64 [a0 + 0x58]\n 17743: s0 = u64 [a0 + 0x50]\n 17746: s1 = u64 [a0 + 0x48]\n 17749: sp = sp + 0x560\n 17753: ret\n      : @605 (gas: 1)\n 17755: t0 = 728, jump @2236\n      : @606 [@dyn 364] (gas: 1)\n 17762: ra = 730, jump @24\n      : @607 [@dyn 365] (gas: 1)\n 17768: t0 = 732, jump @2283\n      : @608 [@dyn 366] (gas: 1)\n 17775: ra = 734, jump @24\n      : @609 [@dyn 367] (gas: 14)\n 17781: i32 a0 = s1 + 0x480\n 17785: ecalli 1 // 'block_number'\n 17787: a4 = s1 + 0x400\n 17791: a2 = u64 [a4 + 0x80]\n 17795: a0 = u64 [a4 + 0x88]\n 17799: a1 = u64 [a4 + 0x90]\n 17803: a3 = u64 [a4 + 0x98]\n 17807: u64 [s1 + 0x98] = a3\n 17811: u64 [s1 + 0x90] = a1\n 17815: u64 [s1 + 0x88] = a0\n 17819: a0 = 0x24\n 17822: a1 = s1 + 0x80\n 17826: u64 [s1 + 0x80] = a2\n 17830: ra = 736, jump @24\n      : @610 [@dyn 368] (gas: 2)\n 17836: a1 = i32 [0x20150]\n 17841: jump @612 if a1 >u 95\n      : @611 (gas: 2)\n 17845: u32 [0x20150] = 0x60\n 17851: fallthrough\n      : @612 (gas: 8)\n 17852: a1 = 0x20160\n 17857: i32 a1 = a1 + 0\n 17859: a0 = 0x1\n 17862: a2 = 0x44\n 17865: ra = 0x2e2\n 17869: ecalli 16 // 'seal_return'\n 17871: t0 = 0x2e4\n 17875: jump @2372\n      : @613 [@dyn 369] (gas: 1)\n 17879: t0 = 740, jump @2372\n      : @614 [@dyn 370] (gas: 10)\n 17886: a4 = u64 [a1 + 0x8]\n 17889: s1 = u64 [a1 + 0x18]\n 17892: a5 = u64 [a1 + 0x10]\n 17895: a3 = u64 [a1]\n 17897: a1 = s1 ^ 0x10000\n 17902: a1 = a1 | a5\n 17905: a2 = s1 >> 0x10\n 17908: a2 = a2 <u 0x1\n 17911: a2 = 0 if a1 == 0\n 17913: jump @617 if a2 == 0\n      : @615 (gas: 5)\n 17916: u64 [a0] = a3\n 17918: u64 [a0 + 0x8] = a4\n 17921: u64 [a0 + 0x10] = a5\n 17924: u64 [a0 + 0x18] = s1\n 17927: t0 = 742, jump @2309\n      : @616 [@dyn 371] (gas: 1)\n 17934: ret\n      : @617 (gas: 1)\n 17936: t0 = 744, jump @2323\n      : @618 [@dyn 372] (gas: 3)\n 17943: u64 [sp + 0x10] = a4\n 17946: u64 [sp + 0x8] = a5\n 17949: ra = 746, jump @24\n      : @619 [@dyn 373] (gas: 7)\n 17955: u64 [sp + 88] = 0\n 17958: u64 [sp + 80] = 0\n 17961: u64 [sp + 64] = 0xd0\n 17966: a0 = 0x4\n 17969: a1 = sp + 0x40\n 17972: u64 [sp + 72] = 0\n 17975: ra = 748, jump @24\n      : @620 [@dyn 374] (gas: 4)\n 17981: u64 [sp + 0x38] = s1\n 17984: a0 = u64 [sp + 0x8]\n 17987: u64 [sp + 0x30] = a0\n 17990: t0 = 750, jump @2360\n      : @621 [@dyn 375] (gas: 1)\n 17997: ra = 752, jump @24\n      : @622 [@dyn 376] (gas: 2)\n 18003: a1 = i32 [0x20150]\n 18008: jump @624 if a1 >u 95\n      : @623 (gas: 2)\n 18012: u32 [0x20150] = 0x60\n 18018: fallthrough\n      : @624 (gas: 7)\n 18019: a1 = 0x20160\n 18024: i32 a1 = a1 + 0\n 18026: a0 = 0x1\n 18029: a2 = 0x44\n 18032: ra = 0x2f2\n 18036: ecalli 16 // 'seal_return'\n 18038: fallthrough\n      : @625 [@dyn 377] (gas: 21)\n 18039: sp = sp + 0xfffffffffffffd00\n 18043: a2 = sp + 0x200\n 18047: u64 [a2 + 0xf8] = ra\n 18051: u64 [a2 + 0xf0] = s0\n 18055: u64 [a2 + 0xe8] = s1\n 18059: s0 = sp + 0x300\n 18063: sp = sp & 0xffffffffffffffe0\n 18066: s1 = sp\n 18068: a2 = u64 [a1 + 0x18]\n 18071: u64 [s1 + 0x50] = a2\n 18074: a2 = u64 [a1 + 0x10]\n 18077: u64 [s1 + 0x48] = a2\n 18080: a2 = u64 [a1 + 0x8]\n 18083: u64 [s1 + 0x40] = a2\n 18086: a1 = u64 [a1]\n 18088: u64 [s1 + 0x38] = a1\n 18091: u64 [s1 + 0x58] = a0\n 18094: i32 a0 = s1 + 0x240\n 18098: ra = 0x2f4\n 18102: ecalli 1 // 'block_number'\n 18104: fallthrough\n      : @626 [@dyn 378] (gas: 6)\n 18105: a4 = s1 + 0x200\n 18109: a0 = u64 [a4 + 0x58]\n 18112: a1 = u64 [a4 + 0x48]\n 18115: a2 = u16 [s1 + 0x246]\n 18119: a3 = u64 [a4 + 0x50]\n 18122: t0 = 758, jump @2268\n      : @627 [@dyn 379] (gas: 1)\n 18129: jump @643 if a0 != 0\n      : @628 (gas: 9)\n 18133: u64 [s1 + 664] = 0\n 18137: u64 [s1 + 656] = 0\n 18141: u64 [s1 + 648] = 0\n 18145: u64 [s1 + 640] = 0xa\n 18150: a0 = s1 + 0x220\n 18154: a1 = s1 + 0x280\n 18158: ra = 0x2f8\n 18162: t0 = 0x6\n 18165: jump @2259\n      : @629 [@dyn 380] (gas: 9)\n 18169: a0 = s1 + 0x200\n 18173: a3 = u64 [a0 + 0x38]\n 18176: a2 = u64 [a0 + 0x30]\n 18179: a4 = u64 [a0 + 0x28]\n 18182: a5 = u64 [a0 + 0x20]\n 18185: a0 = a4 | a3\n 18188: a1 = a5 | a2\n 18191: a0 = a0 | a1\n 18194: jump @639 if a0 == 0\n      : @630 (gas: 11)\n 18198: u64 [s1 + 0x18] = a5\n 18201: u64 [s1 + 0x20] = a4\n 18204: u64 [s1 + 0x28] = a3\n 18207: u64 [s1 + 0x30] = a2\n 18210: u64 [s1 + 536] = 0\n 18214: u64 [s1 + 528] = 0\n 18218: u64 [s1 + 520] = 0\n 18222: a1 = s1 + 0x200\n 18226: u64 [s1 + 512] = 0xa\n 18231: a0 = 0\n 18233: ra = 762, jump @24\n      : @631 [@dyn 381] (gas: 2)\n 18239: a1 = i32 [0x20150]\n 18244: jump @633 if a1 >u 31\n      : @632 (gas: 4)\n 18248: a1 = 0x20\n 18251: u32 [0x20150] = a1\n 18256: t0 = 0x2fc\n 18260: jump @2260\n      : @633 (gas: 1)\n 18264: t0 = 764, jump @2260\n      : @634 [@dyn 382] (gas: 7)\n 18271: a0 = 0x20160\n 18276: i32 a0 = a0 + 0\n 18278: i32 a2 = a2 + 0\n 18280: a1 = 0x20\n 18283: ra = 0x2fe\n 18287: ecalli 11 // 'hash_keccak_256'\n 18289: fallthrough\n      : @635 [@dyn 383] (gas: 27)\n 18290: a3 = u64 [s1 + 0x10]\n 18293: a0 = u64 [a3]\n 18295: a1 = u64 [a3 + 0x8]\n 18298: a2 = u64 [a3 + 0x18]\n 18301: a3 = u64 [a3 + 0x10]\n 18304: t0 = reverse a0\n 18306: a1 = reverse a1\n 18308: a0 = reverse a2\n 18310: a2 = reverse a3\n 18312: a4 = u64 [s1 + 0x20]\n 18315: a2 = a2 + a4\n 18318: a3 = u64 [s1 + 0x18]\n 18321: a0 = a0 + a3\n 18324: a3 = a0 <u a3\n 18327: a2 = a2 + a3\n 18330: a5 = a2 ^ a4\n 18333: a4 = a2 <u a4\n 18336: a4 = a3 if a5 == 0\n 18339: a5 = u64 [s1 + 0x30]\n 18342: a1 = a1 + a5\n 18345: a4 = a4 + a1\n 18348: t1 = a4 <u a1\n 18351: a3 = u64 [s1 + 0x28]\n 18354: t0 = t0 + a3\n 18357: a1 = a1 <u a5\n 18360: a1 = a1 + t0\n 18363: t0 = 768, jump @2248\n      : @636 [@dyn 384] (gas: 10)\n 18370: a3 = s1 + 0x200\n 18374: u64 [a3 + 0xa0] = a0\n 18378: u64 [a3 + 0xa8] = a2\n 18382: u64 [a3 + 0xb0] = a4\n 18386: u64 [a3 + 0xb8] = a1\n 18390: a0 = s1 + 0x1e0\n 18394: a1 = s1 + 0x2a0\n 18398: ra = 0x302\n 18402: t0 = 0x6\n 18405: jump @2259\n      : @637 [@dyn 385] (gas: 6)\n 18409: a0 = s1 + 0x100\n 18413: a4 = u64 [a0 + 0xf8]\n 18417: a1 = u64 [a0 + 0xf0]\n 18421: a2 = u16 [s1 + 0x1e6]\n 18425: a3 = u64 [a0 + 0xe8]\n 18429: t0 = 772, jump @2234\n      : @638 [@dyn 386] (gas: 1)\n 18436: jump @640\n      : @639 (gas: 4)\n 18438: a2 = 0\n 18440: a1 = 0\n 18442: a4 = 0\n 18444: fallthrough\n      : @640 (gas: 21)\n 18445: a3 = u64 [s1 + 0x38]\n 18448: u64 [s1 + 0x160] = a3\n 18452: u64 [s1 + 0x180] = a2\n 18456: u64 [s1 + 440] = 0\n 18460: u64 [s1 + 432] = 0\n 18464: u64 [s1 + 424] = 0\n 18468: u64 [s1 + 416] = 0x2\n 18473: a2 = u64 [s1 + 0x40]\n 18476: u64 [s1 + 0x168] = a2\n 18480: u64 [s1 + 0x188] = a1\n 18484: a1 = u64 [s1 + 0x48]\n 18487: u64 [s1 + 0x170] = a1\n 18491: u64 [s1 + 0x190] = a0\n 18495: a0 = u64 [s1 + 0x50]\n 18498: u64 [s1 + 0x178] = a0\n 18502: a0 = s1 + 0x1c0\n 18506: a1 = s1 + 0x1a0\n 18510: a2 = s1 + 0x180\n 18514: a3 = s1 + 0x160\n 18518: u64 [s1 + 0x198] = a4\n 18522: ra = 774, jump @842\n      : @641 [@dyn 387] (gas: 36)\n 18528: a0 = u64 [s1 + 0x1c0]\n 18532: u64 [s1 + 0x50] = a0\n 18535: a0 = u64 [s1 + 0x1c8]\n 18539: u64 [s1 + 0x48] = a0\n 18542: a0 = u64 [s1 + 0x1d0]\n 18546: u64 [s1 + 0x40] = a0\n 18549: a0 = u64 [s1 + 0x1d8]\n 18553: u64 [s1 + 0x38] = a0\n 18556: i32 a0 = s1 + 0x2c0\n 18560: ecalli 1 // 'block_number'\n 18562: a0 = u64 [s1 + 0x2c0]\n 18566: a0 = a0 << 0x10\n 18569: a4 = a0 >> 0x10\n 18572: a0 = u64 [s1 + 0x38]\n 18575: u64 [s1 + 0xd8] = a0\n 18579: a0 = u64 [s1 + 0x40]\n 18582: u64 [s1 + 0xd0] = a0\n 18586: a0 = u64 [s1 + 0x48]\n 18589: u64 [s1 + 0xc8] = a0\n 18593: a0 = u64 [s1 + 0x50]\n 18596: u64 [s1 + 0xc0] = a0\n 18600: u64 [s1 + 248] = 0\n 18604: u64 [s1 + 240] = 0\n 18608: u64 [s1 + 232] = 0\n 18612: u64 [s1 + 280] = 0\n 18616: u64 [s1 + 272] = 0\n 18620: u64 [s1 + 264] = 0\n 18624: u64 [s1 + 256] = 0xa\n 18629: a0 = s1 + 0x120\n 18633: a1 = s1 + 0x100\n 18637: a2 = s1 + 0xe0\n 18641: a3 = s1 + 0xc0\n 18645: u64 [s1 + 0xe0] = a4\n 18649: ra = 0x308\n 18653: t0 = 0x3ec\n 18657: jump @2212\n      : @642 [@dyn 388] (gas: 25)\n 18661: t0 = u64 [s1 + 0x128]\n 18665: t1 = u64 [s1 + 0x120]\n 18669: t2 = u64 [s1 + 0x138]\n 18673: a2 = s1 + 0x100\n 18677: a3 = u64 [a2 + 0x30]\n 18680: a4 = u64 [a2 + 0x50]\n 18683: a5 = u64 [a2 + 0x58]\n 18686: a0 = u64 [a2 + 0x40]\n 18689: a1 = u64 [a2 + 0x48]\n 18692: a2 = u64 [s1 + 0x58]\n 18695: u64 [a2 + 0x30] = a4\n 18698: u64 [a2 + 0x38] = a5\n 18701: u64 [a2 + 0x20] = a0\n 18704: u64 [a2 + 0x28] = a1\n 18707: u64 [a2 + 0x10] = a3\n 18710: u64 [a2 + 0x18] = t2\n 18713: u64 [a2] = t1\n 18715: u64 [a2 + 0x8] = t0\n 18718: sp = s0 + 0xfffffffffffffd00\n 18722: a0 = sp + 0x200\n 18726: ra = u64 [a0 + 0xf8]\n 18730: s0 = u64 [a0 + 0xf0]\n 18734: s1 = u64 [a0 + 0xe8]\n 18738: sp = sp + 0x300\n 18742: ret\n      : @643 (gas: 1)\n 18744: t0 = 778, jump @2347\n      : @644 [@dyn 389] (gas: 5)\n 18751: a0 = 0x6dfcc65000000000\n 18761: a1 = s1 + 0xa0\n 18765: u64 [s1 + 0xb8] = a0\n 18769: a0 = 0\n 18771: ra = 780, jump @24\n      : @645 [@dyn 390] (gas: 7)\n 18777: u64 [s1 + 152] = 0\n 18781: u64 [s1 + 144] = 0\n 18785: u64 [s1 + 128] = 0x30\n 18790: a0 = 0x4\n 18793: a1 = s1 + 0x80\n 18797: u64 [s1 + 136] = 0\n 18801: ra = 782, jump @24\n      : @646 [@dyn 391] (gas: 14)\n 18807: i32 a0 = s1 + 0x260\n 18811: ecalli 1 // 'block_number'\n 18813: a4 = s1 + 0x200\n 18817: a2 = u64 [a4 + 0x60]\n 18820: a0 = u64 [a4 + 0x68]\n 18823: a1 = u64 [a4 + 0x70]\n 18826: a3 = u64 [a4 + 0x78]\n 18829: u64 [s1 + 0x78] = a3\n 18832: u64 [s1 + 0x70] = a1\n 18835: u64 [s1 + 0x68] = a0\n 18838: a0 = 0x24\n 18841: a1 = s1 + 0x60\n 18844: u64 [s1 + 0x60] = a2\n 18847: ra = 784, jump @24\n      : @647 [@dyn 392] (gas: 2)\n 18853: a1 = i32 [0x20150]\n 18858: jump @649 if a1 >u 95\n      : @648 (gas: 2)\n 18862: u32 [0x20150] = 0x60\n 18868: fallthrough\n      : @649 (gas: 8)\n 18869: a1 = 0x20160\n 18874: i32 a1 = a1 + 0\n 18876: a0 = 0x1\n 18879: a2 = 0x44\n 18882: ra = 0x312\n 18886: ecalli 16 // 'seal_return'\n 18888: t0 = 0x314\n 18892: jump @2221\n      : @650 [@dyn 393] (gas: 1)\n 18896: t0 = 788, jump @2221\n      : @651 [@dyn 394] (gas: 3)\n 18903: ra = 0x316\n 18907: ecalli 1 // 'block_number'\n 18909: fallthrough\n      : @652 [@dyn 395] (gas: 6)\n 18910: a4 = s1 + 0x200\n 18914: a0 = u64 [a4 + 0x98]\n 18918: a1 = u64 [a4 + 0x88]\n 18922: a2 = u16 [s1 + 0x286]\n 18926: a3 = u64 [a4 + 0x90]\n 18930: t0 = 792, jump @2268\n      : @653 [@dyn 396] (gas: 1)\n 18937: jump @677 if a0 != 0\n      : @654 (gas: 5)\n 18941: a0 = s1 + 0x240\n 18945: a1 = s1 + 0x260\n 18949: ra = 0x31a\n 18953: t0 = 0x6\n 18956: jump @2259\n      : @655 [@dyn 397] (gas: 1)\n 18960: t0 = 796, jump @2335\n      : @656 [@dyn 398] (gas: 1)\n 18967: jump @667 if a0 == 0\n      : @657 (gas: 1)\n 18971: t0 = 798, jump @2278\n      : @658 [@dyn 399] (gas: 1)\n 18978: ra = 800, jump @24\n      : @659 [@dyn 400] (gas: 2)\n 18984: a1 = i32 [0x20150]\n 18989: jump @661 if a1 >u 31\n      : @660 (gas: 4)\n 18993: a1 = 0x20\n 18996: u32 [0x20150] = a1\n 19001: t0 = 0x322\n 19005: jump @2260\n      : @661 (gas: 1)\n 19009: t0 = 802, jump @2260\n      : @662 [@dyn 401] (gas: 7)\n 19016: a0 = 0x20160\n 19021: i32 a0 = a0 + 0\n 19023: i32 a2 = a2 + 0\n 19025: a1 = 0x20\n 19028: ra = 0x324\n 19032: ecalli 11 // 'hash_keccak_256'\n 19034: fallthrough\n      : @663 [@dyn 402] (gas: 27)\n 19035: a3 = u64 [s1 + 0x10]\n 19038: a0 = u64 [a3]\n 19040: a1 = u64 [a3 + 0x8]\n 19043: a2 = u64 [a3 + 0x18]\n 19046: a3 = u64 [a3 + 0x10]\n 19049: t0 = reverse a0\n 19051: a1 = reverse a1\n 19053: a0 = reverse a2\n 19055: a2 = reverse a3\n 19057: a4 = u64 [s1 + 0x20]\n 19060: a2 = a2 + a4\n 19063: a3 = u64 [s1 + 0x18]\n 19066: a0 = a0 + a3\n 19069: a3 = a0 <u a3\n 19072: a2 = a2 + a3\n 19075: a5 = a2 ^ a4\n 19078: a4 = a2 <u a4\n 19081: a4 = a3 if a5 == 0\n 19084: a5 = u64 [s1 + 0x30]\n 19087: a1 = a1 + a5\n 19090: a4 = a4 + a1\n 19093: t1 = a4 <u a1\n 19096: a3 = u64 [s1 + 0x28]\n 19099: t0 = t0 + a3\n 19102: a1 = a1 <u a5\n 19105: a1 = a1 + t0\n 19108: t0 = 806, jump @2238\n      : @664 [@dyn 403] (gas: 3)\n 19115: ra = 0x328\n 19119: t0 = 0x6\n 19122: jump @2259\n      : @665 [@dyn 404] (gas: 6)\n 19126: a0 = s1 + 0x200\n 19130: a4 = u64 [a0 + 0x18]\n 19133: a1 = u64 [a0 + 0x10]\n 19136: a2 = u16 [s1 + 0x206]\n 19140: a3 = u64 [a0 + 0x8]\n 19143: t0 = 810, jump @2234\n      : @666 [@dyn 405] (gas: 1)\n 19150: jump @668\n      : @667 (gas: 5)\n 19152: a2 = 0\n 19154: a1 = 0\n 19156: a4 = 0\n 19158: t0 = 0x32c\n 19162: jump @2339\n      : @668 (gas: 1)\n 19166: t0 = 812, jump @2339\n      : @669 [@dyn 406] (gas: 2)\n 19173: a2 = 0x2\n 19176: t0 = 814, jump @2239\n      : @670 [@dyn 407] (gas: 1)\n 19183: ra = 816, jump @842\n      : @671 [@dyn 408] (gas: 1)\n 19189: t0 = 818, jump @2297\n      : @672 [@dyn 409] (gas: 4)\n 19196: ra = 0x334\n 19200: ecalli 1 // 'block_number'\n 19202: t0 = 0x336\n 19206: jump @2217\n      : @673 [@dyn 410] (gas: 1)\n 19210: t0 = 822, jump @2217\n      : @674 [@dyn 411] (gas: 3)\n 19217: ra = 0x338\n 19221: t0 = 0x3ec\n 19225: jump @2212\n      : @675 [@dyn 412] (gas: 19)\n 19229: t0 = u64 [s1 + 0x148]\n 19233: t1 = u64 [s1 + 0x140]\n 19237: t2 = u64 [s1 + 0x158]\n 19241: a2 = s1 + 0x100\n 19245: a3 = u64 [a2 + 0x50]\n 19248: a4 = u64 [a2 + 0x70]\n 19251: a5 = u64 [a2 + 0x78]\n 19254: a0 = u64 [a2 + 0x60]\n 19257: a1 = u64 [a2 + 0x68]\n 19260: a2 = u64 [s1 + 0x58]\n 19263: u64 [a2 + 0x30] = a4\n 19266: u64 [a2 + 0x38] = a5\n 19269: u64 [a2 + 0x20] = a0\n 19272: u64 [a2 + 0x28] = a1\n 19275: u64 [a2 + 0x10] = a3\n 19278: u64 [a2 + 0x18] = t2\n 19281: u64 [a2] = t1\n 19283: u64 [a2 + 0x8] = t0\n 19286: t0 = 826, jump @2263\n      : @676 [@dyn 413] (gas: 1)\n 19293: ret\n      : @677 (gas: 1)\n 19295: t0 = 828, jump @2236\n      : @678 [@dyn 414] (gas: 1)\n 19302: ra = 830, jump @24\n      : @679 [@dyn 415] (gas: 1)\n 19308: t0 = 832, jump @2283\n      : @680 [@dyn 416] (gas: 1)\n 19315: ra = 834, jump @24\n      : @681 [@dyn 417] (gas: 5)\n 19321: i32 a0 = s1 + 0x2a0\n 19325: ra = 0x344\n 19329: ecalli 1 // 'block_number'\n 19331: t0 = 0x346\n 19335: jump @2308\n      : @682 [@dyn 418] (gas: 1)\n 19339: t0 = 838, jump @2308\n      : @683 [@dyn 419] (gas: 1)\n 19346: ra = 840, jump @24\n      : @684 [@dyn 420] (gas: 2)\n 19352: a1 = i32 [0x20150]\n 19357: jump @686 if a1 >u 95\n      : @685 (gas: 2)\n 19361: u32 [0x20150] = 0x60\n 19367: fallthrough\n      : @686 (gas: 8)\n 19368: a1 = 0x20160\n 19373: i32 a1 = a1 + 0\n 19375: a0 = 0x1\n 19378: a2 = 0x44\n 19381: ra = 0x34a\n 19385: ecalli 16 // 'seal_return'\n 19387: t0 = 0x34c\n 19391: jump @2221\n      : @687 [@dyn 421] (gas: 1)\n 19395: t0 = 844, jump @2221\n      : @688 [@dyn 422] (gas: 3)\n 19402: ra = 0x34e\n 19406: ecalli 1 // 'block_number'\n 19408: fallthrough\n      : @689 [@dyn 423] (gas: 6)\n 19409: a4 = s1 + 0x200\n 19413: a0 = u64 [a4 + 0x98]\n 19417: a1 = u64 [a4 + 0x88]\n 19421: a2 = u16 [s1 + 0x286]\n 19425: a3 = u64 [a4 + 0x90]\n 19429: t0 = 848, jump @2268\n      : @690 [@dyn 424] (gas: 1)\n 19436: jump @714 if a0 != 0\n      : @691 (gas: 5)\n 19440: a0 = s1 + 0x240\n 19444: a1 = s1 + 0x260\n 19448: ra = 0x352\n 19452: t0 = 0x6\n 19455: jump @2259\n      : @692 [@dyn 425] (gas: 1)\n 19459: t0 = 852, jump @2335\n      : @693 [@dyn 426] (gas: 1)\n 19466: jump @704 if a0 == 0\n      : @694 (gas: 1)\n 19470: t0 = 854, jump @2278\n      : @695 [@dyn 427] (gas: 1)\n 19477: ra = 856, jump @24\n      : @696 [@dyn 428] (gas: 2)\n 19483: a1 = i32 [0x20150]\n 19488: jump @698 if a1 >u 31\n      : @697 (gas: 4)\n 19492: a1 = 0x20\n 19495: u32 [0x20150] = a1\n 19500: t0 = 0x35a\n 19504: jump @2260\n      : @698 (gas: 1)\n 19508: t0 = 858, jump @2260\n      : @699 [@dyn 429] (gas: 7)\n 19515: a0 = 0x20160\n 19520: i32 a0 = a0 + 0\n 19522: i32 a2 = a2 + 0\n 19524: a1 = 0x20\n 19527: ra = 0x35c\n 19531: ecalli 11 // 'hash_keccak_256'\n 19533: fallthrough\n      : @700 [@dyn 430] (gas: 27)\n 19534: a3 = u64 [s1 + 0x10]\n 19537: a0 = u64 [a3]\n 19539: a1 = u64 [a3 + 0x8]\n 19542: a2 = u64 [a3 + 0x18]\n 19545: a3 = u64 [a3 + 0x10]\n 19548: t0 = reverse a0\n 19550: a1 = reverse a1\n 19552: a0 = reverse a2\n 19554: a2 = reverse a3\n 19556: a4 = u64 [s1 + 0x20]\n 19559: a2 = a2 + a4\n 19562: a3 = u64 [s1 + 0x18]\n 19565: a0 = a0 + a3\n 19568: a3 = a0 <u a3\n 19571: a2 = a2 + a3\n 19574: a5 = a2 ^ a4\n 19577: a4 = a2 <u a4\n 19580: a4 = a3 if a5 == 0\n 19583: a5 = u64 [s1 + 0x30]\n 19586: a1 = a1 + a5\n 19589: a4 = a4 + a1\n 19592: t1 = a4 <u a1\n 19595: a3 = u64 [s1 + 0x28]\n 19598: t0 = t0 + a3\n 19601: a1 = a1 <u a5\n 19604: a1 = a1 + t0\n 19607: t0 = 862, jump @2238\n      : @701 [@dyn 431] (gas: 3)\n 19614: ra = 0x360\n 19618: t0 = 0x6\n 19621: jump @2259\n      : @702 [@dyn 432] (gas: 6)\n 19625: a0 = s1 + 0x200\n 19629: a4 = u64 [a0 + 0x18]\n 19632: a1 = u64 [a0 + 0x10]\n 19635: a2 = u16 [s1 + 0x206]\n 19639: a3 = u64 [a0 + 0x8]\n 19642: t0 = 866, jump @2234\n      : @703 [@dyn 433] (gas: 1)\n 19649: jump @705\n      : @704 (gas: 5)\n 19651: a2 = 0\n 19653: a1 = 0\n 19655: a4 = 0\n 19657: t0 = 0x364\n 19661: jump @2339\n      : @705 (gas: 1)\n 19665: t0 = 868, jump @2339\n      : @706 [@dyn 434] (gas: 2)\n 19672: a2 = 0x1\n 19675: t0 = 870, jump @2239\n      : @707 [@dyn 435] (gas: 1)\n 19682: ra = 872, jump @842\n      : @708 [@dyn 436] (gas: 1)\n 19688: t0 = 874, jump @2297\n      : @709 [@dyn 437] (gas: 4)\n 19695: ra = 0x36c\n 19699: ecalli 1 // 'block_number'\n 19701: t0 = 0x36e\n 19705: jump @2217\n      : @710 [@dyn 438] (gas: 1)\n 19709: t0 = 878, jump @2217\n      : @711 [@dyn 439] (gas: 3)\n 19716: ra = 0x370\n 19720: t0 = 0x3ec\n 19724: jump @2212\n      : @712 [@dyn 440] (gas: 19)\n 19728: t0 = u64 [s1 + 0x148]\n 19732: t1 = u64 [s1 + 0x140]\n 19736: t2 = u64 [s1 + 0x158]\n 19740: a2 = s1 + 0x100\n 19744: a3 = u64 [a2 + 0x50]\n 19747: a4 = u64 [a2 + 0x70]\n 19750: a5 = u64 [a2 + 0x78]\n 19753: a0 = u64 [a2 + 0x60]\n 19756: a1 = u64 [a2 + 0x68]\n 19759: a2 = u64 [s1 + 0x58]\n 19762: u64 [a2 + 0x30] = a4\n 19765: u64 [a2 + 0x38] = a5\n 19768: u64 [a2 + 0x20] = a0\n 19771: u64 [a2 + 0x28] = a1\n 19774: u64 [a2 + 0x10] = a3\n 19777: u64 [a2 + 0x18] = t2\n 19780: u64 [a2] = t1\n 19782: u64 [a2 + 0x8] = t0\n 19785: t0 = 882, jump @2263\n      : @713 [@dyn 441] (gas: 1)\n 19792: ret\n      : @714 (gas: 1)\n 19794: t0 = 884, jump @2236\n      : @715 [@dyn 442] (gas: 1)\n 19801: ra = 886, jump @24\n      : @716 [@dyn 443] (gas: 1)\n 19807: t0 = 888, jump @2283\n      : @717 [@dyn 444] (gas: 1)\n 19814: ra = 890, jump @24\n      : @718 [@dyn 445] (gas: 5)\n 19820: i32 a0 = s1 + 0x2a0\n 19824: ra = 0x37c\n 19828: ecalli 1 // 'block_number'\n 19830: t0 = 0x37e\n 19834: jump @2308\n      : @719 [@dyn 446] (gas: 1)\n 19838: t0 = 894, jump @2308\n      : @720 [@dyn 447] (gas: 1)\n 19845: ra = 896, jump @24\n      : @721 [@dyn 448] (gas: 2)\n 19851: a1 = i32 [0x20150]\n 19856: jump @723 if a1 >u 95\n      : @722 (gas: 2)\n 19860: u32 [0x20150] = 0x60\n 19866: fallthrough\n      : @723 (gas: 8)\n 19867: a1 = 0x20160\n 19872: i32 a1 = a1 + 0\n 19874: a0 = 0x1\n 19877: a2 = 0x44\n 19880: ra = 0x382\n 19884: ecalli 16 // 'seal_return'\n 19886: t0 = 0x384\n 19890: jump @2275\n      : @724 [@dyn 449] (gas: 1)\n 19894: t0 = 900, jump @2275\n      : @725 [@dyn 450] (gas: 16)\n 19901: t0 = u64 [a0 + 0x10]\n 19904: a3 = u64 [a1 + 0x10]\n 19907: u64 [sp + 0xb8] = a4\n 19911: a4 = a4 ^ t2\n 19914: u64 [sp + 0xb0] = a5\n 19918: a5 = a5 ^ t1\n 19921: a4 = a4 | a5\n 19924: u64 [sp + 0xa0] = a3\n 19928: a5 = a3 << 0x20\n 19931: ra = a5 >> 0x20\n 19934: a5 = t0 << 0x20\n 19937: a5 = a5 >> 0x20\n 19940: u64 [sp + 0xc0] = a5\n 19944: a5 = a5 ^ ra\n 19947: a4 = a4 | a5\n 19950: jump @761 if a4 == 0\n      : @726 (gas: 12)\n 19954: a3 = u64 [a2 + 0x18]\n 19957: a5 = u64 [a2 + 0x10]\n 19960: a4 = u64 [a2]\n 19962: s1 = u64 [a2 + 0x8]\n 19965: u64 [sp + 0xa8] = a4\n 19969: u64 [sp + 0xd8] = a5\n 19973: a2 = a4 | a5\n 19976: u64 [sp + 0xd0] = a3\n 19980: u64 [sp + 0xc8] = s1\n 19984: a4 = s1 | a3\n 19987: a2 = a2 | a4\n 19990: jump @761 if a2 == 0\n      : @727 (gas: 15)\n 19994: a3 = u64 [a1 + 0x18]\n 19997: u64 [sp + 144] = 0xffff\n 20004: a1 = u64 [sp + 0xc0]\n 20008: a4 = u64 [sp + 0xb8]\n 20012: a1 = a1 | a4\n 20015: a5 = u64 [sp + 0xb0]\n 20019: a1 = a1 | a5\n 20022: u64 [sp + 0x58] = a2\n 20025: u64 [sp + 0x60] = a2\n 20028: u64 [sp + 0x68] = a2\n 20031: u64 [sp + 0x70] = a2\n 20034: u64 [sp + 0x88] = ra\n 20038: u64 [sp + 0x80] = t1\n 20042: u64 [sp + 0x78] = t2\n 20045: jump @745 if a1 == 0\n      : @728 (gas: 12)\n 20049: u64 [sp + 0x8] = a3\n 20052: a0 = u64 [a0 + 0x18]\n 20055: a2 = sp + 0x400\n 20059: u64 [a2 + 0x60] = a4\n 20062: u64 [a2 + 0x70] = t0\n 20065: u64 [a2 + 0x78] = a0\n 20068: a0 = sp + 0x480\n 20072: a1 = sp + 0x460\n 20076: u64 [a2 + 0x68] = a5\n 20079: ra = 0x386\n 20083: t0 = 0x7b8\n 20087: jump @2257\n      : @729 [@dyn 451] (gas: 1)\n 20091: t0 = 904, jump @2250\n      : @730 [@dyn 452] (gas: 3)\n 20098: ra = 0x38a\n 20102: t0 = 0x2e4\n 20106: jump @2372\n      : @731 [@dyn 453] (gas: 1)\n 20110: t0 = 908, jump @2264\n      : @732 [@dyn 454] (gas: 3)\n 20117: ra = 0x38e\n 20121: t0 = 0x314\n 20125: jump @2221\n      : @733 [@dyn 455] (gas: 1)\n 20129: t0 = 912, jump @2256\n      : @734 [@dyn 456] (gas: 1)\n 20136: ra = 914, jump @22\n      : @735 [@dyn 457] (gas: 1)\n 20142: t0 = 916, jump @2269\n      : @736 [@dyn 458] (gas: 14)\n 20149: t0 = a4 & a1\n 20152: a4 = u64 [sp + 0x98]\n 20156: a4 = a4 & a0\n 20159: u64 [sp + 0x30] = a4\n 20162: a4 = u64 [sp + 0x380]\n 20166: u64 [sp + 0x98] = a4\n 20170: a4 = u64 [sp + 0x38]\n 20173: ra = a4 & a0\n 20176: a4 = u64 [sp + 0x40]\n 20179: a0 = a0 & a4\n 20182: a4 = u64 [sp + 0x48]\n 20185: a4 = a4 & a1\n 20188: u64 [sp + 0x318] = t0\n 20192: t0 = 918, jump @2247\n      : @737 [@dyn 459] (gas: 1)\n 20199: ra = 920, jump @547\n      : @738 [@dyn 460] (gas: 6)\n 20205: ra = u64 [sp + 0x18]\n 20208: a2 = u64 [sp + 0x10]\n 20211: a0 = a2 | ra\n 20214: a3 = u64 [sp + 0x50]\n 20217: a1 = s1 | a3\n 20220: t0 = 922, jump @2313\n      : @739 [@dyn 461] (gas: 1)\n 20227: jump @763 if a0 != 0\n      : @740 (gas: 1)\n 20231: t0 = 924, jump @2337\n      : @741 [@dyn 462] (gas: 23)\n 20238: t0 = u64 [sp + 0x98]\n 20242: a1 = t2 <u t0\n 20245: a5 = a1 if a4 == 0\n 20248: t1 = u64 [sp + 0x50]\n 20251: a4 = a3 - t1\n 20254: s1 = a4 - a5\n 20257: a4 = a4 <u a5\n 20260: a3 = a3 <u t1\n 20263: a5 = u64 [sp + 0x48]\n 20266: a5 = a5 - ra\n 20269: a5 = a5 - a3\n 20272: a5 = a5 - a4\n 20275: a0 = a0 - a2\n 20278: a0 = a0 - a1\n 20281: a1 = t2 - t0\n 20284: a0 = a0 | a5\n 20287: a2 = a1 | s1\n 20290: a2 = a2 | a0\n 20293: a0 = a0 | s1\n 20296: a2 = a2 >> 0x20\n 20299: a0 = a0 << 0x20\n 20302: a0 = a0 | a2\n 20305: jump @763 if a0 != 0\n      : @742 (gas: 7)\n 20309: a5 = sp + 0x200\n 20313: u64 [a5 + 216] = 0\n 20317: a0 = u64 [sp + 0xb8]\n 20321: u64 [a5 + 0xc0] = a0\n 20325: a0 = u64 [sp + 0xb0]\n 20329: u64 [a5 + 0xc8] = a0\n 20333: t0 = 926, jump @2327\n      : @743 [@dyn 463] (gas: 12)\n 20340: u64 [a5 + 0xf8] = a0\n 20344: u64 [a5 + 0xf0] = a2\n 20348: u64 [a5 + 0xe8] = a3\n 20352: u64 [a5 + 0xe0] = a4\n 20356: a2 = sp + 0x2e0\n 20360: a3 = sp + 0x2c0\n 20364: a0 = u64 [sp + 0xc0]\n 20368: u64 [a5 + 0xd0] = a0\n 20372: a0 = u64 [sp + 0x98]\n 20376: ra = 0x3a0\n 20380: t0 = 0xa\n 20383: jump @2373\n      : @744 [@dyn 464] (gas: 5)\n 20387: ra = u64 [sp + 0x88]\n 20391: t1 = u64 [sp + 0x80]\n 20395: t2 = u64 [sp + 0x78]\n 20398: a3 = u64 [sp + 0x8]\n 20401: fallthrough\n      : @745 (gas: 3)\n 20402: a0 = t2 | ra\n 20405: a0 = a0 | t1\n 20408: jump @761 if a0 == 0\n      : @746 (gas: 1)\n 20412: t0 = 930, jump @2354\n      : @747 [@dyn 465] (gas: 3)\n 20419: ra = 0x3a4\n 20423: t0 = 0x7b8\n 20427: jump @2257\n      : @748 [@dyn 466] (gas: 1)\n 20431: t0 = 934, jump @2266\n      : @749 [@dyn 467] (gas: 3)\n 20438: ra = 0x3a8\n 20442: t0 = 0x2e4\n 20446: jump @2372\n      : @750 [@dyn 468] (gas: 1)\n 20450: t0 = 938, jump @2271\n      : @751 [@dyn 469] (gas: 3)\n 20457: ra = 0x3ac\n 20461: t0 = 0x34c\n 20465: jump @2221\n      : @752 [@dyn 470] (gas: 1)\n 20469: t0 = 942, jump @2265\n      : @753 [@dyn 471] (gas: 1)\n 20476: ra = 944, jump @22\n      : @754 [@dyn 472] (gas: 44)\n 20482: t0 = u64 [sp + 0x1b8]\n 20486: u64 [sp + 0x98] = t0\n 20490: s1 = s1 & 0xffffffffffffffff\n 20493: u64 [sp + 0xa8] = s1\n 20497: a1 = u64 [sp + 0xa0]\n 20501: t2 = a1 & 0xffffffffffffffff\n 20504: a1 = u64 [sp + 0xb0]\n 20508: t1 = a1 & 0xffffffffffffffff\n 20511: s1 = u64 [sp + 0xb8]\n 20515: s1 = s1 & 0xffffffffffffffff\n 20518: a1 = u64 [sp + 0xd8]\n 20522: ra = a1 & 0xffffffffffffffff\n 20525: a2 = u64 [sp + 0x1b0]\n 20529: u64 [sp + 0xb8] = a2\n 20533: a1 = u64 [sp + 0x1a8]\n 20537: u64 [sp + 0xb0] = a1\n 20541: a3 = u64 [sp + 0x1a0]\n 20545: u64 [sp + 0xd8] = a3\n 20549: a5 = u64 [sp + 0xc8]\n 20553: a5 = a5 & 0xffffffffffffffff\n 20556: a4 = u64 [sp + 0x90]\n 20560: a0 = u64 [sp + 0xc0]\n 20564: a0 = a0 & a4\n 20567: a3 = u64 [sp + 0xd0]\n 20571: a3 = a3 & a4\n 20574: u64 [sp + 0x138] = a0\n 20578: u64 [sp + 0x130] = t1\n 20582: u64 [sp + 0x128] = t2\n 20586: a0 = u64 [sp + 0xa8]\n 20590: u64 [sp + 0x120] = a0\n 20594: u64 [sp + 0x158] = a3\n 20598: u64 [sp + 0x150] = a5\n 20602: u64 [sp + 0x148] = ra\n 20606: u64 [sp + 0x140] = s1\n 20610: u64 [sp + 0x178] = t0\n 20614: u64 [sp + 0x170] = a2\n 20618: u64 [sp + 0x168] = a1\n 20622: a0 = sp + 0x180\n 20626: a1 = sp + 0x160\n 20630: a2 = sp + 0x140\n 20634: a3 = sp + 0x120\n 20638: s1 = u64 [sp + 0xd8]\n 20642: u64 [sp + 0x160] = s1\n 20646: ra = 946, jump @547\n      : @755 [@dyn 473] (gas: 1)\n 20652: t0 = 948, jump @2318\n      : @756 [@dyn 474] (gas: 1)\n 20659: jump @763 if a0 != 0\n      : @757 (gas: 22)\n 20663: a0 = u64 [sp + 0x188]\n 20667: a1 = u64 [sp + 0x198]\n 20671: u64 [sp + 0xd0] = a1\n 20675: t1 = u64 [sp + 0x180]\n 20679: a3 = u64 [sp + 0x190]\n 20683: a4 = a0 ^ a2\n 20686: a5 = a0 <u a2\n 20689: t0 = u64 [sp + 0xd8]\n 20693: a1 = t1 <u t0\n 20696: a5 = a1 if a4 == 0\n 20699: a4 = a3 - s1\n 20702: t2 = a4 - a5\n 20705: a4 = a4 <u a5\n 20708: a3 = a3 <u s1\n 20711: a5 = u64 [sp + 0xd0]\n 20715: a5 = a5 - ra\n 20718: a5 = a5 - a3\n 20721: a5 = a5 - a4\n 20724: a0 = a0 - a2\n 20727: a0 = a0 - a1\n 20730: a1 = t1 - t0\n 20733: t0 = 950, jump @2220\n      : @758 [@dyn 475] (gas: 1)\n 20740: jump @763 if a0 != 0\n      : @759 (gas: 6)\n 20743: u64 [sp + 248] = 0\n 20747: a0 = u64 [sp + 0x78]\n 20750: u64 [sp + 0xe0] = a0\n 20754: a0 = u64 [sp + 0x80]\n 20758: u64 [sp + 0xe8] = a0\n 20762: t0 = 952, jump @2327\n      : @760 [@dyn 476] (gas: 12)\n 20769: u64 [sp + 0x118] = a0\n 20773: u64 [sp + 0x110] = a2\n 20777: u64 [sp + 0x108] = a3\n 20781: u64 [sp + 0x100] = a4\n 20785: a2 = sp + 0x100\n 20789: a3 = sp + 0xe0\n 20793: a0 = u64 [sp + 0x88]\n 20797: u64 [sp + 0xf0] = a0\n 20801: a0 = u64 [sp + 0xd8]\n 20805: ra = 0x3ba\n 20809: t0 = 0xa\n 20812: jump @2373\n      : @761 [@dyn 477] (gas: 1)\n 20816: t0 = 956, jump @2364\n      : @762 [@dyn 478] (gas: 1)\n 20823: ret\n      : @763 (gas: 1)\n 20825: trap\n      : @764 (gas: 8)\n 20826: a2 = u64 [a1 + 0x10]\n 20829: t1 = u64 [a1 + 0x18]\n 20832: a3 = u64 [a1 + 0x8]\n 20835: a5 = u64 [a1]\n 20837: t0 = a3 | t1\n 20840: a1 = a5 | a2\n 20843: a1 = a1 | t0\n 20846: jump @766 if a1 == 0\n      : @765 (gas: 13)\n 20849: a1 = a5 | a3\n 20852: a1 = a1 <u 0x1\n 20855: a4 = a2 <u a1\n 20858: a4 = t1 - a4\n 20861: a2 = a2 - a1\n 20864: a1 = a5 <u 0x1\n 20867: a3 = a3 - a1\n 20870: a5 = a5 + 0xffffffffffffffff\n 20873: u64 [a0] = a5\n 20875: u64 [a0 + 0x8] = a3\n 20878: u64 [a0 + 0x10] = a2\n 20881: u64 [a0 + 0x18] = a4\n 20884: ret\n      : @766 (gas: 3)\n 20886: ra = 0x3be\n 20890: t0 = 0x28e\n 20894: jump @2232\n      : @767 [@dyn 479] (gas: 18)\n 20898: a2 = u64 [a1 + 0x8]\n 20901: a3 = u16 [a1 + 0x6]\n 20904: a4 = u64 [a1 + 0x10]\n 20907: a1 = u64 [a1 + 0x18]\n 20910: a5 = a2 << 0x10\n 20913: a3 = a3 | a5\n 20916: a5 = a4 << 0x10\n 20919: a2 = a2 >> 0x30\n 20922: a2 = a2 | a5\n 20925: a5 = a1 << 0x10\n 20928: a4 = a4 >> 0x30\n 20931: a4 = a4 | a5\n 20934: a1 = a1 >> 0x30\n 20937: u64 [a0 + 0x18] = a1\n 20940: u64 [a0 + 0x10] = a4\n 20943: u64 [a0 + 0x8] = a2\n 20946: u64 [a0] = a3\n 20948: ret\n      : @768 (gas: 27)\n 20950: sp = sp + 0xffffffffffffff80\n 20953: u64 [sp + 0x78] = ra\n 20956: u64 [sp + 0x70] = s0\n 20959: u64 [sp + 0x68] = s1\n 20962: s0 = sp + 0x80\n 20966: sp = sp & 0xffffffffffffffe0\n 20969: s1 = sp\n 20971: a3 = u64 [a2 + 0x18]\n 20974: u64 [s1 + 0x38] = a3\n 20977: a3 = u64 [a2 + 0x10]\n 20980: u64 [s1 + 0x28] = a3\n 20983: a3 = u64 [a2 + 0x8]\n 20986: u64 [s1 + 0x18] = a3\n 20989: a2 = u64 [a2]\n 20991: u64 [s1 + 0x20] = a2\n 20994: a2 = u64 [a1]\n 20996: a3 = u64 [a1 + 0x8]\n 20999: a4 = u64 [a1 + 0x10]\n 21002: a1 = u64 [a1 + 0x18]\n 21005: u64 [s1 + 0x30] = a0\n 21008: u64 [s1 + 0x58] = a1\n 21011: u64 [s1 + 0x50] = a4\n 21014: u64 [s1 + 0x48] = a3\n 21017: a1 = s1 + 0x40\n 21020: u64 [s1 + 0x40] = a2\n 21023: a0 = 0\n 21025: ra = 960, jump @24\n      : @769 [@dyn 480] (gas: 2)\n 21031: a1 = i32 [0x20150]\n 21036: jump @771 if a1 >u 31\n      : @770 (gas: 4)\n 21040: a1 = 0x20\n 21043: u32 [0x20150] = a1\n 21048: t0 = 0x3c2\n 21052: jump @2260\n      : @771 (gas: 1)\n 21056: t0 = 962, jump @2260\n      : @772 [@dyn 481] (gas: 38)\n 21063: a0 = 0x20160\n 21068: i32 a0 = a0 + 0\n 21070: i32 a2 = a2 + 0\n 21072: a1 = 0x20\n 21075: ecalli 11 // 'hash_keccak_256'\n 21077: a3 = u64 [s1 + 0x10]\n 21080: a0 = u64 [a3]\n 21082: a1 = u64 [a3 + 0x8]\n 21085: a2 = u64 [a3 + 0x18]\n 21088: a3 = u64 [a3 + 0x10]\n 21091: t0 = reverse a0\n 21093: a1 = reverse a1\n 21095: a2 = reverse a2\n 21097: a3 = reverse a3\n 21099: a4 = u64 [s1 + 0x18]\n 21102: a4 = a4 + a3\n 21105: a5 = u64 [s1 + 0x20]\n 21108: a5 = a5 + a2\n 21111: a2 = a5 <u a2\n 21114: a4 = a4 + a2\n 21117: a0 = a4 ^ a3\n 21120: a3 = a4 <u a3\n 21123: a3 = a2 if a0 == 0\n 21126: a0 = u64 [s1 + 0x28]\n 21129: a0 = a0 + a1\n 21132: a3 = a3 + a0\n 21135: t1 = a3 <u a0\n 21138: a2 = u64 [s1 + 0x38]\n 21141: t0 = t0 + a2\n 21144: a0 = a0 <u a1\n 21147: a0 = a0 + t0\n 21150: a0 = a0 + t1\n 21153: a1 = u64 [s1 + 0x30]\n 21156: u64 [a1] = a5\n 21158: u64 [a1 + 0x8] = a4\n 21161: u64 [a1 + 0x10] = a3\n 21164: u64 [a1 + 0x18] = a0\n 21167: t0 = 964, jump @2307\n      : @773 [@dyn 482] (gas: 1)\n 21174: ret\n      : @774 [@dyn 483] (gas: 1)\n 21176: jump @778 if a2 != 0\n      : @775 (gas: 1)\n 21179: t0 = 968, jump @2371\n      : @776 [@dyn 484] (gas: 9)\n 21186: a1 = u64 [a1]\n 21188: a1 = a1 << 0x10\n 21191: a1 = a1 >> 0x10\n 21194: u64 [sp + 24] = 0\n 21197: u64 [sp + 16] = 0\n 21200: u64 [sp] = a1\n 21202: a1 = sp\n 21204: u64 [sp + 8] = 0\n 21207: ra = 970, jump @24\n      : @777 [@dyn 485] (gas: 5)\n 21213: sp = s0 + 0xffffffffffffffd0\n 21216: ra = u64 [sp + 0x28]\n 21219: s0 = u64 [sp + 0x20]\n 21222: sp = sp + 0x30\n 21225: ret\n      : @778 (gas: 1)\n 21227: trap\n      : @779 [@dyn 486] (gas: 1)\n 21228: jump @783 if a2 != 0\n      : @780 (gas: 1)\n 21231: t0 = 974, jump @2371\n      : @781 [@dyn 487] (gas: 11)\n 21238: a2 = u64 [a1 + 0x18]\n 21241: a3 = u64 [a1 + 0x10]\n 21244: a4 = u64 [a1 + 0x8]\n 21247: a1 = u64 [a1]\n 21249: a2 = zext.h a2\n 21251: u64 [sp] = a1\n 21253: u64 [sp + 0x8] = a4\n 21256: u64 [sp + 0x10] = a3\n 21259: a1 = sp\n 21261: u64 [sp + 0x18] = a2\n 21264: ra = 976, jump @24\n      : @782 [@dyn 488] (gas: 5)\n 21270: sp = s0 + 0xffffffffffffffd0\n 21273: ra = u64 [sp + 0x28]\n 21276: s0 = u64 [sp + 0x20]\n 21279: sp = sp + 0x30\n 21282: ret\n      : @783 (gas: 1)\n 21284: trap\n      : @784 [@dyn 489] (gas: 20)\n 21285: a2 = u64 [a1 + 0x18]\n 21288: u64 [sp + 0x18] = a2\n 21291: a2 = u64 [a1 + 0x10]\n 21294: u64 [sp + 0x10] = a2\n 21297: s1 = u64 [a1 + 0x8]\n 21300: a1 = u64 [a1]\n 21302: u64 [sp + 0x8] = a1\n 21305: a1 = u64 [a0 + 0x18]\n 21308: a2 = u64 [a0 + 0x10]\n 21311: a3 = u64 [a0 + 0x8]\n 21314: a0 = u64 [a0]\n 21316: u64 [sp + 0x58] = a1\n 21319: u64 [sp + 0x50] = a2\n 21322: u64 [sp + 0x48] = a3\n 21325: u64 [sp + 0x40] = a0\n 21328: a0 = sp + 0x20\n 21331: a1 = sp + 0x40\n 21334: ra = 0x3d4\n 21338: t0 = 0x6\n 21341: jump @2259\n      : @785 [@dyn 490] (gas: 24)\n 21345: a0 = u64 [sp + 0x20]\n 21348: a5 = u64 [sp + 0x8]\n 21351: a1 = a5 >> 0x10\n 21354: a2 = s1 << 0x30\n 21357: a1 = a1 | a2\n 21360: s1 = s1 >> 0x10\n 21363: a3 = u64 [sp + 0x10]\n 21366: a2 = a3 << 0x30\n 21369: a2 = a2 | s1\n 21372: a3 = a3 >> 0x10\n 21375: a4 = u64 [sp + 0x18]\n 21378: a4 = a4 << 0x30\n 21381: a3 = a3 | a4\n 21384: a4 = a5 << 0x30\n 21387: a0 = a0 << 0x10\n 21390: a0 = a0 >> 0x10\n 21393: a0 = a0 | a4\n 21396: u64 [sp + 0x78] = a3\n 21399: u64 [sp + 0x70] = a2\n 21402: u64 [sp + 0x68] = a1\n 21405: u64 [sp + 0x60] = a0\n 21408: a0 = sp + 0x40\n 21411: a1 = sp + 0x60\n 21414: ra = 982, jump @28\n      : @786 [@dyn 491] (gas: 1)\n 21420: t0 = 984, jump @2309\n      : @787 [@dyn 492] (gas: 1)\n 21427: ret\n      : @788 (gas: 32)\n 21429: sp = sp + 0xfffffffffffffe60\n 21433: u64 [sp + 0x198] = ra\n 21437: u64 [sp + 0x190] = s0\n 21441: u64 [sp + 0x188] = s1\n 21445: s0 = sp + 0x1a0\n 21449: sp = sp & 0xffffffffffffffe0\n 21452: s1 = sp\n 21454: a2 = u64 [a1 + 0x18]\n 21457: u64 [s1 + 0x40] = a2\n 21460: a2 = u64 [a1 + 0x10]\n 21463: u64 [s1 + 0x38] = a2\n 21466: a2 = u64 [a1 + 0x8]\n 21469: u64 [s1 + 0x48] = a2\n 21472: a1 = u64 [a1]\n 21474: u64 [s1 + 0x50] = a1\n 21477: a3 = u64 [a0 + 0x18]\n 21480: a2 = u64 [a0 + 0x10]\n 21483: a1 = u64 [a0 + 0x8]\n 21486: a0 = u64 [a0]\n 21488: u64 [s1 + 0x20] = a3\n 21491: u64 [s1 + 0x158] = a3\n 21495: u64 [s1 + 0x28] = a2\n 21498: u64 [s1 + 0x150] = a2\n 21502: u64 [s1 + 0x30] = a1\n 21505: u64 [s1 + 0x148] = a1\n 21509: u64 [s1 + 0x58] = a0\n 21512: u64 [s1 + 0x140] = a0\n 21516: a0 = s1 + 0x120\n 21520: a1 = s1 + 0x140\n 21524: ra = 0x3da\n 21528: t0 = 0x6\n 21531: jump @2259\n      : @789 [@dyn 493] (gas: 8)\n 21535: a0 = s1 + 0x100\n 21539: a5 = u64 [a0 + 0x38]\n 21542: a4 = u64 [a0 + 0x30]\n 21545: a3 = u64 [a0 + 0x28]\n 21548: a0 = a4 | a5\n 21551: a1 = a3 <u 0x1\n 21554: a1 = 0 if a0 != 0\n 21556: jump @804 if a1 == 0\n      : @790 (gas: 22)\n 21560: a0 = u64 [s1 + 0x120]\n 21564: a1 = sp + 0xffffffffffffffe0\n 21567: a1 = a1 & 0xffffffffffffffe0\n 21570: sp = a1\n 21572: u64 [s1] = a0\n 21574: a0 = a0 + 0x1\n 21577: a2 = a0 <u 0x1\n 21580: u64 [s1 + 0x8] = a3\n 21583: a2 = a2 + a3\n 21586: a3 = a0 | a2\n 21589: a3 = a3 <u 0x1\n 21592: a3 = a3 + a4\n 21595: u64 [s1 + 0x18] = a4\n 21598: a4 = a3 <u a4\n 21601: u64 [s1 + 0x10] = a5\n 21604: a4 = a4 + a5\n 21607: u64 [a1 + 0x8] = a2\n 21610: u64 [a1] = a0\n 21612: u64 [a1 + 0x10] = a3\n 21615: u64 [a1 + 0x18] = a4\n 21618: a0 = s1 + 0x140\n 21622: ra = 988, jump @28\n      : @791 [@dyn 494] (gas: 12)\n 21628: a0 = u64 [s1 + 0x20]\n 21631: a2 = s1 + 0x100\n 21635: u64 [a2 + 0x18] = a0\n 21638: a0 = u64 [s1 + 0x28]\n 21641: u64 [a2 + 0x10] = a0\n 21644: a0 = u64 [s1 + 0x30]\n 21647: u64 [a2 + 0x8] = a0\n 21650: a1 = s1 + 0x100\n 21654: a0 = u64 [s1 + 0x58]\n 21657: u64 [a2] = a0\n 21659: a0 = 0\n 21661: ra = 990, jump @24\n      : @792 [@dyn 495] (gas: 6)\n 21667: a0 = sp + 0xffffffffffffffe0\n 21670: a0 = a0 & 0xffffffffffffffe0\n 21673: u64 [s1 + 0x58] = a0\n 21676: sp = a0\n 21678: a1 = i32 [0x20150]\n 21683: jump @794 if a1 >u 31\n      : @793 (gas: 2)\n 21687: u32 [0x20150] = 0x20\n 21693: fallthrough\n      : @794 (gas: 10)\n 21694: a0 = sp + 0xffffffffffffffe0\n 21697: a2 = a0 & 0xffffffffffffffe0\n 21700: u64 [s1 + 0x30] = a2\n 21703: sp = a2\n 21705: a0 = 0x20160\n 21710: i32 a0 = a0 + 0\n 21712: i32 a2 = a2 + 0\n 21714: a1 = 0x20\n 21717: ecalli 11 // 'hash_keccak_256'\n 21719: fallthrough\n      : @795 (gas: 50)\n 21720: a2 = u64 [s1 + 0x30]\n 21723: a0 = u64 [a2 + 0x18]\n 21726: a1 = u64 [a2 + 0x10]\n 21729: t0 = u64 [a2 + 0x8]\n 21732: a3 = u64 [a2]\n 21734: a0 = reverse a0\n 21736: a1 = reverse a1\n 21738: a4 = u64 [s1 + 0x8]\n 21741: a4 = a4 + a1\n 21744: t1 = u64 [s1]\n 21746: t1 = t1 + a0\n 21749: a0 = t1 <u a0\n 21752: a4 = a4 + a0\n 21755: a2 = a4 ^ a1\n 21758: a1 = a4 <u a1\n 21761: a1 = a0 if a2 == 0\n 21764: a0 = reverse a3\n 21766: a3 = u64 [s1 + 0x10]\n 21769: a0 = a0 + a3\n 21772: a2 = reverse t0\n 21774: a3 = u64 [s1 + 0x18]\n 21777: a3 = a3 + a2\n 21780: a5 = a3 + a1\n 21783: a1 = a3 <u a2\n 21786: a2 = a5 <u a3\n 21789: a0 = a0 + a1\n 21792: t0 = a0 + a2\n 21795: a1 = u64 [s1 + 0x50]\n 21798: a3 = u64 [s1 + 0x38]\n 21801: t2 = a1 | a3\n 21804: a2 = u64 [s1 + 0x48]\n 21807: a0 = u64 [s1 + 0x40]\n 21810: a2 = a2 | a0\n 21813: a0 = t2 | a2\n 21816: a0 = a0 >> 0x20\n 21819: a2 = a2 | a3\n 21822: a2 = a2 << 0x20\n 21825: a0 = a0 | a2\n 21828: a2 = u64 [s1 + 0x58]\n 21831: a3 = t1\n 21833: u64 [s1 + 0x30] = a3\n 21836: u64 [a2] = a3\n 21838: u64 [s1 + 0x28] = a4\n 21841: u64 [a2 + 0x8] = a4\n 21844: u64 [s1 + 0x20] = a5\n 21847: u64 [a2 + 0x10] = a5\n 21850: a3 = t0\n 21852: u64 [s1 + 0x18] = a3\n 21855: u64 [a2 + 0x18] = a3\n 21858: jump @803 if a0 != 0\n      : @796 (gas: 2)\n 21862: a0 = s1 + 0xe0\n 21866: ra = 992, jump @22\n      : @797 [@dyn 496] (gas: 9)\n 21872: a0 = u64 [s1 + 0xe0]\n 21876: a0 = a0 << 0x10\n 21879: a0 = a0 >> 0x10\n 21882: u64 [s1 + 0x10] = a0\n 21885: a0 = s1 + 0xc0\n 21889: a1 = u64 [s1 + 0x58]\n 21892: ra = 0x3e2\n 21896: t0 = 0x6\n 21899: jump @2259\n      : @798 [@dyn 497] (gas: 15)\n 21903: a0 = u16 [s1 + 0xc6]\n 21907: a0 = a0 << 0x30\n 21910: a1 = u64 [s1 + 0xd8]\n 21914: a2 = u64 [s1 + 0xd0]\n 21918: a3 = u64 [s1 + 0xc8]\n 21922: a4 = u64 [s1 + 0x10]\n 21925: a0 = a0 | a4\n 21928: a4 = s1 + 0x100\n 21932: u64 [a4 + 0x78] = a1\n 21935: u64 [a4 + 0x70] = a2\n 21938: u64 [a4 + 0x68] = a3\n 21941: u64 [a4 + 0x60] = a0\n 21944: a1 = s1 + 0x160\n 21948: a0 = u64 [s1 + 0x58]\n 21951: ra = 996, jump @28\n      : @799 [@dyn 498] (gas: 10)\n 21957: a2 = u64 [s1 + 0x50]\n 21960: a0 = u64 [s1 + 0x38]\n 21963: a1 = u64 [s1 + 0x40]\n 21966: a0 = a0 | a1\n 21969: a1 = 0xffffffe0\n 21979: a1 = a2 <u a1\n 21982: a3 = u64 [s1 + 0x48]\n 21985: a1 = 0 if a3 != 0\n 21987: a1 = 0 if a0 != 0\n 21989: jump @803 if a1 == 0\n      : @800 (gas: 3)\n 21992: i32 a1 = a2 + 0x20\n 21995: a0 = s1 + 0xa0\n 21999: ra = 998, jump @22\n      : @801 [@dyn 499] (gas: 21)\n 22005: a0 = u64 [s1 + 0xa0]\n 22009: a1 = u64 [s1 + 0xa8]\n 22013: a2 = u64 [s1 + 0xb0]\n 22017: a3 = u16 [s1 + 0xb8]\n 22021: u64 [s1 + 0x78] = a3\n 22024: u64 [s1 + 0x70] = a2\n 22027: u64 [s1 + 0x68] = a1\n 22030: u64 [s1 + 0x60] = a0\n 22033: a0 = u64 [s1 + 0x18]\n 22036: u64 [s1 + 0x98] = a0\n 22040: a0 = u64 [s1 + 0x20]\n 22043: u64 [s1 + 0x90] = a0\n 22047: a0 = u64 [s1 + 0x28]\n 22050: u64 [s1 + 0x88] = a0\n 22054: a0 = s1 + 0x80\n 22058: a1 = s1 + 0x60\n 22061: a2 = u64 [s1 + 0x30]\n 22064: u64 [s1 + 0x80] = a2\n 22068: ra = 0x3e8\n 22072: t0 = 0x3d2\n 22076: jump @2373\n      : @802 [@dyn 500] (gas: 6)\n 22080: sp = s0 + 0xfffffffffffffe60\n 22084: ra = u64 [sp + 0x198]\n 22088: s0 = u64 [sp + 0x190]\n 22092: s1 = u64 [sp + 0x188]\n 22096: sp = sp + 0x1a0\n 22100: ret\n      : @803 (gas: 1)\n 22102: trap\n      : @804 (gas: 3)\n 22103: ra = 0x3ea\n 22107: t0 = 0x86\n 22111: jump @2232\n      : @805 [@dyn 501] (gas: 1)\n 22115: t0 = 1004, jump @2212\n      : @806 [@dyn 502] (gas: 3)\n 22122: ra = 0x3ee\n 22126: t0 = 0x6\n 22129: jump @2259\n      : @807 [@dyn 503] (gas: 1)\n 22133: t0 = 1008, jump @2336\n      : @808 [@dyn 504] (gas: 1)\n 22140: jump @820 if a4 == 0\n      : @809 (gas: 1)\n 22144: t0 = 1010, jump @2279\n      : @810 [@dyn 505] (gas: 1)\n 22151: ra = 1012, jump @764\n      : @811 [@dyn 506] (gas: 1)\n 22157: t0 = 1014, jump @2226\n      : @812 [@dyn 507] (gas: 1)\n 22164: ra = 1016, jump @768\n      : @813 [@dyn 508] (gas: 1)\n 22170: t0 = 1018, jump @2276\n      : @814 [@dyn 509] (gas: 3)\n 22177: ra = 0x3fc\n 22181: t0 = 0x6\n 22184: jump @2259\n      : @815 [@dyn 510] (gas: 6)\n 22188: t1 = u64 [s1 + 0x2e0]\n 22192: a2 = 0xffffffffffff\n 22202: t0 = t1 & a2\n 22205: t2 = u64 [s1 + 0x78]\n 22208: a2 = t2 & a2\n 22211: jump @837 if a2 <u t0\n      : @816 (gas: 19)\n 22215: a0 = s1 + 0x200\n 22219: a3 = u64 [a0 + 0xf8]\n 22223: a1 = u64 [a0 + 0xf0]\n 22227: a5 = u64 [a0 + 0xe8]\n 22231: a0 = a3 << 0x10\n 22234: a4 = a1 >> 0x30\n 22237: a0 = a0 | a4\n 22240: u64 [s1 + 0x50] = a0\n 22243: a1 = a1 << 0x10\n 22246: a0 = a5 >> 0x30\n 22249: a0 = a0 | a1\n 22252: u64 [s1 + 0x48] = a0\n 22255: a5 = a5 << 0x10\n 22258: a0 = t1 >> 0x30\n 22261: a0 = a0 | a5\n 22264: u64 [s1 + 0x38] = a0\n 22267: a3 = a3 >> 0x30\n 22270: u64 [s1 + 0x40] = a3\n 22273: jump @828 if t0 != a2\n      : @817 (gas: 1)\n 22276: t0 = 1022, jump @2254\n      : @818 [@dyn 511] (gas: 3)\n 22283: ra = 0x400\n 22287: t0 = 0x3d2\n 22291: jump @2373\n      : @819 [@dyn 512] (gas: 1)\n 22295: jump @835\n      : @820 (gas: 4)\n 22298: a0 = s1 + 0x180\n 22302: ra = 0x402\n 22306: t0 = 0x98\n 22310: jump @2372\n      : @821 [@dyn 513] (gas: 1)\n 22314: t0 = 1028, jump @2223\n      : @822 [@dyn 514] (gas: 3)\n 22321: ra = 0x406\n 22325: t0 = 0x3c6\n 22329: jump @2328\n      : @823 [@dyn 515] (gas: 1)\n 22333: t0 = 1032, jump @2225\n      : @824 [@dyn 516] (gas: 3)\n 22340: ra = 0x40a\n 22344: t0 = 0x3cc\n 22348: jump @2328\n      : @825 [@dyn 517] (gas: 1)\n 22352: t0 = 1036, jump @2262\n      : @826 [@dyn 518] (gas: 1)\n 22359: ra = 1038, jump @788\n      : @827 [@dyn 519] (gas: 6)\n 22365: a5 = 0\n 22367: a3 = 0\n 22369: a2 = 0\n 22371: a4 = 0\n 22373: t0 = 0x41e\n 22377: jump @2252\n      : @828 (gas: 4)\n 22381: a0 = s1 + 0x2c0\n 22385: ra = 0x410\n 22389: t0 = 0x98\n 22393: jump @2372\n      : @829 [@dyn 520] (gas: 1)\n 22397: t0 = 1042, jump @2222\n      : @830 [@dyn 521] (gas: 3)\n 22404: ra = 0x414\n 22408: t0 = 0x3c6\n 22412: jump @2328\n      : @831 [@dyn 522] (gas: 1)\n 22416: t0 = 1046, jump @2214\n      : @832 [@dyn 523] (gas: 3)\n 22423: ra = 0x418\n 22427: t0 = 0x3cc\n 22431: jump @2328\n      : @833 [@dyn 524] (gas: 1)\n 22435: t0 = 1050, jump @2253\n      : @834 [@dyn 525] (gas: 1)\n 22442: ra = 1052, jump @788\n      : @835 [@dyn 526] (gas: 5)\n 22448: a2 = u64 [s1 + 0x50]\n 22451: a3 = u64 [s1 + 0x48]\n 22454: a4 = u64 [s1 + 0x40]\n 22457: a5 = u64 [s1 + 0x38]\n 22460: t0 = 1054, jump @2252\n      : @836 [@dyn 527] (gas: 1)\n 22467: ret\n      : @837 (gas: 1)\n 22469: t0 = 1056, jump @2292\n      : @838 [@dyn 528] (gas: 1)\n 22476: ra = 1058, jump @24\n      : @839 [@dyn 529] (gas: 2)\n 22482: a1 = i32 [0x20150]\n 22487: jump @841 if a1 >u 31\n      : @840 (gas: 2)\n 22491: u32 [0x20150] = 0x20\n 22497: fallthrough\n      : @841 (gas: 7)\n 22498: a1 = 0x20160\n 22503: i32 a1 = a1 + 0\n 22505: a0 = 0x1\n 22508: a2 = 0x4\n 22511: ra = 0x424\n 22515: ecalli 16 // 'seal_return'\n 22517: fallthrough\n      : @842 [@dyn 530] (gas: 25)\n 22518: sp = sp + 0xffffffffffffff70\n 22522: u64 [sp + 0x88] = ra\n 22526: u64 [sp + 0x80] = s0\n 22530: u64 [sp + 0x78] = s1\n 22533: s0 = sp + 0x90\n 22537: sp = sp & 0xfffffffffffffff0\n 22540: a4 = u64 [a3 + 0x18]\n 22543: u64 [sp + 0x28] = a4\n 22546: a4 = u64 [a3 + 0x10]\n 22549: u64 [sp + 0x20] = a4\n 22552: t1 = u64 [a3 + 0x8]\n 22555: a5 = u64 [a1 + 0x18]\n 22558: s1 = u64 [a1 + 0x8]\n 22561: t2 = u64 [a3]\n 22563: t0 = u64 [a2 + 0x18]\n 22566: a3 = u64 [a2 + 0x10]\n 22569: s1 = s1 | a5\n 22572: ra = u64 [a1]\n 22574: a1 = u64 [a1 + 0x10]\n 22577: a4 = u64 [a2 + 0x8]\n 22580: a5 = u64 [a2]\n 22582: a2 = ra ^ 0x1\n 22585: a2 = a2 | a1\n 22588: a2 = a2 | s1\n 22591: jump @845 if a2 != 0\n      : @843 (gas: 24)\n 22594: s1 = u16 [sp + 0x28]\n 22597: t0 = zext.h t0\n 22599: a5 = a5 + t2\n 22602: a1 = a5 <u t2\n 22605: t2 = a5\n 22607: a5 = t1 + a4\n 22610: a5 = a5 + a1\n 22613: a2 = a5 ^ t1\n 22616: a4 = a5 <u t1\n 22619: a4 = a1 if a2 == 0\n 22622: a1 = u64 [sp + 0x20]\n 22625: t1 = a1 + a3\n 22628: ra = t1 + a4\n 22631: a3 = ra <u t1\n 22634: a4 = t1 <u a1\n 22637: a2 = s1 + t0\n 22640: a2 = a2 + a4\n 22643: s1 = a2 + a3\n 22646: a3 = s1 ^ 0x10000\n 22651: a3 = ra | a3\n 22654: a4 = s1 >> 0x10\n 22657: a4 = a4 <u 0x1\n 22660: a4 = 0 if a3 == 0\n 22662: jump @848 if a4 != 0\n      : @844 (gas: 1)\n 22665: jump @849\n      : @845 (gas: 8)\n 22668: u64 [sp + 0x8] = t1\n 22671: u64 [sp + 0x10] = t2\n 22674: u64 [sp + 0x18] = t0\n 22677: t0 = u64 [sp + 0x20]\n 22680: a2 = ra ^ 0x2\n 22683: a1 = a1 | a2\n 22686: a1 = a1 | s1\n 22689: jump @850 if a1 != 0\n      : @846 (gas: 24)\n 22693: t2 = a5\n 22695: t1 = u64 [sp + 0x10]\n 22698: s1 = a5 <u t1\n 22701: a5 = a4\n 22703: a4 = u64 [sp + 0x8]\n 22706: a1 = a5 ^ a4\n 22709: a2 = a5 <u a4\n 22712: u64 [sp] = s1\n 22714: a2 = s1 if a1 == 0\n 22717: a1 = a3 - t0\n 22720: ra = a1 - a2\n 22723: s1 = a1 <u a2\n 22726: t0 = a3 <u t0\n 22729: a2 = u16 [sp + 0x28]\n 22732: a1 = u16 [sp + 0x18]\n 22735: a1 = a1 - a2\n 22738: a1 = a1 - t0\n 22741: s1 = a1 - s1\n 22744: a1 = s1 ^ 0x10000\n 22749: a1 = ra | a1\n 22752: a2 = s1 >> 0x10\n 22755: a2 = a2 <u 0x1\n 22758: a2 = 0 if a1 == 0\n 22760: jump @849 if a2 == 0\n      : @847 (gas: 5)\n 22763: a5 = a5 - a4\n 22766: a1 = u64 [sp]\n 22768: a5 = a5 - a1\n 22771: t2 = t2 - t1\n 22774: fallthrough\n      : @848 (gas: 10)\n 22775: u64 [a0] = t2\n 22777: u64 [a0 + 0x8] = a5\n 22780: u64 [a0 + 0x10] = ra\n 22783: u64 [a0 + 0x18] = s1\n 22786: sp = s0 + 0xffffffffffffff70\n 22790: ra = u64 [sp + 0x88]\n 22794: s0 = u64 [sp + 0x80]\n 22798: s1 = u64 [sp + 0x78]\n 22801: sp = sp + 0x90\n 22805: ret\n      : @849 (gas: 3)\n 22807: ra = 0x426\n 22811: t0 = 0x28e\n 22815: jump @2232\n      : @850 [@dyn 531] (gas: 8)\n 22819: u64 [sp + 96] = 0\n 22822: u64 [sp + 88] = 0\n 22825: u64 [sp + 80] = 0\n 22828: a0 = 0x4e487b7100000000\n 22838: a1 = sp + 0x50\n 22841: u64 [sp + 0x68] = a0\n 22844: a0 = 0\n 22846: ra = 1064, jump @24\n      : @851 [@dyn 532] (gas: 7)\n 22852: u64 [sp + 72] = 0\n 22855: u64 [sp + 64] = 0\n 22858: u64 [sp + 48] = 0x51\n 22862: a0 = 0x4\n 22865: a1 = sp + 0x30\n 22868: u64 [sp + 56] = 0\n 22871: ra = 1066, jump @24\n      : @852 [@dyn 533] (gas: 2)\n 22877: a1 = i32 [0x20150]\n 22882: jump @854 if a1 >u 63\n      : @853 (gas: 2)\n 22886: u32 [0x20150] = 0x40\n 22892: fallthrough\n      : @854 (gas: 7)\n 22893: a1 = 0x20160\n 22898: i32 a1 = a1 + 0\n 22900: a0 = 0x1\n 22903: a2 = 0x24\n 22906: ra = 0x42c\n 22910: ecalli 16 // 'seal_return'\n 22912: fallthrough\n      : @855 [@dyn 534] (gas: 21)\n 22913: sp = sp + 0xffffffffffffff10\n 22917: u64 [sp + 0xe8] = ra\n 22921: u64 [sp + 0xe0] = s0\n 22925: u64 [sp + 0xd8] = s1\n 22929: s0 = sp + 0xf0\n 22933: sp = sp & 0xfffffffffffffff0\n 22936: a5 = u64 [a1 + 0x10]\n 22939: a4 = u64 [a1 + 0x18]\n 22942: a3 = u64 [a1 + 0x8]\n 22945: a1 = u64 [a1]\n 22947: u64 [sp + 0x28] = a3\n 22950: u64 [sp + 0x18] = a4\n 22953: a4 = a4 | a3\n 22956: a3 = a1 | a5\n 22959: a3 = a3 | a4\n 22962: a3 = a3 >> 0x20\n 22965: u64 [sp + 0x20] = a5\n 22968: a4 = a4 | a5\n 22971: a4 = a4 << 0x20\n 22974: a3 = a3 | a4\n 22977: jump @870 if a3 != 0\n      : @856 (gas: 11)\n 22981: u64 [sp + 0x8] = a0\n 22984: a0 = u64 [a2 + 0x18]\n 22987: u64 [sp + 0x68] = a0\n 22990: s1 = u64 [a2 + 0x10]\n 22993: a0 = u64 [a2 + 0x8]\n 22996: u64 [sp + 0x60] = a0\n 22999: a0 = u64 [a2]\n 23001: u64 [sp + 0x58] = a0\n 23004: a0 = sp + 0xb0\n 23008: u64 [sp + 0x10] = a1\n 23011: ra = 1070, jump @22\n      : @857 [@dyn 535] (gas: 12)\n 23017: a0 = u64 [sp + 0x58]\n 23020: a2 = a0 | s1\n 23023: a1 = u64 [sp + 0x68]\n 23026: a3 = u64 [sp + 0x60]\n 23029: a1 = a1 | a3\n 23032: a2 = a2 | a1\n 23035: a2 = a2 >> 0x20\n 23038: u64 [sp + 0x50] = s1\n 23041: a1 = a1 | s1\n 23044: a1 = a1 << 0x20\n 23047: a1 = a1 | a2\n 23050: jump @870 if a1 != 0\n      : @858 (gas: 15)\n 23054: a2 = u64 [sp + 0xc8]\n 23058: a3 = u64 [sp + 0xc0]\n 23062: a4 = u64 [sp + 0xb8]\n 23066: a1 = u64 [sp + 0xb0]\n 23070: u64 [sp + 0x30] = a1\n 23073: u64 [sp + 0x90] = a1\n 23077: u64 [sp + 0x38] = a4\n 23080: u64 [sp + 0x98] = a4\n 23084: u64 [sp + 0x40] = a3\n 23087: u64 [sp + 0xa0] = a3\n 23091: a1 = sp + 0x90\n 23095: u64 [sp + 0x48] = a2\n 23098: u64 [sp + 0xa8] = a2\n 23102: s1 = a0\n 23104: ra = 1072, jump @24\n      : @859 [@dyn 536] (gas: 9)\n 23110: a0 = u64 [sp + 0x68]\n 23113: a1 = u64 [sp + 0x50]\n 23116: a1 = a1 | a0\n 23119: a0 = 0xffffffe0\n 23129: a2 = s1 <u a0\n 23132: a3 = u64 [sp + 0x60]\n 23135: a2 = 0 if a3 != 0\n 23137: a2 = 0 if a1 != 0\n 23139: jump @870 if a2 == 0\n      : @860 (gas: 9)\n 23143: a1 = u64 [sp + 0x20]\n 23146: a2 = u64 [sp + 0x18]\n 23149: a1 = a1 | a2\n 23152: a2 = u64 [sp + 0x10]\n 23155: a0 = a2 <u a0\n 23158: a3 = u64 [sp + 0x28]\n 23161: a0 = 0 if a3 != 0\n 23163: a0 = 0 if a1 != 0\n 23165: jump @870 if a0 == 0\n      : @861 (gas: 13)\n 23169: a5 = s1\n 23171: s1 = u64 [sp + 0x30]\n 23174: a3 = u64 [sp + 0x40]\n 23177: a0 = s1 | a3\n 23180: a1 = u64 [sp + 0x48]\n 23183: a4 = u64 [sp + 0x38]\n 23186: a1 = a1 | a4\n 23189: a0 = a0 | a1\n 23192: a0 = a0 >> 0x20\n 23195: a1 = a1 | a3\n 23198: a1 = a1 << 0x20\n 23201: a0 = a0 | a1\n 23204: jump @870 if a0 != 0\n      : @862 (gas: 5)\n 23208: i32 a0 = a5 + 0x20\n 23211: i32 a1 = a2 + 0x20\n 23214: u64 [sp + 0x28] = a1\n 23217: a1 = s1\n 23219: ra = 1074, jump @37\n      : @863 [@dyn 537] (gas: 4)\n 23225: u64 [sp + 0x20] = a0\n 23228: a0 = u64 [sp + 0x28]\n 23231: a1 = s1\n 23233: ra = 1076, jump @37\n      : @864 [@dyn 538] (gas: 4)\n 23239: a1 = a0\n 23241: a0 = u64 [sp + 0x20]\n 23244: a2 = s1\n 23246: ra = 1078, jump @0\n      : @865 [@dyn 539] (gas: 6)\n 23252: a0 = u64 [sp + 0x58]\n 23255: a0 = a0 + s1\n 23258: a1 = a0 <u s1\n 23261: a2 = u64 [sp + 0x60]\n 23264: a4 = u64 [sp + 0x38]\n 23267: t0 = 1080, jump @2324\n      : @866 [@dyn 540] (gas: 12)\n 23274: a1 = u64 [sp + 0x50]\n 23277: a3 = u64 [sp + 0x40]\n 23280: a1 = a1 + a3\n 23283: a3 = a1 <u a3\n 23286: a5 = u64 [sp + 0x68]\n 23289: s1 = u64 [sp + 0x48]\n 23292: a5 = a5 + s1\n 23295: a3 = a3 + a5\n 23298: a4 = a4 + a1\n 23301: a1 = a4 <u a1\n 23304: a1 = a1 + a3\n 23307: t0 = 1082, jump @2353\n      : @867 [@dyn 541] (gas: 1)\n 23314: jump @870 if a3 == 0\n      : @868 (gas: 7)\n 23318: i32 a0 = a0 + 0x20\n 23321: u64 [sp + 136] = 0\n 23325: u64 [sp + 128] = 0\n 23329: u64 [sp + 120] = 0\n 23332: a1 = sp + 0x70\n 23335: u64 [sp + 112] = 0\n 23338: ra = 1084, jump @24\n      : @869 [@dyn 542] (gas: 35)\n 23344: s1 = u64 [sp + 0x30]\n 23347: s1 = s1 + 0x1f\n 23350: a0 = 0x1ffffffe0\n 23360: a0 = a0 & s1\n 23363: a1 = u64 [sp + 0x58]\n 23366: a0 = a0 + a1\n 23369: a1 = a0 <u a1\n 23372: a3 = u64 [sp + 0x60]\n 23375: a2 = a3 + a1\n 23378: a3 = a2 <u a3\n 23381: a3 = a1 if a1 == 0\n 23384: a1 = u64 [sp + 0x50]\n 23387: a3 = a3 + a1\n 23390: a1 = a3 <u a1\n 23393: a4 = u64 [sp + 0x68]\n 23396: a1 = a1 + a4\n 23399: a4 = a0 + 0x20\n 23402: a0 = a4 <u a0\n 23405: a5 = a2 + a0\n 23408: a2 = a5 <u a2\n 23411: a2 = a0 if a0 == 0\n 23414: a2 = a2 + a3\n 23417: a0 = a2 <u a3\n 23420: a0 = a0 + a1\n 23423: a1 = u64 [sp + 0x8]\n 23426: u64 [a1] = a4\n 23428: u64 [a1 + 0x8] = a5\n 23431: u64 [a1 + 0x10] = a2\n 23434: u64 [a1 + 0x18] = a0\n 23437: sp = s0 + 0xffffffffffffff10\n 23441: ra = u64 [sp + 0xe8]\n 23445: s0 = u64 [sp + 0xe0]\n 23449: s1 = u64 [sp + 0xd8]\n 23453: sp = sp + 0xf0\n 23457: ret\n      : @870 (gas: 1)\n 23459: trap\n      : @871 (gas: 22)\n 23460: sp = sp + 0xffffffffffffff20\n 23464: u64 [sp + 0xd8] = ra\n 23468: u64 [sp + 0xd0] = s0\n 23472: u64 [sp + 0xc8] = s1\n 23476: s0 = sp + 0xe0\n 23480: sp = sp & 0xfffffffffffffff0\n 23483: a4 = u64 [a1 + 0x10]\n 23486: a3 = u64 [a1 + 0x18]\n 23489: a5 = u64 [a1 + 0x8]\n 23492: s1 = u64 [a1]\n 23494: u64 [sp + 0x28] = a3\n 23497: u64 [sp + 0x20] = a5\n 23500: a1 = a5 | a3\n 23503: a3 = s1 | a4\n 23506: a3 = a3 | a1\n 23509: a3 = a3 >> 0x20\n 23512: u64 [sp + 0x30] = a4\n 23515: a1 = a1 | a4\n 23518: a1 = a1 << 0x20\n 23521: a1 = a1 | a3\n 23524: u64 [sp + 0x38] = a0\n 23527: jump @875 if a1 != 0\n      : @872 (gas: 15)\n 23531: a0 = u64 [a2 + 0x18]\n 23534: u64 [sp] = a0\n 23536: a0 = u64 [a2 + 0x10]\n 23539: u64 [sp + 0x8] = a0\n 23542: a0 = u64 [a2 + 0x8]\n 23545: u64 [sp + 0x10] = a0\n 23548: a0 = u64 [a2]\n 23550: u64 [sp + 0x18] = a0\n 23553: u64 [sp + 184] = 0\n 23557: u64 [sp + 176] = 0\n 23561: u64 [sp + 168] = 0\n 23565: a1 = sp + 0xa0\n 23569: u64 [sp + 160] = 0x20\n 23574: a0 = s1\n 23576: ra = 1086, jump @24\n      : @873 [@dyn 543] (gas: 27)\n 23582: a0 = s1 + 0x20\n 23585: a1 = a0 <u s1\n 23588: a3 = u64 [sp + 0x20]\n 23591: a2 = a3 + a1\n 23594: a3 = a2 <u a3\n 23597: a3 = a1 if a1 == 0\n 23600: a1 = u64 [sp + 0x30]\n 23603: a3 = a3 + a1\n 23606: a1 = a3 <u a1\n 23609: a4 = u64 [sp + 0x28]\n 23612: a4 = a4 + a1\n 23615: u64 [sp + 0x48] = a2\n 23618: u64 [sp + 0x40] = a0\n 23621: a0 = u64 [sp]\n 23623: u64 [sp + 0x78] = a0\n 23626: a0 = u64 [sp + 0x8]\n 23629: u64 [sp + 0x70] = a0\n 23632: a0 = u64 [sp + 0x10]\n 23635: u64 [sp + 0x68] = a0\n 23638: a0 = u64 [sp + 0x18]\n 23641: u64 [sp + 0x60] = a0\n 23644: u64 [sp + 0x50] = a3\n 23647: a0 = sp + 0x80\n 23651: a1 = sp + 0x60\n 23654: a2 = sp + 0x40\n 23657: u64 [sp + 0x58] = a4\n 23660: ra = 1088, jump @855\n      : @874 [@dyn 544] (gas: 15)\n 23666: a0 = u64 [sp + 0x90]\n 23670: a1 = u64 [sp + 0x98]\n 23674: a2 = u64 [sp + 0x80]\n 23678: a3 = u64 [sp + 0x88]\n 23682: a4 = u64 [sp + 0x38]\n 23685: u64 [a4 + 0x10] = a0\n 23688: u64 [a4 + 0x18] = a1\n 23691: u64 [a4] = a2\n 23693: u64 [a4 + 0x8] = a3\n 23696: sp = s0 + 0xffffffffffffff20\n 23700: ra = u64 [sp + 0xd8]\n 23704: s0 = u64 [sp + 0xd0]\n 23708: s1 = u64 [sp + 0xc8]\n 23712: sp = sp + 0xe0\n 23716: ret\n      : @875 (gas: 1)\n 23718: trap\n      : @876 [@dyn 545] (gas: 5)\n 23719: ra = 0x444\n 23723: ecalli 19 // 'value_transferred'\n 23725: a4 = s1 + 0x200\n 23729: t0 = 0x446\n 23733: jump @2362\n      : @877 [@dyn 546] (gas: 2)\n 23737: a4 = s1 + 0x200\n 23741: t0 = 1094, jump @2362\n      : @878 [@dyn 547] (gas: 1)\n 23748: jump @922 if a0 != 0\n      : @879 (gas: 2)\n 23752: a0 = i32 [0x2014c]\n 23757: jump @923 if a0 <=u 3\n      : @880 (gas: 3)\n 23762: a0 = s1 + 0x280\n 23766: a1 = 0x40\n 23769: ra = 1096, jump @22\n      : @881 [@dyn 548] (gas: 1)\n 23775: t0 = 1098, jump @2270\n      : @882 [@dyn 549] (gas: 6)\n 23782: u64 [s1 + 704] = 0x3\n 23787: a0 = s1 + 0x260\n 23791: a1 = s1 + 0x2c0\n 23795: ra = 0x44c\n 23799: t0 = 0x6\n 23802: jump @2259\n      : @883 [@dyn 550] (gas: 1)\n 23806: t0 = 1102, jump @2272\n      : @884 [@dyn 551] (gas: 1)\n 23813: ra = 1104, jump @255\n      : @885 [@dyn 552] (gas: 1)\n 23819: t0 = 1106, jump @2332\n      : @886 [@dyn 553] (gas: 1)\n 23826: jump @921 if a1 != 0\n      : @887 (gas: 1)\n 23830: t0 = 1108, jump @2287\n      : @888 [@dyn 554] (gas: 1)\n 23837: ra = 1110, jump @24\n      : @889 [@dyn 555] (gas: 3)\n 23843: a3 = u64 [s1 + 0xb8]\n 23847: a0 = a3 & 0x1\n 23850: jump @896 if a0 != 0\n      : @890 (gas: 1)\n 23853: t0 = 1112, jump @2302\n      : @891 [@dyn 556] (gas: 1)\n 23860: jump @921 if a1 == 0\n      : @892 (gas: 1)\n 23864: t0 = 1114, jump @2294\n      : @893 [@dyn 557] (gas: 1)\n 23871: ra = 1116, jump @24\n      : @894 [@dyn 558] (gas: 1)\n 23877: t0 = 1118, jump @2281\n      : @895 [@dyn 559] (gas: 1)\n 23884: jump @912\n      : @896 (gas: 1)\n 23887: t0 = 1120, jump @2359\n      : @897 [@dyn 560] (gas: 4)\n 23894: a1 = s1 + 0x1e0\n 23898: u64 [s1 + 480] = 0x3\n 23903: a0 = 0\n 23905: ra = 1122, jump @24\n      : @898 [@dyn 561] (gas: 6)\n 23911: a0 = sp + 0xffffffffffffffe0\n 23914: a0 = a0 & 0xffffffffffffffe0\n 23917: u64 [s1 + 0x58] = a0\n 23920: sp = a0\n 23922: a1 = i32 [0x20150]\n 23927: jump @900 if a1 >u 31\n      : @899 (gas: 2)\n 23931: u32 [0x20150] = 0x20\n 23937: fallthrough\n      : @900 (gas: 10)\n 23938: a0 = sp + 0xffffffffffffffe0\n 23941: a2 = a0 & 0xffffffffffffffe0\n 23944: u64 [s1 + 0xa8] = a2\n 23948: sp = a2\n 23950: a0 = 0x20160\n 23955: i32 a0 = a0 + 0\n 23957: i32 a2 = a2 + 0\n 23959: a1 = 0x20\n 23962: ecalli 11 // 'hash_keccak_256'\n 23964: t0 = 1124, jump @2230\n      : @901 [@dyn 562] (gas: 18)\n 23971: t0 = u64 [s1 + 0x58]\n 23974: a3 = a2\n 23976: a5 = t0\n 23978: u64 [a5 + 0x18] = a2\n 23981: u64 [s1 + 0x80] = ra\n 23985: u64 [t0 + 0x10] = ra\n 23988: ra = a1\n 23990: u64 [a5 + 0x8] = a1\n 23993: a2 = a0\n 23995: u64 [a5] = a0\n 23997: a0 = u64 [s1 + 0x20]\n 24000: a4 = a4 + a0\n 24003: u64 [s1 + 0x40] = a4\n 24006: a0 = a4 <u a0\n 24009: a1 = u64 [s1 + 0x18]\n 24012: a0 = a0 + a1\n 24015: u64 [s1 + 0x38] = a0\n 24018: fallthrough\n      : @902 (gas: 21)\n 24019: u64 [s1 + 0x88] = a3\n 24023: u64 [s1 + 0x90] = ra\n 24027: u64 [s1 + 0x98] = a2\n 24031: a0 = u64 [s1 + 0x60]\n 24034: a1 = u64 [s1 + 0xb8]\n 24038: a0 = a1 <u a0\n 24041: a2 = u64 [s1 + 0x70]\n 24044: a1 = t2 ^ a2\n 24047: a2 = t2 <u a2\n 24050: a2 = a0 if a1 == 0\n 24053: a4 = u64 [s1 + 0x68]\n 24056: a0 = t1 <u a4\n 24059: a3 = u64 [s1 + 0x78]\n 24062: a1 = u64 [s1 + 0xb0]\n 24066: a5 = a1 ^ a3\n 24069: a3 = a1 <u a3\n 24072: a3 = a0 if a5 == 0\n 24075: a0 = t1 ^ a4\n 24078: a0 = a0 | a5\n 24081: a3 = a2 if a0 == 0\n 24084: jump @911 if a3 == 0\n      : @903 (gas: 7)\n 24088: a0 = s1 + 0x1c0\n 24092: a1 = t0\n 24094: u64 [s1 + 0xa8] = t1\n 24098: u64 [s1 + 0xa0] = t2\n 24102: ra = 0x466\n 24106: t0 = 0x6\n 24109: jump @2259\n      : @904 [@dyn 563] (gas: 1)\n 24113: t0 = 1128, jump @2245\n      : @905 [@dyn 564] (gas: 6)\n 24120: t0 = a1 <u a5\n 24123: a5 = u64 [s1 + 0xb0]\n 24127: a3 = u64 [s1 + 0x38]\n 24130: a5 = a5 + a3\n 24133: a5 = a5 + t0\n 24136: t0 = 1130, jump @2322\n      : @906 [@dyn 565] (gas: 1)\n 24143: jump @921 if a1 != 0\n      : @907 (gas: 1)\n 24147: t0 = 1132, jump @2304\n      : @908 [@dyn 566] (gas: 1)\n 24154: ra = 1134, jump @24\n      : @909 [@dyn 567] (gas: 31)\n 24160: t0 = u64 [s1 + 0x98]\n 24164: t0 = t0 + 0x1\n 24167: a0 = t0 <u 0x1\n 24170: a3 = u64 [s1 + 0x90]\n 24174: a3 = a3 + a0\n 24177: a0 = t0 | a3\n 24180: a0 = a0 <u 0x1\n 24183: a1 = u64 [s1 + 0x80]\n 24187: t2 = a1 + a0\n 24190: a1 = t2 <u a1\n 24193: a0 = u64 [s1 + 0x88]\n 24197: a0 = a0 + a1\n 24200: a1 = u64 [s1 + 0xb8]\n 24204: t1 = a1 + 0x20\n 24207: a2 = t1 <u a1\n 24210: a4 = u64 [s1 + 0xa0]\n 24214: a1 = a4 + a2\n 24217: a4 = a1 <u a4\n 24220: a4 = a2 if a2 == 0\n 24223: a2 = u64 [s1 + 0xa8]\n 24227: a4 = a4 + a2\n 24230: a2 = a4 <u a2\n 24233: a5 = u64 [s1 + 0xb0]\n 24237: a5 = a5 + a2\n 24240: u64 [s1 + 0xb0] = a5\n 24244: ra = a3\n 24246: a5 = u64 [s1 + 0x58]\n 24249: u64 [a5 + 0x8] = a3\n 24252: a2 = t0\n 24254: u64 [a5] = t0\n 24256: t0 = 1136, jump @2351\n      : @910 [@dyn 568] (gas: 2)\n 24263: t0 = a5\n 24265: jump @902\n      : @911 (gas: 3)\n 24268: a5 = u64 [s1 + 0x30]\n 24271: t0 = 0x472\n 24275: jump @2219\n      : @912 (gas: 1)\n 24279: t0 = 1138, jump @2219\n      : @913 [@dyn 569] (gas: 1)\n 24286: ra = 1140, jump @149\n      : @914 [@dyn 570] (gas: 3)\n 24292: a0 = s1 + 0x120\n 24296: a1 = 0x40\n 24299: ra = 1142, jump @22\n      : @915 [@dyn 571] (gas: 1)\n 24305: t0 = 1144, jump @2233\n      : @916 [@dyn 572] (gas: 1)\n 24312: ra = 1146, jump @871\n      : @917 [@dyn 573] (gas: 7)\n 24318: a4 = u64 [s1 + 0xa8]\n 24322: a2 = u64 [s1 + 0xa0]\n 24326: a0 = u64 [s1 + 0xb8]\n 24330: a0 = a0 | a4\n 24333: a3 = u64 [s1 + 0xb0]\n 24337: a1 = a2 | a3\n 24340: t0 = 1148, jump @2313\n      : @918 [@dyn 574] (gas: 1)\n 24347: jump @921 if a0 != 0\n      : @919 (gas: 26)\n 24350: t0 = a3\n 24352: a5 = s1 + 0x100\n 24356: a0 = u64 [a5 + 0x8]\n 24359: a1 = u64 [a5 + 0x18]\n 24362: u64 [s1 + 0x98] = a1\n 24366: t1 = u64 [s1 + 0x100]\n 24370: a3 = u64 [a5 + 0x10]\n 24373: t2 = a0 ^ a4\n 24376: a5 = a0 <u a4\n 24379: ra = t1 <u a2\n 24382: a5 = ra if t2 == 0\n 24385: a1 = a3 - t0\n 24388: t2 = a1 - a5\n 24391: a1 = a1 <u a5\n 24394: u64 [s1 + 0x90] = a1\n 24398: a3 = a3 <u t0\n 24401: a5 = u64 [s1 + 0xb8]\n 24405: a1 = u64 [s1 + 0x98]\n 24409: a5 = a1 - a5\n 24412: a5 = a5 - a3\n 24415: a1 = u64 [s1 + 0x90]\n 24419: a5 = a5 - a1\n 24422: a0 = a0 - a4\n 24425: a0 = a0 - ra\n 24428: a1 = t1 - a2\n 24431: t0 = 1150, jump @2220\n      : @920 [@dyn 575] (gas: 1)\n 24438: jump @925 if a0 == 0\n      : @921 (gas: 1)\n 24441: trap\n      : @922 (gas: 2)\n 24442: a1 = 0x20160\n 24447: jump @924\n      : @923 (gas: 2)\n 24449: a1 = 0x20160\n 24454: fallthrough\n      : @924 (gas: 5)\n 24455: i32 a1 = a1 + 0\n 24457: a0 = 0x1\n 24460: a2 = 0\n 24462: ecalli 16 // 'seal_return'\n 24464: fallthrough\n      : @925 (gas: 3)\n 24465: a0 = a2\n 24467: u64 [s1 + 0xb8] = a1\n 24471: ra = 1152, jump @37\n      : @926 [@dyn 576] (gas: 7)\n 24477: i32 a1 = a0 + 0\n 24479: a2 = i32 [s1 + 0xb8]\n 24483: a0 = 0\n 24485: ra = 0x482\n 24489: ecalli 16 // 'seal_return'\n 24491: t0 = 0x484\n 24495: jump @2251\n      : @927 [@dyn 577] (gas: 1)\n 24499: t0 = 1156, jump @2251\n      : @928 [@dyn 578] (gas: 5)\n 24506: a1 = 0x4\n 24509: ra = 0x486\n 24513: ecalli 4 // 'call_data_load'\n 24515: t0 = 0x488\n 24519: jump @2305\n      : @929 [@dyn 579] (gas: 1)\n 24523: t0 = 1160, jump @2305\n      : @930 [@dyn 580] (gas: 1)\n 24530: jump @933 if a3 == 0\n      : @931 (gas: 1)\n 24533: t0 = 1162, jump @2330\n      : @932 [@dyn 581] (gas: 1)\n 24540: ret\n      : @933 (gas: 8)\n 24542: a1 = 0x20160\n 24547: i32 a1 = a1 + 0\n 24549: a0 = 0x1\n 24552: a2 = 0\n 24554: ra = 0x48c\n 24558: ecalli 16 // 'seal_return'\n 24560: t0 = 0x48e\n 24564: jump @2329\n      : @934 [@dyn 582] (gas: 1)\n 24568: t0 = 1166, jump @2329\n      : @935 [@dyn 583] (gas: 4)\n 24575: ra = 0x490\n 24579: ecalli 4 // 'call_data_load'\n 24581: t0 = 0x492\n 24585: jump @2305\n      : @936 [@dyn 584] (gas: 1)\n 24589: t0 = 1170, jump @2305\n      : @937 [@dyn 585] (gas: 1)\n 24596: jump @940 if a3 == 0\n      : @938 (gas: 1)\n 24599: t0 = 1172, jump @2330\n      : @939 [@dyn 586] (gas: 1)\n 24606: ret\n      : @940 (gas: 8)\n 24608: a1 = 0x20160\n 24613: i32 a1 = a1 + 0\n 24615: a0 = 0x1\n 24618: a2 = 0\n 24620: ra = 0x496\n 24624: ecalli 16 // 'seal_return'\n 24626: t0 = 0x498\n 24630: jump @2329\n      : @941 [@dyn 587] (gas: 1)\n 24634: t0 = 1176, jump @2329\n      : @942 [@dyn 588] (gas: 2)\n 24641: ecalli 4 // 'call_data_load'\n 24643: t0 = 1178, jump @2228\n      : @943 [@dyn 589] (gas: 1)\n 24650: ret\n      : @944 [@dyn 590] (gas: 3)\n 24652: a1 = 0x44\n 24655: ecalli 4 // 'call_data_load'\n 24657: t0 = 1182, jump @2228\n      : @945 [@dyn 591] (gas: 1)\n 24664: ret\n      : @946 (gas: 12)\n 24666: a3 = u64 [a1 + 0x10]\n 24669: t0 = u64 [a1 + 0x18]\n 24672: a5 = u64 [a1 + 0x8]\n 24675: a4 = u64 [a1]\n 24677: a1 = a5 | t0\n 24680: a2 = a4 | a3\n 24683: a2 = a2 | a1\n 24686: a2 = a2 >> 0x20\n 24689: a1 = a1 | a3\n 24692: a1 = a1 << 0x20\n 24695: a1 = a1 | a2\n 24698: jump @950 if a1 != 0\n      : @947 (gas: 26)\n 24701: sp = sp + 0xffffffffffffffa0\n 24704: u64 [sp + 0x58] = ra\n 24707: u64 [sp + 0x50] = s0\n 24710: u64 [sp + 0x48] = s1\n 24713: s0 = sp + 0x60\n 24716: sp = sp & 0xfffffffffffffff0\n 24719: s1 = a0\n 24721: a0 = a4 + 0x20\n 24724: u64 [sp + 0x18] = a0\n 24727: a0 = a0 <u a4\n 24730: a1 = a5 + a0\n 24733: u64 [sp + 0x10] = a1\n 24736: a1 = a1 <u a5\n 24739: a1 = a0 if a0 == 0\n 24742: a1 = a1 + a3\n 24745: u64 [sp] = a1\n 24747: a0 = a1 <u a3\n 24750: a0 = a0 + t0\n 24753: u64 [sp + 0x8] = a0\n 24756: u64 [sp + 56] = 0\n 24759: u64 [sp + 48] = 0\n 24762: u64 [sp + 32] = 0x1\n 24766: a1 = sp + 0x20\n 24769: u64 [sp + 40] = 0\n 24772: a0 = a4\n 24774: ra = 1184, jump @24\n      : @948 [@dyn 592] (gas: 9)\n 24780: a0 = u64 [sp + 0x10]\n 24783: u64 [s1 + 0x8] = a0\n 24786: a0 = u64 [sp + 0x18]\n 24789: u64 [s1] = a0\n 24791: a0 = u64 [sp]\n 24793: u64 [s1 + 0x10] = a0\n 24796: a0 = u64 [sp + 0x8]\n 24799: u64 [s1 + 0x18] = a0\n 24802: t0 = 1186, jump @2229\n      : @949 [@dyn 593] (gas: 1)\n 24809: ret\n      : @950 (gas: 1)\n 24811: trap\n      : @951 [@dyn 594] (gas: 4)\n 24812: u64 [s1 + 736] = 0\n 24816: i32 a0 = s1 + 0x2e0\n 24820: ecalli 19 // 'value_transferred'\n 24822: fallthrough\n      : @952 (gas: 9)\n 24823: a4 = s1 + 0x200\n 24827: a0 = u64 [a4 + 0xf0]\n 24831: a1 = u64 [a4 + 0xf8]\n 24835: a2 = u64 [a4 + 0xe8]\n 24839: a3 = u64 [a4 + 0xe0]\n 24843: a1 = a1 | a2\n 24846: a0 = a0 | a3\n 24849: a0 = a0 | a1\n 24852: jump @978 if a0 != 0\n      : @953 (gas: 3)\n 24856: a0 = i32 [0x2014c]\n 24861: a1 = 0x43\n 24864: jump @979 if a1 >=u a0\n      : @954 (gas: 4)\n 24868: a0 = s1 + 0x2c0\n 24872: ra = 0x4a6\n 24876: t0 = 0x484\n 24880: jump @2251\n      : @955 [@dyn 595] (gas: 37)\n 24884: a1 = s1 + 0x200\n 24888: a0 = u64 [a1 + 0xd8]\n 24892: u64 [s1 + 0x48] = a0\n 24895: a0 = u64 [a1 + 0xd0]\n 24899: u64 [s1 + 0x68] = a0\n 24902: a0 = u64 [a1 + 0xc8]\n 24906: u64 [s1 + 0x60] = a0\n 24909: a0 = u64 [a1 + 0xc0]\n 24913: u64 [s1 + 0x58] = a0\n 24916: a0 = sp + 0xffffffffffffffe0\n 24919: a0 = a0 & 0xffffffffffffffe0\n 24922: u64 [s1 + 0x70] = a0\n 24925: sp = a0\n 24927: i32 a0 = s1 + 0x300\n 24931: a1 = 0x24\n 24934: ecalli 4 // 'call_data_load'\n 24936: a4 = s1 + 0x300\n 24940: a3 = u64 [a4 + 0x18]\n 24943: a2 = u64 [a4 + 0x10]\n 24946: a1 = u64 [a4 + 0x8]\n 24949: a0 = u64 [a4]\n 24951: u64 [s1 + 0x20] = a3\n 24954: a4 = u64 [s1 + 0x70]\n 24957: u64 [a4 + 0x18] = a3\n 24960: u64 [s1 + 0x28] = a2\n 24963: u64 [a4 + 0x10] = a2\n 24966: u64 [s1 + 0x30] = a1\n 24969: u64 [a4 + 0x8] = a1\n 24972: u64 [s1 + 0x38] = a0\n 24975: u64 [a4] = a0\n 24977: a0 = 0x30160\n 24982: u64 [s1 + 0x78] = a0\n 24985: i32 a0 = a0 + 0\n 24987: u64 [s1 + 0x50] = a0\n 24990: ra = 0x4a8\n 24994: ecalli 6 // 'caller'\n 24996: fallthrough\n      : @956 [@dyn 596] (gas: 7)\n 24997: a2 = u64 [s1 + 0x78]\n 25000: a0 = u32 [a2 + 0x10]\n 25003: a1 = u64 [a2]\n 25005: a2 = u64 [a2 + 0x8]\n 25008: a0 = a0 | a1\n 25011: a0 = a0 | a2\n 25014: jump @981 if a0 == 0\n      : @957 (gas: 9)\n 25018: a0 = u64 [s1 + 0x68]\n 25021: a0 = a0 << 0x20\n 25024: a1 = a0 >> 0x20\n 25027: a0 = u64 [s1 + 0x60]\n 25030: a2 = u64 [s1 + 0x58]\n 25033: a0 = a0 | a2\n 25036: u64 [s1 + 0x18] = a1\n 25039: a0 = a0 | a1\n 25042: jump @987 if a0 == 0\n      : @958 (gas: 6)\n 25046: a0 = u64 [s1 + 0x50]\n 25049: ra = 0x4aa\n 25053: ecalli 6 // 'caller'\n 25055: a2 = u64 [s1 + 0x78]\n 25058: t0 = 0x4ac\n 25062: jump @2231\n      : @959 [@dyn 597] (gas: 2)\n 25066: a2 = u64 [s1 + 0x78]\n 25069: t0 = 1196, jump @2231\n      : @960 [@dyn 598] (gas: 7)\n 25076: u64 [s1 + 696] = 0\n 25080: u64 [s1 + 0x2b0] = a1\n 25084: u64 [s1 + 0x2a8] = a0\n 25088: a1 = s1 + 0x2a0\n 25092: u64 [s1 + 0x2a0] = a3\n 25096: a0 = 0\n 25098: ra = 1198, jump @24\n      : @961 [@dyn 599] (gas: 7)\n 25104: u64 [s1 + 664] = 0\n 25108: u64 [s1 + 656] = 0\n 25112: u64 [s1 + 640] = 0x1\n 25117: a0 = 0x20\n 25120: a1 = s1 + 0x280\n 25124: u64 [s1 + 648] = 0\n 25128: ra = 1200, jump @24\n      : @962 [@dyn 600] (gas: 2)\n 25134: a1 = i32 [0x20150]\n 25139: jump @964 if a1 >u 63\n      : @963 (gas: 2)\n 25143: u32 [0x20150] = 0x40\n 25149: fallthrough\n      : @964 (gas: 13)\n 25150: a0 = sp + 0xffffffffffffffe0\n 25153: a2 = a0 & 0xffffffffffffffe0\n 25156: u64 [s1 + 0x40] = a2\n 25159: sp = a2\n 25161: a0 = 0x20160\n 25166: i32 a0 = a0 + 0\n 25168: i32 a2 = a2 + 0\n 25170: a1 = 0x40\n 25173: ra = 0x4b2\n 25177: ecalli 11 // 'hash_keccak_256'\n 25179: a3 = u64 [s1 + 0x40]\n 25182: t0 = 0x4b4\n 25186: jump @2224\n      : @965 [@dyn 601] (gas: 2)\n 25190: a3 = u64 [s1 + 0x40]\n 25193: t0 = 1204, jump @2224\n      : @966 [@dyn 602] (gas: 8)\n 25200: a3 = u64 [s1 + 0x48]\n 25203: u64 [s1 + 0x238] = a3\n 25207: a3 = u64 [s1 + 0x68]\n 25210: u64 [s1 + 0x230] = a3\n 25214: a3 = u64 [s1 + 0x60]\n 25217: u64 [s1 + 0x228] = a3\n 25221: a3 = u64 [s1 + 0x58]\n 25224: t0 = 1206, jump @2306\n      : @967 [@dyn 603] (gas: 4)\n 25231: u64 [s1 + 0x240] = a4\n 25235: ra = 0x4b8\n 25239: t0 = 0x7c2\n 25243: jump @2373\n      : @968 [@dyn 604] (gas: 12)\n 25247: a0 = u64 [s1 + 0x278]\n 25251: a1 = u64 [s1 + 0x270]\n 25255: a2 = u64 [s1 + 0x268]\n 25259: a3 = u64 [s1 + 0x260]\n 25263: a4 = s1 + 0x300\n 25267: u64 [a4 + 0x38] = a0\n 25270: u64 [a4 + 0x30] = a1\n 25273: u64 [a4 + 0x28] = a2\n 25276: u64 [a4 + 0x20] = a3\n 25279: a0 = s1 + 0x320\n 25283: a1 = u64 [s1 + 0x70]\n 25286: ra = 1210, jump @28\n      : @969 [@dyn 605] (gas: 3)\n 25292: a0 = s1 + 0x200\n 25296: a1 = 0x40\n 25299: ra = 1212, jump @22\n      : @970 [@dyn 606] (gas: 39)\n 25305: a1 = s1 + 0x200\n 25309: a0 = u64 [a1 + 0x18]\n 25312: u64 [s1 + 0x68] = a0\n 25315: a0 = u64 [a1 + 0x10]\n 25318: u64 [s1 + 0x48] = a0\n 25321: a0 = u64 [a1 + 0x8]\n 25324: u64 [s1 + 0x40] = a0\n 25327: a0 = u64 [a1]\n 25329: u64 [s1 + 0x70] = a0\n 25332: a0 = u64 [s1 + 0x50]\n 25335: ecalli 6 // 'caller'\n 25337: a0 = u64 [s1 + 0x78]\n 25340: a1 = i32 [a0 + 0x10]\n 25343: u64 [s1 + 0x50] = a1\n 25346: a1 = u64 [a0]\n 25348: u64 [s1 + 0x10] = a1\n 25351: a0 = u64 [a0 + 0x8]\n 25354: u64 [s1 + 0x78] = a0\n 25357: a0 = u64 [s1 + 0x20]\n 25360: a4 = s1 + 0x100\n 25364: u64 [a4 + 0xb8] = a0\n 25368: a0 = u64 [s1 + 0x28]\n 25371: u64 [a4 + 0xb0] = a0\n 25375: a0 = u64 [s1 + 0x30]\n 25378: u64 [a4 + 0xa8] = a0\n 25382: a0 = u64 [s1 + 0x38]\n 25385: u64 [a4 + 0xa0] = a0\n 25389: a0 = u64 [s1 + 0x68]\n 25392: u64 [a4 + 0xd8] = a0\n 25396: a0 = u64 [s1 + 0x48]\n 25399: u64 [a4 + 0xd0] = a0\n 25403: a0 = u64 [s1 + 0x40]\n 25406: u64 [a4 + 0xc8] = a0\n 25410: a0 = s1 + 0x1e0\n 25414: a1 = s1 + 0x1c0\n 25418: a2 = s1 + 0x1a0\n 25422: a3 = u64 [s1 + 0x70]\n 25425: u64 [a4 + 0xc0] = a3\n 25429: ra = 1214, jump @558\n      : @971 [@dyn 607] (gas: 7)\n 25435: a4 = u64 [s1 + 0x40]\n 25438: a0 = u64 [s1 + 0x68]\n 25441: a0 = a0 | a4\n 25444: a3 = u64 [s1 + 0x48]\n 25447: a1 = u64 [s1 + 0x70]\n 25450: a1 = a1 | a3\n 25453: t0 = 1216, jump @2313\n      : @972 [@dyn 608] (gas: 1)\n 25460: jump @977 if a0 != 0\n      : @973 (gas: 34)\n 25464: t2 = a3\n 25466: a2 = s1 + 0x100\n 25470: a0 = u64 [a2 + 0xe8]\n 25474: a1 = u64 [a2 + 0xf8]\n 25478: u64 [s1 + 0x38] = a1\n 25481: t1 = u64 [s1 + 0x1e0]\n 25485: a3 = u64 [a2 + 0xf0]\n 25489: ra = a0 ^ a4\n 25492: a5 = a0 <u a4\n 25495: t0 = u64 [s1 + 0x70]\n 25498: a1 = t1 <u t0\n 25501: a5 = a1 if ra == 0\n 25504: a2 = a3 - t2\n 25507: ra = a2 - a5\n 25510: a2 = a2 <u a5\n 25513: u64 [s1 + 0x30] = a2\n 25516: a3 = a3 <u t2\n 25519: a5 = u64 [s1 + 0x68]\n 25522: a2 = u64 [s1 + 0x38]\n 25525: a5 = a2 - a5\n 25528: a5 = a5 - a3\n 25531: a2 = u64 [s1 + 0x30]\n 25534: a5 = a5 - a2\n 25537: a0 = a0 - a4\n 25540: a0 = a0 - a1\n 25543: a1 = t1 - t0\n 25546: a0 = a0 | a5\n 25549: a3 = a1 | ra\n 25552: a3 = a3 | a0\n 25555: a0 = a0 | ra\n 25558: a3 = a3 >> 0x20\n 25561: a0 = a0 << 0x20\n 25564: a0 = a0 | a3\n 25567: jump @977 if a0 != 0\n      : @974 (gas: 37)\n 25571: a0 = u64 [s1 + 0x78]\n 25574: a0 = reverse a0\n 25576: a2 = a0 >> 0x20\n 25579: a3 = u64 [s1 + 0x10]\n 25582: a3 = reverse a3\n 25584: a4 = a3 << 0x20\n 25587: a2 = a2 | a4\n 25590: a0 = a0 << 0x20\n 25593: a4 = u64 [s1 + 0x50]\n 25596: a4 = reverse a4\n 25598: a4 = a4 >> 0x20\n 25601: a4 = a4 | a0\n 25604: a0 = a3 >> 0x20\n 25607: u64 [s1 + 344] = 0\n 25611: a3 = u64 [s1 + 0x58]\n 25614: u64 [s1 + 0x140] = a3\n 25618: u64 [s1 + 376] = 0\n 25622: u64 [s1 + 0x160] = a4\n 25626: a3 = u64 [s1 + 0x60]\n 25629: u64 [s1 + 0x148] = a3\n 25633: u64 [s1 + 0x168] = a2\n 25637: a2 = u64 [0x20060]\n 25642: a3 = u64 [0x20068]\n 25647: a4 = u64 [0x20070]\n 25652: a5 = u64 [0x20078]\n 25657: u64 [s1 + 0x198] = a2\n 25661: u64 [s1 + 0x190] = a3\n 25665: u64 [s1 + 0x188] = a4\n 25669: u64 [s1 + 0x180] = a5\n 25673: a2 = u64 [s1 + 0x18]\n 25676: u64 [s1 + 0x150] = a2\n 25680: a2 = s1 + 0x180\n 25684: a3 = s1 + 0x160\n 25688: a4 = s1 + 0x140\n 25692: u64 [s1 + 0x170] = a0\n 25696: a0 = u64 [s1 + 0x70]\n 25699: ra = 1218, jump @32\n      : @975 [@dyn 609] (gas: 3)\n 25705: a0 = s1 + 0x120\n 25709: a1 = 0x40\n 25712: ra = 1220, jump @22\n      : @976 [@dyn 610] (gas: 13)\n 25718: a4 = s1 + 0x100\n 25722: a3 = u64 [a4 + 0x38]\n 25725: a1 = u64 [a4 + 0x30]\n 25728: a2 = u64 [a4 + 0x28]\n 25731: a0 = u64 [a4 + 0x20]\n 25734: a3 = a3 | a2\n 25737: a2 = a0 | a1\n 25740: a2 = a2 | a3\n 25743: a2 = a2 >> 0x20\n 25746: a1 = a1 | a3\n 25749: a1 = a1 << 0x20\n 25752: a1 = a1 | a2\n 25755: jump @993 if a1 == 0\n      : @977 (gas: 1)\n 25759: trap\n      : @978 (gas: 2)\n 25760: a1 = 0x20160\n 25765: jump @980\n      : @979 (gas: 2)\n 25767: a1 = 0x20160\n 25772: fallthrough\n      : @980 (gas: 7)\n 25773: i32 a1 = a1 + 0\n 25775: a0 = 0x1\n 25778: a2 = 0\n 25780: ra = 0x4c6\n 25784: ecalli 16 // 'seal_return'\n 25786: t0 = 0x4c8\n 25790: jump @2347\n      : @981 [@dyn 611] (gas: 1)\n 25794: t0 = 1224, jump @2347\n      : @982 [@dyn 612] (gas: 5)\n 25801: a0 = 0xe602df0500000000\n 25811: a1 = s1 + 0xa0\n 25815: u64 [s1 + 0xb8] = a0\n 25819: a0 = 0\n 25821: ra = 1226, jump @24\n      : @983 [@dyn 613] (gas: 7)\n 25827: u64 [s1 + 152] = 0\n 25831: u64 [s1 + 144] = 0\n 25835: u64 [s1 + 136] = 0\n 25839: a0 = 0x4\n 25842: a1 = s1 + 0x80\n 25846: u64 [s1 + 128] = 0\n 25850: ra = 1228, jump @24\n      : @984 [@dyn 614] (gas: 2)\n 25856: a1 = i32 [0x20150]\n 25861: jump @986 if a1 >u 63\n      : @985 (gas: 3)\n 25865: u32 [0x20150] = 0x40\n 25871: a1 = 0x20160\n 25876: jump @992\n      : @986 (gas: 2)\n 25878: a1 = 0x20160\n 25883: jump @992\n      : @987 (gas: 8)\n 25885: u64 [s1 + 240] = 0\n 25889: u64 [s1 + 232] = 0\n 25893: u64 [s1 + 224] = 0\n 25897: a0 = 0x94280d6200000000\n 25907: a1 = s1 + 0xe0\n 25911: u64 [s1 + 0xf8] = a0\n 25915: a0 = 0\n 25917: ra = 1230, jump @24\n      : @988 [@dyn 615] (gas: 7)\n 25923: u64 [s1 + 216] = 0\n 25927: u64 [s1 + 208] = 0\n 25931: u64 [s1 + 200] = 0\n 25935: a0 = 0x4\n 25938: a1 = s1 + 0xc0\n 25942: u64 [s1 + 192] = 0\n 25946: ra = 1232, jump @24\n      : @989 [@dyn 616] (gas: 2)\n 25952: a1 = i32 [0x20150]\n 25957: jump @991 if a1 >u 63\n      : @990 (gas: 3)\n 25961: u32 [0x20150] = 0x40\n 25967: a1 = 0x20160\n 25972: jump @992\n      : @991 (gas: 2)\n 25974: a1 = 0x20160\n 25979: fallthrough\n      : @992 (gas: 7)\n 25980: i32 a1 = a1 + 0\n 25982: a0 = 0x1\n 25985: a2 = 0x24\n 25988: ra = 0x4d2\n 25992: ecalli 16 // 'seal_return'\n 25994: t0 = 0x4d4\n 25998: jump @2370\n      : @993 [@dyn 617] (gas: 1)\n 26002: t0 = 1236, jump @2370\n      : @994 [@dyn 618] (gas: 4)\n 26009: a1 = s1 + 0x100\n 26013: u64 [s1 + 256] = 0x1\n 26018: u64 [s1 + 0x78] = a0\n 26021: ra = 1238, jump @24\n      : @995 [@dyn 619] (gas: 3)\n 26027: a1 = 0x20\n 26030: a0 = u64 [s1 + 0x78]\n 26033: ra = 1240, jump @37\n      : @996 [@dyn 620] (gas: 1)\n 26039: t0 = 1242, jump @2280\n      : @997 [@dyn 621] (gas: 3)\n 26046: ra = 0x4dc\n 26050: ecalli 16 // 'seal_return'\n 26052: fallthrough\n      : @998 [@dyn 622] (gas: 13)\n 26053: sp = sp + 0xffffffffffffff20\n 26057: u64 [sp + 0xd8] = ra\n 26061: u64 [sp + 0xd0] = s0\n 26065: u64 [sp + 0xc8] = s1\n 26069: s0 = sp + 0xe0\n 26073: sp = sp & 0xffffffffffffffe0\n 26076: u64 [sp + 152] = 0\n 26080: u64 [sp + 144] = 0\n 26084: u64 [sp + 136] = 0\n 26088: u64 [sp + 128] = 0\n 26092: i32 a0 = sp + 0x80\n 26096: ecalli 19 // 'value_transferred'\n 26098: fallthrough\n      : @999 (gas: 8)\n 26099: a0 = u64 [sp + 0x90]\n 26103: a1 = u64 [sp + 0x98]\n 26107: a2 = u64 [sp + 0x88]\n 26111: a3 = u64 [sp + 0x80]\n 26115: a1 = a1 | a2\n 26118: a0 = a0 | a3\n 26121: a0 = a0 | a1\n 26124: jump @1006 if a0 != 0\n      : @1000 (gas: 2)\n 26127: a0 = i32 [0x2014c]\n 26132: jump @1007 if a0 <=u 3\n      : @1001 (gas: 9)\n 26136: u64 [sp + 184] = 0\n 26140: u64 [sp + 176] = 0\n 26144: u64 [sp + 168] = 0\n 26148: u64 [sp + 160] = 0x2\n 26153: a0 = sp + 0x60\n 26156: a1 = sp + 0xa0\n 26160: ra = 0x4de\n 26164: t0 = 0x6\n 26167: jump @2259\n      : @1002 [@dyn 623] (gas: 11)\n 26171: a0 = u64 [sp + 0x78]\n 26174: u64 [sp + 0x18] = a0\n 26177: a0 = u64 [sp + 0x70]\n 26180: u64 [sp + 0x10] = a0\n 26183: a0 = u64 [sp + 0x68]\n 26186: u64 [sp + 0x8] = a0\n 26189: a0 = u64 [sp + 0x60]\n 26192: u64 [sp] = a0\n 26194: a0 = sp + 0x40\n 26197: a1 = 0x40\n 26200: ra = 1248, jump @22\n      : @1003 [@dyn 624] (gas: 5)\n 26206: a0 = u64 [sp + 0x58]\n 26209: a1 = u64 [sp + 0x50]\n 26212: a2 = u64 [sp + 0x48]\n 26215: s1 = u64 [sp + 0x40]\n 26218: t0 = 1250, jump @2243\n      : @1004 [@dyn 625] (gas: 1)\n 26225: jump @1009 if a0 == 0\n      : @1005 (gas: 1)\n 26228: trap\n      : @1006 (gas: 2)\n 26229: a1 = 0x20160\n 26234: jump @1008\n      : @1007 (gas: 2)\n 26236: a1 = 0x20160\n 26241: fallthrough\n      : @1008 (gas: 7)\n 26242: i32 a1 = a1 + 0\n 26244: a0 = 0x1\n 26247: a2 = 0\n 26249: ra = 0x4e4\n 26253: ecalli 16 // 'seal_return'\n 26255: t0 = 0x4e6\n 26259: jump @2284\n      : @1009 [@dyn 626] (gas: 1)\n 26263: t0 = 1254, jump @2284\n      : @1010 [@dyn 627] (gas: 1)\n 26270: ra = 1256, jump @24\n      : @1011 [@dyn 628] (gas: 3)\n 26276: a1 = 0x20\n 26279: a0 = s1\n 26281: ra = 1258, jump @37\n      : @1012 [@dyn 629] (gas: 1)\n 26287: t0 = 1260, jump @2280\n      : @1013 [@dyn 630] (gas: 4)\n 26294: ra = 0x4ee\n 26298: ecalli 16 // 'seal_return'\n 26300: t0 = 0x4f0\n 26304: jump @2343\n      : @1014 [@dyn 631] (gas: 1)\n 26308: t0 = 1264, jump @2343\n      : @1015 [@dyn 632] (gas: 7)\n 26315: u64 [s1 + 888] = 0\n 26319: u64 [s1 + 880] = 0\n 26323: u64 [s1 + 872] = 0\n 26327: u64 [s1 + 864] = 0\n 26331: i32 a0 = s1 + 0x360\n 26335: ecalli 19 // 'value_transferred'\n 26337: fallthrough\n      : @1016 (gas: 9)\n 26338: a4 = s1 + 0x300\n 26342: a0 = u64 [a4 + 0x70]\n 26345: a1 = u64 [a4 + 0x78]\n 26348: a2 = u64 [a4 + 0x68]\n 26351: a3 = u64 [a4 + 0x60]\n 26354: a1 = a1 | a2\n 26357: a0 = a0 | a3\n 26360: a0 = a0 | a1\n 26363: jump @1045 if a0 != 0\n      : @1017 (gas: 3)\n 26367: a0 = i32 [0x2014c]\n 26372: a1 = 0x63\n 26375: jump @1046 if a1 >=u a0\n      : @1018 (gas: 4)\n 26379: a0 = s1 + 0x340\n 26383: ra = 0x4f2\n 26387: t0 = 0x484\n 26391: jump @2251\n      : @1019 [@dyn 633] (gas: 12)\n 26395: a0 = u64 [s1 + 0x358]\n 26399: u64 [s1 + 0x60] = a0\n 26402: a0 = u64 [s1 + 0x350]\n 26406: u64 [s1 + 0x98] = a0\n 26410: a0 = u64 [s1 + 0x348]\n 26414: u64 [s1 + 0x90] = a0\n 26418: a0 = u64 [s1 + 0x340]\n 26422: u64 [s1 + 0x88] = a0\n 26426: a0 = s1 + 0x320\n 26430: ra = 0x4f4\n 26434: t0 = 0x48e\n 26438: jump @2329\n      : @1020 [@dyn 634] (gas: 12)\n 26442: a0 = u64 [s1 + 0x338]\n 26446: u64 [s1 + 0x50] = a0\n 26449: a0 = u64 [s1 + 0x330]\n 26453: u64 [s1 + 0x48] = a0\n 26456: a0 = u64 [s1 + 0x328]\n 26460: u64 [s1 + 0x40] = a0\n 26463: a0 = u64 [s1 + 0x320]\n 26467: u64 [s1 + 0x38] = a0\n 26470: a0 = s1 + 0x300\n 26474: ra = 0x4f6\n 26478: t0 = 0x49c\n 26482: jump @2251\n      : @1021 [@dyn 635] (gas: 21)\n 26486: a1 = s1 + 0x300\n 26490: a0 = u64 [a1 + 0x18]\n 26493: u64 [s1 + 0x80] = a0\n 26497: a0 = u64 [a1 + 0x10]\n 26500: u64 [s1 + 0x78] = a0\n 26503: a0 = u64 [a1 + 0x8]\n 26506: u64 [s1 + 0x68] = a0\n 26509: a0 = u64 [a1]\n 26511: u64 [s1 + 0x70] = a0\n 26514: a0 = u64 [s1 + 0x98]\n 26518: a0 = a0 << 0x20\n 26521: a0 = a0 >> 0x20\n 26524: u64 [s1 + 760] = 0\n 26528: u64 [s1 + 0x2f0] = a0\n 26532: a0 = u64 [s1 + 0x90]\n 26536: u64 [s1 + 0x2e8] = a0\n 26540: a1 = s1 + 0x2e0\n 26544: a0 = u64 [s1 + 0x88]\n 26548: u64 [s1 + 0x2e0] = a0\n 26552: a0 = 0\n 26554: ra = 1272, jump @24\n      : @1022 [@dyn 636] (gas: 7)\n 26560: u64 [s1 + 728] = 0\n 26564: u64 [s1 + 720] = 0\n 26568: u64 [s1 + 704] = 0x1\n 26573: a0 = 0x20\n 26576: a1 = s1 + 0x2c0\n 26580: u64 [s1 + 712] = 0\n 26584: ra = 1274, jump @24\n      : @1023 [@dyn 637] (gas: 9)\n 26590: a0 = 0x30160\n 26595: u64 [s1 + 0x58] = a0\n 26598: i32 a0 = a0 + 0\n 26600: u64 [s1 + 0x10] = a0\n 26603: ra = 0x4fc\n 26607: ecalli 6 // 'caller'\n 26609: a2 = u64 [s1 + 0x58]\n 26612: t0 = 0x4fe\n 26616: jump @2338\n      : @1024 [@dyn 638] (gas: 2)\n 26620: a2 = u64 [s1 + 0x58]\n 26623: t0 = 1278, jump @2338\n      : @1025 [@dyn 639] (gas: 12)\n 26630: a5 = 0x20150\n 26635: a3 = a3 | a4\n 26638: u64 [s1 + 0x30] = a3\n 26641: a0 = a0 << 0x20\n 26644: a2 = reverse a2\n 26646: a3 = i32 [0x20150]\n 26651: a2 = a2 >> 0x20\n 26654: a0 = a0 | a2\n 26657: u64 [s1 + 0x28] = a0\n 26660: a1 = a1 >> 0x20\n 26663: u64 [s1 + 0x20] = a1\n 26666: jump @1027 if a3 >u 63\n      : @1026 (gas: 4)\n 26670: u32 [0x20150] = 0x40\n 26676: u64 [s1 + 0x8] = a5\n 26679: t0 = 0x500\n 26683: jump @2282\n      : @1027 (gas: 2)\n 26687: u64 [s1 + 0x8] = a5\n 26690: t0 = 1280, jump @2282\n      : @1028 [@dyn 640] (gas: 10)\n 26697: a0 = 0x20160\n 26702: i32 a0 = a0 + 0\n 26704: i32 a2 = a2 + 0\n 26706: a1 = 0x40\n 26709: u64 [s1] = a0\n 26711: ra = 0x502\n 26715: ecalli 11 // 'hash_keccak_256'\n 26717: a3 = u64 [s1 + 0x18]\n 26720: t0 = 0x504\n 26724: jump @2224\n      : @1029 [@dyn 641] (gas: 2)\n 26728: a3 = u64 [s1 + 0x18]\n 26731: t0 = 1284, jump @2224\n      : @1030 [@dyn 642] (gas: 17)\n 26738: u64 [s1 + 632] = 0\n 26742: a3 = u64 [s1 + 0x20]\n 26745: u64 [s1 + 0x270] = a3\n 26749: a3 = u64 [s1 + 0x30]\n 26752: u64 [s1 + 0x268] = a3\n 26756: a3 = u64 [s1 + 0x28]\n 26759: u64 [s1 + 0x260] = a3\n 26763: u64 [s1 + 0x298] = a2\n 26767: u64 [s1 + 0x290] = a1\n 26771: u64 [s1 + 0x288] = a0\n 26775: a0 = s1 + 0x2a0\n 26779: a1 = s1 + 0x280\n 26783: a2 = s1 + 0x260\n 26787: u64 [s1 + 0x280] = a4\n 26791: ra = 0x506\n 26795: t0 = 0x7c2\n 26799: jump @2373\n      : @1031 [@dyn 643] (gas: 14)\n 26803: a0 = u64 [s1 + 0x2b8]\n 26807: a1 = u64 [s1 + 0x2b0]\n 26811: a2 = u64 [s1 + 0x2a8]\n 26815: a3 = u64 [s1 + 0x2a0]\n 26819: a4 = s1 + 0x300\n 26823: u64 [a4 + 0x98] = a0\n 26827: u64 [a4 + 0x90] = a1\n 26831: u64 [a4 + 0x88] = a2\n 26835: u64 [a4 + 0x80] = a3\n 26839: a0 = s1 + 0x240\n 26843: a1 = s1 + 0x380\n 26847: ra = 0x508\n 26851: t0 = 0x6\n 26854: jump @2259\n      : @1032 [@dyn 644] (gas: 9)\n 26858: a0 = s1 + 0x200\n 26862: a4 = u64 [a0 + 0x58]\n 26865: a5 = u64 [a0 + 0x50]\n 26868: a3 = u64 [a0 + 0x48]\n 26871: a2 = u64 [a0 + 0x40]\n 26874: a0 = a3 & a4\n 26877: a1 = a2 & a5\n 26880: a0 = a0 & a1\n 26883: jump @1037 if a0 == 4294967295\n      : @1033 (gas: 20)\n 26888: t2 = u64 [s1 + 0x70]\n 26891: u64 [s1 + 0x30] = a2\n 26894: t0 = a2 <u t2\n 26897: ra = u64 [s1 + 0x68]\n 26900: a2 = a3 ^ ra\n 26903: u64 [s1 + 0x28] = a3\n 26906: a1 = a3 <u ra\n 26909: a1 = t0 if a2 == 0\n 26912: a2 = u64 [s1 + 0x78]\n 26915: a0 = a5 <u a2\n 26918: t1 = u64 [s1 + 0x80]\n 26922: a3 = a4 ^ t1\n 26925: u64 [s1 + 0x20] = a4\n 26928: a4 = a4 <u t1\n 26931: a4 = a0 if a3 == 0\n 26934: u64 [s1 + 0x18] = a5\n 26937: a5 = a5 ^ a2\n 26940: a3 = a3 | a5\n 26943: a4 = a1 if a3 == 0\n 26946: jump @1048 if a4 != 0\n      : @1034 (gas: 23)\n 26950: a3 = u64 [s1 + 0x18]\n 26953: a3 = a3 - a2\n 26956: a2 = u64 [s1 + 0x20]\n 26959: a4 = a2 - t1\n 26962: a4 = a4 - a0\n 26965: a2 = a3 <u a1\n 26968: a4 = a4 - a2\n 26971: u64 [s1 + 0x20] = a4\n 26974: a3 = a3 - a1\n 26977: u64 [s1 + 0x18] = a3\n 26980: a0 = u64 [s1 + 0x28]\n 26983: a1 = a0 - ra\n 26986: a0 = a1 - t0\n 26989: u64 [s1 + 0x28] = a0\n 26992: a0 = u64 [s1 + 0x30]\n 26995: a0 = a0 - t2\n 26998: u64 [s1 + 0x30] = a0\n 27001: a0 = u64 [s1 + 0x10]\n 27004: ra = 0x50a\n 27008: ecalli 6 // 'caller'\n 27010: a2 = u64 [s1 + 0x58]\n 27013: t0 = 0x50c\n 27017: jump @2231\n      : @1035 [@dyn 645] (gas: 2)\n 27021: a2 = u64 [s1 + 0x58]\n 27024: t0 = 1292, jump @2231\n      : @1036 [@dyn 646] (gas: 26)\n 27031: a2 = u64 [s1 + 0x18]\n 27034: a4 = s1 + 0x100\n 27038: u64 [a4 + 0xf0] = a2\n 27042: a2 = u64 [s1 + 0x28]\n 27045: u64 [a4 + 0xe8] = a2\n 27049: a2 = u64 [s1 + 0x30]\n 27052: u64 [a4 + 0xe0] = a2\n 27056: u64 [s1 + 536] = 0\n 27060: a2 = u64 [s1 + 0x60]\n 27063: a5 = s1 + 0x200\n 27067: u64 [a5 + 0x38] = a2\n 27070: a2 = u64 [s1 + 0x98]\n 27074: u64 [a5 + 0x30] = a2\n 27077: a2 = u64 [s1 + 0x90]\n 27081: u64 [a5 + 0x28] = a2\n 27084: a2 = u64 [s1 + 0x88]\n 27088: u64 [a5 + 0x20] = a2\n 27091: u64 [a5 + 0x10] = a1\n 27094: a1 = u64 [s1 + 0x20]\n 27097: u64 [a4 + 0xf8] = a1\n 27101: u64 [a5 + 0x8] = a0\n 27104: a0 = s1 + 0x220\n 27108: a1 = s1 + 0x200\n 27112: a2 = s1 + 0x1e0\n 27116: u64 [a5] = a3\n 27118: ra = 1294, jump @1773\n      : @1037 [@dyn 647] (gas: 29)\n 27124: a0 = u64 [s1 + 0x70]\n 27127: a4 = s1 + 0x100\n 27131: u64 [a4] = a0\n 27133: a0 = u64 [s1 + 0x38]\n 27136: u64 [a4 + 0x20] = a0\n 27139: a0 = u64 [s1 + 0x88]\n 27143: u64 [a4 + 0x40] = a0\n 27146: a0 = u64 [s1 + 0x68]\n 27149: u64 [a4 + 0x8] = a0\n 27152: a0 = u64 [s1 + 0x40]\n 27155: u64 [a4 + 0x28] = a0\n 27158: a0 = u64 [s1 + 0x90]\n 27162: u64 [a4 + 0x48] = a0\n 27165: a0 = u64 [s1 + 0x78]\n 27168: u64 [a4 + 0x10] = a0\n 27171: a0 = u64 [s1 + 0x48]\n 27174: u64 [a4 + 0x30] = a0\n 27177: a0 = u64 [s1 + 0x98]\n 27181: u64 [a4 + 0x50] = a0\n 27184: a0 = u64 [s1 + 0x80]\n 27188: u64 [a4 + 0x18] = a0\n 27191: a0 = u64 [s1 + 0x50]\n 27194: u64 [a4 + 0x38] = a0\n 27197: a0 = s1 + 0x140\n 27201: a1 = s1 + 0x120\n 27205: a2 = s1 + 0x100\n 27209: a3 = u64 [s1 + 0x60]\n 27212: u64 [a4 + 0x58] = a3\n 27215: ra = 1296, jump @1669\n      : @1038 [@dyn 648] (gas: 3)\n 27221: a0 = s1 + 0xe0\n 27225: a1 = 0x40\n 27228: ra = 1298, jump @22\n      : @1039 [@dyn 649] (gas: 15)\n 27234: a1 = u64 [s1 + 0xf8]\n 27238: u64 [s1 + 0x98] = a1\n 27242: a0 = u64 [s1 + 0xf0]\n 27246: u64 [s1 + 0x90] = a0\n 27250: a2 = u64 [s1 + 0xe8]\n 27254: u64 [s1 + 0x88] = a2\n 27258: a3 = u64 [s1 + 0xe0]\n 27262: u64 [s1 + 0x80] = a3\n 27266: u64 [s1 + 0xb8] = a1\n 27270: u64 [s1 + 0xb0] = a0\n 27274: u64 [s1 + 0xa8] = a2\n 27278: a0 = s1 + 0xc0\n 27282: a1 = s1 + 0xa0\n 27286: u64 [s1 + 0xa0] = a3\n 27290: ra = 1300, jump @946\n      : @1040 [@dyn 650] (gas: 7)\n 27296: a4 = u64 [s1 + 0x88]\n 27300: a2 = u64 [s1 + 0x80]\n 27304: a0 = u64 [s1 + 0x98]\n 27308: a0 = a0 | a4\n 27311: a3 = u64 [s1 + 0x90]\n 27315: a1 = a2 | a3\n 27318: t0 = 1302, jump @2313\n      : @1041 [@dyn 651] (gas: 1)\n 27325: jump @1044 if a0 != 0\n      : @1042 (gas: 25)\n 27328: t0 = a3\n 27330: a0 = u64 [s1 + 0xc8]\n 27334: a1 = u64 [s1 + 0xd8]\n 27338: u64 [s1 + 0x78] = a1\n 27341: t1 = u64 [s1 + 0xc0]\n 27345: a3 = u64 [s1 + 0xd0]\n 27349: t2 = a0 ^ a4\n 27352: a5 = a0 <u a4\n 27355: ra = t1 <u a2\n 27358: a5 = ra if t2 == 0\n 27361: a1 = a3 - t0\n 27364: t2 = a1 - a5\n 27367: a1 = a1 <u a5\n 27370: u64 [s1 + 0x70] = a1\n 27373: a3 = a3 <u t0\n 27376: a5 = u64 [s1 + 0x98]\n 27380: a1 = u64 [s1 + 0x78]\n 27383: a5 = a1 - a5\n 27386: a5 = a5 - a3\n 27389: a1 = u64 [s1 + 0x70]\n 27392: a5 = a5 - a1\n 27395: a0 = a0 - a4\n 27398: a0 = a0 - ra\n 27401: a1 = t1 - a2\n 27404: t0 = 1304, jump @2220\n      : @1043 [@dyn 652] (gas: 1)\n 27411: jump @1057 if a0 == 0\n      : @1044 (gas: 1)\n 27415: trap\n      : @1045 (gas: 2)\n 27416: a1 = 0x20160\n 27421: jump @1047\n      : @1046 (gas: 2)\n 27423: a1 = 0x20160\n 27428: fallthrough\n      : @1047 (gas: 5)\n 27429: i32 a1 = a1 + 0\n 27431: a0 = 0x1\n 27434: a2 = 0\n 27436: ecalli 16 // 'seal_return'\n 27438: fallthrough\n      : @1048 (gas: 8)\n 27439: u64 [s1 + 464] = 0\n 27443: u64 [s1 + 456] = 0\n 27447: u64 [s1 + 448] = 0\n 27451: a0 = 0xfb8f41b200000000\n 27461: a1 = s1 + 0x1c0\n 27465: u64 [s1 + 0x1d8] = a0\n 27469: a0 = 0\n 27471: ra = 1306, jump @24\n      : @1049 [@dyn 653] (gas: 6)\n 27477: a0 = u64 [s1 + 0x10]\n 27480: ra = 0x51c\n 27484: ecalli 6 // 'caller'\n 27486: a2 = u64 [s1 + 0x58]\n 27489: t0 = 0x51e\n 27493: jump @2242\n      : @1050 [@dyn 654] (gas: 2)\n 27497: a2 = u64 [s1 + 0x58]\n 27500: t0 = 1310, jump @2242\n      : @1051 [@dyn 655] (gas: 4)\n 27507: a0 = 0x4\n 27510: a1 = s1 + 0x1a0\n 27514: u64 [s1 + 0x1a0] = a3\n 27518: ra = 1312, jump @24\n      : @1052 [@dyn 656] (gas: 11)\n 27524: a0 = u64 [s1 + 0x20]\n 27527: u64 [s1 + 0x198] = a0\n 27531: a0 = u64 [s1 + 0x18]\n 27534: u64 [s1 + 0x190] = a0\n 27538: a0 = u64 [s1 + 0x28]\n 27541: u64 [s1 + 0x188] = a0\n 27545: a0 = 0x24\n 27548: a1 = s1 + 0x180\n 27552: a2 = u64 [s1 + 0x30]\n 27555: u64 [s1 + 0x180] = a2\n 27559: ra = 1314, jump @24\n      : @1053 [@dyn 657] (gas: 12)\n 27565: a0 = u64 [s1 + 0x80]\n 27569: a3 = s1 + 0x100\n 27573: u64 [a3 + 0x78] = a0\n 27576: a0 = u64 [s1 + 0x78]\n 27579: u64 [a3 + 0x70] = a0\n 27582: a0 = u64 [s1 + 0x68]\n 27585: u64 [a3 + 0x68] = a0\n 27588: a0 = 0x44\n 27591: a1 = s1 + 0x160\n 27595: a2 = u64 [s1 + 0x70]\n 27598: u64 [a3 + 0x60] = a2\n 27601: ra = 1316, jump @24\n      : @1054 [@dyn 658] (gas: 3)\n 27607: a0 = u64 [s1 + 0x8]\n 27610: a0 = i32 [a0]\n 27612: jump @1056 if a0 >u 127\n      : @1055 (gas: 3)\n 27616: a1 = u64 [s1 + 0x8]\n 27619: u32 [a1 + 0] = 0x80\n 27623: fallthrough\n      : @1056 (gas: 5)\n 27624: a0 = 0x1\n 27627: a2 = 0x64\n 27630: a1 = u64 [s1]\n 27632: ecalli 16 // 'seal_return'\n 27634: fallthrough\n      : @1057 (gas: 3)\n 27635: a0 = a2\n 27637: u64 [s1 + 0x98] = a1\n 27641: ra = 1318, jump @37\n      : @1058 [@dyn 659] (gas: 6)\n 27647: i32 a1 = a0 + 0\n 27649: a2 = i32 [s1 + 0x98]\n 27653: a0 = 0\n 27655: ra = 0x528\n 27659: ecalli 16 // 'seal_return'\n 27661: fallthrough\n      : @1059 [@dyn 660] (gas: 13)\n 27662: sp = sp + 0xffffffffffffff80\n 27665: u64 [sp + 0x78] = ra\n 27668: u64 [sp + 0x70] = s0\n 27671: u64 [sp + 0x68] = s1\n 27674: s0 = sp + 0x80\n 27678: sp = sp & 0xffffffffffffffe0\n 27681: u64 [sp + 88] = 0\n 27684: u64 [sp + 80] = 0\n 27687: u64 [sp + 72] = 0\n 27690: u64 [sp + 64] = 0\n 27693: i32 a0 = sp + 0x40\n 27696: ecalli 19 // 'value_transferred'\n 27698: fallthrough\n      : @1060 (gas: 8)\n 27699: a0 = u64 [sp + 0x50]\n 27702: a1 = u64 [sp + 0x58]\n 27705: a2 = u64 [sp + 0x48]\n 27708: a3 = u64 [sp + 0x40]\n 27711: a1 = a1 | a2\n 27714: a0 = a0 | a3\n 27717: a0 = a0 | a1\n 27720: jump @1066 if a0 != 0\n      : @1061 (gas: 2)\n 27723: a0 = i32 [0x2014c]\n 27728: jump @1067 if a0 <=u 3\n      : @1062 (gas: 3)\n 27732: a0 = sp + 0x20\n 27735: a1 = 0x40\n 27738: ra = 1322, jump @22\n      : @1063 [@dyn 661] (gas: 5)\n 27744: a0 = u64 [sp + 0x38]\n 27747: a1 = u64 [sp + 0x30]\n 27750: a2 = u64 [sp + 0x28]\n 27753: s1 = u64 [sp + 0x20]\n 27756: t0 = 1324, jump @2243\n      : @1064 [@dyn 662] (gas: 1)\n 27763: jump @1069 if a0 == 0\n      : @1065 (gas: 1)\n 27766: trap\n      : @1066 (gas: 2)\n 27767: a1 = 0x20160\n 27772: jump @1068\n      : @1067 (gas: 2)\n 27774: a1 = 0x20160\n 27779: fallthrough\n      : @1068 (gas: 5)\n 27780: i32 a1 = a1 + 0\n 27782: a0 = 0x1\n 27785: a2 = 0\n 27787: ecalli 16 // 'seal_return'\n 27789: fallthrough\n      : @1069 (gas: 7)\n 27790: u64 [sp + 24] = 0\n 27793: u64 [sp + 16] = 0\n 27796: u64 [sp + 8] = 0\n 27799: a1 = sp\n 27801: u64 [sp + 0] = 0x12\n 27804: a0 = s1\n 27806: ra = 1326, jump @24\n      : @1070 [@dyn 663] (gas: 3)\n 27812: a1 = 0x20\n 27815: a0 = s1\n 27817: ra = 1328, jump @37\n      : @1071 [@dyn 664] (gas: 1)\n 27823: t0 = 1330, jump @2280\n      : @1072 [@dyn 665] (gas: 3)\n 27830: ra = 0x534\n 27834: ecalli 16 // 'seal_return'\n 27836: fallthrough\n      : @1073 [@dyn 666] (gas: 9)\n 27837: sp = sp + 0xfffffffffffffc00\n 27841: a0 = sp + 0x300\n 27845: u64 [a0 + 0xf8] = ra\n 27849: u64 [a0 + 0xf0] = s0\n 27853: u64 [a0 + 0xe8] = s1\n 27857: s0 = sp + 0x400\n 27861: sp = sp & 0xffffffffffffffe0\n 27864: s1 = sp\n 27866: t0 = 1334, jump @2358\n      : @1074 [@dyn 667] (gas: 4)\n 27873: u64 [s1 + 896] = 0\n 27877: i32 a0 = s1 + 0x380\n 27881: ecalli 19 // 'value_transferred'\n 27883: fallthrough\n      : @1075 (gas: 9)\n 27884: a4 = s1 + 0x300\n 27888: a0 = u64 [a4 + 0x90]\n 27892: a1 = u64 [a4 + 0x98]\n 27896: a2 = u64 [a4 + 0x88]\n 27900: a3 = u64 [a4 + 0x80]\n 27904: a1 = a1 | a2\n 27907: a0 = a0 | a3\n 27910: a0 = a0 | a1\n 27913: jump @1120 if a0 != 0\n      : @1076 (gas: 3)\n 27917: a0 = i32 [0x2014c]\n 27922: a1 = 0x43\n 27925: jump @1121 if a1 >=u a0\n      : @1077 (gas: 4)\n 27929: a0 = s1 + 0x360\n 27933: ra = 0x538\n 27937: t0 = 0x484\n 27941: jump @2251\n      : @1078 [@dyn 668] (gas: 27)\n 27945: a0 = u64 [s1 + 0x360]\n 27949: u64 [s1 + 0x78] = a0\n 27952: a0 = u64 [s1 + 0x368]\n 27956: u64 [s1 + 0x70] = a0\n 27959: a0 = u32 [s1 + 0x370]\n 27963: u64 [s1 + 0x68] = a0\n 27966: i32 a0 = s1 + 0x3a0\n 27970: a1 = 0x24\n 27973: ecalli 4 // 'call_data_load'\n 27975: a0 = u64 [s1 + 0x3b8]\n 27979: u64 [s1 + 0x98] = a0\n 27983: a0 = u64 [s1 + 0x3b0]\n 27987: u64 [s1 + 0x90] = a0\n 27991: a0 = u64 [s1 + 0x3a8]\n 27995: u64 [s1 + 0x88] = a0\n 27999: a0 = u64 [s1 + 0x3a0]\n 28003: u64 [s1 + 0x80] = a0\n 28007: u64 [s1 + 856] = 0\n 28011: a0 = u64 [s1 + 0x68]\n 28014: u64 [s1 + 0x350] = a0\n 28018: a0 = u64 [s1 + 0x70]\n 28021: u64 [s1 + 0x348] = a0\n 28025: a1 = s1 + 0x340\n 28029: a0 = u64 [s1 + 0x78]\n 28032: u64 [s1 + 0x340] = a0\n 28036: a0 = 0\n 28038: ra = 1338, jump @24\n      : @1079 [@dyn 669] (gas: 7)\n 28044: u64 [s1 + 824] = 0\n 28048: u64 [s1 + 816] = 0\n 28052: u64 [s1 + 800] = 0x9\n 28057: a0 = 0x20\n 28060: a1 = s1 + 0x320\n 28064: u64 [s1 + 808] = 0\n 28068: ra = 1340, jump @24\n      : @1080 [@dyn 670] (gas: 7)\n 28074: a0 = sp + 0xffffffffffffffe0\n 28077: a0 = a0 & 0xffffffffffffffe0\n 28080: u64 [s1 + 0x78] = a0\n 28083: sp = a0\n 28085: a2 = 0x20150\n 28090: a0 = i32 [0x20150]\n 28095: jump @1082 if a0 >u 63\n      : @1081 (gas: 2)\n 28099: u32 [0x20150] = 0x40\n 28105: fallthrough\n      : @1082 (gas: 15)\n 28106: u64 [s1 + 0x48] = a2\n 28109: a0 = sp + 0xffffffffffffffe0\n 28112: a2 = a0 & 0xffffffffffffffe0\n 28115: u64 [s1 + 0x70] = a2\n 28118: sp = a2\n 28120: a0 = 0x20160\n 28125: i32 a0 = a0 + 0\n 28127: i32 a2 = a2 + 0\n 28129: a1 = 0x40\n 28132: u64 [s1 + 0x40] = a0\n 28135: ra = 0x53e\n 28139: ecalli 11 // 'hash_keccak_256'\n 28141: a3 = u64 [s1 + 0x70]\n 28144: t0 = 0x540\n 28148: jump @2213\n      : @1083 [@dyn 671] (gas: 2)\n 28151: a3 = u64 [s1 + 0x70]\n 28154: t0 = 1344, jump @2213\n      : @1084 [@dyn 672] (gas: 20)\n 28160: u64 [s1 + 0x50] = a3\n 28163: a4 = u64 [s1 + 0x78]\n 28166: u64 [a4 + 0x18] = a3\n 28169: u64 [s1 + 0x58] = a2\n 28172: u64 [a4 + 0x10] = a2\n 28175: u64 [s1 + 0x60] = a1\n 28178: u64 [a4 + 0x8] = a1\n 28181: u64 [s1 + 0x68] = a0\n 28184: u64 [a4] = a0\n 28186: a0 = u64 [s1 + 0x98]\n 28190: u64 [s1 + 0x2f8] = a0\n 28194: a0 = u64 [s1 + 0x90]\n 28198: u64 [s1 + 0x2f0] = a0\n 28202: a0 = u64 [s1 + 0x88]\n 28206: u64 [s1 + 0x2e8] = a0\n 28210: a0 = s1 + 0x300\n 28214: a1 = s1 + 0x2e0\n 28218: a2 = u64 [s1 + 0x80]\n 28222: u64 [s1 + 0x2e0] = a2\n 28226: ra = 1346, jump @1708\n      : @1085 [@dyn 673] (gas: 5)\n 28232: a0 = s1 + 0x2c0\n 28236: a1 = u64 [s1 + 0x78]\n 28239: ra = 0x544\n 28243: t0 = 0x6\n 28246: jump @2259\n      : @1086 [@dyn 674] (gas: 1)\n 28250: t0 = 1350, jump @2296\n      : @1087 [@dyn 675] (gas: 3)\n 28257: u64 [s1 + 0x78] = a2\n 28260: u64 [s1 + 0x70] = a3\n 28263: jump @1092 if a1 != 0\n      : @1088 (gas: 1)\n 28266: t0 = 1352, jump @2321\n      : @1089 [@dyn 676] (gas: 3)\n 28273: u64 [s1 + 0x30] = a4\n 28276: u64 [s1 + 0x28] = a5\n 28279: ra = 1354, jump @1835\n      : @1090 [@dyn 677] (gas: 20)\n 28285: ra = u64 [s1 + 0x2a8]\n 28289: a2 = u64 [s1 + 0x2b8]\n 28293: t0 = u64 [s1 + 0x2a0]\n 28297: a4 = u64 [s1 + 0x2b0]\n 28301: a1 = u64 [s1 + 0x78]\n 28304: a0 = a1 ^ ra\n 28307: a5 = a1 <u ra\n 28310: a1 = u64 [s1 + 0x70]\n 28313: t1 = a1 <u t0\n 28316: a5 = t1 if a0 == 0\n 28319: a1 = u64 [s1 + 0x28]\n 28322: t2 = a1 <u a4\n 28325: a0 = u64 [s1 + 0x30]\n 28328: a3 = a0 ^ a2\n 28331: a0 = a0 <u a2\n 28334: a0 = t2 if a3 == 0\n 28337: a1 = a1 ^ a4\n 28340: a1 = a1 | a3\n 28343: a0 = a5 if a1 == 0\n 28346: jump @1110 if a0 == 0\n      : @1091 (gas: 3)\n 28350: ra = 0x54c\n 28354: t0 = 0x28e\n 28358: jump @2232\n      : @1092 [@dyn 678] (gas: 5)\n 28362: a3 = 0\n 28364: a2 = 0\n 28366: t2 = 0\n 28368: u64 [s1 + 56] = 0\n 28371: fallthrough\n      : @1093 (gas: 5)\n 28372: a1 = u64 [s1 + 0x68]\n 28375: t0 = u64 [s1 + 0x60]\n 28378: t1 = u64 [s1 + 0x58]\n 28381: ra = u64 [s1 + 0x50]\n 28384: fallthrough\n      : @1094 (gas: 23)\n 28385: a0 = u64 [s1 + 0x70]\n 28388: u64 [s1 + 0x160] = a0\n 28392: u64 [s1 + 0x180] = a3\n 28396: a3 = u64 [s1 + 0x80]\n 28400: u64 [s1 + 0x1a0] = a3\n 28404: u64 [s1 + 0x1c0] = a1\n 28408: a3 = u64 [s1 + 0x78]\n 28411: u64 [s1 + 0x168] = a3\n 28415: u64 [s1 + 0x188] = a2\n 28419: a2 = u64 [s1 + 0x88]\n 28423: u64 [s1 + 0x1a8] = a2\n 28427: u64 [s1 + 0x1c8] = t0\n 28431: u64 [s1 + 0x170] = a5\n 28435: u64 [s1 + 0x190] = t2\n 28439: a1 = u64 [s1 + 0x90]\n 28443: u64 [s1 + 0x1b0] = a1\n 28447: u64 [s1 + 0x1d0] = t1\n 28451: u64 [s1 + 0x178] = a4\n 28455: a0 = u64 [s1 + 0x38]\n 28458: u64 [s1 + 0x198] = a0\n 28462: a0 = u64 [s1 + 0x98]\n 28466: u64 [s1 + 0x1b8] = a0\n 28470: t0 = 1358, jump @2363\n      : @1095 [@dyn 679] (gas: 2)\n 28477: u64 [s1 + 0x1d8] = ra\n 28481: ra = 1360, jump @1858\n      : @1096 [@dyn 680] (gas: 1)\n 28487: t0 = 1362, jump @2340\n      : @1097 [@dyn 681] (gas: 1)\n 28494: jump @1099 if a4 != 0\n      : @1098 (gas: 5)\n 28497: u64 [s1 + 128] = 0\n 28501: u64 [s1 + 136] = 0\n 28505: u64 [s1 + 152] = 0\n 28509: u64 [s1 + 144] = 0\n 28513: jump @1106\n      : @1099 (gas: 1)\n 28516: t0 = 1364, jump @2319\n      : @1100 [@dyn 682] (gas: 1)\n 28523: ra = 1366, jump @764\n      : @1101 [@dyn 683] (gas: 24)\n 28529: a2 = s1 + 0x100\n 28533: a0 = u64 [a2 + 0x58]\n 28536: u64 [s1 + 0x90] = a0\n 28540: a0 = u64 [a2 + 0x50]\n 28543: u64 [s1 + 0x88] = a0\n 28547: a0 = u64 [a2 + 0x48]\n 28550: u64 [s1 + 0x78] = a0\n 28553: a0 = u64 [a2 + 0x40]\n 28556: u64 [s1 + 0x80] = a0\n 28560: a0 = sp + 0xffffffffffffffe0\n 28563: a0 = a0 & 0xffffffffffffffe0\n 28566: u64 [s1 + 0x98] = a0\n 28570: sp = a0\n 28572: a0 = u64 [s1 + 0x50]\n 28575: u64 [a2 + 0x18] = a0\n 28578: a0 = u64 [s1 + 0x58]\n 28581: u64 [a2 + 0x10] = a0\n 28584: a0 = u64 [s1 + 0x60]\n 28587: u64 [a2 + 0x8] = a0\n 28590: a1 = s1 + 0x100\n 28594: a0 = u64 [s1 + 0x68]\n 28597: u64 [a2] = a0\n 28599: a0 = 0\n 28601: ra = 1368, jump @24\n      : @1102 [@dyn 684] (gas: 3)\n 28607: a2 = u64 [s1 + 0x48]\n 28610: a0 = i32 [a2]\n 28612: jump @1104 if a0 >u 31\n      : @1103 (gas: 2)\n 28616: u32 [a2 + 0] = 0x20\n 28619: fallthrough\n      : @1104 (gas: 44)\n 28620: a0 = sp + 0xffffffffffffffe0\n 28623: a0 = a0 & 0xffffffffffffffe0\n 28626: u64 [s1 + 0x70] = a0\n 28629: sp = a0\n 28631: i32 a2 = a0 + 0\n 28633: a1 = 0x20\n 28636: a0 = u64 [s1 + 0x40]\n 28639: ecalli 11 // 'hash_keccak_256'\n 28641: a3 = u64 [s1 + 0x70]\n 28644: a0 = u64 [a3]\n 28646: a1 = u64 [a3 + 0x8]\n 28649: a2 = u64 [a3 + 0x18]\n 28652: a3 = u64 [a3 + 0x10]\n 28655: t0 = reverse a0\n 28657: a1 = reverse a1\n 28659: a2 = reverse a2\n 28661: a3 = reverse a3\n 28663: a4 = u64 [s1 + 0x78]\n 28666: a4 = a4 + a3\n 28669: a5 = u64 [s1 + 0x80]\n 28673: a5 = a5 + a2\n 28676: a2 = a5 <u a2\n 28679: a4 = a4 + a2\n 28682: a0 = a4 ^ a3\n 28685: a3 = a4 <u a3\n 28688: a3 = a2 if a0 == 0\n 28691: a0 = u64 [s1 + 0x88]\n 28695: a0 = a0 + a1\n 28698: a3 = a3 + a0\n 28701: t1 = a3 <u a0\n 28704: a2 = u64 [s1 + 0x90]\n 28708: t0 = t0 + a2\n 28711: a0 = a0 <u a1\n 28714: a0 = a0 + t0\n 28717: a0 = a0 + t1\n 28720: a1 = u64 [s1 + 0x98]\n 28724: u64 [a1] = a5\n 28726: u64 [a1 + 0x8] = a4\n 28729: u64 [a1 + 0x10] = a3\n 28732: u64 [a1 + 0x18] = a0\n 28735: a0 = s1 + 0xe0\n 28739: ra = 0x55a\n 28743: t0 = 0x6\n 28746: jump @2259\n      : @1105 [@dyn 685] (gas: 18)\n 28750: a0 = u64 [s1 + 0xf8]\n 28754: a1 = u64 [s1 + 0xf0]\n 28758: a2 = u16 [s1 + 0xe6]\n 28762: a3 = u64 [s1 + 0xe8]\n 28766: a4 = a0 << 0x10\n 28769: a5 = a1 >> 0x30\n 28772: a4 = a4 | a5\n 28775: u64 [s1 + 0x98] = a4\n 28779: a1 = a1 << 0x10\n 28782: a4 = a3 >> 0x30\n 28785: a1 = a1 | a4\n 28788: u64 [s1 + 0x88] = a1\n 28792: a3 = a3 << 0x10\n 28795: a2 = a2 | a3\n 28798: u64 [s1 + 0x80] = a2\n 28802: a0 = a0 >> 0x30\n 28805: u64 [s1 + 0x90] = a0\n 28809: fallthrough\n      : @1106 (gas: 3)\n 28810: a0 = s1 + 0xc0\n 28814: a1 = 0x40\n 28817: ra = 1372, jump @22\n      : @1107 [@dyn 686] (gas: 5)\n 28823: a0 = u64 [s1 + 0xd8]\n 28827: a1 = u64 [s1 + 0xd0]\n 28831: a2 = u64 [s1 + 0xc8]\n 28835: a3 = u64 [s1 + 0xc0]\n 28839: t0 = 1374, jump @2244\n      : @1108 [@dyn 687] (gas: 1)\n 28846: jump @1123 if a0 == 0\n      : @1109 (gas: 1)\n 28850: trap\n      : @1110 (gas: 29)\n 28851: a0 = u64 [s1 + 0x28]\n 28854: a0 = a0 - a4\n 28857: a1 = a0 - a5\n 28860: u64 [s1 + 0x18] = a1\n 28863: a0 = a0 <u a5\n 28866: a1 = u64 [s1 + 0x30]\n 28869: a1 = a1 - a2\n 28872: a1 = a1 - t2\n 28875: a1 = a1 - a0\n 28878: u64 [s1 + 0x20] = a1\n 28881: a0 = u64 [s1 + 0x78]\n 28884: a0 = a0 - ra\n 28887: a0 = a0 - t1\n 28890: u64 [s1 + 0x10] = a0\n 28893: a0 = u64 [s1 + 0x70]\n 28896: a0 = a0 - t0\n 28899: u64 [s1 + 0x8] = a0\n 28902: a0 = u64 [s1 + 0x68]\n 28905: a2 = s1 + 0x200\n 28909: u64 [a2 + 0x60] = a0\n 28912: a0 = u64 [s1 + 0x60]\n 28915: u64 [a2 + 0x68] = a0\n 28918: a0 = u64 [s1 + 0x58]\n 28921: u64 [a2 + 0x70] = a0\n 28924: a1 = s1 + 0x260\n 28928: a0 = u64 [s1 + 0x50]\n 28931: u64 [a2 + 0x78] = a0\n 28934: a0 = 0\n 28936: ra = 1376, jump @24\n      : @1111 [@dyn 688] (gas: 3)\n 28942: a2 = u64 [s1 + 0x48]\n 28945: a0 = i32 [a2]\n 28947: jump @1113 if a0 >u 31\n      : @1112 (gas: 2)\n 28951: u32 [a2 + 0] = 0x20\n 28954: fallthrough\n      : @1113 (gas: 10)\n 28955: a0 = sp + 0xffffffffffffffe0\n 28958: a0 = a0 & 0xffffffffffffffe0\n 28961: u64 [s1 + 0x38] = a0\n 28964: sp = a0\n 28966: i32 a2 = a0 + 0\n 28968: a1 = 0x20\n 28971: a0 = u64 [s1 + 0x40]\n 28974: ra = 0x562\n 28978: ecalli 11 // 'hash_keccak_256'\n 28980: fallthrough\n      : @1114 [@dyn 689] (gas: 22)\n 28981: a2 = u64 [s1 + 0x38]\n 28984: a0 = u64 [a2 + 0x18]\n 28987: a1 = u64 [a2 + 0x10]\n 28990: t0 = u64 [a2 + 0x8]\n 28993: a3 = u64 [a2]\n 28995: a0 = reverse a0\n 28997: a1 = reverse a1\n 28999: a4 = u64 [s1 + 0x10]\n 29002: a4 = a4 + a1\n 29005: a5 = u64 [s1 + 0x8]\n 29008: a5 = a5 + a0\n 29011: a0 = a5 <u a0\n 29014: a4 = a4 + a0\n 29017: a2 = a4 ^ a1\n 29020: a1 = a4 <u a1\n 29023: a1 = a0 if a2 == 0\n 29026: t1 = reverse a3\n 29028: a2 = reverse t0\n 29030: a3 = u64 [s1 + 0x18]\n 29033: a3 = a3 + a2\n 29036: a0 = u64 [s1 + 0x20]\n 29039: t0 = 1380, jump @2366\n      : @1115 [@dyn 690] (gas: 9)\n 29046: u64 [a2 + 0xc0] = a5\n 29050: u64 [a2 + 0xc8] = a4\n 29054: u64 [a2 + 0xd0] = a1\n 29058: u64 [a2 + 0xd8] = a0\n 29062: a0 = s1 + 0x240\n 29066: a1 = s1 + 0x3c0\n 29070: ra = 0x566\n 29074: t0 = 0x6\n 29077: jump @2259\n      : @1116 [@dyn 691] (gas: 12)\n 29081: a0 = u64 [s1 + 0x240]\n 29085: a0 = a0 << 0x10\n 29088: a0 = a0 >> 0x10\n 29091: a1 = u64 [s1 + 0x98]\n 29095: a2 = u64 [s1 + 0x90]\n 29099: a1 = a1 | a2\n 29102: a2 = u64 [s1 + 0x80]\n 29106: a0 = a2 <u a0\n 29109: a2 = u64 [s1 + 0x88]\n 29113: a0 = 0 if a2 != 0\n 29115: a0 = 0 if a1 != 0\n 29117: jump @1118 if a0 == 0\n      : @1117 (gas: 11)\n 29120: a3 = 0\n 29122: a2 = 0\n 29124: t2 = 0\n 29126: u64 [s1 + 56] = 0\n 29129: a0 = u64 [s1 + 0x8]\n 29132: u64 [s1 + 0x70] = a0\n 29135: a0 = u64 [s1 + 0x10]\n 29138: u64 [s1 + 0x78] = a0\n 29141: a5 = u64 [s1 + 0x18]\n 29144: a4 = u64 [s1 + 0x20]\n 29147: jump @1093\n      : @1118 (gas: 11)\n 29150: a0 = u64 [s1 + 0x8]\n 29153: u64 [s1 + 0x200] = a0\n 29157: a0 = u64 [s1 + 0x10]\n 29160: u64 [s1 + 0x208] = a0\n 29164: a0 = u64 [s1 + 0x18]\n 29167: u64 [s1 + 0x210] = a0\n 29171: a0 = s1 + 0x220\n 29175: a1 = s1 + 0x200\n 29179: a2 = u64 [s1 + 0x20]\n 29182: u64 [s1 + 0x218] = a2\n 29186: ra = 1384, jump @1718\n      : @1119 [@dyn 692] (gas: 13)\n 29192: a1 = s1 + 0x200\n 29196: a0 = u64 [a1 + 0x38]\n 29199: u64 [s1 + 0x38] = a0\n 29202: t2 = u64 [s1 + 0x230]\n 29206: a2 = u64 [a1 + 0x28]\n 29209: a3 = u64 [a1 + 0x20]\n 29212: a1 = u64 [s1 + 0x68]\n 29215: t0 = u64 [s1 + 0x60]\n 29218: t1 = u64 [s1 + 0x58]\n 29221: ra = u64 [s1 + 0x50]\n 29224: a4 = u64 [s1 + 0x30]\n 29227: a5 = u64 [s1 + 0x28]\n 29230: jump @1094\n      : @1120 (gas: 2)\n 29233: a1 = 0x20160\n 29238: jump @1122\n      : @1121 (gas: 2)\n 29240: a1 = 0x20160\n 29245: fallthrough\n      : @1122 (gas: 5)\n 29246: i32 a1 = a1 + 0\n 29248: a0 = 0x1\n 29251: a2 = 0\n 29253: ecalli 16 // 'seal_return'\n 29255: fallthrough\n      : @1123 (gas: 12)\n 29256: a0 = u64 [s1 + 0x80]\n 29260: u64 [s1 + 0xa0] = a0\n 29264: a0 = u64 [s1 + 0x88]\n 29268: u64 [s1 + 0xa8] = a0\n 29272: a0 = u64 [s1 + 0x98]\n 29276: u64 [s1 + 0xb0] = a0\n 29280: a1 = s1 + 0xa0\n 29284: a0 = u64 [s1 + 0x90]\n 29288: u64 [s1 + 0xb8] = a0\n 29292: a0 = a3\n 29294: u64 [s1 + 0x98] = a3\n 29298: ra = 1386, jump @24\n      : @1124 [@dyn 693] (gas: 3)\n 29304: a1 = 0x20\n 29307: a0 = u64 [s1 + 0x98]\n 29311: ra = 1388, jump @37\n      : @1125 [@dyn 694] (gas: 1)\n 29317: t0 = 1390, jump @2280\n      : @1126 [@dyn 695] (gas: 3)\n 29324: ra = 0x570\n 29328: ecalli 16 // 'seal_return'\n 29330: fallthrough\n      : @1127 [@dyn 696] (gas: 18)\n 29331: sp = sp + 0xfffffffffffffd60\n 29335: a0 = sp + 0x200\n 29339: u64 [a0 + 0x98] = ra\n 29343: u64 [a0 + 0x90] = s0\n 29347: u64 [a0 + 0x88] = s1\n 29351: s0 = sp + 0x2a0\n 29355: sp = sp & 0xffffffffffffffe0\n 29358: a0 = sp + 0x200\n 29362: u64 [a0 + 56] = 0\n 29365: u64 [a0 + 48] = 0\n 29368: u64 [a0 + 40] = 0\n 29371: u64 [a0 + 32] = 0\n 29374: i32 a0 = sp + 0x220\n 29378: ra = 0x572\n 29382: ecalli 19 // 'value_transferred'\n 29384: a4 = sp + 0x200\n 29388: t0 = 0x574\n 29392: jump @2348\n      : @1128 [@dyn 697] (gas: 2)\n 29396: a4 = sp + 0x200\n 29400: t0 = 1396, jump @2348\n      : @1129 [@dyn 698] (gas: 1)\n 29407: jump @1147 if a0 != 0\n      : @1130 (gas: 2)\n 29411: a0 = i32 [0x2014c]\n 29416: jump @1148 if a0 <=u 3\n      : @1131 (gas: 20)\n 29421: i32 a0 = sp + 0x240\n 29425: ecalli 1 // 'block_number'\n 29427: a4 = sp + 0x200\n 29431: a2 = u64 [a4 + 0x40]\n 29434: u64 [sp + 0x20] = a2\n 29437: a1 = u64 [a4 + 0x48]\n 29440: u64 [sp + 0x28] = a1\n 29443: a0 = u64 [a4 + 0x50]\n 29446: u64 [sp + 0x38] = a0\n 29449: a3 = u64 [a4 + 0x58]\n 29452: u64 [sp + 0x30] = a3\n 29455: u64 [sp + 0x1f8] = a3\n 29459: u64 [sp + 0x1f0] = a0\n 29463: u64 [sp + 0x1e8] = a1\n 29467: a0 = sp + 0x200\n 29471: a1 = sp + 0x1e0\n 29475: u64 [sp + 0x1e0] = a2\n 29479: ra = 0x576\n 29483: t0 = 0x884\n 29487: jump @2372\n      : @1132 [@dyn 699] (gas: 19)\n 29491: i32 a0 = sp + 0x260\n 29495: ecalli 1 // 'block_number'\n 29497: a3 = sp + 0x200\n 29501: a2 = u64 [a3 + 0x60]\n 29504: u64 [sp + 0x8] = a2\n 29507: a1 = u64 [a3 + 0x68]\n 29510: u64 [sp + 0x10] = a1\n 29513: a0 = u64 [a3 + 0x70]\n 29516: u64 [sp + 0x18] = a0\n 29519: s1 = u64 [a3 + 0x78]\n 29522: u64 [sp + 0x1b8] = s1\n 29526: u64 [sp + 0x1b0] = a0\n 29530: u64 [sp + 0x1a8] = a1\n 29534: a0 = sp + 0x1c0\n 29538: a1 = sp + 0x1a0\n 29542: u64 [sp + 0x1a0] = a2\n 29546: ra = 0x578\n 29550: t0 = 0x884\n 29554: jump @2372\n      : @1133 [@dyn 700] (gas: 15)\n 29558: a0 = u64 [sp + 0x30]\n 29561: a0 = a0 ^ s1\n 29564: a1 = u64 [sp + 0x28]\n 29567: a2 = u64 [sp + 0x10]\n 29570: a1 = a1 ^ a2\n 29573: a0 = a0 | a1\n 29576: a1 = u64 [sp + 0x38]\n 29579: a2 = u64 [sp + 0x18]\n 29582: a1 = a1 ^ a2\n 29585: a2 = u64 [sp + 0x20]\n 29588: a3 = u64 [sp + 0x8]\n 29591: a2 = a2 ^ a3\n 29594: a1 = a1 | a2\n 29597: a0 = a0 | a1\n 29600: jump @1150 if a0 != 0\n      : @1134 (gas: 3)\n 29604: a0 = sp + 0x160\n 29608: a1 = 0x40\n 29611: ra = 1402, jump @22\n      : @1135 [@dyn 701] (gas: 18)\n 29617: a0 = u64 [sp + 0x178]\n 29621: u64 [sp + 0x30] = a0\n 29624: a2 = u64 [sp + 0x170]\n 29628: u64 [sp + 0x38] = a2\n 29631: a1 = u64 [sp + 0x168]\n 29635: u64 [sp + 0x28] = a1\n 29638: s1 = u64 [sp + 0x160]\n 29642: u64 [sp + 312] = 0\n 29646: u64 [sp + 304] = 0\n 29650: u64 [sp + 296] = 0\n 29654: u64 [sp + 288] = 0x40\n 29659: u64 [sp + 0x158] = a0\n 29663: u64 [sp + 0x150] = a2\n 29667: u64 [sp + 0x148] = a1\n 29671: a0 = sp + 0x140\n 29675: a1 = sp + 0x120\n 29679: u64 [sp + 0x140] = s1\n 29683: ra = 1404, jump @149\n      : @1136 [@dyn 702] (gas: 12)\n 29689: a2 = u64 [sp + 0x38]\n 29692: a0 = u64 [sp + 0x30]\n 29695: a1 = u64 [sp + 0x28]\n 29698: a0 = a0 | a1\n 29701: u64 [sp + 0x20] = s1\n 29704: a1 = s1 | a2\n 29707: a1 = a1 | a0\n 29710: a1 = a1 >> 0x20\n 29713: a0 = a0 | a2\n 29716: a0 = a0 << 0x20\n 29719: a0 = a0 | a1\n 29722: jump @1146 if a0 != 0\n      : @1137 (gas: 8)\n 29726: u64 [sp + 280] = 0\n 29730: u64 [sp + 272] = 0\n 29734: u64 [sp + 264] = 0\n 29738: a1 = sp + 0x100\n 29742: u64 [sp + 256] = 0x1d\n 29747: s1 = u64 [sp + 0x20]\n 29750: a0 = s1\n 29752: ra = 1406, jump @24\n      : @1138 [@dyn 703] (gas: 3)\n 29758: a0 = u64 [sp + 0x38]\n 29761: a1 = u64 [sp + 0x30]\n 29764: t0 = 1408, jump @2349\n      : @1139 [@dyn 704] (gas: 4)\n 29771: s1 = u64 [sp + 0x28]\n 29774: a1 = 0 if s1 != 0\n 29776: a1 = 0 if a0 != 0\n 29778: jump @1146 if a1 == 0\n      : @1140 (gas: 12)\n 29782: a0 = u64 [sp + 0x20]\n 29785: i32 a0 = a0 + 0x20\n 29788: a1 = u64 [0x20080]\n 29793: a2 = u64 [0x20088]\n 29798: a3 = u64 [0x20090]\n 29803: u64 [sp + 0xf8] = a1\n 29807: u64 [sp + 0xf0] = a2\n 29811: u64 [sp + 0xe8] = a3\n 29815: a2 = 0x6661756c74000000\n 29825: a1 = sp + 0xe0\n 29829: u64 [sp + 0xe0] = a2\n 29833: ra = 1410, jump @24\n      : @1141 [@dyn 705] (gas: 3)\n 29839: a0 = sp + 0xc0\n 29843: a1 = 0x40\n 29846: ra = 1412, jump @22\n      : @1142 [@dyn 706] (gas: 12)\n 29852: a4 = u64 [sp + 0xd8]\n 29856: a5 = u64 [sp + 0xd0]\n 29860: a3 = u64 [sp + 0xc8]\n 29864: a0 = u64 [sp + 0xc0]\n 29868: a2 = a3 | a4\n 29871: a1 = a0 | a5\n 29874: a1 = a1 | a2\n 29877: a1 = a1 >> 0x20\n 29880: a2 = a2 | a5\n 29883: a2 = a2 << 0x20\n 29886: a1 = a1 | a2\n 29889: jump @1146 if a1 != 0\n      : @1143 (gas: 11)\n 29893: u64 [sp + 184] = 0\n 29897: u64 [sp + 176] = 0\n 29901: u64 [sp + 168] = 0\n 29905: a1 = sp + 0xa0\n 29909: u64 [sp + 160] = 0x20\n 29914: u64 [sp + 0x18] = a0\n 29917: u64 [sp + 0x8] = a3\n 29920: s1 = a4\n 29922: u64 [sp] = a4\n 29924: u64 [sp + 0x10] = a5\n 29927: ra = 1414, jump @24\n      : @1144 [@dyn 707] (gas: 28)\n 29933: a0 = u64 [sp + 0x18]\n 29936: a0 = a0 + 0x20\n 29939: a1 = u64 [sp + 0x18]\n 29942: a1 = a0 <u a1\n 29945: a3 = u64 [sp + 0x8]\n 29948: a2 = a3 + a1\n 29951: a3 = a2 <u a3\n 29954: a3 = a1 if a1 == 0\n 29957: a1 = u64 [sp + 0x10]\n 29960: a3 = a3 + a1\n 29963: a1 = a3 <u a1\n 29966: a4 = s1 + a1\n 29969: u64 [sp + 0x48] = a2\n 29972: u64 [sp + 0x40] = a0\n 29975: a0 = u64 [sp + 0x30]\n 29978: u64 [sp + 0x78] = a0\n 29981: a0 = u64 [sp + 0x38]\n 29984: u64 [sp + 0x70] = a0\n 29987: a0 = u64 [sp + 0x28]\n 29990: u64 [sp + 0x68] = a0\n 29993: a0 = u64 [sp + 0x20]\n 29996: u64 [sp + 0x60] = a0\n 29999: u64 [sp + 0x50] = a3\n 30002: a0 = sp + 0x80\n 30006: a1 = sp + 0x60\n 30009: a2 = sp + 0x40\n 30012: u64 [sp + 0x58] = a4\n 30015: ra = 1416, jump @855\n      : @1145 [@dyn 708] (gas: 33)\n 30021: a0 = u64 [sp + 0x88]\n 30025: t1 = u64 [sp + 0x98]\n 30029: a2 = u64 [sp + 0x80]\n 30033: a3 = u64 [sp + 0x90]\n 30037: s1 = u64 [sp + 0x8]\n 30040: a4 = a0 ^ s1\n 30043: a5 = a0 <u s1\n 30046: t0 = s1\n 30048: s1 = u64 [sp + 0x18]\n 30051: s1 = a2 <u s1\n 30054: a5 = s1 if a4 == 0\n 30057: a1 = u64 [sp + 0x10]\n 30060: a4 = a3 - a1\n 30063: a3 = a3 <u a1\n 30066: a1 = u64 [sp]\n 30068: a1 = t1 - a1\n 30071: a1 = a1 - a3\n 30074: a3 = a4 <u a5\n 30077: a1 = a1 - a3\n 30080: a4 = a4 - a5\n 30083: a0 = a0 - t0\n 30086: a3 = a0 - s1\n 30089: a0 = u64 [sp + 0x18]\n 30092: s1 = a2 - a0\n 30095: a0 = u64 [sp + 0x18]\n 30098: a3 = a3 | a1\n 30101: a1 = s1 | a4\n 30104: a1 = a1 | a3\n 30107: a3 = a3 | a4\n 30110: a1 = a1 >> 0x20\n 30113: a3 = a3 << 0x20\n 30116: a1 = a1 | a3\n 30119: jump @1154 if a1 == 0\n      : @1146 (gas: 1)\n 30122: trap\n      : @1147 (gas: 2)\n 30123: a1 = 0x20160\n 30128: jump @1149\n      : @1148 (gas: 2)\n 30130: a1 = 0x20160\n 30135: fallthrough\n      : @1149 (gas: 5)\n 30136: i32 a1 = a1 + 0\n 30138: a0 = 0x1\n 30141: a2 = 0\n 30143: ecalli 16 // 'seal_return'\n 30145: fallthrough\n      : @1150 (gas: 8)\n 30146: u64 [sp + 400] = 0\n 30150: u64 [sp + 392] = 0\n 30154: u64 [sp + 384] = 0\n 30158: a0 = 0x6ff0714000000000\n 30168: a1 = sp + 0x180\n 30172: u64 [sp + 0x198] = a0\n 30176: a0 = 0\n 30178: ra = 1418, jump @24\n      : @1151 [@dyn 709] (gas: 2)\n 30184: a1 = i32 [0x20150]\n 30189: jump @1153 if a1 >u 31\n      : @1152 (gas: 2)\n 30193: u32 [0x20150] = 0x20\n 30199: fallthrough\n      : @1153 (gas: 8)\n 30200: a1 = 0x20160\n 30205: i32 a1 = a1 + 0\n 30207: a0 = 0x1\n 30210: a2 = 0x4\n 30213: ecalli 16 // 'seal_return'\n 30215: a1 = s1\n 30217: ra = 0x58c\n 30221: jump @37\n      : @1154 (gas: 2)\n 30224: a1 = s1\n 30226: ra = 1420, jump @37\n      : @1155 [@dyn 710] (gas: 7)\n 30232: i32 a1 = a0 + 0\n 30234: i32 a2 = s1 + 0\n 30236: a0 = 0\n 30238: ra = 0x58e\n 30242: ecalli 16 // 'seal_return'\n 30244: t0 = 0x590\n 30248: jump @2291\n      : @1156 [@dyn 711] (gas: 1)\n 30252: t0 = 1424, jump @2291\n      : @1157 [@dyn 712] (gas: 2)\n 30259: ecalli 19 // 'value_transferred'\n 30261: fallthrough\n      : @1158 (gas: 8)\n 30262: a0 = u64 [s1 + 0xf0]\n 30266: a1 = u64 [s1 + 0xf8]\n 30270: a2 = u64 [s1 + 0xe8]\n 30274: a3 = u64 [s1 + 0xe0]\n 30278: a1 = a1 | a2\n 30281: a0 = a0 | a3\n 30284: a0 = a0 | a1\n 30287: jump @1173 if a0 != 0\n      : @1159 (gas: 3)\n 30291: a0 = i32 [0x2014c]\n 30296: a1 = 0x23\n 30299: jump @1174 if a1 >=u a0\n      : @1160 (gas: 4)\n 30303: a0 = s1 + 0xc0\n 30307: ra = 0x592\n 30311: t0 = 0x484\n 30315: jump @2251\n      : @1161 [@dyn 713] (gas: 1)\n 30318: t0 = 1428, jump @2320\n      : @1162 [@dyn 714] (gas: 1)\n 30325: ra = 1430, jump @24\n      : @1163 [@dyn 715] (gas: 7)\n 30331: u64 [s1 + 152] = 0\n 30335: u64 [s1 + 144] = 0\n 30339: u64 [s1 + 128] = 0x8\n 30344: a0 = 0x20\n 30347: a1 = s1 + 0x80\n 30351: u64 [s1 + 136] = 0\n 30355: ra = 1432, jump @24\n      : @1164 [@dyn 716] (gas: 2)\n 30361: a1 = i32 [0x20150]\n 30366: jump @1166 if a1 >u 63\n      : @1165 (gas: 4)\n 30370: a1 = 0x40\n 30373: u32 [0x20150] = a1\n 30378: t0 = 0x59a\n 30382: jump @2282\n      : @1166 (gas: 1)\n 30386: t0 = 1434, jump @2282\n      : @1167 [@dyn 717] (gas: 8)\n 30393: a0 = 0x20160\n 30398: i32 a0 = a0 + 0\n 30400: i32 a2 = a2 + 0\n 30402: a1 = 0x40\n 30405: ra = 0x59c\n 30409: ecalli 11 // 'hash_keccak_256'\n 30411: t0 = 0x59e\n 30415: jump @2246\n      : @1168 [@dyn 718] (gas: 1)\n 30418: t0 = 1438, jump @2246\n      : @1169 [@dyn 719] (gas: 3)\n 30424: ra = 0x5a0\n 30428: t0 = 0x6\n 30431: jump @2259\n      : @1170 [@dyn 720] (gas: 9)\n 30434: a0 = u64 [s1 + 0x70]\n 30437: u64 [s1 + 0x8] = a0\n 30440: a0 = u64 [s1 + 0x68]\n 30443: u64 [s1 + 0x10] = a0\n 30446: a0 = u64 [s1 + 0x60]\n 30449: u64 [s1 + 0x18] = a0\n 30452: a0 = s1 + 0x40\n 30455: a1 = 0x40\n 30458: ra = 1442, jump @22\n      : @1171 [@dyn 721] (gas: 12)\n 30464: a3 = u64 [s1 + 0x58]\n 30467: a1 = u64 [s1 + 0x50]\n 30470: a2 = u64 [s1 + 0x48]\n 30473: a0 = u64 [s1 + 0x40]\n 30476: a3 = a3 | a2\n 30479: a2 = a0 | a1\n 30482: a2 = a2 | a3\n 30485: a2 = a2 >> 0x20\n 30488: a1 = a1 | a3\n 30491: a1 = a1 << 0x20\n 30494: a1 = a1 | a2\n 30497: jump @1176 if a1 == 0\n      : @1172 (gas: 1)\n 30500: trap\n      : @1173 (gas: 2)\n 30501: a1 = 0x20160\n 30506: jump @1175\n      : @1174 (gas: 2)\n 30508: a1 = 0x20160\n 30513: fallthrough\n      : @1175 (gas: 5)\n 30514: i32 a1 = a1 + 0\n 30516: a0 = 0x1\n 30519: a2 = 0\n 30521: ecalli 16 // 'seal_return'\n 30523: fallthrough\n      : @1176 (gas: 14)\n 30524: a1 = 0xffffffff\n 30534: a2 = u64 [s1 + 0x8]\n 30537: a2 = a2 & a1\n 30540: a1 = u64 [s1 + 0x10]\n 30543: a1 = a1 & 0xffffffffffffffff\n 30546: a4 = u64 [s1 + 0x18]\n 30549: a3 = a4 & 0xffffffffffffffff\n 30552: u64 [s1 + 56] = 0\n 30555: u64 [s1 + 0x20] = a3\n 30558: u64 [s1 + 0x28] = a1\n 30561: a1 = s1 + 0x20\n 30564: u64 [s1 + 0x30] = a2\n 30567: u64 [s1 + 0x18] = a0\n 30570: ra = 1444, jump @24\n      : @1177 [@dyn 722] (gas: 3)\n 30576: a1 = 0x20\n 30579: a0 = u64 [s1 + 0x18]\n 30582: ra = 1446, jump @37\n      : @1178 [@dyn 723] (gas: 1)\n 30588: t0 = 1448, jump @2280\n      : @1179 [@dyn 724] (gas: 3)\n 30595: ra = 0x5aa\n 30599: ecalli 16 // 'seal_return'\n 30601: fallthrough\n      : @1180 [@dyn 725] (gas: 13)\n 30602: sp = sp + 0xffffffffffffff40\n 30606: u64 [sp + 0xb8] = ra\n 30610: u64 [sp + 0xb0] = s0\n 30614: u64 [sp + 0xa8] = s1\n 30618: s0 = sp + 0xc0\n 30622: sp = sp & 0xffffffffffffffe0\n 30625: u64 [sp + 152] = 0\n 30629: u64 [sp + 144] = 0\n 30633: u64 [sp + 136] = 0\n 30637: u64 [sp + 128] = 0\n 30641: i32 a0 = sp + 0x80\n 30645: ecalli 19 // 'value_transferred'\n 30647: fallthrough\n      : @1181 (gas: 8)\n 30648: a0 = u64 [sp + 0x90]\n 30652: a1 = u64 [sp + 0x98]\n 30656: a2 = u64 [sp + 0x88]\n 30660: a3 = u64 [sp + 0x80]\n 30664: a1 = a1 | a2\n 30667: a0 = a0 | a3\n 30670: a0 = a0 | a1\n 30673: jump @1183 if a0 == 0\n      : @1182 (gas: 6)\n 30676: a1 = 0x20160\n 30681: i32 a1 = a1 + 0\n 30683: a0 = 0x1\n 30686: a2 = 0\n 30688: ecalli 16 // 'seal_return'\n 30690: jump @1185\n      : @1183 (gas: 3)\n 30692: a0 = i32 [0x2014c]\n 30697: a1 = 0x23\n 30700: jump @1185 if a1 <u a0\n      : @1184 (gas: 6)\n 30703: a1 = 0x20160\n 30708: i32 a1 = a1 + 0\n 30710: a0 = 0x1\n 30713: a2 = 0\n 30715: ecalli 16 // 'seal_return'\n 30717: fallthrough\n      : @1185 (gas: 4)\n 30718: a0 = sp + 0x60\n 30721: ra = 0x5ac\n 30725: t0 = 0x484\n 30729: jump @2251\n      : @1186 [@dyn 726] (gas: 14)\n 30732: a0 = u64 [sp + 0x60]\n 30735: u64 [sp + 0x18] = a0\n 30738: a0 = u64 [sp + 0x68]\n 30741: u64 [sp + 0x10] = a0\n 30744: a0 = u64 [sp + 0x70]\n 30747: u64 [sp + 0x8] = a0\n 30750: a0 = u64 [sp + 0x78]\n 30753: u64 [sp] = a0\n 30755: s1 = 0x30160\n 30760: i32 a0 = s1 + 0\n 30762: ra = 0x5ae\n 30766: ecalli 6 // 'caller'\n 30768: t0 = 0x5b0\n 30772: jump @2267\n      : @1187 [@dyn 727] (gas: 1)\n 30775: t0 = 1456, jump @2267\n      : @1188 [@dyn 728] (gas: 14)\n 30781: u64 [sp + 0x38] = a2\n 30784: a2 = u64 [sp + 0x8]\n 30787: u64 [sp + 0x30] = a2\n 30790: a2 = u64 [sp + 0x10]\n 30793: u64 [sp + 0x28] = a2\n 30796: a2 = u64 [sp + 0x18]\n 30799: u64 [sp + 0x20] = a2\n 30802: u64 [sp + 88] = 0\n 30805: u64 [sp + 0x50] = a1\n 30808: u64 [sp + 0x48] = a0\n 30811: a0 = sp + 0x40\n 30814: a1 = sp + 0x20\n 30817: u64 [sp + 0x40] = a3\n 30820: ra = 1458, jump @1725\n      : @1189 [@dyn 729] (gas: 6)\n 30826: a1 = 0x20160\n 30831: i32 a1 = a1 + 0\n 30833: a0 = 0\n 30835: a2 = 0\n 30837: ecalli 16 // 'seal_return'\n 30839: jump @1185\n      : @1190 (gas: 9)\n 30841: a4 = s1 + 0x100\n 30845: a0 = u64 [a4 + 0x70]\n 30848: a1 = u64 [a4 + 0x78]\n 30851: a2 = u64 [a4 + 0x68]\n 30854: a3 = u64 [a4 + 0x60]\n 30857: a1 = a1 | a2\n 30860: a0 = a0 | a3\n 30863: a0 = a0 | a1\n 30866: jump @1206 if a0 != 0\n      : @1191 (gas: 3)\n 30870: a0 = i32 [0x2014c]\n 30875: a1 = 0x23\n 30878: jump @1207 if a1 >=u a0\n      : @1192 (gas: 4)\n 30882: a0 = s1 + 0x140\n 30886: ra = 0x5b4\n 30890: t0 = 0x484\n 30894: jump @2251\n      : @1193 [@dyn 730] (gas: 10)\n 30897: a0 = u64 [s1 + 0x140]\n 30901: a1 = u64 [s1 + 0x148]\n 30905: a2 = u32 [s1 + 0x150]\n 30909: u64 [s1 + 312] = 0\n 30913: u64 [s1 + 0x130] = a2\n 30917: u64 [s1 + 0x128] = a1\n 30921: a1 = s1 + 0x120\n 30925: u64 [s1 + 0x120] = a0\n 30929: a0 = 0\n 30931: ra = 1462, jump @24\n      : @1194 [@dyn 731] (gas: 4)\n 30937: u64 [s1 + 280] = 0\n 30941: u64 [s1 + 272] = 0\n 30945: a0 = 0x9\n 30948: t0 = 1464, jump @2289\n      : @1195 [@dyn 732] (gas: 1)\n 30955: ra = 1466, jump @24\n      : @1196 [@dyn 733] (gas: 3)\n 30961: a2 = 0x20150\n 30966: a0 = i32 [0x20150]\n 30971: jump @1198 if a0 >u 63\n      : @1197 (gas: 2)\n 30975: u32 [0x20150] = 0x40\n 30981: fallthrough\n      : @1198 (gas: 14)\n 30982: u64 [s1 + 0x30] = a2\n 30985: a0 = sp + 0xffffffffffffffe0\n 30988: a2 = a0 & 0xffffffffffffffe0\n 30991: u64 [s1 + 0x38] = a2\n 30994: sp = a2\n 30996: a0 = 0x20160\n 31001: i32 a0 = a0 + 0\n 31003: i32 a2 = a2 + 0\n 31005: a1 = 0x40\n 31008: u64 [s1 + 0x28] = a0\n 31011: ra = 0x5bc\n 31015: ecalli 11 // 'hash_keccak_256'\n 31017: t0 = 0x5be\n 31021: jump @2249\n      : @1199 [@dyn 734] (gas: 1)\n 31024: t0 = 1470, jump @2249\n      : @1200 [@dyn 735] (gas: 10)\n 31030: a4 = s1 + 0x100\n 31034: u64 [a4 + 0x98] = a3\n 31038: u64 [a4 + 0x90] = a2\n 31042: u64 [a4 + 0x88] = a1\n 31046: u64 [a4 + 0x80] = a0\n 31050: a0 = s1 + 0xe0\n 31054: a1 = s1 + 0x180\n 31058: ra = 0x5c0\n 31062: t0 = 0x6\n 31065: jump @2259\n      : @1201 [@dyn 736] (gas: 16)\n 31068: a0 = u64 [s1 + 0xf8]\n 31072: a2 = u64 [s1 + 0xf0]\n 31076: a3 = u64 [s1 + 0xe8]\n 31080: a1 = u64 [s1 + 0xe0]\n 31084: u64 [s1 + 0x38] = a0\n 31087: u64 [s1 + 0x10] = a3\n 31090: a0 = a0 | a3\n 31093: u64 [s1 + 0x20] = a1\n 31096: a1 = a1 | a2\n 31099: a1 = a1 | a0\n 31102: a1 = a1 >> 0x20\n 31105: u64 [s1 + 0x18] = a2\n 31108: a0 = a0 | a2\n 31111: a0 = a0 << 0x20\n 31114: a0 = a0 | a1\n 31117: jump @1209 if a0 != 0\n      : @1202 (gas: 3)\n 31120: a0 = s1 + 0xc0\n 31124: a1 = 0x40\n 31127: ra = 1474, jump @22\n      : @1203 [@dyn 737] (gas: 5)\n 31133: a0 = u64 [s1 + 0xd8]\n 31137: a1 = u64 [s1 + 0xd0]\n 31141: a2 = u64 [s1 + 0xc8]\n 31145: a3 = u64 [s1 + 0xc0]\n 31149: t0 = 1476, jump @2244\n      : @1204 [@dyn 738] (gas: 1)\n 31155: jump @1215 if a0 == 0\n      : @1205 (gas: 1)\n 31159: trap\n      : @1206 (gas: 2)\n 31160: a1 = 0x20160\n 31165: jump @1208\n      : @1207 (gas: 2)\n 31167: a1 = 0x20160\n 31172: fallthrough\n      : @1208 (gas: 5)\n 31173: i32 a1 = a1 + 0\n 31175: a0 = 0x1\n 31178: a2 = 0\n 31180: ecalli 16 // 'seal_return'\n 31182: fallthrough\n      : @1209 (gas: 8)\n 31183: u64 [s1 + 144] = 0\n 31187: u64 [s1 + 136] = 0\n 31191: u64 [s1 + 128] = 0\n 31195: a0 = 0x6dfcc65000000000\n 31205: a1 = s1 + 0x80\n 31209: u64 [s1 + 0x98] = a0\n 31213: a0 = 0\n 31215: ra = 1478, jump @24\n      : @1210 [@dyn 739] (gas: 7)\n 31221: u64 [s1 + 120] = 0\n 31224: u64 [s1 + 112] = 0\n 31227: u64 [s1 + 96] = 0x20\n 31231: a0 = 0x4\n 31234: a1 = s1 + 0x60\n 31237: u64 [s1 + 104] = 0\n 31240: ra = 1480, jump @24\n      : @1211 [@dyn 740] (gas: 11)\n 31246: a0 = u64 [s1 + 0x38]\n 31249: u64 [s1 + 0x58] = a0\n 31252: a0 = u64 [s1 + 0x18]\n 31255: u64 [s1 + 0x50] = a0\n 31258: a0 = u64 [s1 + 0x10]\n 31261: u64 [s1 + 0x48] = a0\n 31264: a0 = 0x24\n 31267: a1 = s1 + 0x40\n 31270: a2 = u64 [s1 + 0x20]\n 31273: u64 [s1 + 0x40] = a2\n 31276: ra = 1482, jump @24\n      : @1212 [@dyn 741] (gas: 3)\n 31282: a0 = u64 [s1 + 0x30]\n 31285: a0 = i32 [a0]\n 31287: jump @1214 if a0 >u 95\n      : @1213 (gas: 3)\n 31291: a1 = u64 [s1 + 0x30]\n 31294: u32 [a1 + 0] = 0x60\n 31297: fallthrough\n      : @1214 (gas: 5)\n 31298: a0 = 0x1\n 31301: a2 = 0x44\n 31304: a1 = u64 [s1 + 0x28]\n 31307: ecalli 16 // 'seal_return'\n 31309: fallthrough\n      : @1215 (gas: 12)\n 31310: a0 = u64 [s1 + 0x20]\n 31313: u64 [s1 + 0xa0] = a0\n 31317: a0 = u64 [s1 + 0x10]\n 31320: u64 [s1 + 0xa8] = a0\n 31324: a0 = u64 [s1 + 0x18]\n 31327: u64 [s1 + 0xb0] = a0\n 31331: a1 = s1 + 0xa0\n 31335: a0 = u64 [s1 + 0x38]\n 31338: u64 [s1 + 0xb8] = a0\n 31342: a0 = a3\n 31344: u64 [s1 + 0x38] = a3\n 31347: ra = 1484, jump @24\n      : @1216 [@dyn 742] (gas: 3)\n 31353: a1 = 0x20\n 31356: a0 = u64 [s1 + 0x38]\n 31359: ra = 1486, jump @37\n      : @1217 [@dyn 743] (gas: 1)\n 31365: t0 = 1488, jump @2280\n      : @1218 [@dyn 744] (gas: 3)\n 31371: ra = 0x5d2\n 31375: ecalli 16 // 'seal_return'\n 31377: fallthrough\n      : @1219 [@dyn 745] (gas: 13)\n 31378: sp = sp + 0xffffffffffffff00\n 31382: u64 [sp + 0xf8] = ra\n 31386: u64 [sp + 0xf0] = s0\n 31390: u64 [sp + 0xe8] = s1\n 31394: s0 = sp + 0x100\n 31398: sp = sp & 0xffffffffffffffe0\n 31401: u64 [sp + 216] = 0\n 31405: u64 [sp + 208] = 0\n 31409: u64 [sp + 200] = 0\n 31413: u64 [sp + 192] = 0\n 31417: i32 a0 = sp + 0xc0\n 31421: ecalli 19 // 'value_transferred'\n 31423: fallthrough\n      : @1220 (gas: 8)\n 31424: a0 = u64 [sp + 0xd0]\n 31428: a1 = u64 [sp + 0xd8]\n 31432: a2 = u64 [sp + 0xc8]\n 31436: a3 = u64 [sp + 0xc0]\n 31440: a1 = a1 | a2\n 31443: a0 = a0 | a3\n 31446: a0 = a0 | a1\n 31449: jump @1228 if a0 != 0\n      : @1221 (gas: 3)\n 31453: a0 = i32 [0x2014c]\n 31458: a1 = 0x23\n 31461: jump @1229 if a1 >=u a0\n      : @1222 (gas: 4)\n 31465: a0 = sp + 0xa0\n 31469: ra = 0x5d4\n 31473: t0 = 0x484\n 31477: jump @2251\n      : @1223 [@dyn 746] (gas: 13)\n 31480: a2 = u64 [sp + 0xa0]\n 31484: a0 = u64 [sp + 0xa8]\n 31488: a1 = u64 [sp + 0xb0]\n 31492: a3 = u64 [sp + 0xb8]\n 31496: u64 [sp + 0x78] = a3\n 31499: u64 [sp + 0x70] = a1\n 31502: u64 [sp + 0x68] = a0\n 31505: a0 = sp + 0x80\n 31509: a1 = sp + 0x60\n 31512: u64 [sp + 0x60] = a2\n 31515: ra = 0x5d6\n 31519: t0 = 0x7ce\n 31523: jump @2331\n      : @1224 [@dyn 747] (gas: 11)\n 31527: a0 = u64 [sp + 0x98]\n 31531: u64 [sp + 0x18] = a0\n 31534: a0 = u64 [sp + 0x90]\n 31538: u64 [sp + 0x10] = a0\n 31541: a0 = u64 [sp + 0x88]\n 31545: u64 [sp + 0x8] = a0\n 31548: a0 = u64 [sp + 0x80]\n 31552: u64 [sp] = a0\n 31554: a0 = sp + 0x40\n 31557: a1 = 0x40\n 31560: ra = 1496, jump @22\n      : @1225 [@dyn 748] (gas: 5)\n 31566: a0 = u64 [sp + 0x58]\n 31569: a1 = u64 [sp + 0x50]\n 31572: a2 = u64 [sp + 0x48]\n 31575: s1 = u64 [sp + 0x40]\n 31578: t0 = 1498, jump @2243\n      : @1226 [@dyn 749] (gas: 1)\n 31584: jump @1231 if a0 == 0\n      : @1227 (gas: 1)\n 31587: trap\n      : @1228 (gas: 2)\n 31588: a1 = 0x20160\n 31593: jump @1230\n      : @1229 (gas: 2)\n 31595: a1 = 0x20160\n 31600: fallthrough\n      : @1230 (gas: 7)\n 31601: i32 a1 = a1 + 0\n 31603: a0 = 0x1\n 31606: a2 = 0\n 31608: ra = 0x5dc\n 31612: ecalli 16 // 'seal_return'\n 31614: t0 = 0x5de\n 31618: jump @2284\n      : @1231 [@dyn 750] (gas: 1)\n 31621: t0 = 1502, jump @2284\n      : @1232 [@dyn 751] (gas: 1)\n 31627: ra = 1504, jump @24\n      : @1233 [@dyn 752] (gas: 3)\n 31633: a1 = 0x20\n 31636: a0 = s1\n 31638: ra = 1506, jump @37\n      : @1234 [@dyn 753] (gas: 1)\n 31644: t0 = 1508, jump @2280\n      : @1235 [@dyn 754] (gas: 4)\n 31650: ra = 0x5e6\n 31654: ecalli 16 // 'seal_return'\n 31656: t0 = 0x5e8\n 31660: jump @2291\n      : @1236 [@dyn 755] (gas: 1)\n 31663: t0 = 1512, jump @2291\n      : @1237 [@dyn 756] (gas: 2)\n 31669: ecalli 19 // 'value_transferred'\n 31671: fallthrough\n      : @1238 (gas: 8)\n 31672: a0 = u64 [s1 + 0xf0]\n 31676: a1 = u64 [s1 + 0xf8]\n 31680: a2 = u64 [s1 + 0xe8]\n 31684: a3 = u64 [s1 + 0xe0]\n 31688: a1 = a1 | a2\n 31691: a0 = a0 | a3\n 31694: a0 = a0 | a1\n 31697: jump @1254 if a0 != 0\n      : @1239 (gas: 3)\n 31701: a0 = i32 [0x2014c]\n 31706: a1 = 0x23\n 31709: jump @1255 if a1 >=u a0\n      : @1240 (gas: 4)\n 31713: a0 = s1 + 0xc0\n 31717: ra = 0x5ea\n 31721: t0 = 0x484\n 31725: jump @2251\n      : @1241 [@dyn 757] (gas: 1)\n 31728: t0 = 1516, jump @2320\n      : @1242 [@dyn 758] (gas: 1)\n 31735: ra = 1518, jump @24\n      : @1243 [@dyn 759] (gas: 7)\n 31741: u64 [s1 + 152] = 0\n 31745: u64 [s1 + 144] = 0\n 31749: u64 [s1 + 128] = 0x7\n 31754: a0 = 0x20\n 31757: a1 = s1 + 0x80\n 31761: u64 [s1 + 136] = 0\n 31765: ra = 1520, jump @24\n      : @1244 [@dyn 760] (gas: 2)\n 31771: a1 = i32 [0x20150]\n 31776: jump @1246 if a1 >u 63\n      : @1245 (gas: 4)\n 31780: a1 = 0x40\n 31783: u32 [0x20150] = a1\n 31788: t0 = 0x5f2\n 31792: jump @2282\n      : @1246 (gas: 1)\n 31795: t0 = 1522, jump @2282\n      : @1247 [@dyn 761] (gas: 8)\n 31801: a0 = 0x20160\n 31806: i32 a0 = a0 + 0\n 31808: i32 a2 = a2 + 0\n 31810: a1 = 0x40\n 31813: ra = 0x5f4\n 31817: ecalli 11 // 'hash_keccak_256'\n 31819: t0 = 0x5f6\n 31823: jump @2246\n      : @1248 [@dyn 762] (gas: 1)\n 31826: t0 = 1526, jump @2246\n      : @1249 [@dyn 763] (gas: 3)\n 31832: ra = 0x5f8\n 31836: t0 = 0x6\n 31839: jump @2259\n      : @1250 [@dyn 764] (gas: 11)\n 31842: a0 = u64 [s1 + 0x78]\n 31845: u64 [s1 + 0x18] = a0\n 31848: a0 = u64 [s1 + 0x70]\n 31851: u64 [s1 + 0x10] = a0\n 31854: a0 = u64 [s1 + 0x68]\n 31857: u64 [s1 + 0x8] = a0\n 31860: a0 = u64 [s1 + 0x60]\n 31863: u64 [s1] = a0\n 31865: a0 = s1 + 0x40\n 31868: a1 = 0x40\n 31871: ra = 1530, jump @22\n      : @1251 [@dyn 765] (gas: 5)\n 31877: a0 = u64 [s1 + 0x58]\n 31880: a1 = u64 [s1 + 0x50]\n 31883: a2 = u64 [s1 + 0x48]\n 31886: a3 = u64 [s1 + 0x40]\n 31889: t0 = 1532, jump @2244\n      : @1252 [@dyn 766] (gas: 1)\n 31895: jump @1257 if a0 == 0\n      : @1253 (gas: 1)\n 31898: trap\n      : @1254 (gas: 2)\n 31899: a1 = 0x20160\n 31904: jump @1256\n      : @1255 (gas: 2)\n 31906: a1 = 0x20160\n 31911: fallthrough\n      : @1256 (gas: 7)\n 31912: i32 a1 = a1 + 0\n 31914: a0 = 0x1\n 31917: a2 = 0\n 31919: ra = 0x5fe\n 31923: ecalli 16 // 'seal_return'\n 31925: t0 = 0x600\n 31929: jump @2325\n      : @1257 [@dyn 767] (gas: 1)\n 31933: t0 = 1536, jump @2325\n      : @1258 [@dyn 768] (gas: 1)\n 31940: ra = 1538, jump @24\n      : @1259 [@dyn 769] (gas: 3)\n 31946: a1 = 0x20\n 31949: a0 = u64 [s1 + 0x18]\n 31952: ra = 1540, jump @37\n      : @1260 [@dyn 770] (gas: 1)\n 31958: t0 = 1542, jump @2280\n      : @1261 [@dyn 771] (gas: 3)\n 31964: ra = 0x608\n 31968: ecalli 16 // 'seal_return'\n 31970: fallthrough\n      : @1262 [@dyn 772] (gas: 18)\n 31971: sp = sp + 0xfffffffffffffb80\n 31975: a0 = sp + 0x400\n 31979: u64 [a0 + 0x78] = ra\n 31982: u64 [a0 + 0x70] = s0\n 31985: u64 [a0 + 0x68] = s1\n 31988: s0 = sp + 0x480\n 31992: sp = sp & 0xffffffffffffffe0\n 31995: a0 = sp + 0x400\n 31999: u64 [a0 + 56] = 0\n 32002: u64 [a0 + 48] = 0\n 32005: u64 [a0 + 40] = 0\n 32008: u64 [a0 + 32] = 0\n 32011: i32 a0 = sp + 0x420\n 32015: ra = 0x60a\n 32019: ecalli 19 // 'value_transferred'\n 32021: a4 = sp + 0x400\n 32025: t0 = 0x60c\n 32029: jump @2348\n      : @1263 [@dyn 773] (gas: 2)\n 32033: a4 = sp + 0x400\n 32037: t0 = 1548, jump @2348\n      : @1264 [@dyn 774] (gas: 1)\n 32044: jump @1308 if a0 != 0\n      : @1265 (gas: 5)\n 32048: a0 = 0x2014c\n 32053: u64 [sp + 0xd8] = a0\n 32057: a0 = i32 [0x2014c]\n 32062: a1 = 0x3\n 32065: jump @1309 if a1 >=u a0\n      : @1266 (gas: 1)\n 32069: ra = 1550, jump @15\n      : @1267 [@dyn 775] (gas: 15)\n 32075: s1 = 0x30180\n 32080: a2 = u64 [0x30220]\n 32085: a0 = u64 [0x30228]\n 32090: a1 = u64 [0x30230]\n 32095: a3 = u64 [0x30238]\n 32100: a4 = sp + 0x300\n 32104: u64 [a4 + 0xf8] = a3\n 32108: u64 [a4 + 0xf0] = a1\n 32112: u64 [a4 + 0xe8] = a0\n 32116: a0 = sp + 0x400\n 32120: a1 = sp + 0x3e0\n 32124: u64 [a4 + 0xe0] = a2\n 32128: ra = 0x610\n 32132: t0 = 0x916\n 32136: jump @2258\n      : @1268 [@dyn 776] (gas: 10)\n 32139: a1 = sp + 0x400\n 32143: a0 = u64 [a1 + 0x18]\n 32146: u64 [sp + 0x90] = a0\n 32150: a0 = u64 [a1 + 0x10]\n 32153: u64 [sp + 0x98] = a0\n 32157: a0 = u64 [a1 + 0x8]\n 32160: u64 [sp + 0xb0] = a0\n 32164: a0 = u64 [a1]\n 32166: u64 [sp + 0xd0] = a0\n 32170: ra = 1554, jump @15\n      : @1269 [@dyn 777] (gas: 14)\n 32176: a2 = u64 [s1 + 0xc0]\n 32180: a0 = u64 [s1 + 0xc8]\n 32184: a1 = u64 [s1 + 0xd0]\n 32188: a3 = u64 [s1 + 0xd8]\n 32192: a4 = sp + 0x300\n 32196: u64 [a4 + 0xb8] = a3\n 32200: u64 [a4 + 0xb0] = a1\n 32204: u64 [a4 + 0xa8] = a0\n 32208: a0 = sp + 0x3c0\n 32212: a1 = sp + 0x3a0\n 32216: u64 [a4 + 0xa0] = a2\n 32220: ra = 0x614\n 32224: t0 = 0x93e\n 32228: jump @2258\n      : @1270 [@dyn 778] (gas: 12)\n 32231: a1 = sp + 0x300\n 32235: a0 = u64 [a1 + 0xd8]\n 32239: u64 [sp + 0x70] = a0\n 32242: a0 = u64 [a1 + 0xd0]\n 32246: u64 [sp + 0x78] = a0\n 32249: a0 = u64 [a1 + 0xc8]\n 32253: u64 [sp + 0x80] = a0\n 32257: a0 = u64 [a1 + 0xc0]\n 32261: u64 [sp + 0x88] = a0\n 32265: a0 = sp + 0x380\n 32269: a1 = 0x40\n 32272: ra = 1558, jump @22\n      : @1271 [@dyn 779] (gas: 19)\n 32278: a4 = sp + 0x300\n 32282: s1 = u64 [a4 + 0x98]\n 32286: a1 = u64 [a4 + 0x90]\n 32290: u64 [sp + 0xc8] = a1\n 32294: a3 = u64 [a4 + 0x88]\n 32298: u64 [sp + 0xc0] = a3\n 32302: a2 = u64 [a4 + 0x80]\n 32306: u64 [sp + 0xb8] = a2\n 32310: u64 [a4 + 88] = 0\n 32313: u64 [a4 + 80] = 0\n 32316: u64 [a4 + 72] = 0\n 32319: u64 [a4 + 64] = 0x20\n 32323: u64 [a4 + 0x78] = s1\n 32326: u64 [a4 + 0x70] = a1\n 32329: u64 [a4 + 0x68] = a3\n 32332: a0 = sp + 0x360\n 32336: a1 = sp + 0x340\n 32340: u64 [a4 + 0x60] = a2\n 32343: ra = 1560, jump @149\n      : @1272 [@dyn 780] (gas: 12)\n 32349: a2 = u64 [sp + 0xc8]\n 32353: a0 = u64 [sp + 0xc0]\n 32357: u64 [sp + 0xa8] = s1\n 32361: a0 = a0 | s1\n 32364: s1 = u64 [sp + 0xb8]\n 32368: a1 = s1 | a2\n 32371: a1 = a1 | a0\n 32374: a1 = a1 >> 0x20\n 32377: a0 = a0 | a2\n 32380: a0 = a0 << 0x20\n 32383: a0 = a0 | a1\n 32386: jump @1307 if a0 != 0\n      : @1273 (gas: 8)\n 32390: a0 = sp + 0x300\n 32394: u64 [a0 + 56] = 0\n 32397: u64 [a0 + 48] = 0\n 32400: u64 [a0 + 40] = 0\n 32403: a1 = sp + 0x320\n 32407: u64 [a0 + 32] = 0\n 32410: a0 = s1\n 32412: ra = 1562, jump @24\n      : @1274 [@dyn 781] (gas: 4)\n 32418: a2 = u64 [sp + 0xc0]\n 32422: a0 = u64 [sp + 0xc8]\n 32426: a1 = u64 [sp + 0xa8]\n 32430: t0 = 1564, jump @2349\n      : @1275 [@dyn 782] (gas: 3)\n 32437: a1 = 0 if a2 != 0\n 32439: a1 = 0 if a0 != 0\n 32441: jump @1307 if a1 == 0\n      : @1276 (gas: 7)\n 32445: a0 = s1\n 32447: a1 = u64 [sp + 0xd8]\n 32451: s1 = i32 [a1]\n 32453: a0 = a0 + 0x20\n 32456: u64 [sp + 0xa0] = a0\n 32460: a1 = 0\n 32462: ra = 1566, jump @37\n      : @1277 [@dyn 783] (gas: 7)\n 32468: i32 a0 = a0 + 0\n 32470: a1 = 0\n 32472: a2 = s1\n 32474: ecalli 3 // 'call_data_copy'\n 32476: a0 = sp + 0x300\n 32480: a1 = 0x40\n 32483: ra = 1568, jump @22\n      : @1278 [@dyn 784] (gas: 13)\n 32489: a1 = sp + 0x300\n 32493: s1 = u64 [a1 + 0x18]\n 32496: a4 = u64 [a1 + 0x10]\n 32499: a3 = u64 [a1 + 0x8]\n 32502: a0 = u64 [a1]\n 32504: a2 = a3 | s1\n 32507: a1 = a0 | a4\n 32510: a1 = a1 | a2\n 32513: a1 = a1 >> 0x20\n 32516: a2 = a2 | a4\n 32519: a2 = a2 << 0x20\n 32522: a1 = a1 | a2\n 32525: jump @1307 if a1 != 0\n      : @1279 (gas: 11)\n 32529: a5 = sp + 0x200\n 32533: u64 [a5 + 240] = 0\n 32537: u64 [a5 + 232] = 0\n 32541: u64 [a5 + 224] = 0\n 32545: a2 = 0xf00000000000000\n 32555: a1 = sp + 0x2e0\n 32559: u64 [a5 + 0xf8] = a2\n 32563: u64 [sp + 0x30] = a0\n 32566: u64 [sp + 0x28] = a3\n 32569: u64 [sp + 0x20] = a4\n 32572: ra = 1570, jump @24\n      : @1280 [@dyn 785] (gas: 11)\n 32578: a3 = u64 [sp + 0x20]\n 32581: a1 = u64 [sp + 0x30]\n 32584: a4 = a3 | s1\n 32587: a5 = s1\n 32589: s1 = 0x100000000\n 32599: a0 = 0xffffffe0\n 32609: a0 = a1 <u a0\n 32612: a2 = u64 [sp + 0x28]\n 32615: a0 = 0 if a2 != 0\n 32617: a0 = 0 if a4 != 0\n 32619: jump @1307 if a0 == 0\n      : @1281 (gas: 12)\n 32623: i32 a0 = a1 + 0x20\n 32626: a2 = sp + 0x200\n 32630: u64 [a2 + 216] = 0\n 32634: u64 [a2 + 208] = 0\n 32638: u64 [a2 + 192] = 0xe0\n 32644: a1 = sp + 0x2c0\n 32648: u64 [a2 + 200] = 0\n 32652: u64 [sp + 0xd8] = s1\n 32656: s1 = a3\n 32658: u64 [sp + 0x68] = a4\n 32661: u64 [sp + 0x18] = a5\n 32664: ra = 1572, jump @24\n      : @1282 [@dyn 786] (gas: 30)\n 32670: a0 = u64 [sp + 0x30]\n 32673: a0 = a0 + 0xe0\n 32677: a1 = u64 [sp + 0x30]\n 32680: a1 = a0 <u a1\n 32683: a2 = u64 [sp + 0x28]\n 32686: a2 = a2 + a1\n 32689: a3 = u64 [sp + 0x28]\n 32692: a3 = a2 <u a3\n 32695: a3 = a1 if a1 == 0\n 32698: a3 = a3 + s1\n 32701: a1 = a3 <u s1\n 32704: a4 = u64 [sp + 0x18]\n 32707: a4 = a4 + a1\n 32710: a5 = sp + 0x200\n 32714: u64 [a5 + 0x68] = a2\n 32717: u64 [a5 + 0x60] = a0\n 32720: a0 = u64 [sp + 0x90]\n 32724: u64 [a5 + 0x98] = a0\n 32728: a0 = u64 [sp + 0x98]\n 32732: u64 [a5 + 0x90] = a0\n 32736: a0 = u64 [sp + 0xb0]\n 32740: u64 [a5 + 0x88] = a0\n 32744: a0 = u64 [sp + 0xd0]\n 32748: u64 [a5 + 0x80] = a0\n 32752: u64 [a5 + 0x70] = a3\n 32755: a0 = sp + 0x2a0\n 32759: a1 = sp + 0x280\n 32763: a2 = sp + 0x260\n 32767: u64 [a5 + 0x78] = a4\n 32770: ra = 1574, jump @855\n      : @1283 [@dyn 787] (gas: 9)\n 32776: a2 = u64 [sp + 0x28]\n 32779: a1 = u64 [sp + 0x30]\n 32782: a0 = u64 [sp + 0xd8]\n 32786: a0 = a0 + 0xffffffffffffffc0\n 32789: a0 = a1 <u a0\n 32792: a0 = 0 if a2 != 0\n 32794: a3 = u64 [sp + 0x68]\n 32797: a0 = 0 if a3 != 0\n 32799: jump @1307 if a0 == 0\n      : @1284 (gas: 35)\n 32803: a3 = u64 [sp + 0x2a0]\n 32807: s1 = u64 [sp + 0x2a8]\n 32811: a5 = u64 [sp + 0x2b8]\n 32815: u64 [sp + 0xd0] = a5\n 32819: a4 = u64 [sp + 0x2b0]\n 32823: u64 [sp + 0xd8] = a4\n 32827: a0 = a3 <u a1\n 32830: t0 = a3\n 32832: u64 [sp + 0xb0] = a3\n 32836: a1 = s1 ^ a2\n 32839: a2 = s1 <u a2\n 32842: a2 = a0 if a1 == 0\n 32845: a3 = u64 [sp + 0x20]\n 32848: a1 = a4 - a3\n 32851: a3 = a4 <u a3\n 32854: a4 = u64 [sp + 0x18]\n 32857: a4 = a5 - a4\n 32860: a4 = a4 - a3\n 32863: a3 = a1 <u a2\n 32866: a4 = a4 - a3\n 32869: a1 = a1 - a2\n 32872: a2 = u64 [sp + 0x28]\n 32875: a2 = s1 - a2\n 32878: a2 = a2 - a0\n 32881: a0 = u64 [sp + 0x30]\n 32884: a3 = t0 - a0\n 32887: a0 = u64 [sp + 0x30]\n 32890: i32 a0 = a0 + 0x40\n 32893: a5 = sp + 0x200\n 32897: u64 [a5 + 0x40] = a3\n 32900: u64 [a5 + 0x48] = a2\n 32903: u64 [a5 + 0x50] = a1\n 32906: a1 = sp + 0x240\n 32910: u64 [a5 + 0x58] = a4\n 32913: ra = 1576, jump @24\n      : @1285 [@dyn 788] (gas: 20)\n 32919: a0 = u64 [sp + 0xd0]\n 32923: u64 [sp + 0x1f8] = a0\n 32927: a0 = u64 [sp + 0xd8]\n 32931: u64 [sp + 0x1f0] = a0\n 32935: u64 [sp + 0x1e8] = s1\n 32939: a0 = u64 [sp + 0xb0]\n 32943: u64 [sp + 0x1e0] = a0\n 32947: a0 = u64 [sp + 0x70]\n 32950: a4 = sp + 0x200\n 32954: u64 [a4 + 0x18] = a0\n 32957: a0 = u64 [sp + 0x78]\n 32960: u64 [a4 + 0x10] = a0\n 32963: a0 = u64 [sp + 0x80]\n 32967: u64 [a4 + 0x8] = a0\n 32970: a0 = sp + 0x220\n 32974: a1 = sp + 0x200\n 32978: a2 = sp + 0x1e0\n 32982: a3 = u64 [sp + 0x88]\n 32986: u64 [a4] = a3\n 32988: ra = 1578, jump @855\n      : @1286 [@dyn 789] (gas: 12)\n 32994: a1 = sp + 0x200\n 32998: a0 = u64 [a1 + 0x38]\n 33001: u64 [sp + 0xd0] = a0\n 33005: a0 = u64 [a1 + 0x30]\n 33008: u64 [sp + 0xd8] = a0\n 33012: a0 = u64 [a1 + 0x28]\n 33015: u64 [sp + 0x98] = a0\n 33019: a0 = u64 [a1 + 0x20]\n 33022: u64 [sp + 0x90] = a0\n 33026: i32 a0 = sp + 0x440\n 33030: ecalli 7 // 'chain_id'\n 33032: fallthrough\n      : @1287 (gas: 9)\n 33033: s1 = 0x100000000\n 33043: a0 = 0xffffffa0\n 33053: a1 = u64 [sp + 0x30]\n 33056: a0 = a1 <u a0\n 33059: a1 = u64 [sp + 0x28]\n 33062: a0 = 0 if a1 != 0\n 33064: a1 = u64 [sp + 0x68]\n 33067: a0 = 0 if a1 != 0\n 33069: jump @1307 if a0 == 0\n      : @1288 (gas: 13)\n 33073: a0 = sp + 0x400\n 33077: a2 = u64 [a0 + 0x40]\n 33080: a1 = u64 [a0 + 0x48]\n 33083: a3 = u64 [a0 + 0x50]\n 33086: a4 = u64 [a0 + 0x58]\n 33089: a0 = u64 [sp + 0x30]\n 33092: i32 a0 = a0 + 0x60\n 33095: u64 [sp + 0x1d8] = a4\n 33099: u64 [sp + 0x1d0] = a3\n 33103: u64 [sp + 0x1c8] = a1\n 33107: a1 = sp + 0x1c0\n 33111: u64 [sp + 0x1c0] = a2\n 33115: ra = 1580, jump @24\n      : @1289 [@dyn 790] (gas: 5)\n 33121: a0 = 0x30160\n 33126: u64 [sp + 0xb0] = a0\n 33130: i32 a0 = a0 + 0\n 33132: ecalli 0 // 'address'\n 33133: fallthrough\n      : @1290 (gas: 8)\n 33134: a0 = s1 + 0xffffffffffffff80\n 33137: a1 = u64 [sp + 0x30]\n 33140: a0 = a1 <u a0\n 33143: a1 = u64 [sp + 0x28]\n 33146: a0 = 0 if a1 != 0\n 33148: a1 = u64 [sp + 0x68]\n 33151: a0 = 0 if a1 != 0\n 33153: jump @1307 if a0 == 0\n      : @1291 (gas: 22)\n 33157: a2 = u64 [sp + 0xb0]\n 33161: a0 = u64 [a2 + 0x8]\n 33164: a1 = i32 [a2 + 0x10]\n 33167: a2 = u64 [a2]\n 33169: a0 = reverse a0\n 33171: a3 = a0 << 0x20\n 33174: a1 = reverse a1\n 33176: a1 = a1 >> 0x20\n 33179: a3 = a3 | a1\n 33182: a0 = a0 >> 0x20\n 33185: a1 = reverse a2\n 33187: a2 = a1 << 0x20\n 33190: a2 = a2 | a0\n 33193: a1 = a1 >> 0x20\n 33196: a0 = u64 [sp + 0x30]\n 33199: i32 a0 = a0 + 0x80\n 33203: u64 [sp + 440] = 0\n 33207: u64 [sp + 0x1b0] = a1\n 33211: u64 [sp + 0x1a8] = a2\n 33215: a1 = sp + 0x1a0\n 33219: u64 [sp + 0x1a0] = a3\n 33223: ra = 1582, jump @24\n      : @1292 [@dyn 791] (gas: 9)\n 33229: a3 = u64 [sp + 0x68]\n 33232: a1 = u64 [sp + 0x30]\n 33235: s1 = 0x100000000\n 33245: a0 = 0xffffff60\n 33255: a0 = a1 <u a0\n 33258: a2 = u64 [sp + 0x28]\n 33261: a0 = 0 if a2 != 0\n 33263: a0 = 0 if a3 != 0\n 33265: jump @1307 if a0 == 0\n      : @1293 (gas: 7)\n 33269: i32 a0 = a1 + 0xa0\n 33273: u64 [sp + 408] = 0\n 33277: u64 [sp + 400] = 0\n 33281: u64 [sp + 392] = 0\n 33285: a1 = sp + 0x180\n 33289: u64 [sp + 384] = 0\n 33293: ra = 1584, jump @24\n      : @1294 [@dyn 792] (gas: 8)\n 33300: a4 = u64 [sp + 0x28]\n 33303: a3 = u64 [sp + 0x30]\n 33306: a0 = s1 + 0xffffffffffffff40\n 33310: a0 = a3 <u a0\n 33313: a0 = 0 if a4 != 0\n 33315: a1 = u64 [sp + 0x68]\n 33318: a0 = 0 if a1 != 0\n 33320: jump @1307 if a0 == 0\n      : @1295 (gas: 31)\n 33324: a1 = u64 [sp + 0x90]\n 33328: t1 = a1 <u a3\n 33331: t0 = a1\n 33333: a5 = u64 [sp + 0x98]\n 33337: a1 = a5 ^ a4\n 33340: a2 = a5 <u a4\n 33343: t2 = a5\n 33345: a2 = t1 if a1 == 0\n 33348: s1 = u64 [sp + 0x20]\n 33351: a1 = u64 [sp + 0xd8]\n 33355: a0 = a1 - s1\n 33358: a5 = a3\n 33360: a3 = a1 <u s1\n 33363: s1 = a4\n 33365: a4 = u64 [sp + 0x18]\n 33368: a1 = u64 [sp + 0xd0]\n 33372: a4 = a1 - a4\n 33375: a4 = a4 - a3\n 33378: a3 = a0 <u a2\n 33381: a4 = a4 - a3\n 33384: a1 = a0 - a2\n 33387: a2 = t2 - s1\n 33390: a2 = a2 - t1\n 33393: a3 = t0 - a5\n 33396: i32 a0 = a5 + 0xc0\n 33400: u64 [sp + 0x160] = a3\n 33404: u64 [sp + 0x168] = a2\n 33408: u64 [sp + 0x170] = a1\n 33412: a1 = sp + 0x160\n 33416: u64 [sp + 0x178] = a4\n 33420: ra = 1586, jump @24\n      : @1296 [@dyn 793] (gas: 4)\n 33427: a0 = sp + 0x140\n 33431: s1 = u64 [sp + 0xb8]\n 33435: a1 = s1\n 33437: ra = 1588, jump @22\n      : @1297 [@dyn 794] (gas: 12)\n 33444: a3 = u64 [sp + 0xd8]\n 33448: a0 = u64 [sp + 0x90]\n 33452: a2 = a0 | a3\n 33455: a1 = u64 [sp + 0xd0]\n 33459: a4 = u64 [sp + 0x98]\n 33463: a1 = a1 | a4\n 33466: a2 = a2 | a1\n 33469: a2 = a2 >> 0x20\n 33472: a1 = a1 | a3\n 33475: a1 = a1 << 0x20\n 33478: a1 = a1 | a2\n 33481: jump @1307 if a1 != 0\n      : @1298 (gas: 28)\n 33485: a1 = u64 [sp + 0xa0]\n 33489: a2 = a1 <u s1\n 33492: a1 = u64 [sp + 0xc0]\n 33496: a3 = a1 + a2\n 33499: u64 [sp + 0xb8] = a3\n 33503: a1 = a3 <u a1\n 33506: a1 = a2 if a2 == 0\n 33509: a3 = u64 [sp + 0x158]\n 33513: a4 = u64 [sp + 0x150]\n 33517: a5 = u64 [sp + 0x148]\n 33521: s1 = u64 [sp + 0x140]\n 33525: a2 = u64 [sp + 0xc8]\n 33529: a1 = a1 + a2\n 33532: u64 [sp + 0xb0] = a1\n 33536: a2 = a1 <u a2\n 33539: a1 = u64 [sp + 0xa8]\n 33543: a1 = a1 + a2\n 33546: u64 [sp + 0xc0] = a1\n 33550: u64 [sp + 0x40] = s1\n 33553: u64 [sp + 0x120] = s1\n 33557: u64 [sp + 0x48] = a5\n 33560: u64 [sp + 0x128] = a5\n 33564: u64 [sp + 0x50] = a4\n 33567: u64 [sp + 0x130] = a4\n 33571: a1 = sp + 0x120\n 33575: u64 [sp + 0x58] = a3\n 33578: u64 [sp + 0x138] = a3\n 33582: ra = 1590, jump @24\n      : @1299 [@dyn 795] (gas: 9)\n 33589: t2 = u64 [sp + 0x90]\n 33593: a2 = 0\n 33595: u64 [sp + 200] = 0\n 33599: a5 = 0\n 33601: a4 = 0\n 33603: a0 = 0xffffffe0\n 33613: u64 [sp + 0x38] = a0\n 33616: s1 = u64 [sp + 0x98]\n 33620: fallthrough\n      : @1300 (gas: 32)\n 33621: ra = t2 + 0x20\n 33624: a0 = u64 [sp + 0x40]\n 33627: u64 [sp + 0x88] = a2\n 33631: t0 = a2 <u a0\n 33634: a2 = u64 [sp + 0x48]\n 33637: a3 = u64 [sp + 0xc8]\n 33641: a0 = a3 ^ a2\n 33644: a2 = a3 <u a2\n 33647: a2 = t0 if a0 == 0\n 33650: a0 = u64 [sp + 0x50]\n 33653: t0 = a5 <u a0\n 33656: a3 = u64 [sp + 0x58]\n 33659: t1 = a4 ^ a3\n 33662: u64 [sp + 0x80] = a4\n 33666: a3 = a4 <u a3\n 33669: a3 = t0 if t1 == 0\n 33672: u64 [sp + 0x78] = a5\n 33675: a0 = a0 ^ a5\n 33678: a0 = a0 | t1\n 33681: u64 [sp + 0xa8] = ra\n 33685: a4 = ra <u t2\n 33688: a3 = a2 if a0 == 0\n 33691: ra = s1 + a4\n 33694: u64 [sp + 0x98] = s1\n 33698: s1 = ra <u s1\n 33701: s1 = a4 if a4 == 0\n 33704: a2 = u64 [sp + 0xd8]\n 33708: s1 = s1 + a2\n 33711: a0 = s1 <u a2\n 33714: t0 = u64 [sp + 0xd0]\n 33718: a5 = t0 + a0\n 33721: jump @1306 if a3 == 0\n      : @1301 (gas: 13)\n 33725: t1 = a2\n 33727: a3 = u64 [sp + 0xb0]\n 33731: a1 = u64 [sp + 0xa0]\n 33735: a0 = a1 | a3\n 33738: a2 = u64 [sp + 0xb8]\n 33742: a4 = u64 [sp + 0xc0]\n 33746: a2 = a2 | a4\n 33749: a0 = a0 | a2\n 33752: a0 = a0 >> 0x20\n 33755: a2 = a2 | a3\n 33758: a2 = a2 << 0x20\n 33761: a0 = a0 | a2\n 33764: jump @1307 if a0 != 0\n      : @1302 (gas: 9)\n 33768: u64 [sp + 0x60] = a5\n 33771: u64 [sp + 0x68] = s1\n 33774: u64 [sp + 0x70] = ra\n 33777: a0 = sp + 0x100\n 33781: s1 = a1\n 33783: u64 [sp + 0x90] = t2\n 33787: u64 [sp + 0xd8] = t1\n 33791: u64 [sp + 0xd0] = t0\n 33795: ra = 1592, jump @22\n      : @1303 [@dyn 796] (gas: 10)\n 33802: a0 = u64 [sp + 0xd8]\n 33806: a1 = u64 [sp + 0xd0]\n 33810: a0 = a0 | a1\n 33813: a1 = u64 [sp + 0x38]\n 33816: a2 = u64 [sp + 0x90]\n 33820: a1 = a2 <u a1\n 33823: a2 = u64 [sp + 0x98]\n 33827: a1 = 0 if a2 != 0\n 33829: a1 = 0 if a0 != 0\n 33831: jump @1307 if a1 == 0\n      : @1304 (gas: 11)\n 33835: a0 = u64 [sp + 0x118]\n 33839: a1 = u64 [sp + 0x110]\n 33843: a2 = u64 [sp + 0x108]\n 33847: a3 = u64 [sp + 0x100]\n 33851: u64 [sp + 0xe0] = a3\n 33855: u64 [sp + 0xe8] = a2\n 33859: u64 [sp + 0xf0] = a1\n 33863: a1 = sp + 0xe0\n 33867: u64 [sp + 0xf8] = a0\n 33871: a0 = u64 [sp + 0xa8]\n 33875: ra = 1594, jump @24\n      : @1305 [@dyn 797] (gas: 35)\n 33882: a0 = s1 + 0x20\n 33885: a1 = a0 <u s1\n 33888: a3 = u64 [sp + 0xb8]\n 33892: t0 = a3 + a1\n 33895: a3 = t0 <u a3\n 33898: a3 = a1 if a1 == 0\n 33901: a1 = u64 [sp + 0xb0]\n 33905: a3 = a3 + a1\n 33908: a1 = a3 <u a1\n 33911: a2 = u64 [sp + 0xc0]\n 33915: a2 = a2 + a1\n 33918: u64 [sp + 0xc0] = a2\n 33922: a2 = u64 [sp + 0x88]\n 33926: a2 = a2 + 0x1\n 33929: a1 = a2 <u 0x1\n 33932: a4 = u64 [sp + 0xc8]\n 33936: a4 = a4 + a1\n 33939: u64 [sp + 0xc8] = a4\n 33943: a1 = a2 | a4\n 33946: a1 = a1 <u 0x1\n 33949: a4 = u64 [sp + 0x78]\n 33952: a5 = a4 + a1\n 33955: a4 = a5 <u a4\n 33958: a1 = u64 [sp + 0x80]\n 33962: a4 = a4 + a1\n 33965: t2 = u64 [sp + 0xa8]\n 33969: s1 = u64 [sp + 0x70]\n 33972: a1 = u64 [sp + 0x68]\n 33975: u64 [sp + 0xd8] = a1\n 33979: a1 = u64 [sp + 0x60]\n 33982: u64 [sp + 0xd0] = a1\n 33986: u64 [sp + 0xa0] = a0\n 33990: u64 [sp + 0xb8] = t0\n 33994: u64 [sp + 0xb0] = a3\n 33998: jump @1300\n      : @1306 (gas: 28)\n 34001: a0 = u64 [sp + 0x30]\n 34004: t1 = a5\n 34006: t2 = u64 [sp + 0xa8]\n 34010: t0 = t2 <u a0\n 34013: a4 = u64 [sp + 0x28]\n 34016: a1 = ra ^ a4\n 34019: a2 = ra <u a4\n 34022: a2 = t0 if a1 == 0\n 34025: a3 = u64 [sp + 0x20]\n 34028: a1 = s1 - a3\n 34031: a3 = s1 <u a3\n 34034: a5 = u64 [sp + 0x18]\n 34037: t1 = t1 - a5\n 34040: a5 = a1 <u a2\n 34043: a3 = a3 + a5\n 34046: a3 = t1 - a3\n 34049: a1 = a1 - a2\n 34052: a2 = ra - a4\n 34055: a2 = a2 - t0\n 34058: s1 = t2 - a0\n 34061: a2 = a2 | a3\n 34064: a3 = s1 | a1\n 34067: a3 = a3 | a2\n 34070: a1 = a1 | a2\n 34073: a3 = a3 >> 0x20\n 34076: a1 = a1 << 0x20\n 34079: a1 = a1 | a3\n 34082: jump @1311 if a1 == 0\n      : @1307 (gas: 1)\n 34085: trap\n      : @1308 (gas: 2)\n 34086: a1 = 0x20160\n 34091: jump @1310\n      : @1309 (gas: 2)\n 34093: a1 = 0x20160\n 34098: fallthrough\n      : @1310 (gas: 7)\n 34099: i32 a1 = a1 + 0\n 34101: a0 = 0x1\n 34104: a2 = 0\n 34106: ecalli 16 // 'seal_return'\n 34108: a1 = s1\n 34110: ra = 0x63c\n 34114: jump @37\n      : @1311 (gas: 2)\n 34117: a1 = s1\n 34119: ra = 1596, jump @37\n      : @1312 [@dyn 798] (gas: 7)\n 34125: i32 a1 = a0 + 0\n 34127: i32 a2 = s1 + 0\n 34129: a0 = 0\n 34131: ra = 0x63e\n 34135: ecalli 16 // 'seal_return'\n 34137: t0 = 0x640\n 34141: jump @2343\n      : @1313 [@dyn 799] (gas: 1)\n 34144: t0 = 1600, jump @2343\n      : @1314 [@dyn 800] (gas: 10)\n 34150: u64 [s1 + 824] = 0\n 34154: u64 [s1 + 816] = 0\n 34158: u64 [s1 + 808] = 0\n 34162: u64 [s1 + 800] = 0\n 34166: i32 a0 = s1 + 0x320\n 34170: ra = 0x642\n 34174: ecalli 19 // 'value_transferred'\n 34176: a4 = s1 + 0x300\n 34180: t0 = 0x644\n 34184: jump @2348\n      : @1315 [@dyn 801] (gas: 2)\n 34187: a4 = s1 + 0x300\n 34191: t0 = 1604, jump @2348\n      : @1316 [@dyn 802] (gas: 1)\n 34197: jump @1354 if a0 != 0\n      : @1317 (gas: 2)\n 34201: a0 = i32 [0x2014c]\n 34206: jump @1355 if a0 <=u 35\n      : @1318 (gas: 18)\n 34211: i32 a0 = s1 + 0x340\n 34215: a1 = 0x4\n 34218: ecalli 4 // 'call_data_load'\n 34220: a0 = u64 [s1 + 0x358]\n 34224: a1 = u64 [s1 + 0x350]\n 34228: a2 = u64 [s1 + 0x348]\n 34232: a3 = u64 [s1 + 0x340]\n 34236: u64 [s1 + 0x78] = a0\n 34239: u64 [s1 + 0x2f8] = a0\n 34243: u64 [s1 + 0x70] = a1\n 34246: u64 [s1 + 0x2f0] = a1\n 34250: u64 [s1 + 0x68] = a2\n 34253: u64 [s1 + 0x2e8] = a2\n 34257: a0 = s1 + 0x300\n 34261: a1 = s1 + 0x2e0\n 34265: u64 [s1 + 0x60] = a3\n 34268: u64 [s1 + 0x2e0] = a3\n 34272: ra = 1606, jump @1708\n      : @1319 [@dyn 803] (gas: 9)\n 34278: u64 [s1 + 888] = 0\n 34282: u64 [s1 + 880] = 0\n 34286: u64 [s1 + 872] = 0\n 34290: u64 [s1 + 864] = 0xa\n 34295: a0 = s1 + 0x2c0\n 34299: a1 = s1 + 0x360\n 34303: ra = 0x648\n 34307: t0 = 0x6\n 34310: jump @2259\n      : @1320 [@dyn 804] (gas: 1)\n 34313: t0 = 1610, jump @2296\n      : @1321 [@dyn 805] (gas: 1)\n 34319: jump @1326 if a1 != 0\n      : @1322 (gas: 1)\n 34322: t0 = 1612, jump @2321\n      : @1323 [@dyn 806] (gas: 5)\n 34328: u64 [s1 + 0x58] = a4\n 34331: u64 [s1 + 0x50] = a5\n 34334: u64 [s1 + 0x48] = a2\n 34337: u64 [s1 + 0x40] = a3\n 34340: ra = 1614, jump @1835\n      : @1324 [@dyn 807] (gas: 20)\n 34346: ra = u64 [s1 + 0x2a8]\n 34350: a2 = u64 [s1 + 0x2b8]\n 34354: t0 = u64 [s1 + 0x2a0]\n 34358: a4 = u64 [s1 + 0x2b0]\n 34362: a1 = u64 [s1 + 0x48]\n 34365: a0 = a1 ^ ra\n 34368: a5 = a1 <u ra\n 34371: a1 = u64 [s1 + 0x40]\n 34374: t1 = a1 <u t0\n 34377: a5 = t1 if a0 == 0\n 34380: a1 = u64 [s1 + 0x50]\n 34383: t2 = a1 <u a4\n 34386: a0 = u64 [s1 + 0x58]\n 34389: a3 = a0 ^ a2\n 34392: a0 = a0 <u a2\n 34395: a0 = t2 if a3 == 0\n 34398: a1 = a1 ^ a4\n 34401: a1 = a1 | a3\n 34404: a0 = a5 if a1 == 0\n 34407: jump @1343 if a0 == 0\n      : @1325 (gas: 3)\n 34411: ra = 0x650\n 34415: t0 = 0x28e\n 34419: jump @2232\n      : @1326 [@dyn 808] (gas: 5)\n 34422: a1 = 0\n 34424: a0 = 0\n 34426: t1 = 0\n 34428: t0 = 0\n 34430: fallthrough\n      : @1327 (gas: 19)\n 34431: u64 [s1 + 0x160] = a3\n 34435: u64 [s1 + 0x180] = a1\n 34439: a3 = u64 [s1 + 0x60]\n 34442: u64 [s1 + 0x1a0] = a3\n 34446: u64 [s1 + 448] = 0xa\n 34451: u64 [s1 + 472] = 0\n 34455: u64 [s1 + 464] = 0\n 34459: u64 [s1 + 456] = 0\n 34463: u64 [s1 + 0x168] = a2\n 34467: u64 [s1 + 0x188] = a0\n 34471: a2 = u64 [s1 + 0x68]\n 34474: u64 [s1 + 0x1a8] = a2\n 34478: u64 [s1 + 0x170] = a5\n 34482: u64 [s1 + 0x190] = t1\n 34486: a1 = u64 [s1 + 0x70]\n 34489: u64 [s1 + 0x1b0] = a1\n 34493: u64 [s1 + 0x178] = a4\n 34497: u64 [s1 + 0x198] = t0\n 34501: t0 = 1618, jump @2363\n      : @1328 [@dyn 809] (gas: 3)\n 34507: a5 = u64 [s1 + 0x78]\n 34510: u64 [s1 + 0x1b8] = a5\n 34514: ra = 1620, jump @1858\n      : @1329 [@dyn 810] (gas: 1)\n 34520: t0 = 1622, jump @2340\n      : @1330 [@dyn 811] (gas: 1)\n 34526: jump @1332 if a4 != 0\n      : @1331 (gas: 5)\n 34529: u64 [s1 + 96] = 0\n 34532: u64 [s1 + 104] = 0\n 34535: u64 [s1 + 112] = 0\n 34538: u64 [s1 + 120] = 0\n 34541: jump @1339\n      : @1332 (gas: 1)\n 34544: t0 = 1624, jump @2319\n      : @1333 [@dyn 812] (gas: 1)\n 34550: ra = 1626, jump @764\n      : @1334 [@dyn 813] (gas: 16)\n 34556: a2 = s1 + 0x100\n 34560: a0 = u64 [a2 + 0x58]\n 34563: u64 [s1 + 0x78] = a0\n 34566: a0 = u64 [a2 + 0x50]\n 34569: u64 [s1 + 0x70] = a0\n 34572: a0 = u64 [a2 + 0x48]\n 34575: u64 [s1 + 0x60] = a0\n 34578: a0 = u64 [a2 + 0x40]\n 34581: u64 [s1 + 0x68] = a0\n 34584: u64 [s1 + 280] = 0\n 34588: u64 [s1 + 272] = 0\n 34592: u64 [s1 + 264] = 0\n 34596: a1 = s1 + 0x100\n 34600: u64 [a2 + 0] = 0xa\n 34603: a0 = 0\n 34605: ra = 1628, jump @24\n      : @1335 [@dyn 814] (gas: 2)\n 34612: a1 = i32 [0x20150]\n 34617: jump @1337 if a1 >u 31\n      : @1336 (gas: 2)\n 34621: u32 [0x20150] = 0x20\n 34627: fallthrough\n      : @1337 (gas: 45)\n 34628: a0 = sp + 0xffffffffffffffe0\n 34631: a2 = a0 & 0xffffffffffffffe0\n 34634: u64 [s1 + 0x58] = a2\n 34637: sp = a2\n 34639: a0 = 0x20160\n 34644: i32 a0 = a0 + 0\n 34646: i32 a2 = a2 + 0\n 34648: a1 = 0x20\n 34651: ecalli 11 // 'hash_keccak_256'\n 34653: a3 = u64 [s1 + 0x58]\n 34656: a0 = u64 [a3]\n 34658: a1 = u64 [a3 + 0x8]\n 34661: a2 = u64 [a3 + 0x18]\n 34664: a3 = u64 [a3 + 0x10]\n 34667: t0 = reverse a0\n 34669: a1 = reverse a1\n 34671: a2 = reverse a2\n 34673: a3 = reverse a3\n 34675: a4 = u64 [s1 + 0x60]\n 34678: a4 = a4 + a3\n 34681: a5 = u64 [s1 + 0x68]\n 34684: a5 = a5 + a2\n 34687: a2 = a5 <u a2\n 34690: a4 = a4 + a2\n 34693: a0 = a4 ^ a3\n 34696: a3 = a4 <u a3\n 34699: a3 = a2 if a0 == 0\n 34702: a0 = u64 [s1 + 0x70]\n 34705: a0 = a0 + a1\n 34708: a3 = a3 + a0\n 34711: t1 = a3 <u a0\n 34714: a2 = u64 [s1 + 0x78]\n 34717: t0 = t0 + a2\n 34720: a0 = a0 <u a1\n 34723: a0 = a0 + t0\n 34726: a2 = a0 + t1\n 34729: u64 [s1 + 0xc0] = a5\n 34733: u64 [s1 + 0xc8] = a4\n 34737: u64 [s1 + 0xd0] = a3\n 34741: a0 = s1 + 0xe0\n 34745: a1 = s1 + 0xc0\n 34749: u64 [s1 + 0xd8] = a2\n 34753: ra = 0x65e\n 34757: t0 = 0x824\n 34761: jump @2259\n      : @1338 [@dyn 815] (gas: 9)\n 34764: a0 = u64 [s1 + 0xf8]\n 34768: u64 [s1 + 0x78] = a0\n 34771: a0 = u64 [s1 + 0xf0]\n 34775: u64 [s1 + 0x70] = a0\n 34778: a0 = u64 [s1 + 0xe8]\n 34782: u64 [s1 + 0x68] = a0\n 34785: a0 = u64 [s1 + 0xe0]\n 34789: u64 [s1 + 0x60] = a0\n 34792: fallthrough\n      : @1339 (gas: 3)\n 34793: a0 = s1 + 0xa0\n 34797: a1 = 0x40\n 34800: ra = 1632, jump @22\n      : @1340 [@dyn 816] (gas: 5)\n 34807: a0 = u64 [s1 + 0xb8]\n 34811: a1 = u64 [s1 + 0xb0]\n 34815: a2 = u64 [s1 + 0xa8]\n 34819: a3 = u64 [s1 + 0xa0]\n 34823: t0 = 1634, jump @2244\n      : @1341 [@dyn 817] (gas: 1)\n 34829: jump @1357 if a0 == 0\n      : @1342 (gas: 1)\n 34833: trap\n      : @1343 (gas: 24)\n 34834: a0 = u64 [s1 + 0x50]\n 34837: a0 = a0 - a4\n 34840: a1 = a0 - a5\n 34843: u64 [s1 + 0x30] = a1\n 34846: a0 = a0 <u a5\n 34849: a1 = u64 [s1 + 0x58]\n 34852: a1 = a1 - a2\n 34855: a1 = a1 - t2\n 34858: a1 = a1 - a0\n 34861: u64 [s1 + 0x38] = a1\n 34864: a0 = u64 [s1 + 0x48]\n 34867: a0 = a0 - ra\n 34870: a0 = a0 - t1\n 34873: u64 [s1 + 0x28] = a0\n 34876: a0 = u64 [s1 + 0x40]\n 34879: a0 = a0 - t0\n 34882: u64 [s1 + 0x20] = a0\n 34885: u64 [s1 + 632] = 0\n 34889: u64 [s1 + 624] = 0\n 34893: u64 [s1 + 616] = 0\n 34897: a1 = s1 + 0x260\n 34901: u64 [s1 + 608] = 0xa\n 34906: a0 = 0\n 34908: ra = 1636, jump @24\n      : @1344 [@dyn 818] (gas: 2)\n 34915: a1 = i32 [0x20150]\n 34920: jump @1346 if a1 >u 31\n      : @1345 (gas: 4)\n 34924: a1 = 0x20\n 34927: u32 [0x20150] = a1\n 34932: t0 = 0x666\n 34936: jump @2282\n      : @1346 (gas: 1)\n 34939: t0 = 1638, jump @2282\n      : @1347 [@dyn 819] (gas: 7)\n 34945: a0 = 0x20160\n 34950: i32 a0 = a0 + 0\n 34952: i32 a2 = a2 + 0\n 34954: a1 = 0x20\n 34957: ra = 0x668\n 34961: ecalli 11 // 'hash_keccak_256'\n 34963: fallthrough\n      : @1348 [@dyn 820] (gas: 22)\n 34964: a2 = u64 [s1 + 0x18]\n 34967: a0 = u64 [a2 + 0x18]\n 34970: a1 = u64 [a2 + 0x10]\n 34973: t0 = u64 [a2 + 0x8]\n 34976: a3 = u64 [a2]\n 34978: a0 = reverse a0\n 34980: a1 = reverse a1\n 34982: a4 = u64 [s1 + 0x28]\n 34985: a4 = a4 + a1\n 34988: a5 = u64 [s1 + 0x20]\n 34991: a5 = a5 + a0\n 34994: a0 = a5 <u a0\n 34997: a4 = a4 + a0\n 35000: a2 = a4 ^ a1\n 35003: a1 = a4 <u a1\n 35006: a1 = a0 if a2 == 0\n 35009: t1 = reverse a3\n 35011: a2 = reverse t0\n 35013: a3 = u64 [s1 + 0x30]\n 35016: a3 = a3 + a2\n 35019: a0 = u64 [s1 + 0x38]\n 35022: t0 = 1642, jump @2366\n      : @1349 [@dyn 821] (gas: 9)\n 35028: u64 [a2 + 0x80] = a5\n 35032: u64 [a2 + 0x88] = a4\n 35036: u64 [a2 + 0x90] = a1\n 35040: u64 [a2 + 0x98] = a0\n 35044: a0 = s1 + 0x240\n 35048: a1 = s1 + 0x380\n 35052: ra = 0x66c\n 35056: t0 = 0x6\n 35059: jump @2259\n      : @1350 [@dyn 822] (gas: 12)\n 35062: a0 = u64 [s1 + 0x240]\n 35066: a0 = a0 << 0x10\n 35069: a0 = a0 >> 0x10\n 35072: a1 = u64 [s1 + 0x78]\n 35075: a2 = u64 [s1 + 0x70]\n 35078: a1 = a1 | a2\n 35081: a2 = u64 [s1 + 0x60]\n 35084: a0 = a2 <u a0\n 35087: a2 = u64 [s1 + 0x68]\n 35090: a0 = 0 if a2 != 0\n 35092: a0 = 0 if a1 != 0\n 35094: jump @1352 if a0 == 0\n      : @1351 (gas: 9)\n 35097: a1 = 0\n 35099: a0 = 0\n 35101: t1 = 0\n 35103: t0 = 0\n 35105: a3 = u64 [s1 + 0x20]\n 35108: a2 = u64 [s1 + 0x28]\n 35111: a5 = u64 [s1 + 0x30]\n 35114: a4 = u64 [s1 + 0x38]\n 35117: jump @1327\n      : @1352 (gas: 11)\n 35120: a0 = u64 [s1 + 0x20]\n 35123: u64 [s1 + 0x200] = a0\n 35127: a0 = u64 [s1 + 0x28]\n 35130: u64 [s1 + 0x208] = a0\n 35134: a0 = u64 [s1 + 0x30]\n 35137: u64 [s1 + 0x210] = a0\n 35141: a0 = s1 + 0x220\n 35145: a1 = s1 + 0x200\n 35149: a2 = u64 [s1 + 0x38]\n 35152: u64 [s1 + 0x218] = a2\n 35156: ra = 1646, jump @1718\n      : @1353 [@dyn 823] (gas: 9)\n 35162: t0 = u64 [s1 + 0x238]\n 35166: t1 = u64 [s1 + 0x230]\n 35170: a0 = u64 [s1 + 0x228]\n 35174: a1 = u64 [s1 + 0x220]\n 35178: a4 = u64 [s1 + 0x58]\n 35181: a5 = u64 [s1 + 0x50]\n 35184: a2 = u64 [s1 + 0x48]\n 35187: a3 = u64 [s1 + 0x40]\n 35190: jump @1327\n      : @1354 (gas: 2)\n 35193: a1 = 0x20160\n 35198: jump @1356\n      : @1355 (gas: 2)\n 35200: a1 = 0x20160\n 35205: fallthrough\n      : @1356 (gas: 5)\n 35206: i32 a1 = a1 + 0\n 35208: a0 = 0x1\n 35211: a2 = 0\n 35213: ecalli 16 // 'seal_return'\n 35215: fallthrough\n      : @1357 (gas: 12)\n 35216: a0 = u64 [s1 + 0x60]\n 35219: u64 [s1 + 0x80] = a0\n 35223: a0 = u64 [s1 + 0x68]\n 35226: u64 [s1 + 0x88] = a0\n 35230: a0 = u64 [s1 + 0x70]\n 35233: u64 [s1 + 0x90] = a0\n 35237: a1 = s1 + 0x80\n 35241: a0 = u64 [s1 + 0x78]\n 35244: u64 [s1 + 0x98] = a0\n 35248: a0 = a3\n 35250: u64 [s1 + 0x78] = a3\n 35253: ra = 1648, jump @24\n      : @1358 [@dyn 824] (gas: 3)\n 35260: a1 = 0x20\n 35263: a0 = u64 [s1 + 0x78]\n 35266: ra = 1650, jump @37\n      : @1359 [@dyn 825] (gas: 1)\n 35273: t0 = 1652, jump @2280\n      : @1360 [@dyn 826] (gas: 3)\n 35279: ra = 0x676\n 35283: ecalli 16 // 'seal_return'\n 35285: fallthrough\n      : @1361 [@dyn 827] (gas: 13)\n 35286: sp = sp + 0xffffffffffffff00\n 35290: u64 [sp + 0xf8] = ra\n 35294: u64 [sp + 0xf0] = s0\n 35298: u64 [sp + 0xe8] = s1\n 35302: s0 = sp + 0x100\n 35306: sp = sp & 0xffffffffffffffe0\n 35309: u64 [sp + 184] = 0\n 35313: u64 [sp + 176] = 0\n 35317: u64 [sp + 168] = 0\n 35321: u64 [sp + 160] = 0\n 35325: i32 a0 = sp + 0xa0\n 35329: ecalli 19 // 'value_transferred'\n 35331: fallthrough\n      : @1362 (gas: 8)\n 35332: a0 = u64 [sp + 0xb0]\n 35336: a1 = u64 [sp + 0xb8]\n 35340: a2 = u64 [sp + 0xa8]\n 35344: a3 = u64 [sp + 0xa0]\n 35348: a1 = a1 | a2\n 35351: a0 = a0 | a3\n 35354: a0 = a0 | a1\n 35357: jump @1369 if a0 != 0\n      : @1363 (gas: 2)\n 35360: a0 = i32 [0x2014c]\n 35365: jump @1370 if a0 <=u 3\n      : @1364 (gas: 19)\n 35369: i32 a0 = sp + 0xc0\n 35373: ecalli 1 // 'block_number'\n 35375: a0 = u64 [sp + 0xd8]\n 35379: a1 = u64 [sp + 0xd0]\n 35383: a2 = u64 [sp + 0xc8]\n 35387: a3 = u64 [sp + 0xc0]\n 35391: u64 [sp + 0x18] = a0\n 35394: u64 [sp + 0x78] = a0\n 35397: u64 [sp + 0x10] = a1\n 35400: u64 [sp + 0x70] = a1\n 35403: u64 [sp + 0x8] = a2\n 35406: u64 [sp + 0x68] = a2\n 35409: a0 = sp + 0x80\n 35413: a1 = sp + 0x60\n 35416: u64 [sp] = a3\n 35418: u64 [sp + 0x60] = a3\n 35421: ra = 0x678\n 35425: t0 = 0x884\n 35429: jump @2372\n      : @1365 [@dyn 828] (gas: 3)\n 35432: a0 = sp + 0x40\n 35435: a1 = 0x40\n 35438: ra = 1658, jump @22\n      : @1366 [@dyn 829] (gas: 5)\n 35445: a0 = u64 [sp + 0x58]\n 35448: a1 = u64 [sp + 0x50]\n 35451: a2 = u64 [sp + 0x48]\n 35454: s1 = u64 [sp + 0x40]\n 35457: t0 = 1660, jump @2243\n      : @1367 [@dyn 830] (gas: 1)\n 35463: jump @1372 if a0 == 0\n      : @1368 (gas: 1)\n 35466: trap\n      : @1369 (gas: 2)\n 35467: a1 = 0x20160\n 35472: jump @1371\n      : @1370 (gas: 2)\n 35474: a1 = 0x20160\n 35479: fallthrough\n      : @1371 (gas: 7)\n 35480: i32 a1 = a1 + 0\n 35482: a0 = 0x1\n 35485: a2 = 0\n 35487: ra = 0x67e\n 35491: ecalli 16 // 'seal_return'\n 35493: t0 = 0x680\n 35497: jump @2284\n      : @1372 [@dyn 831] (gas: 1)\n 35500: t0 = 1664, jump @2284\n      : @1373 [@dyn 832] (gas: 1)\n 35506: ra = 1666, jump @24\n      : @1374 [@dyn 833] (gas: 3)\n 35513: a1 = 0x20\n 35516: a0 = s1\n 35518: ra = 1668, jump @37\n      : @1375 [@dyn 834] (gas: 1)\n 35525: t0 = 1670, jump @2280\n      : @1376 [@dyn 835] (gas: 4)\n 35531: ra = 0x688\n 35535: ecalli 16 // 'seal_return'\n 35537: t0 = 0x68a\n 35541: jump @2255\n      : @1377 [@dyn 836] (gas: 1)\n 35544: t0 = 1674, jump @2255\n      : @1378 [@dyn 837] (gas: 5)\n 35550: ra = 0x68c\n 35554: ecalli 19 // 'value_transferred'\n 35556: a4 = s1 + 0x200\n 35560: t0 = 0x68e\n 35564: jump @2362\n      : @1379 [@dyn 838] (gas: 2)\n 35567: a4 = s1 + 0x200\n 35571: t0 = 1678, jump @2362\n      : @1380 [@dyn 839] (gas: 1)\n 35577: jump @1424 if a0 != 0\n      : @1381 (gas: 2)\n 35581: a0 = i32 [0x2014c]\n 35586: jump @1425 if a0 <=u 3\n      : @1382 (gas: 3)\n 35591: a0 = s1 + 0x280\n 35595: a1 = 0x40\n 35598: ra = 1680, jump @22\n      : @1383 [@dyn 840] (gas: 1)\n 35605: t0 = 1682, jump @2270\n      : @1384 [@dyn 841] (gas: 6)\n 35611: u64 [s1 + 704] = 0x4\n 35616: a0 = s1 + 0x260\n 35620: a1 = s1 + 0x2c0\n 35624: ra = 0x694\n 35628: t0 = 0x6\n 35631: jump @2259\n      : @1385 [@dyn 842] (gas: 1)\n 35634: t0 = 1686, jump @2272\n      : @1386 [@dyn 843] (gas: 1)\n 35640: ra = 1688, jump @255\n      : @1387 [@dyn 844] (gas: 1)\n 35646: t0 = 1690, jump @2332\n      : @1388 [@dyn 845] (gas: 1)\n 35652: jump @1423 if a1 != 0\n      : @1389 (gas: 1)\n 35656: t0 = 1692, jump @2287\n      : @1390 [@dyn 846] (gas: 1)\n 35662: ra = 1694, jump @24\n      : @1391 [@dyn 847] (gas: 3)\n 35669: a3 = u64 [s1 + 0xb8]\n 35673: a0 = a3 & 0x1\n 35676: jump @1398 if a0 != 0\n      : @1392 (gas: 1)\n 35679: t0 = 1696, jump @2302\n      : @1393 [@dyn 848] (gas: 1)\n 35685: jump @1423 if a1 == 0\n      : @1394 (gas: 1)\n 35689: t0 = 1698, jump @2294\n      : @1395 [@dyn 849] (gas: 1)\n 35695: ra = 1700, jump @24\n      : @1396 [@dyn 850] (gas: 1)\n 35702: t0 = 1702, jump @2281\n      : @1397 [@dyn 851] (gas: 1)\n 35708: jump @1414\n      : @1398 (gas: 1)\n 35711: t0 = 1704, jump @2359\n      : @1399 [@dyn 852] (gas: 4)\n 35717: a1 = s1 + 0x1e0\n 35721: u64 [s1 + 480] = 0x4\n 35726: a0 = 0\n 35728: ra = 1706, jump @24\n      : @1400 [@dyn 853] (gas: 6)\n 35735: a0 = sp + 0xffffffffffffffe0\n 35738: a0 = a0 & 0xffffffffffffffe0\n 35741: u64 [s1 + 0x58] = a0\n 35744: sp = a0\n 35746: a1 = i32 [0x20150]\n 35751: jump @1402 if a1 >u 31\n      : @1401 (gas: 2)\n 35755: u32 [0x20150] = 0x20\n 35761: fallthrough\n      : @1402 (gas: 10)\n 35762: a0 = sp + 0xffffffffffffffe0\n 35765: a2 = a0 & 0xffffffffffffffe0\n 35768: u64 [s1 + 0xa8] = a2\n 35772: sp = a2\n 35774: a0 = 0x20160\n 35779: i32 a0 = a0 + 0\n 35781: i32 a2 = a2 + 0\n 35783: a1 = 0x20\n 35786: ecalli 11 // 'hash_keccak_256'\n 35788: t0 = 1708, jump @2230\n      : @1403 [@dyn 854] (gas: 18)\n 35794: t0 = u64 [s1 + 0x58]\n 35797: a3 = a2\n 35799: a5 = t0\n 35801: u64 [a5 + 0x18] = a2\n 35804: u64 [s1 + 0x80] = ra\n 35808: u64 [t0 + 0x10] = ra\n 35811: ra = a1\n 35813: u64 [a5 + 0x8] = a1\n 35816: a2 = a0\n 35818: u64 [a5] = a0\n 35820: a0 = u64 [s1 + 0x20]\n 35823: a4 = a4 + a0\n 35826: u64 [s1 + 0x40] = a4\n 35829: a0 = a4 <u a0\n 35832: a1 = u64 [s1 + 0x18]\n 35835: a0 = a0 + a1\n 35838: u64 [s1 + 0x38] = a0\n 35841: fallthrough\n      : @1404 (gas: 21)\n 35842: u64 [s1 + 0x88] = a3\n 35846: u64 [s1 + 0x90] = ra\n 35850: u64 [s1 + 0x98] = a2\n 35854: a0 = u64 [s1 + 0x60]\n 35857: a1 = u64 [s1 + 0xb8]\n 35861: a0 = a1 <u a0\n 35864: a2 = u64 [s1 + 0x70]\n 35867: a1 = t2 ^ a2\n 35870: a2 = t2 <u a2\n 35873: a2 = a0 if a1 == 0\n 35876: a4 = u64 [s1 + 0x68]\n 35879: a0 = t1 <u a4\n 35882: a3 = u64 [s1 + 0x78]\n 35885: a1 = u64 [s1 + 0xb0]\n 35889: a5 = a1 ^ a3\n 35892: a3 = a1 <u a3\n 35895: a3 = a0 if a5 == 0\n 35898: a0 = t1 ^ a4\n 35901: a0 = a0 | a5\n 35904: a3 = a2 if a0 == 0\n 35907: jump @1413 if a3 == 0\n      : @1405 (gas: 7)\n 35911: a0 = s1 + 0x1c0\n 35915: a1 = t0\n 35917: u64 [s1 + 0xa8] = t1\n 35921: u64 [s1 + 0xa0] = t2\n 35925: ra = 0x6ae\n 35929: t0 = 0x6\n 35932: jump @2259\n      : @1406 [@dyn 855] (gas: 1)\n 35935: t0 = 1712, jump @2245\n      : @1407 [@dyn 856] (gas: 6)\n 35941: t0 = a1 <u a5\n 35944: a5 = u64 [s1 + 0xb0]\n 35948: a3 = u64 [s1 + 0x38]\n 35951: a5 = a5 + a3\n 35954: a5 = a5 + t0\n 35957: t0 = 1714, jump @2322\n      : @1408 [@dyn 857] (gas: 1)\n 35963: jump @1423 if a1 != 0\n      : @1409 (gas: 1)\n 35967: t0 = 1716, jump @2304\n      : @1410 [@dyn 858] (gas: 1)\n 35973: ra = 1718, jump @24\n      : @1411 [@dyn 859] (gas: 31)\n 35980: t0 = u64 [s1 + 0x98]\n 35984: t0 = t0 + 0x1\n 35987: a0 = t0 <u 0x1\n 35990: a3 = u64 [s1 + 0x90]\n 35994: a3 = a3 + a0\n 35997: a0 = t0 | a3\n 36000: a0 = a0 <u 0x1\n 36003: a1 = u64 [s1 + 0x80]\n 36007: t2 = a1 + a0\n 36010: a1 = t2 <u a1\n 36013: a0 = u64 [s1 + 0x88]\n 36017: a0 = a0 + a1\n 36020: a1 = u64 [s1 + 0xb8]\n 36024: t1 = a1 + 0x20\n 36027: a2 = t1 <u a1\n 36030: a4 = u64 [s1 + 0xa0]\n 36034: a1 = a4 + a2\n 36037: a4 = a1 <u a4\n 36040: a4 = a2 if a2 == 0\n 36043: a2 = u64 [s1 + 0xa8]\n 36047: a4 = a4 + a2\n 36050: a2 = a4 <u a2\n 36053: a5 = u64 [s1 + 0xb0]\n 36057: a5 = a5 + a2\n 36060: u64 [s1 + 0xb0] = a5\n 36064: ra = a3\n 36066: a5 = u64 [s1 + 0x58]\n 36069: u64 [a5 + 0x8] = a3\n 36072: a2 = t0\n 36074: u64 [a5] = t0\n 36076: t0 = 1720, jump @2351\n      : @1412 [@dyn 860] (gas: 2)\n 36082: t0 = a5\n 36084: jump @1404\n      : @1413 (gas: 3)\n 36087: a5 = u64 [s1 + 0x30]\n 36090: t0 = 0x6ba\n 36094: jump @2219\n      : @1414 (gas: 1)\n 36097: t0 = 1722, jump @2219\n      : @1415 [@dyn 861] (gas: 1)\n 36103: ra = 1724, jump @149\n      : @1416 [@dyn 862] (gas: 3)\n 36109: a0 = s1 + 0x120\n 36113: a1 = 0x40\n 36116: ra = 1726, jump @22\n      : @1417 [@dyn 863] (gas: 1)\n 36123: t0 = 1728, jump @2233\n      : @1418 [@dyn 864] (gas: 1)\n 36129: ra = 1730, jump @871\n      : @1419 [@dyn 865] (gas: 7)\n 36135: a4 = u64 [s1 + 0xa8]\n 36139: a2 = u64 [s1 + 0xa0]\n 36143: a0 = u64 [s1 + 0xb8]\n 36147: a0 = a0 | a4\n 36150: a3 = u64 [s1 + 0xb0]\n 36154: a1 = a2 | a3\n 36157: t0 = 1732, jump @2313\n      : @1420 [@dyn 866] (gas: 1)\n 36163: jump @1423 if a0 != 0\n      : @1421 (gas: 26)\n 36166: t0 = a3\n 36168: a5 = s1 + 0x100\n 36172: a0 = u64 [a5 + 0x8]\n 36175: a1 = u64 [a5 + 0x18]\n 36178: u64 [s1 + 0x98] = a1\n 36182: t1 = u64 [s1 + 0x100]\n 36186: a3 = u64 [a5 + 0x10]\n 36189: t2 = a0 ^ a4\n 36192: a5 = a0 <u a4\n 36195: ra = t1 <u a2\n 36198: a5 = ra if t2 == 0\n 36201: a1 = a3 - t0\n 36204: t2 = a1 - a5\n 36207: a1 = a1 <u a5\n 36210: u64 [s1 + 0x90] = a1\n 36214: a3 = a3 <u t0\n 36217: a5 = u64 [s1 + 0xb8]\n 36221: a1 = u64 [s1 + 0x98]\n 36225: a5 = a1 - a5\n 36228: a5 = a5 - a3\n 36231: a1 = u64 [s1 + 0x90]\n 36235: a5 = a5 - a1\n 36238: a0 = a0 - a4\n 36241: a0 = a0 - ra\n 36244: a1 = t1 - a2\n 36247: t0 = 1734, jump @2220\n      : @1422 [@dyn 867] (gas: 1)\n 36253: jump @1427 if a0 == 0\n      : @1423 (gas: 1)\n 36256: trap\n      : @1424 (gas: 2)\n 36257: a1 = 0x20160\n 36262: jump @1426\n      : @1425 (gas: 2)\n 36264: a1 = 0x20160\n 36269: fallthrough\n      : @1426 (gas: 5)\n 36270: i32 a1 = a1 + 0\n 36272: a0 = 0x1\n 36275: a2 = 0\n 36277: ecalli 16 // 'seal_return'\n 36279: fallthrough\n      : @1427 (gas: 3)\n 36280: a0 = a2\n 36282: u64 [s1 + 0xb8] = a1\n 36286: ra = 1736, jump @37\n      : @1428 [@dyn 868] (gas: 6)\n 36293: i32 a1 = a0 + 0\n 36295: a2 = i32 [s1 + 0xb8]\n 36299: a0 = 0\n 36301: ra = 0x6ca\n 36305: ecalli 16 // 'seal_return'\n 36307: fallthrough\n      : @1429 [@dyn 869] (gas: 8)\n 36308: sp = sp + 0xfffffffffffffec0\n 36312: u64 [sp + 0x138] = ra\n 36316: u64 [sp + 0x130] = s0\n 36320: u64 [sp + 0x128] = s1\n 36324: s0 = sp + 0x140\n 36328: sp = sp & 0xffffffffffffffe0\n 36331: s1 = sp\n 36333: t0 = 1740, jump @2370\n      : @1430 [@dyn 870] (gas: 4)\n 36339: u64 [s1 + 256] = 0\n 36343: i32 a0 = s1 + 0x100\n 36347: ecalli 19 // 'value_transferred'\n 36349: fallthrough\n      : @1431 (gas: 9)\n 36350: a4 = s1 + 0x100\n 36354: a0 = u64 [a4 + 0x10]\n 36357: a1 = u64 [a4 + 0x18]\n 36360: a2 = u64 [a4 + 0x8]\n 36363: a3 = u64 [a4]\n 36365: a1 = a1 | a2\n 36368: a0 = a0 | a3\n 36371: a0 = a0 | a1\n 36374: jump @1446 if a0 != 0\n      : @1432 (gas: 3)\n 36378: a0 = i32 [0x2014c]\n 36383: a1 = 0x23\n 36386: jump @1447 if a1 >=u a0\n      : @1433 (gas: 4)\n 36390: a0 = s1 + 0xe0\n 36394: ra = 0x6ce\n 36398: t0 = 0x484\n 36402: jump @2251\n      : @1434 [@dyn 871] (gas: 10)\n 36405: a0 = u64 [s1 + 0xe0]\n 36409: a1 = u64 [s1 + 0xe8]\n 36413: a2 = u32 [s1 + 0xf0]\n 36417: u64 [s1 + 216] = 0\n 36421: u64 [s1 + 0xd0] = a2\n 36425: u64 [s1 + 0xc8] = a1\n 36429: a1 = s1 + 0xc0\n 36433: u64 [s1 + 0xc0] = a0\n 36437: a0 = 0\n 36439: ra = 1744, jump @24\n      : @1435 [@dyn 872] (gas: 7)\n 36446: u64 [s1 + 184] = 0\n 36450: u64 [s1 + 176] = 0\n 36454: u64 [s1 + 160] = 0x9\n 36459: a0 = 0x20\n 36462: a1 = s1 + 0xa0\n 36466: u64 [s1 + 168] = 0\n 36470: ra = 1746, jump @24\n      : @1436 [@dyn 873] (gas: 2)\n 36477: a1 = i32 [0x20150]\n 36482: jump @1438 if a1 >u 63\n      : @1437 (gas: 4)\n 36486: a1 = 0x40\n 36489: u32 [0x20150] = a1\n 36494: t0 = 0x6d4\n 36498: jump @2282\n      : @1438 (gas: 1)\n 36501: t0 = 1748, jump @2282\n      : @1439 [@dyn 874] (gas: 9)\n 36507: a0 = 0x20160\n 36512: i32 a0 = a0 + 0\n 36514: i32 a2 = a2 + 0\n 36516: a1 = 0x40\n 36519: ra = 0x6d6\n 36523: ecalli 11 // 'hash_keccak_256'\n 36525: a3 = u64 [s1 + 0x18]\n 36528: t0 = 0x6d8\n 36532: jump @2224\n      : @1440 [@dyn 875] (gas: 2)\n 36535: a3 = u64 [s1 + 0x18]\n 36538: t0 = 1752, jump @2224\n      : @1441 [@dyn 876] (gas: 7)\n 36544: u64 [s1 + 0x78] = a2\n 36547: u64 [s1 + 0x70] = a1\n 36550: u64 [s1 + 0x68] = a0\n 36553: a0 = s1 + 0x80\n 36557: a1 = s1 + 0x60\n 36560: u64 [s1 + 0x60] = a4\n 36563: ra = 1754, jump @1744\n      : @1442 [@dyn 877] (gas: 11)\n 36569: a0 = u64 [s1 + 0x98]\n 36573: u64 [s1 + 0x18] = a0\n 36576: a0 = u64 [s1 + 0x90]\n 36580: u64 [s1 + 0x10] = a0\n 36583: a0 = u64 [s1 + 0x88]\n 36587: u64 [s1 + 0x8] = a0\n 36590: a0 = u64 [s1 + 0x80]\n 36594: u64 [s1] = a0\n 36596: a0 = s1 + 0x40\n 36599: a1 = 0x40\n 36602: ra = 1756, jump @22\n      : @1443 [@dyn 878] (gas: 5)\n 36609: a0 = u64 [s1 + 0x58]\n 36612: a1 = u64 [s1 + 0x50]\n 36615: a2 = u64 [s1 + 0x48]\n 36618: a3 = u64 [s1 + 0x40]\n 36621: t0 = 1758, jump @2244\n      : @1444 [@dyn 879] (gas: 1)\n 36627: jump @1449 if a0 == 0\n      : @1445 (gas: 1)\n 36630: trap\n      : @1446 (gas: 2)\n 36631: a1 = 0x20160\n 36636: jump @1448\n      : @1447 (gas: 2)\n 36638: a1 = 0x20160\n 36643: fallthrough\n      : @1448 (gas: 7)\n 36644: i32 a1 = a1 + 0\n 36646: a0 = 0x1\n 36649: a2 = 0\n 36651: ra = 0x6e0\n 36655: ecalli 16 // 'seal_return'\n 36657: t0 = 0x6e2\n 36661: jump @2325\n      : @1449 [@dyn 880] (gas: 1)\n 36664: t0 = 1762, jump @2325\n      : @1450 [@dyn 881] (gas: 1)\n 36670: ra = 1764, jump @24\n      : @1451 [@dyn 882] (gas: 3)\n 36677: a1 = 0x20\n 36680: a0 = u64 [s1 + 0x18]\n 36683: ra = 1766, jump @37\n      : @1452 [@dyn 883] (gas: 1)\n 36690: t0 = 1768, jump @2280\n      : @1453 [@dyn 884] (gas: 3)\n 36696: ra = 0x6ea\n 36700: ecalli 16 // 'seal_return'\n 36702: fallthrough\n      : @1454 [@dyn 885] (gas: 13)\n 36703: sp = sp + 0xfffffffffffffea0\n 36707: u64 [sp + 0x158] = ra\n 36711: u64 [sp + 0x150] = s0\n 36715: u64 [sp + 0x148] = s1\n 36719: s0 = sp + 0x160\n 36723: sp = sp & 0xffffffffffffffe0\n 36726: u64 [sp + 280] = 0\n 36730: u64 [sp + 272] = 0\n 36734: u64 [sp + 264] = 0\n 36738: u64 [sp + 256] = 0\n 36742: i32 a0 = sp + 0x100\n 36746: ecalli 19 // 'value_transferred'\n 36748: fallthrough\n      : @1455 (gas: 8)\n 36749: a0 = u64 [sp + 0x110]\n 36753: a1 = u64 [sp + 0x118]\n 36757: a2 = u64 [sp + 0x108]\n 36761: a3 = u64 [sp + 0x100]\n 36765: a1 = a1 | a2\n 36768: a0 = a0 | a3\n 36771: a0 = a0 | a1\n 36774: jump @1465 if a0 != 0\n      : @1456 (gas: 3)\n 36778: a0 = i32 [0x2014c]\n 36783: a1 = 0x43\n 36786: jump @1466 if a1 >=u a0\n      : @1457 (gas: 4)\n 36790: a0 = sp + 0xe0\n 36794: ra = 0x6ec\n 36798: t0 = 0x484\n 36802: jump @2251\n      : @1458 [@dyn 886] (gas: 25)\n 36805: a0 = u64 [sp + 0xe0]\n 36809: u64 [sp + 0x38] = a0\n 36812: a0 = u64 [sp + 0xe8]\n 36816: u64 [sp + 0x30] = a0\n 36819: a0 = u64 [sp + 0xf0]\n 36823: u64 [sp + 0x28] = a0\n 36826: a0 = u64 [sp + 0xf8]\n 36830: u64 [sp + 0x20] = a0\n 36833: i32 a0 = sp + 0x120\n 36837: a1 = 0x24\n 36840: ecalli 4 // 'call_data_load'\n 36842: a0 = u64 [sp + 0x120]\n 36846: u64 [sp + 0x18] = a0\n 36849: a0 = u64 [sp + 0x128]\n 36853: u64 [sp + 0x10] = a0\n 36856: a0 = u64 [sp + 0x130]\n 36860: u64 [sp + 0x8] = a0\n 36863: a0 = u64 [sp + 0x138]\n 36867: u64 [sp] = a0\n 36869: s1 = 0x30160\n 36874: i32 a0 = s1 + 0\n 36876: ra = 0x6ee\n 36880: ecalli 6 // 'caller'\n 36882: t0 = 0x6f0\n 36886: jump @2267\n      : @1459 [@dyn 887] (gas: 1)\n 36889: t0 = 1776, jump @2267\n      : @1460 [@dyn 888] (gas: 23)\n 36895: u64 [sp + 0x98] = a2\n 36899: a2 = u64 [sp + 0x8]\n 36902: u64 [sp + 0x90] = a2\n 36906: a2 = u64 [sp + 0x10]\n 36909: u64 [sp + 0x88] = a2\n 36913: a2 = u64 [sp + 0x18]\n 36916: u64 [sp + 0x80] = a2\n 36920: a2 = u64 [sp + 0x20]\n 36923: u64 [sp + 0xb8] = a2\n 36927: a2 = u64 [sp + 0x28]\n 36930: u64 [sp + 0xb0] = a2\n 36934: a2 = u64 [sp + 0x30]\n 36937: u64 [sp + 0xa8] = a2\n 36941: a2 = u64 [sp + 0x38]\n 36944: u64 [sp + 0xa0] = a2\n 36948: u64 [sp + 216] = 0\n 36952: u64 [sp + 0xd0] = a1\n 36956: u64 [sp + 0xc8] = a0\n 36960: a0 = sp + 0xc0\n 36964: a1 = sp + 0xa0\n 36968: a2 = sp + 0x80\n 36972: u64 [sp + 0xc0] = a3\n 36976: ra = 1778, jump @1669\n      : @1461 [@dyn 889] (gas: 3)\n 36982: a0 = sp + 0x60\n 36985: a1 = 0x40\n 36988: ra = 1780, jump @22\n      : @1462 [@dyn 890] (gas: 5)\n 36995: a0 = u64 [sp + 0x78]\n 36998: a1 = u64 [sp + 0x70]\n 37001: a2 = u64 [sp + 0x68]\n 37004: s1 = u64 [sp + 0x60]\n 37007: t0 = 1782, jump @2243\n      : @1463 [@dyn 891] (gas: 1)\n 37013: jump @1468 if a0 == 0\n      : @1464 (gas: 1)\n 37016: trap\n      : @1465 (gas: 2)\n 37017: a1 = 0x20160\n 37022: jump @1467\n      : @1466 (gas: 2)\n 37024: a1 = 0x20160\n 37029: fallthrough\n      : @1467 (gas: 5)\n 37030: i32 a1 = a1 + 0\n 37032: a0 = 0x1\n 37035: a2 = 0\n 37037: ecalli 16 // 'seal_return'\n 37039: fallthrough\n      : @1468 (gas: 7)\n 37040: u64 [sp + 88] = 0\n 37043: u64 [sp + 80] = 0\n 37046: u64 [sp + 72] = 0\n 37049: a1 = sp + 0x40\n 37052: u64 [sp + 64] = 0x1\n 37056: a0 = s1\n 37058: ra = 1784, jump @24\n      : @1469 [@dyn 892] (gas: 3)\n 37065: a1 = 0x20\n 37068: a0 = s1\n 37070: ra = 1786, jump @37\n      : @1470 [@dyn 893] (gas: 1)\n 37077: t0 = 1788, jump @2280\n      : @1471 [@dyn 894] (gas: 4)\n 37083: ra = 0x6fe\n 37087: ecalli 16 // 'seal_return'\n 37089: t0 = 0x700\n 37093: jump @2251\n      : @1472 [@dyn 895] (gas: 1)\n 37096: t0 = 1792, jump @2251\n      : @1473 [@dyn 896] (gas: 3)\n 37102: a1 = 0x84\n 37106: ecalli 4 // 'call_data_load'\n 37108: t0 = 1794, jump @2228\n      : @1474 [@dyn 897] (gas: 1)\n 37114: ret\n      : @1475 [@dyn 898] (gas: 3)\n 37116: a1 = 0xa4\n 37120: ecalli 4 // 'call_data_load'\n 37122: t0 = 1798, jump @2228\n      : @1476 [@dyn 899] (gas: 1)\n 37128: ret\n      : @1477 (gas: 9)\n 37130: a4 = s1 + 0x400\n 37134: a0 = u64 [a4 + 0xf0]\n 37138: a1 = u64 [a4 + 0xf8]\n 37142: a2 = u64 [a4 + 0xe8]\n 37146: a3 = u64 [a4 + 0xe0]\n 37150: a1 = a1 | a2\n 37153: a0 = a0 | a3\n 37156: a0 = a0 | a1\n 37159: jump @1516 if a0 != 0\n      : @1478 (gas: 3)\n 37163: a0 = i32 [0x2014c]\n 37168: a1 = 0xc3\n 37172: jump @1517 if a1 >=u a0\n      : @1479 (gas: 4)\n 37176: a0 = s1 + 0x4c0\n 37180: ra = 0x708\n 37184: t0 = 0x484\n 37188: jump @2251\n      : @1480 [@dyn 900] (gas: 12)\n 37191: a0 = u64 [s1 + 0x4d8]\n 37195: u64 [s1 + 0xa0] = a0\n 37199: a0 = u64 [s1 + 0x4d0]\n 37203: u64 [s1 + 0xc8] = a0\n 37207: a0 = u64 [s1 + 0x4c8]\n 37211: u64 [s1 + 0xd0] = a0\n 37215: a0 = u64 [s1 + 0x4c0]\n 37219: u64 [s1 + 0xd8] = a0\n 37223: a0 = s1 + 0x4a0\n 37227: ra = 0x70a\n 37231: t0 = 0x498\n 37235: jump @2329\n      : @1481 [@dyn 901] (gas: 12)\n 37238: a0 = u64 [s1 + 0x4b8]\n 37242: u64 [s1 + 0xa8] = a0\n 37246: a0 = u64 [s1 + 0x4b0]\n 37250: u64 [s1 + 0xb0] = a0\n 37254: a0 = u64 [s1 + 0x4a8]\n 37258: u64 [s1 + 0xb8] = a0\n 37262: a0 = u64 [s1 + 0x4a0]\n 37266: u64 [s1 + 0xc0] = a0\n 37270: a0 = s1 + 0x480\n 37274: ra = 0x70c\n 37278: t0 = 0x49c\n 37282: jump @2251\n      : @1482 [@dyn 902] (gas: 14)\n 37285: a1 = s1 + 0x400\n 37289: a0 = u64 [a1 + 0x98]\n 37293: a2 = s1 + 0x100\n 37297: u64 [a2 + 0x18] = a0\n 37300: a0 = u64 [a1 + 0x90]\n 37304: u64 [a2 + 0x8] = a0\n 37307: a0 = u64 [a1 + 0x88]\n 37311: u64 [a2] = a0\n 37313: a0 = u64 [a1 + 0x80]\n 37317: u64 [a2 + 0x10] = a0\n 37320: i32 a0 = s1 + 0x500\n 37324: a1 = 0x64\n 37327: ecalli 4 // 'call_data_load'\n 37329: fallthrough\n      : @1483 (gas: 14)\n 37330: a4 = s1 + 0x500\n 37334: a2 = u64 [a4 + 0x18]\n 37337: a0 = u64 [a4 + 0x10]\n 37340: a1 = u64 [a4]\n 37342: a3 = u64 [a4 + 0x8]\n 37345: u64 [s1 + 0x90] = a0\n 37349: u64 [s1 + 0x88] = a2\n 37353: a0 = a0 | a2\n 37356: u64 [s1 + 0x98] = a1\n 37360: a1 = a1 <u 0x100\n 37364: u64 [s1 + 0x80] = a3\n 37368: a1 = 0 if a3 != 0\n 37370: a1 = 0 if a0 != 0\n 37372: jump @1518 if a1 == 0\n      : @1484 (gas: 4)\n 37376: a0 = s1 + 0x460\n 37380: ra = 0x70e\n 37384: t0 = 0x700\n 37388: jump @2251\n      : @1485 [@dyn 903] (gas: 12)\n 37391: a0 = u64 [s1 + 0x478]\n 37395: u64 [s1 + 0x60] = a0\n 37398: a0 = u64 [s1 + 0x470]\n 37402: u64 [s1 + 0x68] = a0\n 37405: a0 = u64 [s1 + 0x468]\n 37409: u64 [s1 + 0x70] = a0\n 37412: a0 = u64 [s1 + 0x460]\n 37416: u64 [s1 + 0x78] = a0\n 37419: a0 = s1 + 0x440\n 37423: ra = 0x710\n 37427: t0 = 0x704\n 37431: jump @2251\n      : @1486 [@dyn 904] (gas: 12)\n 37434: a1 = s1 + 0x400\n 37438: a0 = u64 [a1 + 0x58]\n 37441: u64 [s1 + 0x40] = a0\n 37444: a0 = u64 [a1 + 0x50]\n 37447: u64 [s1 + 0x48] = a0\n 37450: a0 = u64 [a1 + 0x48]\n 37453: u64 [s1 + 0x50] = a0\n 37456: a0 = u64 [a1 + 0x40]\n 37459: u64 [s1 + 0x58] = a0\n 37462: i32 a0 = s1 + 0x520\n 37466: ecalli 12 // 'now'\n 37468: fallthrough\n      : @1487 (gas: 21)\n 37469: a1 = s1 + 0x500\n 37473: a0 = u64 [a1 + 0x38]\n 37476: t0 = u64 [s1 + 0x520]\n 37480: a2 = u64 [a1 + 0x30]\n 37483: a3 = u64 [a1 + 0x28]\n 37486: a1 = u64 [s1 + 0x118]\n 37490: a4 = a0 ^ a1\n 37493: a1 = a1 <u a0\n 37496: a0 = u64 [s1 + 0x108]\n 37500: a5 = a0 <u a2\n 37503: a5 = a1 if a4 != 0\n 37506: a1 = u64 [s1 + 0x100]\n 37510: t1 = a3 ^ a1\n 37513: a3 = a1 <u a3\n 37516: a1 = u64 [s1 + 0x110]\n 37520: a1 = a1 <u t0\n 37523: a1 = a3 if t1 != 0\n 37526: a0 = a0 ^ a2\n 37529: a0 = a0 | a4\n 37532: a1 = a5 if a0 != 0\n 37535: jump @1519 if a1 != 0\n      : @1488 (gas: 3)\n 37539: a0 = s1 + 0x420\n 37543: a1 = 0x40\n 37546: ra = 1810, jump @22\n      : @1489 [@dyn 905] (gas: 20)\n 37553: t0 = u64 [s1 + 0x420]\n 37557: t1 = u64 [s1 + 0x438]\n 37561: t2 = u64 [s1 + 0x428]\n 37565: a5 = u64 [s1 + 0x430]\n 37569: a4 = t0 + 0x20\n 37572: a0 = a4 <u t0\n 37575: a1 = t2 + a0\n 37578: a2 = a1 <u t2\n 37581: a2 = a0 if a0 == 0\n 37584: a2 = a2 + a5\n 37587: a0 = a2 <u a5\n 37590: a0 = a0 + t1\n 37593: a3 = a4 | a2\n 37596: a0 = a0 | a1\n 37599: a3 = a3 | a0\n 37602: a3 = a3 >> 0x20\n 37605: a0 = a0 | a2\n 37608: a0 = a0 << 0x20\n 37611: a0 = a0 | a3\n 37614: jump @1515 if a0 != 0\n      : @1490 (gas: 17)\n 37618: a0 = u64 [0x20098]\n 37623: a3 = s1 + 0x400\n 37627: u64 [a3 + 0x18] = a0\n 37630: a0 = u64 [0x200a0]\n 37635: a1 = u64 [0x200a8]\n 37640: a2 = u64 [0x200b0]\n 37645: u64 [a3 + 0x10] = a0\n 37648: u64 [a3 + 0x8] = a1\n 37651: a1 = s1 + 0x400\n 37655: u64 [a3] = a2\n 37657: u64 [s1 + 0x38] = a4\n 37660: a0 = a4\n 37662: u64 [s1 + 0xf8] = t0\n 37666: u64 [s1 + 0xf0] = t2\n 37670: u64 [s1 + 0xe8] = t1\n 37674: u64 [s1 + 0xe0] = a5\n 37678: ra = 1812, jump @24\n      : @1491 [@dyn 906] (gas: 12)\n 37685: a4 = u64 [s1 + 0xe0]\n 37689: a3 = u64 [s1 + 0xf0]\n 37693: a1 = u64 [s1 + 0xf8]\n 37697: a0 = a1 + 0x40\n 37700: a1 = a0 <u a1\n 37703: a2 = a3 + a1\n 37706: a3 = a2 <u a3\n 37709: a3 = a1 if a1 == 0\n 37712: a3 = a3 + a4\n 37715: a1 = a3 <u a4\n 37718: a4 = u64 [s1 + 0xe8]\n 37722: t0 = 1814, jump @2211\n      : @1492 [@dyn 907] (gas: 1)\n 37728: jump @1515 if a1 != 0\n      : @1493 (gas: 12)\n 37732: a1 = u64 [s1 + 0xc8]\n 37736: a1 = a1 << 0x20\n 37739: a1 = a1 >> 0x20\n 37742: u64 [s1 + 1016] = 0\n 37746: a2 = u64 [s1 + 0xd8]\n 37750: a3 = s1 + 0x300\n 37754: u64 [a3 + 0xe0] = a2\n 37758: u64 [a3 + 0xf0] = a1\n 37762: a1 = s1 + 0x3e0\n 37766: a2 = u64 [s1 + 0xd0]\n 37770: u64 [a3 + 0xe8] = a2\n 37774: ra = 1816, jump @24\n      : @1494 [@dyn 908] (gas: 12)\n 37781: a4 = u64 [s1 + 0xe0]\n 37785: a3 = u64 [s1 + 0xf0]\n 37789: a1 = u64 [s1 + 0xf8]\n 37793: a0 = a1 + 0x60\n 37796: a1 = a0 <u a1\n 37799: a2 = a3 + a1\n 37802: a3 = a2 <u a3\n 37805: a3 = a1 if a1 == 0\n 37808: a3 = a3 + a4\n 37811: a1 = a3 <u a4\n 37814: a4 = u64 [s1 + 0xe8]\n 37818: t0 = 1818, jump @2211\n      : @1495 [@dyn 909] (gas: 1)\n 37824: jump @1515 if a1 != 0\n      : @1496 (gas: 11)\n 37828: a1 = u64 [s1 + 0xc0]\n 37832: a3 = s1 + 0x300\n 37836: u64 [a3 + 0xc0] = a1\n 37840: a1 = u64 [s1 + 0xb8]\n 37844: u64 [a3 + 0xc8] = a1\n 37848: a1 = u64 [s1 + 0xb0]\n 37852: u64 [a3 + 0xd0] = a1\n 37856: a1 = s1 + 0x3c0\n 37860: a2 = u64 [s1 + 0xa8]\n 37864: u64 [a3 + 0xd8] = a2\n 37868: ra = 1820, jump @24\n      : @1497 [@dyn 910] (gas: 12)\n 37875: a4 = u64 [s1 + 0xe0]\n 37879: a3 = u64 [s1 + 0xf0]\n 37883: a1 = u64 [s1 + 0xf8]\n 37887: a0 = a1 + 0x80\n 37891: a1 = a0 <u a1\n 37894: a2 = a3 + a1\n 37897: a3 = a2 <u a3\n 37900: a3 = a1 if a1 == 0\n 37903: a3 = a3 + a4\n 37906: a1 = a3 <u a4\n 37909: a4 = u64 [s1 + 0xe8]\n 37913: t0 = 1822, jump @2211\n      : @1498 [@dyn 911] (gas: 1)\n 37919: jump @1515 if a1 != 0\n      : @1499 (gas: 12)\n 37923: a3 = s1 + 0x100\n 37927: a1 = u64 [a3 + 0x10]\n 37930: a4 = s1 + 0x300\n 37934: u64 [a4 + 0xa0] = a1\n 37938: a1 = u64 [a3]\n 37940: u64 [a4 + 0xa8] = a1\n 37944: a1 = u64 [a3 + 0x8]\n 37947: u64 [a4 + 0xb0] = a1\n 37951: a1 = s1 + 0x3a0\n 37955: a2 = u64 [a3 + 0x18]\n 37958: u64 [a4 + 0xb8] = a2\n 37962: ra = 1824, jump @24\n      : @1500 [@dyn 912] (gas: 12)\n 37969: a5 = u64 [s1 + 0xe0]\n 37973: a4 = u64 [s1 + 0xe8]\n 37977: a3 = u64 [s1 + 0xf0]\n 37981: a0 = u64 [s1 + 0xf8]\n 37985: a2 = a0 | a5\n 37988: a1 = a3 | a4\n 37991: a2 = a2 | a1\n 37994: a2 = a2 >> 0x20\n 37997: a1 = a1 | a5\n 38000: a1 = a1 << 0x20\n 38003: a1 = a1 | a2\n 38006: jump @1515 if a1 != 0\n      : @1501 (gas: 1)\n 38010: t0 = 1826, jump @2358\n      : @1502 [@dyn 913] (gas: 3)\n 38016: a1 = s1 + 0x380\n 38020: u64 [s1 + 896] = 0x80\n 38026: ra = 1828, jump @24\n      : @1503 [@dyn 914] (gas: 15)\n 38033: u64 [s1 + 856] = 0\n 38037: u64 [s1 + 848] = 0\n 38041: u64 [s1 + 840] = 0\n 38045: u64 [s1 + 832] = 0xa0\n 38051: a0 = u64 [s1 + 0xe8]\n 38055: u64 [s1 + 0x378] = a0\n 38059: a0 = u64 [s1 + 0xe0]\n 38063: u64 [s1 + 0x370] = a0\n 38067: a0 = u64 [s1 + 0xf0]\n 38071: u64 [s1 + 0x368] = a0\n 38075: a0 = s1 + 0x360\n 38079: a1 = s1 + 0x340\n 38083: a2 = u64 [s1 + 0xf8]\n 38087: u64 [s1 + 0x360] = a2\n 38091: ra = 1830, jump @149\n      : @1504 [@dyn 915] (gas: 3)\n 38098: a0 = s1 + 0x320\n 38102: a1 = u64 [s1 + 0xf8]\n 38106: ra = 1832, jump @22\n      : @1505 [@dyn 916] (gas: 6)\n 38113: a4 = s1 + 0x300\n 38117: a0 = u64 [a4 + 0x38]\n 38120: a3 = u64 [a4 + 0x30]\n 38123: a2 = u64 [a4 + 0x28]\n 38126: a1 = u64 [a4 + 0x20]\n 38129: t0 = 1834, jump @2333\n      : @1506 [@dyn 917] (gas: 1)\n 38135: jump @1515 if a0 != 0\n      : @1507 (gas: 3)\n 38139: a0 = u64 [s1 + 0x38]\n 38142: u64 [s1 + 0x118] = a1\n 38146: ra = 1836, jump @37\n      : @1508 [@dyn 918] (gas: 19)\n 38153: a1 = sp + 0xffffffffffffffe0\n 38156: a2 = a1 & 0xffffffffffffffe0\n 38159: u64 [s1 + 0x110] = a2\n 38163: sp = a2\n 38165: i32 a0 = a0 + 0\n 38167: a1 = i32 [s1 + 0x118]\n 38171: i32 a2 = a2 + 0\n 38173: ecalli 11 // 'hash_keccak_256'\n 38175: a1 = u64 [s1 + 0x110]\n 38179: a0 = u64 [a1 + 0x18]\n 38182: u64 [s1 + 0x30] = a0\n 38185: a0 = u64 [a1 + 0x10]\n 38188: u64 [s1 + 0x38] = a0\n 38191: a0 = u64 [a1 + 0x8]\n 38194: u64 [s1 + 0xe0] = a0\n 38198: a0 = u64 [a1]\n 38200: u64 [s1 + 0xe8] = a0\n 38204: a0 = s1 + 0x300\n 38208: ra = 1838, jump @1970\n      : @1509 [@dyn 919] (gas: 12)\n 38214: a1 = s1 + 0x300\n 38218: a0 = u64 [a1 + 0x18]\n 38221: u64 [s1 + 0x110] = a0\n 38225: a0 = u64 [a1 + 0x10]\n 38228: u64 [s1 + 0x108] = a0\n 38232: a0 = u64 [a1 + 0x8]\n 38235: u64 [s1 + 0xf8] = a0\n 38239: a0 = u64 [a1]\n 38241: u64 [s1 + 0xf0] = a0\n 38245: a0 = s1 + 0x2e0\n 38249: a1 = 0x40\n 38252: ra = 1840, jump @22\n      : @1510 [@dyn 920] (gas: 13)\n 38259: a1 = s1 + 0x200\n 38263: a4 = u64 [a1 + 0xf8]\n 38267: a5 = u64 [a1 + 0xf0]\n 38271: a3 = u64 [a1 + 0xe8]\n 38275: a0 = u64 [a1 + 0xe0]\n 38279: a2 = a3 | a4\n 38282: a1 = a0 | a5\n 38285: a1 = a1 | a2\n 38288: a1 = a1 >> 0x20\n 38291: a2 = a2 | a5\n 38294: a2 = a2 << 0x20\n 38297: a1 = a1 | a2\n 38300: jump @1515 if a1 != 0\n      : @1511 (gas: 11)\n 38304: u64 [s1 + 720] = 0\n 38308: u64 [s1 + 712] = 0\n 38312: u64 [s1 + 704] = 0\n 38316: a2 = 0x1901000000000000\n 38326: a1 = s1 + 0x2c0\n 38330: u64 [s1 + 0x2d8] = a2\n 38334: u64 [s1 + 0x118] = a0\n 38338: u64 [s1 + 0x100] = a3\n 38342: u64 [s1 + 0x28] = a4\n 38345: u64 [s1 + 0x20] = a5\n 38348: ra = 1842, jump @24\n      : @1512 [@dyn 921] (gas: 11)\n 38355: a3 = u64 [s1 + 0x100]\n 38359: a1 = u64 [s1 + 0x118]\n 38363: a0 = u64 [s1 + 0x28]\n 38366: a2 = u64 [s1 + 0x20]\n 38369: a2 = a2 | a0\n 38372: a4 = 0x100000000\n 38382: a0 = 0xfffffffe\n 38392: a0 = a1 <u a0\n 38395: a0 = 0 if a3 != 0\n 38397: a0 = 0 if a2 != 0\n 38399: jump @1515 if a0 == 0\n      : @1513 (gas: 14)\n 38402: i32 a0 = a1 + 0x2\n 38405: a1 = u64 [s1 + 0xf0]\n 38409: a3 = s1 + 0x200\n 38413: u64 [a3 + 0xa0] = a1\n 38417: a1 = u64 [s1 + 0xf8]\n 38421: u64 [a3 + 0xa8] = a1\n 38425: a1 = u64 [s1 + 0x108]\n 38429: u64 [a3 + 0xb0] = a1\n 38433: a1 = s1 + 0x2a0\n 38437: u64 [s1 + 0x108] = a2\n 38441: a2 = u64 [s1 + 0x110]\n 38445: u64 [a3 + 0xb8] = a2\n 38449: u64 [s1 + 0x110] = a4\n 38453: ra = 1844, jump @24\n      : @1514 [@dyn 922] (gas: 10)\n 38460: a2 = s1 + 0x100\n 38464: a5 = u64 [a2 + 0x18]\n 38467: a0 = u64 [a2 + 0x10]\n 38470: a0 = a0 + 0xffffffffffffffde\n 38473: a0 = a5 <u a0\n 38476: a1 = u64 [a2]\n 38478: a0 = 0 if a1 != 0\n 38480: a1 = u64 [a2 + 0x8]\n 38483: a0 = 0 if a1 != 0\n 38485: jump @1524 if a0 != 0\n      : @1515 (gas: 1)\n 38489: trap\n      : @1516 (gas: 6)\n 38490: a1 = 0x20160\n 38495: i32 a1 = a1 + 0\n 38497: a0 = 0x1\n 38500: a2 = 0\n 38502: ecalli 16 // 'seal_return'\n 38504: jump @1519\n      : @1517 (gas: 6)\n 38506: a1 = 0x20160\n 38511: i32 a1 = a1 + 0\n 38513: a0 = 0x1\n 38516: a2 = 0\n 38518: ecalli 16 // 'seal_return'\n 38520: jump @1519\n      : @1518 (gas: 6)\n 38522: a1 = 0x20160\n 38527: i32 a1 = a1 + 0\n 38529: a0 = 0x1\n 38532: a2 = 0\n 38534: ecalli 16 // 'seal_return'\n 38536: fallthrough\n      : @1519 (gas: 8)\n 38537: u64 [s1 + 336] = 0\n 38541: u64 [s1 + 328] = 0\n 38545: u64 [s1 + 320] = 0\n 38549: a0 = 0x4683af0e00000000\n 38559: a1 = s1 + 0x140\n 38563: u64 [s1 + 0x158] = a0\n 38567: a0 = 0\n 38569: ra = 1846, jump @24\n      : @1520 [@dyn 923] (gas: 12)\n 38576: a3 = s1 + 0x100\n 38580: a0 = u64 [a3 + 0x18]\n 38583: u64 [a3 + 0x38] = a0\n 38586: a0 = u64 [a3 + 0x8]\n 38589: u64 [a3 + 0x30] = a0\n 38592: a0 = u64 [a3]\n 38594: u64 [a3 + 0x28] = a0\n 38597: a0 = 0x4\n 38600: a1 = s1 + 0x120\n 38604: a2 = u64 [a3 + 0x10]\n 38607: u64 [a3 + 0x20] = a2\n 38610: ra = 1848, jump @24\n      : @1521 [@dyn 924] (gas: 2)\n 38617: a1 = i32 [0x20150]\n 38622: jump @1523 if a1 >u 63\n      : @1522 (gas: 2)\n 38626: u32 [0x20150] = 0x40\n 38632: fallthrough\n      : @1523 (gas: 6)\n 38633: a1 = 0x20160\n 38638: i32 a1 = a1 + 0\n 38640: a0 = 0x1\n 38643: a2 = 0x24\n 38646: ecalli 16 // 'seal_return'\n 38648: fallthrough\n      : @1524 (gas: 15)\n 38649: a0 = u64 [s1 + 0x30]\n 38652: a2 = reverse a0\n 38654: a0 = u64 [s1 + 0x38]\n 38657: a1 = reverse a0\n 38659: a0 = u64 [s1 + 0xe0]\n 38663: a3 = reverse a0\n 38665: a0 = u64 [s1 + 0xe8]\n 38669: a4 = reverse a0\n 38671: i32 a0 = a5 + 0x22\n 38674: u64 [s1 + 0x298] = a4\n 38678: u64 [s1 + 0x290] = a3\n 38682: u64 [s1 + 0x288] = a1\n 38686: a1 = s1 + 0x280\n 38690: u64 [s1 + 0x280] = a2\n 38694: ra = 1850, jump @24\n      : @1525 [@dyn 925] (gas: 3)\n 38701: a1 = 0x42\n 38704: a0 = u64 [s1 + 0x118]\n 38708: ra = 1852, jump @37\n      : @1526 [@dyn 926] (gas: 10)\n 38715: a1 = sp + 0xffffffffffffffe0\n 38718: a1 = a1 & 0xffffffffffffffe0\n 38721: u64 [s1 + 0x118] = a1\n 38725: sp = a1\n 38727: i32 a0 = a0 + 0\n 38729: i32 a2 = a1 + 0\n 38731: a1 = 0x42\n 38734: ra = 0x73e\n 38738: ecalli 11 // 'hash_keccak_256'\n 38740: fallthrough\n      : @1527 [@dyn 927] (gas: 33)\n 38741: a3 = u64 [s1 + 0x118]\n 38745: a0 = u64 [a3 + 0x18]\n 38748: a1 = u64 [a3 + 0x10]\n 38751: a2 = u64 [a3 + 0x8]\n 38754: a3 = u64 [a3]\n 38756: a5 = reverse a0\n 38758: a0 = reverse a1\n 38760: a1 = reverse a2\n 38762: a2 = reverse a3\n 38764: a3 = u64 [s1 + 0x40]\n 38767: u64 [s1 + 0x1f8] = a3\n 38771: a3 = u64 [s1 + 0x48]\n 38774: u64 [s1 + 0x1f0] = a3\n 38778: a3 = u64 [s1 + 0x50]\n 38781: u64 [s1 + 0x1e8] = a3\n 38785: a3 = u64 [s1 + 0x58]\n 38788: u64 [s1 + 0x1e0] = a3\n 38792: a3 = u64 [s1 + 0x60]\n 38795: u64 [s1 + 0x218] = a3\n 38799: a3 = u64 [s1 + 0x68]\n 38802: u64 [s1 + 0x210] = a3\n 38806: a3 = u64 [s1 + 0x70]\n 38809: u64 [s1 + 0x208] = a3\n 38813: a3 = u64 [s1 + 0x78]\n 38816: u64 [s1 + 0x200] = a3\n 38820: a3 = u64 [s1 + 0x88]\n 38824: u64 [s1 + 0x238] = a3\n 38828: a3 = u64 [s1 + 0x90]\n 38832: u64 [s1 + 0x230] = a3\n 38836: a3 = u64 [s1 + 0x80]\n 38840: u64 [s1 + 0x228] = a3\n 38844: a3 = u64 [s1 + 0x98]\n 38848: t0 = 1856, jump @2306\n      : @1528 [@dyn 928] (gas: 64)\n 38854: a3 = s1 + 0x200\n 38858: a4 = s1 + 0x1e0\n 38862: u64 [s1 + 0x240] = a5\n 38866: ra = 0x742\n 38870: sp = sp + 0xfffffffffffffe80\n 38874: u64 [sp + 0x178] = ra\n 38878: u64 [sp + 0x170] = s0\n 38882: u64 [sp + 0x168] = s1\n 38886: s0 = sp + 0x180\n 38890: sp = sp & 0xfffffffffffffff0\n 38893: a5 = u64 [a1]\n 38895: u64 [sp + 0x38] = a5\n 38898: a5 = u64 [a1 + 0x8]\n 38901: u64 [sp + 0x30] = a5\n 38904: a5 = u64 [a1 + 0x10]\n 38907: u64 [sp + 0x28] = a5\n 38910: a1 = u64 [a1 + 0x18]\n 38913: u64 [sp + 0x20] = a1\n 38916: a1 = u64 [a2]\n 38918: u64 [sp + 0x18] = a1\n 38921: a1 = u64 [a2 + 0x8]\n 38924: u64 [sp + 0x10] = a1\n 38927: a1 = u64 [a2 + 0x10]\n 38930: u64 [sp + 0x8] = a1\n 38933: a2 = u64 [a2 + 0x18]\n 38936: t1 = u64 [a3]\n 38938: t2 = u64 [a3 + 0x8]\n 38941: ra = u64 [a3 + 0x10]\n 38944: a3 = u64 [a3 + 0x18]\n 38947: a5 = u64 [a4]\n 38949: a1 = u64 [a4 + 0x8]\n 38952: t0 = u64 [a4 + 0x10]\n 38955: a4 = u64 [a4 + 0x18]\n 38958: s1 = a0\n 38960: u64 [sp + 0x98] = a4\n 38964: u64 [sp + 0x90] = t0\n 38968: u64 [sp + 0x88] = a1\n 38972: u64 [sp + 0x80] = a5\n 38976: u64 [sp + 0xb8] = a3\n 38980: u64 [sp + 0xb0] = ra\n 38984: u64 [sp + 0xa8] = t2\n 38988: u64 [sp + 0xa0] = t1\n 38992: u64 [sp + 0xd8] = a2\n 38996: a0 = u64 [sp + 0x8]\n 38999: u64 [sp + 0xd0] = a0\n 39003: a0 = u64 [sp + 0x10]\n 39006: u64 [sp + 0xc8] = a0\n 39010: a0 = u64 [sp + 0x18]\n 39013: u64 [sp + 0xc0] = a0\n 39017: a0 = u64 [sp + 0x20]\n 39020: u64 [sp + 0xf8] = a0\n 39024: a0 = u64 [sp + 0x28]\n 39027: u64 [sp + 0xf0] = a0\n 39031: a0 = u64 [sp + 0x30]\n 39034: u64 [sp + 0xe8] = a0\n 39038: a0 = sp + 0x100\n 39042: a1 = sp + 0xe0\n 39046: a2 = sp + 0xc0\n 39050: a3 = sp + 0xa0\n 39054: a4 = sp + 0x80\n 39058: a5 = u64 [sp + 0x38]\n 39061: u64 [sp + 0xe0] = a5\n 39065: ra = 0x850\n 39069: jump @2009\n      : @1529 [@dyn 929] (gas: 53)\n 39072: a0 = s1 + 0x200\n 39076: a2 = u64 [a0 + 0x60]\n 39079: u64 [s1 + 0x118] = a2\n 39083: a1 = u64 [a0 + 0x68]\n 39086: u64 [s1 + 0x110] = a1\n 39090: a3 = u64 [a0 + 0x70]\n 39093: u64 [s1 + 0x108] = a3\n 39097: a4 = u64 [a0 + 0x78]\n 39100: u64 [s1 + 0x100] = a4\n 39104: a0 = u64 [s1 + 0xa8]\n 39108: u64 [s1 + 0x1b8] = a0\n 39112: a0 = u64 [s1 + 0xb0]\n 39116: u64 [s1 + 0x1b0] = a0\n 39120: a0 = u64 [s1 + 0xb8]\n 39124: u64 [s1 + 0x1a8] = a0\n 39128: a0 = u64 [s1 + 0xc0]\n 39132: u64 [s1 + 0x1a0] = a0\n 39136: u64 [s1 + 0x1d8] = a4\n 39140: u64 [s1 + 0x1d0] = a3\n 39144: u64 [s1 + 0x1c8] = a1\n 39148: a0 = s1 + 0x1c0\n 39152: a1 = s1 + 0x1a0\n 39156: u64 [s1 + 0x1c0] = a2\n 39160: ra = 0x744\n 39164: sp = sp + 0xfffffffffffffe60\n 39168: u64 [sp + 0x198] = ra\n 39172: u64 [sp + 0x190] = s0\n 39176: u64 [sp + 0x188] = s1\n 39180: s0 = sp + 0x1a0\n 39184: sp = sp & 0xffffffffffffffe0\n 39187: s1 = sp\n 39189: a2 = u64 [a1 + 0x18]\n 39192: u64 [s1 + 0x68] = a2\n 39195: a2 = u64 [a1 + 0x10]\n 39198: u64 [s1 + 0x78] = a2\n 39201: a2 = u64 [a1 + 0x8]\n 39204: u64 [s1 + 0x60] = a2\n 39207: a1 = u64 [a1]\n 39209: u64 [s1 + 0x70] = a1\n 39212: a2 = u64 [a0]\n 39214: a1 = u64 [a0 + 0x8]\n 39217: a0 = u32 [a0 + 0x10]\n 39220: u64 [s1 + 312] = 0\n 39224: u64 [s1 + 0x28] = a0\n 39227: u64 [s1 + 0x130] = a0\n 39231: u64 [s1 + 0x30] = a1\n 39234: u64 [s1 + 0x128] = a1\n 39238: a1 = s1 + 0x120\n 39242: u64 [s1 + 0x38] = a2\n 39245: u64 [s1 + 0x120] = a2\n 39249: a0 = 0\n 39251: ra = 0x854\n 39255: jump @24\n      : @1530 [@dyn 930] (gas: 20)\n 39259: a0 = u64 [s1 + 0xa0]\n 39263: a3 = s1 + 0x100\n 39267: u64 [a3 + 0x78] = a0\n 39270: a0 = u64 [s1 + 0xc8]\n 39274: u64 [a3 + 0x70] = a0\n 39277: a0 = u64 [s1 + 0xd0]\n 39281: u64 [a3 + 0x68] = a0\n 39284: a0 = u64 [s1 + 0xd8]\n 39288: u64 [a3 + 0x60] = a0\n 39291: a0 = u64 [a3]\n 39293: u64 [a3 + 0x98] = a0\n 39297: a0 = u64 [a3 + 0x8]\n 39300: u64 [a3 + 0x90] = a0\n 39304: a0 = u64 [a3 + 0x10]\n 39307: u64 [a3 + 0x88] = a0\n 39311: a0 = s1 + 0x180\n 39315: a1 = s1 + 0x160\n 39319: a2 = u64 [a3 + 0x18]\n 39322: u64 [a3 + 0x80] = a2\n 39326: ra = 1862, jump @1725\n      : @1531 [@dyn 931] (gas: 6)\n 39332: a1 = 0x20160\n 39337: i32 a1 = a1 + 0\n 39339: a0 = 0\n 39341: a2 = 0\n 39343: ecalli 16 // 'seal_return'\n 39345: jump @1519\n      : @1532 (gas: 9)\n 39348: a4 = s1 + 0x100\n 39352: a0 = u64 [a4 + 0x90]\n 39356: a1 = u64 [a4 + 0x98]\n 39360: a2 = u64 [a4 + 0x88]\n 39364: a3 = u64 [a4 + 0x80]\n 39368: a1 = a1 | a2\n 39371: a0 = a0 | a3\n 39374: a0 = a0 | a1\n 39377: jump @1550 if a0 != 0\n      : @1533 (gas: 3)\n 39381: a0 = i32 [0x2014c]\n 39386: a1 = 0x43\n 39389: jump @1551 if a1 >=u a0\n      : @1534 (gas: 4)\n 39393: a0 = s1 + 0x160\n 39397: ra = 0x748\n 39401: t0 = 0x484\n 39405: jump @2251\n      : @1535 [@dyn 932] (gas: 10)\n 39408: a0 = u64 [s1 + 0x160]\n 39412: u64 [s1 + 0x18] = a0\n 39415: a0 = u64 [s1 + 0x168]\n 39419: u64 [s1 + 0x10] = a0\n 39422: a0 = u32 [s1 + 0x170]\n 39426: u64 [s1 + 0x8] = a0\n 39429: a0 = s1 + 0x140\n 39433: ra = 0x74a\n 39437: t0 = 0x48e\n 39441: jump @2329\n      : @1536 [@dyn 933] (gas: 18)\n 39444: a0 = u64 [s1 + 0x158]\n 39448: u64 [s1 + 0x20] = a0\n 39451: a0 = u64 [s1 + 0x150]\n 39455: u64 [s1 + 0x28] = a0\n 39458: a0 = u64 [s1 + 0x148]\n 39462: u64 [s1 + 0x30] = a0\n 39465: a0 = u64 [s1 + 0x140]\n 39469: u64 [s1 + 0x38] = a0\n 39472: u64 [s1 + 312] = 0\n 39476: a0 = u64 [s1 + 0x8]\n 39479: u64 [s1 + 0x130] = a0\n 39483: a0 = u64 [s1 + 0x10]\n 39486: u64 [s1 + 0x128] = a0\n 39490: a1 = s1 + 0x120\n 39494: a0 = u64 [s1 + 0x18]\n 39497: u64 [s1 + 0x120] = a0\n 39501: a0 = 0\n 39503: ra = 1868, jump @24\n      : @1537 [@dyn 934] (gas: 4)\n 39510: u64 [s1 + 280] = 0\n 39514: u64 [s1 + 272] = 0\n 39518: a0 = 0x1\n 39521: t0 = 1870, jump @2289\n      : @1538 [@dyn 935] (gas: 1)\n 39527: ra = 1872, jump @24\n      : @1539 [@dyn 936] (gas: 2)\n 39534: a1 = i32 [0x20150]\n 39539: jump @1541 if a1 >u 63\n      : @1540 (gas: 4)\n 39543: a1 = 0x40\n 39546: u32 [0x20150] = a1\n 39551: t0 = 0x752\n 39555: jump @2282\n      : @1541 (gas: 1)\n 39558: t0 = 1874, jump @2282\n      : @1542 [@dyn 937] (gas: 8)\n 39564: a0 = 0x20160\n 39569: i32 a0 = a0 + 0\n 39571: i32 a2 = a2 + 0\n 39573: a1 = 0x40\n 39576: ra = 0x754\n 39580: ecalli 11 // 'hash_keccak_256'\n 39582: t0 = 0x756\n 39586: jump @2300\n      : @1543 [@dyn 938] (gas: 1)\n 39589: t0 = 1878, jump @2300\n      : @1544 [@dyn 939] (gas: 17)\n 39595: u64 [s1 + 0xb8] = a3\n 39599: a3 = u64 [s1 + 0x28]\n 39602: u64 [s1 + 0xb0] = a3\n 39606: a3 = u64 [s1 + 0x30]\n 39609: u64 [s1 + 0xa8] = a3\n 39613: a3 = u64 [s1 + 0x38]\n 39616: u64 [s1 + 0xa0] = a3\n 39620: u64 [s1 + 0xd8] = a2\n 39624: u64 [s1 + 0xd0] = a1\n 39628: u64 [s1 + 0xc8] = a0\n 39632: a0 = s1 + 0xe0\n 39636: a1 = s1 + 0xc0\n 39640: a2 = s1 + 0xa0\n 39644: u64 [s1 + 0xc0] = a4\n 39648: ra = 0x758\n 39652: t0 = 0x7c2\n 39656: jump @2373\n      : @1545 [@dyn 940] (gas: 14)\n 39659: a0 = u64 [s1 + 0xf8]\n 39663: a1 = u64 [s1 + 0xf0]\n 39667: a2 = u64 [s1 + 0xe8]\n 39671: a3 = u64 [s1 + 0xe0]\n 39675: a4 = s1 + 0x100\n 39679: u64 [a4 + 0xb8] = a0\n 39683: u64 [a4 + 0xb0] = a1\n 39687: u64 [a4 + 0xa8] = a2\n 39691: u64 [a4 + 0xa0] = a3\n 39695: a0 = s1 + 0x80\n 39699: a1 = s1 + 0x1a0\n 39703: ra = 0x75a\n 39707: t0 = 0x6\n 39710: jump @2259\n      : @1546 [@dyn 941] (gas: 11)\n 39713: a0 = u64 [s1 + 0x98]\n 39717: u64 [s1 + 0x38] = a0\n 39720: a0 = u64 [s1 + 0x90]\n 39724: u64 [s1 + 0x30] = a0\n 39727: a0 = u64 [s1 + 0x88]\n 39731: u64 [s1 + 0x28] = a0\n 39734: a0 = u64 [s1 + 0x80]\n 39738: u64 [s1 + 0x20] = a0\n 39741: a0 = s1 + 0x60\n 39744: a1 = 0x40\n 39747: ra = 1884, jump @22\n      : @1547 [@dyn 942] (gas: 5)\n 39754: a0 = u64 [s1 + 0x78]\n 39757: a1 = u64 [s1 + 0x70]\n 39760: a2 = u64 [s1 + 0x68]\n 39763: a3 = u64 [s1 + 0x60]\n 39766: t0 = 1886, jump @2244\n      : @1548 [@dyn 943] (gas: 1)\n 39772: jump @1553 if a0 == 0\n      : @1549 (gas: 1)\n 39775: trap\n      : @1550 (gas: 2)\n 39776: a1 = 0x20160\n 39781: jump @1552\n      : @1551 (gas: 2)\n 39783: a1 = 0x20160\n 39788: fallthrough\n      : @1552 (gas: 5)\n 39789: i32 a1 = a1 + 0\n 39791: a0 = 0x1\n 39794: a2 = 0\n 39796: ecalli 16 // 'seal_return'\n 39798: fallthrough\n      : @1553 (gas: 12)\n 39799: a0 = u64 [s1 + 0x20]\n 39802: u64 [s1 + 0x40] = a0\n 39805: a0 = u64 [s1 + 0x28]\n 39808: u64 [s1 + 0x48] = a0\n 39811: a0 = u64 [s1 + 0x30]\n 39814: u64 [s1 + 0x50] = a0\n 39817: a1 = s1 + 0x40\n 39820: a0 = u64 [s1 + 0x38]\n 39823: u64 [s1 + 0x58] = a0\n 39826: a0 = a3\n 39828: u64 [s1 + 0x38] = a3\n 39831: ra = 1888, jump @24\n      : @1554 [@dyn 944] (gas: 3)\n 39838: a1 = 0x20\n 39841: a0 = u64 [s1 + 0x38]\n 39844: ra = 1890, jump @37\n      : @1555 [@dyn 945] (gas: 1)\n 39851: t0 = 1892, jump @2280\n      : @1556 [@dyn 946] (gas: 3)\n 39857: ra = 0x766\n 39861: ecalli 16 // 'seal_return'\n 39863: fallthrough\n      : @1557 [@dyn 947] (gas: 21)\n 39864: sp = sp + 0xffffffffffffff10\n 39868: u64 [sp + 0xe8] = ra\n 39872: u64 [sp + 0xe0] = s0\n 39876: u64 [sp + 0xd8] = s1\n 39880: s0 = sp + 0xf0\n 39884: sp = sp & 0xfffffffffffffff0\n 39887: a5 = u64 [a2 + 0x10]\n 39890: s1 = u64 [a2 + 0x18]\n 39893: a3 = u64 [a2 + 0x8]\n 39896: a4 = u64 [a2]\n 39898: u64 [sp + 0x30] = a3\n 39901: u64 [sp + 0x20] = s1\n 39904: a2 = a3 | s1\n 39907: a3 = a4 | a5\n 39910: a3 = a3 | a2\n 39913: a3 = a3 >> 0x20\n 39916: u64 [sp + 0x28] = a5\n 39919: a2 = a2 | a5\n 39922: a2 = a2 << 0x20\n 39925: a2 = a2 | a3\n 39928: jump @1566 if a2 != 0\n      : @1558 (gas: 12)\n 39932: u64 [sp + 0x8] = a0\n 39935: a0 = u64 [a1 + 0x18]\n 39938: u64 [sp + 0x48] = a0\n 39941: s1 = u64 [a1 + 0x10]\n 39944: a0 = u64 [a1 + 0x8]\n 39947: u64 [sp + 0x38] = a0\n 39950: a0 = u64 [a1]\n 39952: u64 [sp + 0x40] = a0\n 39955: a0 = sp + 0xb0\n 39959: u64 [sp + 0x18] = a4\n 39962: a1 = a4\n 39964: ra = 1896, jump @22\n      : @1559 [@dyn 948] (gas: 12)\n 39971: a0 = u64 [sp + 0x40]\n 39974: a2 = a0 | s1\n 39977: a1 = u64 [sp + 0x48]\n 39980: a3 = u64 [sp + 0x38]\n 39983: a1 = a1 | a3\n 39986: a2 = a2 | a1\n 39989: a2 = a2 >> 0x20\n 39992: u64 [sp + 0x10] = s1\n 39995: a1 = a1 | s1\n 39998: a1 = a1 << 0x20\n 40001: a1 = a1 | a2\n 40004: jump @1566 if a1 != 0\n      : @1560 (gas: 9)\n 40008: a1 = u64 [sp + 0xb0]\n 40012: a1 = a1 << 0x10\n 40015: a2 = a1 >> 0x10\n 40018: u64 [sp + 168] = 0\n 40022: u64 [sp + 160] = 0\n 40026: u64 [sp + 152] = 0\n 40030: a1 = sp + 0x90\n 40034: u64 [sp + 0x90] = a2\n 40038: ra = 1898, jump @24\n      : @1561 [@dyn 949] (gas: 11)\n 40045: a0 = u64 [sp + 0x28]\n 40048: a1 = u64 [sp + 0x20]\n 40051: a0 = a0 | a1\n 40054: a1 = 0xffffffe0\n 40064: a2 = u64 [sp + 0x18]\n 40067: u64 [sp + 0x28] = a1\n 40070: a1 = a2 <u a1\n 40073: a3 = u64 [sp + 0x30]\n 40076: a1 = 0 if a3 != 0\n 40078: a1 = 0 if a0 != 0\n 40080: jump @1566 if a1 == 0\n      : @1562 (gas: 3)\n 40084: i32 a1 = a2 + 0x20\n 40087: a0 = sp + 0x70\n 40090: ra = 1900, jump @22\n      : @1563 [@dyn 950] (gas: 10)\n 40097: a4 = u64 [sp + 0x48]\n 40100: s1 = u64 [sp + 0x10]\n 40103: a0 = s1 | a4\n 40106: a2 = u64 [sp + 0x40]\n 40109: a1 = u64 [sp + 0x28]\n 40112: a1 = a2 <u a1\n 40115: a5 = u64 [sp + 0x38]\n 40118: a1 = 0 if a5 != 0\n 40120: a1 = 0 if a0 != 0\n 40122: jump @1566 if a1 == 0\n      : @1564 (gas: 24)\n 40125: a0 = u64 [sp + 0x88]\n 40129: t1 = u64 [sp + 0x80]\n 40133: t2 = u64 [sp + 0x78]\n 40136: a3 = u64 [sp + 0x70]\n 40139: t0 = zext.h a0\n 40141: a0 = a2 + 0x40\n 40144: u64 [sp + 0x30] = a0\n 40147: a0 = a0 <u a2\n 40150: a1 = a5 + a0\n 40153: u64 [sp + 0x28] = a1\n 40156: a5 = a1 <u a5\n 40159: a5 = a0 if a0 == 0\n 40162: a5 = a5 + s1\n 40165: a0 = a5 <u s1\n 40168: s1 = a5\n 40170: a0 = a0 + a4\n 40173: u64 [sp + 0x48] = a0\n 40176: i32 a0 = a2 + 0x20\n 40179: u64 [sp + 0x50] = a3\n 40182: u64 [sp + 0x58] = t2\n 40185: u64 [sp + 0x60] = t1\n 40188: a1 = sp + 0x50\n 40191: u64 [sp + 0x68] = t0\n 40194: ra = 1902, jump @24\n      : @1565 [@dyn 951] (gas: 14)\n 40201: a0 = u64 [sp + 0x8]\n 40204: u64 [a0 + 0x10] = s1\n 40207: a1 = u64 [sp + 0x28]\n 40210: u64 [a0 + 0x8] = a1\n 40213: a1 = u64 [sp + 0x30]\n 40216: u64 [a0] = a1\n 40218: a1 = u64 [sp + 0x48]\n 40221: u64 [a0 + 0x18] = a1\n 40224: sp = s0 + 0xffffffffffffff10\n 40228: ra = u64 [sp + 0xe8]\n 40232: s0 = u64 [sp + 0xe0]\n 40236: s1 = u64 [sp + 0xd8]\n 40240: sp = sp + 0xf0\n 40244: ret\n      : @1566 (gas: 1)\n 40246: trap\n      : @1567 [@dyn 952] (gas: 4)\n 40247: u64 [s1 + 704] = 0\n 40251: i32 a0 = s1 + 0x2c0\n 40255: ecalli 19 // 'value_transferred'\n 40257: fallthrough\n      : @1568 (gas: 9)\n 40258: a4 = s1 + 0x200\n 40262: a0 = u64 [a4 + 0xd0]\n 40266: a1 = u64 [a4 + 0xd8]\n 40270: a2 = u64 [a4 + 0xc8]\n 40274: a3 = u64 [a4 + 0xc0]\n 40278: a1 = a1 | a2\n 40281: a0 = a0 | a3\n 40284: a0 = a0 | a1\n 40287: jump @1596 if a0 != 0\n      : @1569 (gas: 3)\n 40291: a0 = i32 [0x2014c]\n 40296: a1 = 0x43\n 40299: jump @1597 if a1 >=u a0\n      : @1570 (gas: 4)\n 40303: a0 = s1 + 0x2a0\n 40307: ra = 0x772\n 40311: t0 = 0x484\n 40315: jump @2251\n      : @1571 [@dyn 953] (gas: 10)\n 40318: a0 = u64 [s1 + 0x2b0]\n 40322: u64 [s1 + 0x28] = a0\n 40325: a0 = u64 [s1 + 0x2a8]\n 40329: u64 [s1 + 0x30] = a0\n 40332: a0 = u64 [s1 + 0x2a0]\n 40336: u64 [s1 + 0x50] = a0\n 40339: i32 a0 = s1 + 0x2e0\n 40343: a1 = 0x24\n 40346: ecalli 4 // 'call_data_load'\n 40348: fallthrough\n      : @1572 (gas: 17)\n 40349: a4 = s1 + 0x200\n 40353: a3 = u64 [a4 + 0xf8]\n 40357: a2 = u64 [a4 + 0xf0]\n 40361: a0 = u64 [a4 + 0xe8]\n 40365: a1 = u64 [a4 + 0xe0]\n 40369: u64 [s1 + 0x48] = a0\n 40372: u64 [s1 + 0x38] = a3\n 40375: a0 = a0 | a3\n 40378: u64 [s1 + 0x58] = a1\n 40381: a1 = a1 | a2\n 40384: a1 = a1 | a0\n 40387: a1 = a1 >> 0x20\n 40390: u64 [s1 + 0x40] = a2\n 40393: a0 = a0 | a2\n 40396: a0 = a0 << 0x20\n 40399: a0 = a0 | a1\n 40402: jump @1598 if a0 != 0\n      : @1573 (gas: 2)\n 40406: a0 = s1 + 0x280\n 40410: ra = 1908, jump @1660\n      : @1574 [@dyn 954] (gas: 2)\n 40416: a0 = s1 + 0x260\n 40420: ra = 1910, jump @1660\n      : @1575 [@dyn 955] (gas: 12)\n 40426: a0 = u64 [s1 + 0x28]\n 40429: a0 = a0 << 0x20\n 40432: a0 = a0 >> 0x20\n 40435: u64 [s1 + 600] = 0\n 40439: u64 [s1 + 0x250] = a0\n 40443: a0 = u64 [s1 + 0x30]\n 40446: u64 [s1 + 0x248] = a0\n 40450: a1 = s1 + 0x240\n 40454: a0 = u64 [s1 + 0x50]\n 40457: u64 [s1 + 0x240] = a0\n 40461: a0 = 0\n 40463: ra = 1912, jump @24\n      : @1576 [@dyn 956] (gas: 7)\n 40470: u64 [s1 + 568] = 0\n 40474: u64 [s1 + 560] = 0\n 40478: u64 [s1 + 544] = 0x9\n 40483: a0 = 0x20\n 40486: a1 = s1 + 0x220\n 40490: u64 [s1 + 552] = 0\n 40494: ra = 1914, jump @24\n      : @1577 [@dyn 957] (gas: 2)\n 40501: a1 = i32 [0x20150]\n 40506: jump @1579 if a1 >u 63\n      : @1578 (gas: 2)\n 40510: u32 [0x20150] = 0x40\n 40516: fallthrough\n      : @1579 (gas: 24)\n 40517: a0 = sp + 0xffffffffffffffe0\n 40520: a2 = a0 & 0xffffffffffffffe0\n 40523: u64 [s1 + 0x50] = a2\n 40526: sp = a2\n 40528: a0 = 0x20160\n 40533: i32 a0 = a0 + 0\n 40535: i32 a2 = a2 + 0\n 40537: a1 = 0x40\n 40540: ecalli 11 // 'hash_keccak_256'\n 40542: a3 = u64 [s1 + 0x50]\n 40545: a0 = u64 [a3 + 0x18]\n 40548: a1 = u64 [a3 + 0x10]\n 40551: a2 = u64 [a3 + 0x8]\n 40554: a3 = u64 [a3]\n 40556: a0 = reverse a0\n 40558: u64 [s1 + 0x30] = a0\n 40561: a0 = reverse a1\n 40563: u64 [s1 + 0x28] = a0\n 40566: a0 = reverse a2\n 40568: u64 [s1 + 0x20] = a0\n 40571: a0 = reverse a3\n 40573: u64 [s1 + 0x18] = a0\n 40576: a0 = s1 + 0x200\n 40580: ra = 1916, jump @1660\n      : @1580 [@dyn 958] (gas: 24)\n 40586: a0 = sp + 0xffffffffffffffe0\n 40589: a0 = a0 & 0xffffffffffffffe0\n 40592: u64 [s1 + 0x50] = a0\n 40595: sp = a0\n 40597: a0 = u64 [s1 + 0x38]\n 40600: u64 [s1 + 0x198] = a0\n 40604: a0 = u64 [s1 + 0x40]\n 40607: u64 [s1 + 0x190] = a0\n 40611: a0 = u64 [s1 + 0x48]\n 40614: u64 [s1 + 0x188] = a0\n 40618: a0 = u64 [s1 + 0x58]\n 40621: u64 [s1 + 0x180] = a0\n 40625: a0 = u64 [s1 + 0x18]\n 40628: u64 [s1 + 0x1b8] = a0\n 40632: a0 = u64 [s1 + 0x20]\n 40635: u64 [s1 + 0x1b0] = a0\n 40639: a0 = u64 [s1 + 0x28]\n 40642: u64 [s1 + 0x1a8] = a0\n 40646: a0 = s1 + 0x1c0\n 40650: a1 = s1 + 0x1a0\n 40654: a2 = s1 + 0x180\n 40658: a3 = u64 [s1 + 0x30]\n 40661: u64 [s1 + 0x1a0] = a3\n 40665: ra = 1918, jump @2073\n      : @1581 [@dyn 959] (gas: 12)\n 40671: a0 = u64 [s1 + 0x1d0]\n 40675: a1 = u64 [s1 + 0x1d8]\n 40679: a2 = u64 [s1 + 0x1c0]\n 40683: a3 = u64 [s1 + 0x1c8]\n 40687: a4 = u64 [s1 + 0x50]\n 40690: u64 [a4 + 0x10] = a0\n 40693: u64 [a4 + 0x18] = a1\n 40696: u64 [a4] = a2\n 40698: u64 [a4 + 0x8] = a3\n 40701: a0 = s1 + 0x160\n 40705: a1 = 0x40\n 40708: ra = 1920, jump @22\n      : @1582 [@dyn 960] (gas: 17)\n 40715: a4 = s1 + 0x100\n 40719: a0 = u64 [a4 + 0x78]\n 40722: u64 [s1 + 0x38] = a0\n 40725: a1 = u64 [a4 + 0x70]\n 40728: u64 [s1 + 0x40] = a1\n 40731: a3 = u64 [a4 + 0x68]\n 40734: u64 [s1 + 0x48] = a3\n 40737: a2 = u64 [a4 + 0x60]\n 40740: u64 [s1 + 0x58] = a2\n 40743: u64 [a4 + 0x58] = a0\n 40746: u64 [a4 + 0x50] = a1\n 40749: u64 [a4 + 0x48] = a3\n 40752: a0 = s1 + 0x140\n 40756: u64 [a4 + 0x40] = a2\n 40759: ra = 0x782\n 40763: t0 = 0x7a8\n 40767: jump @2371\n      : @1583 [@dyn 961] (gas: 5)\n 40770: a0 = s1 + 0x120\n 40774: a1 = u64 [s1 + 0x50]\n 40777: ra = 0x784\n 40781: t0 = 0x6\n 40784: jump @2259\n      : @1584 [@dyn 962] (gas: 12)\n 40787: a0 = u64 [s1 + 0x38]\n 40790: a1 = u64 [s1 + 0x48]\n 40793: a0 = a0 | a1\n 40796: a2 = u64 [s1 + 0x40]\n 40799: a1 = u64 [s1 + 0x58]\n 40802: a1 = a1 | a2\n 40805: a1 = a1 | a0\n 40808: a1 = a1 >> 0x20\n 40811: a0 = a0 | a2\n 40814: a0 = a0 << 0x20\n 40817: a0 = a0 | a1\n 40820: jump @1595 if a0 != 0\n      : @1585 (gas: 12)\n 40824: a2 = s1 + 0x100\n 40828: a0 = u64 [a2 + 0x38]\n 40831: u64 [s1 + 0x50] = a0\n 40834: a0 = u64 [a2 + 0x20]\n 40837: a1 = u64 [a2 + 0x30]\n 40840: u64 [s1 + 0x20] = a1\n 40843: a1 = u64 [a2 + 0x28]\n 40846: u64 [s1 + 0x28] = a1\n 40849: u64 [s1 + 0x30] = a0\n 40852: a0 = a0 << 0x10\n 40855: a0 = a0 >> 0x10\n 40858: t0 = 1926, jump @2370\n      : @1586 [@dyn 963] (gas: 4)\n 40864: a1 = s1 + 0x100\n 40868: u64 [a2] = a0\n 40870: a0 = u64 [s1 + 0x58]\n 40873: ra = 1928, jump @24\n      : @1587 [@dyn 964] (gas: 10)\n 40880: a0 = u64 [s1 + 0x40]\n 40883: a1 = u64 [s1 + 0x38]\n 40886: a0 = a0 | a1\n 40889: a1 = 0xffffffe0\n 40899: a2 = u64 [s1 + 0x58]\n 40902: a1 = a2 <u a1\n 40905: a2 = u64 [s1 + 0x48]\n 40908: a1 = 0 if a2 != 0\n 40910: a1 = 0 if a0 != 0\n 40912: jump @1595 if a1 == 0\n      : @1588 (gas: 22)\n 40916: a5 = u64 [s1 + 0x20]\n 40919: a0 = a5 >> 0x30\n 40922: a4 = u64 [s1 + 0x50]\n 40925: a1 = a4 << 0x10\n 40928: a2 = a0 | a1\n 40931: a3 = u64 [s1 + 0x28]\n 40934: a0 = a3 >> 0x30\n 40937: a1 = a5 << 0x10\n 40940: a1 = a1 | a0\n 40943: a0 = u64 [s1 + 0x30]\n 40946: a0 = a0 >> 0x30\n 40949: a3 = a3 << 0x10\n 40952: a3 = a3 | a0\n 40955: a4 = a4 >> 0x30\n 40958: a0 = u64 [s1 + 0x58]\n 40961: i32 a0 = a0 + 0x20\n 40964: u64 [s1 + 0xe0] = a3\n 40968: u64 [s1 + 0xf8] = a4\n 40972: u64 [s1 + 0xe8] = a1\n 40976: a1 = s1 + 0xe0\n 40980: u64 [s1 + 0xf0] = a2\n 40984: ra = 1930, jump @24\n      : @1589 [@dyn 965] (gas: 3)\n 40991: a0 = s1 + 0xc0\n 40995: a1 = 0x40\n 40998: ra = 1932, jump @22\n      : @1590 [@dyn 966] (gas: 24)\n 41005: a2 = u64 [s1 + 0xd8]\n 41009: u64 [s1 + 0x50] = a2\n 41012: a1 = u64 [s1 + 0xd0]\n 41016: u64 [s1 + 0x30] = a1\n 41019: a3 = u64 [s1 + 0xc8]\n 41023: u64 [s1 + 0x28] = a3\n 41026: a4 = u64 [s1 + 0xc0]\n 41030: u64 [s1 + 0x20] = a4\n 41033: a0 = u64 [s1 + 0x38]\n 41036: u64 [s1 + 0x78] = a0\n 41039: a0 = u64 [s1 + 0x40]\n 41042: u64 [s1 + 0x70] = a0\n 41045: a0 = u64 [s1 + 0x48]\n 41048: u64 [s1 + 0x68] = a0\n 41051: a0 = u64 [s1 + 0x58]\n 41054: u64 [s1 + 0x60] = a0\n 41057: u64 [s1 + 0x98] = a2\n 41061: u64 [s1 + 0x90] = a1\n 41065: u64 [s1 + 0x88] = a3\n 41069: a0 = s1 + 0xa0\n 41073: a1 = s1 + 0x80\n 41077: a2 = s1 + 0x60\n 41080: u64 [s1 + 0x80] = a4\n 41084: ra = 1934, jump @1557\n      : @1591 [@dyn 967] (gas: 7)\n 41090: a4 = u64 [s1 + 0x28]\n 41093: a2 = u64 [s1 + 0x20]\n 41096: a0 = u64 [s1 + 0x50]\n 41099: a0 = a0 | a4\n 41102: a3 = u64 [s1 + 0x30]\n 41105: a1 = a2 | a3\n 41108: t0 = 1936, jump @2313\n      : @1592 [@dyn 968] (gas: 1)\n 41114: jump @1595 if a0 != 0\n      : @1593 (gas: 25)\n 41117: t0 = a3\n 41119: a0 = u64 [s1 + 0xa8]\n 41123: a1 = u64 [s1 + 0xb8]\n 41127: u64 [s1 + 0x58] = a1\n 41130: t1 = u64 [s1 + 0xa0]\n 41134: a3 = u64 [s1 + 0xb0]\n 41138: t2 = a0 ^ a4\n 41141: a5 = a0 <u a4\n 41144: ra = t1 <u a2\n 41147: a5 = ra if t2 == 0\n 41150: a1 = a3 - t0\n 41153: t2 = a1 - a5\n 41156: a1 = a1 <u a5\n 41159: u64 [s1 + 0x48] = a1\n 41162: a3 = a3 <u t0\n 41165: a5 = u64 [s1 + 0x50]\n 41168: a1 = u64 [s1 + 0x58]\n 41171: a5 = a1 - a5\n 41174: a5 = a5 - a3\n 41177: a1 = u64 [s1 + 0x48]\n 41180: a5 = a5 - a1\n 41183: a0 = a0 - a4\n 41186: a0 = a0 - ra\n 41189: a1 = t1 - a2\n 41192: t0 = 1938, jump @2220\n      : @1594 [@dyn 969] (gas: 1)\n 41198: jump @1600 if a0 == 0\n      : @1595 (gas: 1)\n 41201: trap\n      : @1596 (gas: 2)\n 41202: a1 = 0x20160\n 41207: jump @1599\n      : @1597 (gas: 2)\n 41209: a1 = 0x20160\n 41214: jump @1599\n      : @1598 (gas: 2)\n 41216: a1 = 0x20160\n 41221: fallthrough\n      : @1599 (gas: 5)\n 41222: i32 a1 = a1 + 0\n 41224: a0 = 0x1\n 41227: a2 = 0\n 41229: ecalli 16 // 'seal_return'\n 41231: fallthrough\n      : @1600 (gas: 3)\n 41232: a0 = a2\n 41234: u64 [s1 + 0x58] = a1\n 41237: ra = 1940, jump @37\n      : @1601 [@dyn 970] (gas: 6)\n 41244: i32 a1 = a0 + 0\n 41246: a2 = i32 [s1 + 0x58]\n 41249: a0 = 0\n 41251: ra = 0x796\n 41255: ecalli 16 // 'seal_return'\n 41257: fallthrough\n      : @1602 [@dyn 971] (gas: 33)\n 41258: sp = sp + 0xfffffffffffffe20\n 41262: u64 [sp + 0x1d8] = ra\n 41266: u64 [sp + 0x1d0] = s0\n 41270: u64 [sp + 0x1c8] = s1\n 41274: s0 = sp + 0x1e0\n 41278: sp = sp & 0xffffffffffffffe0\n 41281: s1 = sp\n 41283: u64 [s1 + 0x10] = a0\n 41286: a0 = u64 [a2 + 0x10]\n 41289: u64 [s1 + 0x98] = a0\n 41293: a0 = u64 [a2]\n 41295: u64 [s1 + 0x80] = a0\n 41299: a0 = u64 [a2 + 0x18]\n 41302: u64 [s1 + 0x90] = a0\n 41306: a0 = u64 [a2 + 0x8]\n 41309: u64 [s1 + 0x88] = a0\n 41313: a0 = u64 [a1 + 0x18]\n 41316: a2 = u64 [a1 + 0x10]\n 41319: a3 = u64 [a1 + 0x8]\n 41322: a1 = u64 [a1]\n 41324: u64 [s1 + 0x70] = a0\n 41327: u64 [s1 + 0x1b8] = a0\n 41331: u64 [s1 + 0x68] = a2\n 41334: u64 [s1 + 0x1b0] = a2\n 41338: u64 [s1 + 0x60] = a3\n 41341: u64 [s1 + 0x1a8] = a3\n 41345: u64 [s1 + 0x38] = a1\n 41348: u64 [s1 + 0x1a0] = a1\n 41352: a0 = s1 + 0x180\n 41356: a1 = s1 + 0x1a0\n 41360: ra = 0x798\n 41364: t0 = 0x6\n 41367: jump @2259\n      : @1603 [@dyn 972] (gas: 16)\n 41370: a4 = s1 + 0x100\n 41374: a0 = u64 [a4 + 0x98]\n 41378: a1 = u64 [a4 + 0x90]\n 41382: a2 = u64 [a4 + 0x88]\n 41386: a3 = u64 [a4 + 0x80]\n 41390: u64 [s1 + 0x30] = a0\n 41393: u64 [a4 + 0x58] = a0\n 41396: u64 [s1 + 0x28] = a1\n 41399: u64 [a4 + 0x50] = a1\n 41402: u64 [s1 + 0x20] = a2\n 41405: u64 [a4 + 0x48] = a2\n 41408: a0 = s1 + 0x160\n 41412: a1 = s1 + 0x140\n 41416: u64 [s1 + 0x78] = a3\n 41419: u64 [a4 + 0x40] = a3\n 41422: ra = 1946, jump @255\n      : @1604 [@dyn 973] (gas: 12)\n 41429: a0 = u64 [s1 + 0x80]\n 41433: a1 = u64 [s1 + 0x90]\n 41437: a2 = u64 [s1 + 0x88]\n 41441: a2 = a2 | a1\n 41444: a3 = u64 [s1 + 0x98]\n 41448: a1 = a0 | a3\n 41451: a1 = a1 | a2\n 41454: a1 = a1 >> 0x20\n 41457: a2 = a2 | a3\n 41460: a2 = a2 << 0x20\n 41463: a1 = a1 | a2\n 41466: jump @1622 if a1 != 0\n      : @1605 (gas: 15)\n 41470: a5 = s1 + 0x100\n 41474: a4 = u64 [a5 + 0x78]\n 41477: a2 = u64 [a5 + 0x70]\n 41480: a1 = u64 [a5 + 0x68]\n 41483: a3 = u64 [a5 + 0x60]\n 41486: u64 [s1 + 0x40] = a3\n 41489: u64 [a5 + 0x20] = a3\n 41492: u64 [s1 + 0x50] = a1\n 41495: u64 [a5 + 0x28] = a1\n 41498: u64 [s1 + 0x48] = a2\n 41501: u64 [a5 + 0x30] = a2\n 41504: a1 = s1 + 0x120\n 41508: u64 [s1 + 0x58] = a4\n 41511: u64 [a5 + 0x38] = a4\n 41514: ra = 1948, jump @24\n      : @1606 [@dyn 974] (gas: 3)\n 41521: a3 = u64 [s1 + 0x78]\n 41524: a0 = a3 & 0x1\n 41527: jump @1610 if a0 != 0\n      : @1607 (gas: 10)\n 41531: a0 = u64 [s1 + 0x90]\n 41535: a1 = u64 [s1 + 0x98]\n 41539: a0 = a0 | a1\n 41542: a1 = 0xffffffe0\n 41552: a4 = u64 [s1 + 0x80]\n 41556: a1 = a4 <u a1\n 41559: a2 = u64 [s1 + 0x88]\n 41563: a1 = 0 if a2 != 0\n 41565: a1 = 0 if a0 != 0\n 41567: jump @1622 if a1 == 0\n      : @1608 (gas: 11)\n 41571: a1 = a3 & 0xffffffffffffff00\n 41575: i32 a0 = a4 + 0x20\n 41578: a3 = u64 [s1 + 0x20]\n 41581: u64 [s1 + 0xa8] = a3\n 41585: u64 [s1 + 0xa0] = a1\n 41589: a1 = u64 [s1 + 0x28]\n 41592: u64 [s1 + 0xb0] = a1\n 41596: a1 = s1 + 0xa0\n 41600: a3 = u64 [s1 + 0x30]\n 41603: u64 [s1 + 0xb8] = a3\n 41607: ra = 1950, jump @24\n      : @1609 [@dyn 975] (gas: 26)\n 41614: ra = 0\n 41616: t1 = 0\n 41618: t0 = 0\n 41620: a0 = u64 [s1 + 0x48]\n 41623: a1 = u64 [s1 + 0x40]\n 41626: a0 = a0 | a1\n 41629: a1 = u64 [s1 + 0x58]\n 41632: a2 = u64 [s1 + 0x50]\n 41635: a1 = a1 | a2\n 41638: a0 = a0 | a1\n 41641: a1 = u64 [s1 + 0x80]\n 41645: a3 = a1 + 0x20\n 41648: a1 = a3 <u a1\n 41651: a2 = u64 [s1 + 0x88]\n 41655: a4 = a2 + a1\n 41658: a2 = a4 <u a2\n 41661: a2 = a1 if a1 == 0\n 41664: a1 = u64 [s1 + 0x98]\n 41668: a5 = a1 + a2\n 41671: a1 = a5 <u a1\n 41674: a2 = u64 [s1 + 0x90]\n 41678: a1 = a1 + a2\n 41681: u64 [s1 + 0x38] = a1\n 41684: a0 = a0 >u 0\n 41686: t2 = a0 << 0x5\n 41689: jump @1621\n      : @1610 (gas: 12)\n 41692: a0 = u64 [s1 + 0x38]\n 41695: a2 = s1 + 0x100\n 41699: u64 [a2] = a0\n 41701: a0 = u64 [s1 + 0x60]\n 41704: u64 [a2 + 0x8] = a0\n 41707: a0 = u64 [s1 + 0x68]\n 41710: u64 [a2 + 0x10] = a0\n 41713: a1 = s1 + 0x100\n 41717: a0 = u64 [s1 + 0x70]\n 41720: u64 [a2 + 0x18] = a0\n 41723: a0 = 0\n 41725: ra = 1952, jump @24\n      : @1611 [@dyn 976] (gas: 6)\n 41732: a0 = sp + 0xffffffffffffffe0\n 41735: a0 = a0 & 0xffffffffffffffe0\n 41738: u64 [s1 + 0x30] = a0\n 41741: sp = a0\n 41743: a1 = i32 [0x20150]\n 41748: jump @1613 if a1 >u 31\n      : @1612 (gas: 2)\n 41752: u32 [0x20150] = 0x20\n 41758: fallthrough\n      : @1613 (gas: 49)\n 41759: a0 = sp + 0xffffffffffffffe0\n 41762: a2 = a0 & 0xffffffffffffffe0\n 41765: u64 [s1 + 0x78] = a2\n 41768: sp = a2\n 41770: a0 = 0x20160\n 41775: i32 a0 = a0 + 0\n 41777: i32 a2 = a2 + 0\n 41779: a1 = 0x20\n 41782: ecalli 11 // 'hash_keccak_256'\n 41784: a5 = 0\n 41786: ra = 0\n 41788: t1 = 0\n 41790: t0 = 0\n 41792: a0 = u64 [s1 + 0x80]\n 41796: a1 = a0 + 0x20\n 41799: u64 [s1 + 0x28] = a1\n 41802: a0 = a1 <u a0\n 41805: a1 = u64 [s1 + 0x88]\n 41809: a2 = a1 + a0\n 41812: u64 [s1 + 0x20] = a2\n 41815: a1 = a2 <u a1\n 41818: a1 = a0 if a0 == 0\n 41821: a0 = u64 [s1 + 0x98]\n 41825: a1 = a1 + a0\n 41828: u64 [s1 + 0x18] = a1\n 41831: a0 = a1 <u a0\n 41834: a1 = u64 [s1 + 0x90]\n 41838: a0 = a0 + a1\n 41841: u64 [s1 + 0x38] = a0\n 41844: a3 = u64 [s1 + 0x78]\n 41847: a0 = u64 [a3 + 0x18]\n 41850: a1 = u64 [a3 + 0x10]\n 41853: a2 = u64 [a3 + 0x8]\n 41856: a3 = u64 [a3]\n 41858: a0 = reverse a0\n 41860: a4 = reverse a1\n 41862: t2 = reverse a2\n 41864: a2 = reverse a3\n 41866: a1 = u64 [s1 + 0x30]\n 41869: a3 = a2\n 41871: u64 [a1 + 0x18] = a2\n 41874: a2 = t2\n 41876: u64 [s1 + 0x60] = a2\n 41879: u64 [a1 + 0x10] = a2\n 41882: u64 [s1 + 0x70] = a4\n 41885: u64 [a1 + 0x8] = a4\n 41888: a2 = a0\n 41890: u64 [a1] = a0\n 41892: fallthrough\n      : @1614 (gas: 19)\n 41893: u64 [s1 + 0x68] = a3\n 41896: u64 [s1 + 0x78] = a2\n 41899: a0 = u64 [s1 + 0x40]\n 41902: a0 = a5 <u a0\n 41905: a2 = u64 [s1 + 0x50]\n 41908: a3 = ra ^ a2\n 41911: a2 = ra <u a2\n 41914: a2 = a0 if a3 == 0\n 41917: a4 = u64 [s1 + 0x48]\n 41920: a0 = t1 <u a4\n 41923: a3 = u64 [s1 + 0x58]\n 41926: t2 = a5\n 41928: a5 = t0 ^ a3\n 41931: a3 = t0 <u a3\n 41934: a3 = a0 if a5 == 0\n 41937: a0 = t1 ^ a4\n 41940: a0 = a0 | a5\n 41943: a3 = a2 if a0 == 0\n 41946: jump @1620 if a3 == 0\n      : @1615 (gas: 8)\n 41950: a0 = s1 + 0xe0\n 41954: u64 [s1 + 0x98] = t0\n 41958: u64 [s1 + 0x90] = t1\n 41962: u64 [s1 + 0x88] = ra\n 41966: u64 [s1 + 0x80] = t2\n 41970: ra = 0x7a2\n 41974: t0 = 0x6\n 41977: jump @2259\n      : @1616 [@dyn 977] (gas: 7)\n 41980: a1 = u64 [s1 + 0x28]\n 41983: a0 = u64 [s1 + 0x80]\n 41987: a0 = a0 + a1\n 41990: a1 = a0 <u a1\n 41993: a4 = u64 [s1 + 0x20]\n 41996: a2 = u64 [s1 + 0x88]\n 42000: t0 = 1956, jump @2324\n      : @1617 [@dyn 978] (gas: 19)\n 42006: a3 = u64 [s1 + 0x18]\n 42009: a1 = u64 [s1 + 0x90]\n 42013: a1 = a1 + a3\n 42016: t0 = a1 <u a3\n 42019: a5 = u64 [s1 + 0x38]\n 42022: a3 = u64 [s1 + 0x98]\n 42026: a5 = a5 + a3\n 42029: a3 = a5 + t0\n 42032: a4 = a4 + a1\n 42035: a1 = a4 <u a1\n 42038: a1 = a1 + a3\n 42041: a1 = a1 | a2\n 42044: a2 = a0 | a4\n 42047: a2 = a2 | a1\n 42050: a1 = a1 | a4\n 42053: a2 = a2 >> 0x20\n 42056: a1 = a1 << 0x20\n 42059: a1 = a1 | a2\n 42062: jump @1622 if a1 != 0\n      : @1618 (gas: 10)\n 42066: a2 = u64 [s1 + 0xf8]\n 42070: a1 = u64 [s1 + 0xf0]\n 42074: a3 = u64 [s1 + 0xe8]\n 42078: a4 = u64 [s1 + 0xe0]\n 42082: u64 [s1 + 0xc0] = a4\n 42086: u64 [s1 + 0xc8] = a3\n 42090: u64 [s1 + 0xd0] = a1\n 42094: a1 = s1 + 0xc0\n 42098: u64 [s1 + 0xd8] = a2\n 42102: ra = 1958, jump @24\n      : @1619 [@dyn 979] (gas: 37)\n 42109: a5 = u64 [s1 + 0x78]\n 42112: a5 = a5 + 0x1\n 42115: a0 = a5 <u 0x1\n 42118: a3 = u64 [s1 + 0x70]\n 42121: a3 = a3 + a0\n 42124: a0 = a5 | a3\n 42127: a0 = a0 <u 0x1\n 42130: a1 = u64 [s1 + 0x60]\n 42133: t1 = a1 + a0\n 42136: a1 = t1 <u a1\n 42139: a0 = u64 [s1 + 0x68]\n 42142: a0 = a0 + a1\n 42145: a1 = u64 [s1 + 0x80]\n 42149: t2 = a1 + 0x20\n 42152: a2 = t2 <u a1\n 42155: a1 = u64 [s1 + 0x88]\n 42159: ra = a1 + a2\n 42162: a4 = ra <u a1\n 42165: a4 = a2 if a2 == 0\n 42168: a1 = u64 [s1 + 0x90]\n 42172: a4 = a4 + a1\n 42175: a2 = a4 <u a1\n 42178: t0 = u64 [s1 + 0x98]\n 42182: t0 = t0 + a2\n 42185: u64 [s1 + 0x70] = a3\n 42188: a1 = u64 [s1 + 0x30]\n 42191: u64 [a1 + 0x8] = a3\n 42194: a2 = a5\n 42196: u64 [a1] = a5\n 42198: a5 = t1\n 42200: u64 [a1 + 0x10] = a5\n 42203: a3 = a0\n 42205: u64 [a1 + 0x18] = a0\n 42208: u64 [s1 + 0x60] = a5\n 42211: a5 = t2\n 42213: t1 = a4\n 42215: jump @1614\n      : @1620 (gas: 4)\n 42218: a3 = u64 [s1 + 0x28]\n 42221: a4 = u64 [s1 + 0x20]\n 42224: a5 = u64 [s1 + 0x18]\n 42227: fallthrough\n      : @1621 (gas: 26)\n 42228: a0 = a3 + t2\n 42231: a1 = a0 <u a3\n 42234: a2 = a4 + ra\n 42237: a2 = a2 + a1\n 42240: a3 = a2 ^ a4\n 42243: a4 = a2 <u a4\n 42246: a4 = a1 if a3 == 0\n 42249: a1 = a5 + t1\n 42252: a4 = a4 + a1\n 42255: a3 = a4 <u a1\n 42258: a1 = a1 <u a5\n 42261: a5 = u64 [s1 + 0x38]\n 42264: a5 = a5 + t0\n 42267: a1 = a1 + a5\n 42270: a1 = a1 + a3\n 42273: a3 = u64 [s1 + 0x10]\n 42276: u64 [a3] = a0\n 42278: u64 [a3 + 0x8] = a2\n 42281: u64 [a3 + 0x10] = a4\n 42284: u64 [a3 + 0x18] = a1\n 42287: sp = s0 + 0xfffffffffffffe20\n 42291: ra = u64 [sp + 0x1d8]\n 42295: s0 = u64 [sp + 0x1d0]\n 42299: s1 = u64 [sp + 0x1c8]\n 42303: sp = sp + 0x1e0\n 42307: ret\n      : @1622 (gas: 1)\n 42309: trap\n      : @1623 [@dyn 980] (gas: 9)\n 42310: a1 = u64 [a0 + 0x18]\n 42313: a2 = u64 [a0 + 0x10]\n 42316: a3 = u64 [a0]\n 42318: a0 = u64 [a0 + 0x8]\n 42321: a4 = a2 | a1\n 42324: a5 = a3 <u 0xffffffffffffffc0\n 42327: a5 = 0 if a0 != 0\n 42329: a5 = 0 if a4 != 0\n 42331: jump @1626 if a5 == 0\n      : @1624 (gas: 15)\n 42334: a4 = a3 + 0x40\n 42337: a3 = a4 <u a3\n 42340: a5 = a0 + a3\n 42343: a0 = a5 <u a0\n 42346: a0 = a3 if a3 == 0\n 42349: a0 = a0 + a2\n 42352: a2 = a0 <u a2\n 42355: a2 = a2 + a1\n 42358: u64 [sp] = a4\n 42360: u64 [sp + 0x8] = a5\n 42363: u64 [sp + 0x10] = a0\n 42366: a0 = 0x40\n 42369: a1 = sp\n 42371: u64 [sp + 0x18] = a2\n 42374: ra = 1962, jump @24\n      : @1625 [@dyn 981] (gas: 5)\n 42381: sp = s0 + 0xffffffffffffffd0\n 42384: ra = u64 [sp + 0x28]\n 42387: s0 = u64 [sp + 0x20]\n 42390: sp = sp + 0x30\n 42393: ret\n      : @1626 (gas: 3)\n 42395: ra = 0x7ac\n 42399: t0 = 0x86\n 42403: jump @2232\n      : @1627 [@dyn 982] (gas: 1)\n 42406: t0 = 1966, jump @2257\n      : @1628 [@dyn 983] (gas: 1)\n 42412: ra = 1968, jump @24\n      : @1629 [@dyn 984] (gas: 7)\n 42419: u64 [s1 + 56] = 0\n 42422: u64 [s1 + 48] = 0\n 42425: u64 [s1 + 40] = 0\n 42428: a0 = 0x20\n 42431: a1 = s1 + a0\n 42434: u64 [s1 + 32] = 0\n 42437: ra = 1970, jump @24\n      : @1630 [@dyn 985] (gas: 2)\n 42444: a1 = i32 [0x20150]\n 42449: jump @1632 if a1 >u 63\n      : @1631 (gas: 4)\n 42453: a1 = 0x40\n 42456: u32 [0x20150] = a1\n 42461: t0 = 0x7b4\n 42465: jump @2260\n      : @1632 (gas: 1)\n 42468: t0 = 1972, jump @2260\n      : @1633 [@dyn 986] (gas: 6)\n 42474: a0 = 0x20160\n 42479: i32 a0 = a0 + 0\n 42481: i32 a2 = a2 + 0\n 42483: a1 = 0x40\n 42486: ecalli 11 // 'hash_keccak_256'\n 42488: t0 = 1974, jump @2241\n      : @1634 [@dyn 987] (gas: 1)\n 42494: ret\n      : @1635 [@dyn 988] (gas: 1)\n 42496: ra = 1978, jump @24\n      : @1636 [@dyn 989] (gas: 7)\n 42503: u64 [s1 + 56] = 0\n 42506: u64 [s1 + 48] = 0\n 42509: u64 [s1 + 32] = 0x9\n 42513: a0 = 0x20\n 42516: a1 = s1 + a0\n 42519: u64 [s1 + 40] = 0\n 42522: ra = 1980, jump @24\n      : @1637 [@dyn 990] (gas: 2)\n 42529: a1 = i32 [0x20150]\n 42534: jump @1639 if a1 >u 63\n      : @1638 (gas: 4)\n 42538: a1 = 0x40\n 42541: u32 [0x20150] = a1\n 42546: t0 = 0x7be\n 42550: jump @2260\n      : @1639 (gas: 1)\n 42553: t0 = 1982, jump @2260\n      : @1640 [@dyn 991] (gas: 6)\n 42559: a0 = 0x20160\n 42564: i32 a0 = a0 + 0\n 42566: i32 a2 = a2 + 0\n 42568: a1 = 0x40\n 42571: ecalli 11 // 'hash_keccak_256'\n 42573: t0 = 1984, jump @2241\n      : @1641 [@dyn 992] (gas: 1)\n 42579: ret\n      : @1642 [@dyn 993] (gas: 20)\n 42581: s1 = sp\n 42583: a3 = u64 [a1]\n 42585: u64 [s1 + 0x30] = a3\n 42588: a3 = u64 [a1 + 0x8]\n 42591: u64 [s1 + 0x28] = a3\n 42594: a3 = u64 [a1 + 0x10]\n 42597: u64 [s1 + 0x20] = a3\n 42600: a1 = u64 [a1 + 0x18]\n 42603: u64 [s1 + 0x18] = a1\n 42606: a3 = u64 [a2]\n 42608: a1 = u64 [a2 + 0x8]\n 42611: a2 = u32 [a2 + 0x10]\n 42614: u64 [s1 + 0x38] = a0\n 42617: u64 [s1 + 120] = 0\n 42620: u64 [s1 + 0x70] = a2\n 42623: u64 [s1 + 0x68] = a1\n 42626: a1 = s1 + 0x60\n 42629: u64 [s1 + 0x60] = a3\n 42632: a0 = 0\n 42634: ra = 1988, jump @24\n      : @1643 [@dyn 994] (gas: 11)\n 42641: a0 = u64 [s1 + 0x18]\n 42644: u64 [s1 + 0x58] = a0\n 42647: a0 = u64 [s1 + 0x20]\n 42650: u64 [s1 + 0x50] = a0\n 42653: a0 = u64 [s1 + 0x28]\n 42656: u64 [s1 + 0x48] = a0\n 42659: a0 = 0x20\n 42662: a1 = s1 + 0x40\n 42665: a2 = u64 [s1 + 0x30]\n 42668: u64 [s1 + 0x40] = a2\n 42671: ra = 1990, jump @24\n      : @1644 [@dyn 995] (gas: 2)\n 42678: a1 = i32 [0x20150]\n 42683: jump @1646 if a1 >u 63\n      : @1645 (gas: 2)\n 42687: u32 [0x20150] = 0x40\n 42693: fallthrough\n      : @1646 (gas: 13)\n 42694: a0 = sp + 0xffffffffffffffe0\n 42697: a2 = a0 & 0xffffffffffffffe0\n 42700: u64 [s1 + 0x30] = a2\n 42703: sp = a2\n 42705: a0 = 0x20160\n 42710: i32 a0 = a0 + 0\n 42712: i32 a2 = a2 + 0\n 42714: a1 = 0x40\n 42717: ra = 0x7c8\n 42721: ecalli 11 // 'hash_keccak_256'\n 42723: a3 = u64 [s1 + 0x30]\n 42726: t0 = 0x7ca\n 42730: jump @2213\n      : @1647 [@dyn 996] (gas: 2)\n 42733: a3 = u64 [s1 + 0x30]\n 42736: t0 = 1994, jump @2213\n      : @1648 [@dyn 997] (gas: 6)\n 42742: a4 = u64 [s1 + 0x38]\n 42745: u64 [a4 + 0x18] = a3\n 42748: u64 [a4 + 0x10] = a2\n 42751: u64 [a4 + 0x8] = a1\n 42754: u64 [a4] = a0\n 42756: t0 = 1996, jump @2309\n      : @1649 [@dyn 998] (gas: 1)\n 42762: ret\n      : @1650 [@dyn 999] (gas: 11)\n 42764: a2 = u64 [a1]\n 42766: a3 = u64 [a1 + 0x8]\n 42769: a1 = u32 [a1 + 0x10]\n 42772: u64 [s1 + 0x18] = a0\n 42775: u64 [s1 + 120] = 0\n 42778: u64 [s1 + 0x70] = a1\n 42781: u64 [s1 + 0x68] = a3\n 42784: a1 = s1 + 0x60\n 42787: u64 [s1 + 0x60] = a2\n 42790: a0 = 0\n 42792: ra = 2000, jump @24\n      : @1651 [@dyn 1000] (gas: 7)\n 42799: u64 [s1 + 88] = 0\n 42802: u64 [s1 + 80] = 0\n 42805: u64 [s1 + 72] = 0\n 42808: a0 = 0x20\n 42811: a1 = s1 + 0x40\n 42814: u64 [s1 + 64] = 0\n 42817: ra = 2002, jump @24\n      : @1652 [@dyn 1001] (gas: 2)\n 42824: a1 = i32 [0x20150]\n 42829: jump @1654 if a1 >u 63\n      : @1653 (gas: 4)\n 42833: a1 = 0x40\n 42836: u32 [0x20150] = a1\n 42841: t0 = 0x7d4\n 42845: jump @2260\n      : @1654 (gas: 1)\n 42848: t0 = 2004, jump @2260\n      : @1655 [@dyn 1002] (gas: 9)\n 42854: a0 = 0x20160\n 42859: i32 a0 = a0 + 0\n 42861: i32 a2 = a2 + 0\n 42863: a1 = 0x40\n 42866: ra = 0x7d6\n 42870: ecalli 11 // 'hash_keccak_256'\n 42872: a3 = u64 [s1 + 0x10]\n 42875: t0 = 0x7d8\n 42879: jump @2213\n      : @1656 [@dyn 1003] (gas: 2)\n 42882: a3 = u64 [s1 + 0x10]\n 42885: t0 = 2008, jump @2213\n      : @1657 [@dyn 1004] (gas: 9)\n 42891: u64 [s1 + 0x98] = a3\n 42895: u64 [s1 + 0x90] = a2\n 42899: u64 [s1 + 0x88] = a1\n 42903: u64 [s1 + 0x80] = a0\n 42907: a0 = s1 + 0x20\n 42910: a1 = s1 + 0x80\n 42914: ra = 0x7da\n 42918: t0 = 0x6\n 42921: jump @2259\n      : @1658 [@dyn 1005] (gas: 10)\n 42924: a0 = u64 [s1 + 0x30]\n 42927: a1 = u64 [s1 + 0x38]\n 42930: a2 = u64 [s1 + 0x20]\n 42933: a3 = u64 [s1 + 0x28]\n 42936: a4 = u64 [s1 + 0x18]\n 42939: u64 [a4 + 0x10] = a0\n 42942: u64 [a4 + 0x18] = a1\n 42945: u64 [a4] = a2\n 42947: u64 [a4 + 0x8] = a3\n 42950: t0 = 2012, jump @2350\n      : @1659 [@dyn 1006] (gas: 1)\n 42956: ret\n      : @1660 (gas: 10)\n 42958: sp = sp + 0xffffffffffffff30\n 42962: u64 [sp + 0xc8] = ra\n 42966: u64 [sp + 0xc0] = s0\n 42970: u64 [sp + 0xb8] = s1\n 42974: s0 = sp + 0xd0\n 42978: sp = sp & 0xfffffffffffffff0\n 42981: u64 [sp + 0x8] = a0\n 42984: a0 = sp + 0x90\n 42988: a1 = 0x40\n 42991: ra = 2014, jump @22\n      : @1661 [@dyn 1007] (gas: 15)\n 42998: a0 = u64 [sp + 0xa8]\n 43002: u64 [sp + 0x18] = a0\n 43005: s1 = u64 [sp + 0xa0]\n 43009: a2 = u64 [sp + 0x98]\n 43013: u64 [sp + 0x28] = a2\n 43016: a1 = u64 [sp + 0x90]\n 43020: u64 [sp + 0x20] = a1\n 43023: u64 [sp + 0x88] = a0\n 43027: u64 [sp + 0x80] = s1\n 43031: u64 [sp + 0x78] = a2\n 43034: a0 = sp + 0x70\n 43037: u64 [sp + 0x70] = a1\n 43040: ra = 0x7e0\n 43044: t0 = 0x7a8\n 43048: jump @2371\n      : @1662 [@dyn 1008] (gas: 12)\n 43051: a0 = u64 [sp + 0x18]\n 43054: a1 = u64 [sp + 0x28]\n 43057: a0 = a0 | a1\n 43060: a1 = u64 [sp + 0x20]\n 43063: a1 = a1 | s1\n 43066: a1 = a1 | a0\n 43069: a1 = a1 >> 0x20\n 43072: u64 [sp + 0x10] = s1\n 43075: a0 = a0 | s1\n 43078: a0 = a0 << 0x20\n 43081: a0 = a0 | a1\n 43084: jump @1668 if a0 != 0\n      : @1663 (gas: 8)\n 43087: u64 [sp + 104] = 0\n 43090: u64 [sp + 96] = 0\n 43093: u64 [sp + 88] = 0\n 43096: a1 = sp + 0x50\n 43099: u64 [sp + 80] = 0\n 43102: s1 = u64 [sp + 0x20]\n 43105: a0 = s1\n 43107: ra = 2018, jump @24\n      : @1664 [@dyn 1009] (gas: 3)\n 43114: a0 = u64 [sp + 0x10]\n 43117: a1 = u64 [sp + 0x18]\n 43120: t0 = 2020, jump @2349\n      : @1665 [@dyn 1010] (gas: 4)\n 43126: a2 = u64 [sp + 0x28]\n 43129: a1 = 0 if a2 != 0\n 43131: a1 = 0 if a0 != 0\n 43133: jump @1668 if a1 == 0\n      : @1666 (gas: 8)\n 43136: s1 = u64 [sp + 0x20]\n 43139: i32 a0 = s1 + 0x20\n 43142: u64 [sp + 72] = 0\n 43145: u64 [sp + 64] = 0\n 43148: u64 [sp + 56] = 0\n 43151: a1 = sp + 0x30\n 43154: u64 [sp + 48] = 0\n 43157: ra = 2022, jump @24\n      : @1667 [@dyn 1011] (gas: 14)\n 43164: a0 = u64 [sp + 0x8]\n 43167: a1 = u64 [sp + 0x18]\n 43170: u64 [a0 + 0x18] = a1\n 43173: a1 = u64 [sp + 0x10]\n 43176: u64 [a0 + 0x10] = a1\n 43179: a1 = u64 [sp + 0x28]\n 43182: u64 [a0 + 0x8] = a1\n 43185: u64 [a0] = s1\n 43187: sp = s0 + 0xffffffffffffff30\n 43191: ra = u64 [sp + 0xc8]\n 43195: s0 = u64 [sp + 0xc0]\n 43199: s1 = u64 [sp + 0xb8]\n 43203: sp = sp + 0xd0\n 43207: ret\n      : @1668 (gas: 1)\n 43209: trap\n      : @1669 (gas: 18)\n 43210: sp = sp + 0xfffffffffffffb60\n 43214: a3 = sp + 0x400\n 43218: u64 [a3 + 0x98] = ra\n 43222: u64 [a3 + 0x90] = s0\n 43226: u64 [a3 + 0x88] = s1\n 43230: s0 = sp + 0x4a0\n 43234: sp = sp & 0xffffffffffffffe0\n 43237: s1 = sp\n 43239: a3 = u64 [a0 + 0x10]\n 43242: a5 = u64 [a0 + 0x8]\n 43245: t2 = u64 [a0]\n 43247: u64 [s1 + 0x90] = a3\n 43251: a3 = a3 << 0x20\n 43254: a4 = a3 >> 0x20\n 43257: u64 [s1 + 0x98] = a5\n 43261: a3 = t2 | a5\n 43264: a3 = a3 | a4\n 43267: jump @1689 if a3 == 0\n      : @1670 (gas: 17)\n 43271: u64 [s1 + 0x38] = a4\n 43274: t1 = u64 [a1 + 0x10]\n 43277: a3 = u64 [a1 + 0x8]\n 43280: a5 = u64 [a1]\n 43282: a4 = 0xffffffff\n 43292: u64 [s1 + 0x68] = a3\n 43295: t0 = a3 & 0xffffffffffffffff\n 43298: u64 [s1 + 0x70] = a5\n 43301: a5 = a5 & 0xffffffffffffffff\n 43304: u64 [s1 + 0x60] = t1\n 43307: a3 = t1 & a4\n 43310: u64 [s1 + 0x30] = a3\n 43313: u64 [s1 + 0x20] = a5\n 43316: a3 = a3 | a5\n 43319: u64 [s1 + 0x28] = t0\n 43322: a3 = a3 | t0\n 43325: jump @1694 if a3 == 0\n      : @1671 (gas: 24)\n 43329: a3 = u64 [a2 + 0x18]\n 43332: u64 [s1 + 0xb0] = a3\n 43336: a3 = u64 [a2 + 0x10]\n 43339: u64 [s1 + 0xa0] = a3\n 43343: a3 = u64 [a2 + 0x8]\n 43346: u64 [s1 + 0xa8] = a3\n 43350: a2 = u64 [a2]\n 43352: u64 [s1 + 0xb8] = a2\n 43356: a1 = u64 [a1 + 0x18]\n 43359: u64 [s1 + 0x50] = a1\n 43362: a2 = u64 [a0 + 0x18]\n 43365: u64 [s1 + 0x3c0] = t2\n 43369: a0 = u64 [s1 + 0x98]\n 43373: u64 [s1 + 0x3c8] = a0\n 43377: a0 = u64 [s1 + 0x90]\n 43381: u64 [s1 + 0x3d0] = a0\n 43385: a0 = s1 + 0x3e0\n 43389: a1 = s1 + 0x3c0\n 43393: u64 [s1 + 0x58] = a2\n 43396: u64 [s1 + 0x3d8] = a2\n 43400: u64 [s1 + 0x80] = t2\n 43404: ra = 0x7e8\n 43408: t0 = 0x7ae\n 43412: jump @2257\n      : @1672 [@dyn 1012] (gas: 14)\n 43415: a0 = u64 [s1 + 0x3f8]\n 43419: a1 = u64 [s1 + 0x3f0]\n 43423: a2 = u64 [s1 + 0x3e8]\n 43427: a3 = u64 [s1 + 0x3e0]\n 43431: a4 = s1 + 0x400\n 43435: u64 [a4 + 0x18] = a0\n 43438: u64 [a4 + 0x10] = a1\n 43441: u64 [a4 + 0x8] = a2\n 43444: u64 [a4] = a3\n 43446: a0 = s1 + 0x3a0\n 43450: a1 = s1 + 0x400\n 43454: ra = 0x7ea\n 43458: t0 = 0x6\n 43461: jump @2259\n      : @1673 [@dyn 1013] (gas: 25)\n 43464: a4 = u64 [s1 + 0xb0]\n 43468: t2 = u64 [s1 + 0xa0]\n 43472: t1 = u64 [s1 + 0xa8]\n 43476: a3 = s1 + 0x300\n 43480: a0 = u64 [a3 + 0xb8]\n 43484: t0 = u64 [s1 + 0x3b0]\n 43488: a2 = u64 [a3 + 0xa8]\n 43492: a1 = u64 [a3 + 0xa0]\n 43496: a3 = a0 ^ a4\n 43499: u64 [s1 + 0x48] = a0\n 43502: a4 = a0 <u a4\n 43505: a0 = t0 <u t2\n 43508: a4 = a0 if a3 == 0\n 43511: ra = a2 ^ t1\n 43514: u64 [s1 + 0x78] = a2\n 43517: a2 = a2 <u t1\n 43520: u64 [s1 + 0x88] = a1\n 43524: a5 = u64 [s1 + 0xb8]\n 43528: a1 = a1 <u a5\n 43531: a2 = a1 if ra == 0\n 43534: u64 [s1 + 0x40] = t0\n 43537: a5 = t0 ^ t2\n 43540: a3 = a3 | a5\n 43543: a4 = a2 if a3 == 0\n 43546: jump @1701 if a4 != 0\n      : @1674 (gas: 32)\n 43550: a3 = u64 [s1 + 0x40]\n 43553: a3 = a3 - t2\n 43556: a4 = u64 [s1 + 0x48]\n 43559: a5 = u64 [s1 + 0xb0]\n 43563: a4 = a4 - a5\n 43566: a4 = a4 - a0\n 43569: a0 = a3 <u a2\n 43572: a4 = a4 - a0\n 43575: u64 [s1 + 0x48] = a4\n 43578: a3 = a3 - a2\n 43581: u64 [s1 + 0x40] = a3\n 43584: a0 = u64 [s1 + 0x78]\n 43587: a0 = a0 - t1\n 43590: a0 = a0 - a1\n 43593: u64 [s1 + 0x78] = a0\n 43596: a0 = u64 [s1 + 0x88]\n 43600: a1 = u64 [s1 + 0xb8]\n 43604: a0 = a0 - a1\n 43607: u64 [s1 + 0x88] = a0\n 43611: a0 = u64 [s1 + 0x80]\n 43615: u64 [s1 + 0x360] = a0\n 43619: a0 = u64 [s1 + 0x98]\n 43623: u64 [s1 + 0x368] = a0\n 43627: a0 = u64 [s1 + 0x90]\n 43631: u64 [s1 + 0x370] = a0\n 43635: a0 = s1 + 0x380\n 43639: a1 = s1 + 0x360\n 43643: a2 = u64 [s1 + 0x58]\n 43646: u64 [s1 + 0x378] = a2\n 43650: ra = 0x7ec\n 43654: t0 = 0x7ae\n 43658: jump @2257\n      : @1675 [@dyn 1014] (gas: 19)\n 43661: a0 = u64 [s1 + 0x398]\n 43665: a1 = u64 [s1 + 0x390]\n 43669: a2 = u64 [s1 + 0x388]\n 43673: a3 = u64 [s1 + 0x380]\n 43677: u64 [s1 + 0x438] = a0\n 43681: u64 [s1 + 0x430] = a1\n 43685: u64 [s1 + 0x428] = a2\n 43689: u64 [s1 + 0x420] = a3\n 43693: a0 = u64 [s1 + 0x40]\n 43696: u64 [s1 + 0x450] = a0\n 43700: a0 = u64 [s1 + 0x78]\n 43703: u64 [s1 + 0x448] = a0\n 43707: a0 = u64 [s1 + 0x88]\n 43711: u64 [s1 + 0x440] = a0\n 43715: a0 = u64 [s1 + 0x48]\n 43718: u64 [s1 + 0x458] = a0\n 43722: a0 = s1 + 0x420\n 43726: a1 = s1 + 0x440\n 43730: ra = 2030, jump @28\n      : @1676 [@dyn 1015] (gas: 17)\n 43737: a0 = sp + 0xffffffffffffffe0\n 43740: a0 = a0 & 0xffffffffffffffe0\n 43743: u64 [s1 + 0x88] = a0\n 43747: sp = a0\n 43749: a0 = u64 [s1 + 0x50]\n 43752: u64 [s1 + 0x338] = a0\n 43756: a0 = u64 [s1 + 0x60]\n 43759: u64 [s1 + 0x330] = a0\n 43763: a0 = u64 [s1 + 0x68]\n 43766: u64 [s1 + 0x328] = a0\n 43770: a0 = s1 + 0x340\n 43774: a1 = s1 + 0x320\n 43778: a2 = u64 [s1 + 0x70]\n 43781: u64 [s1 + 0x320] = a2\n 43785: ra = 0x7f0\n 43789: t0 = 0x7ae\n 43793: jump @2257\n      : @1677 [@dyn 1016] (gas: 13)\n 43796: a0 = u64 [s1 + 0x350]\n 43800: a4 = u64 [s1 + 0x358]\n 43804: a2 = u64 [s1 + 0x340]\n 43808: a3 = u64 [s1 + 0x348]\n 43812: a1 = u64 [s1 + 0x88]\n 43816: u64 [a1 + 0x10] = a0\n 43819: u64 [a1 + 0x18] = a4\n 43822: u64 [a1] = a2\n 43824: u64 [a1 + 0x8] = a3\n 43827: a0 = s1 + 0x300\n 43831: ra = 0x7f2\n 43835: t0 = 0x6\n 43838: jump @2259\n      : @1678 [@dyn 1017] (gas: 31)\n 43841: a2 = s1 + 0x300\n 43845: a0 = u64 [a2 + 0x8]\n 43848: a1 = u64 [a2]\n 43850: t0 = u64 [s1 + 0x318]\n 43854: a3 = u64 [a2 + 0x10]\n 43857: a4 = u64 [s1 + 0xa8]\n 43861: a4 = a4 + a0\n 43864: a5 = u64 [s1 + 0xb8]\n 43868: a5 = a5 + a1\n 43871: a1 = a5 <u a1\n 43874: a4 = a4 + a1\n 43877: a2 = a4 ^ a0\n 43880: a0 = a4 <u a0\n 43883: a0 = a1 if a2 == 0\n 43886: a1 = u64 [s1 + 0xa0]\n 43890: a1 = a1 + a3\n 43893: a2 = u64 [s1 + 0xb0]\n 43897: t0 = t0 + a2\n 43900: a2 = a1 <u a3\n 43903: a2 = a2 + t0\n 43906: a0 = a0 + a1\n 43909: a1 = a0 <u a1\n 43912: a1 = a1 + a2\n 43915: a2 = s1 + 0x400\n 43919: u64 [a2 + 0x60] = a5\n 43922: u64 [a2 + 0x68] = a4\n 43925: u64 [a2 + 0x70] = a0\n 43928: u64 [a2 + 0x78] = a1\n 43931: a1 = s1 + 0x460\n 43935: a0 = u64 [s1 + 0x88]\n 43939: ra = 2036, jump @28\n      : @1679 [@dyn 1018] (gas: 3)\n 43946: a0 = s1 + 0x2e0\n 43950: a1 = 0x40\n 43953: ra = 2038, jump @22\n      : @1680 [@dyn 1019] (gas: 25)\n 43960: a5 = s1 + 0x200\n 43964: a2 = u64 [a5 + 0xf8]\n 43968: u64 [s1 + 0x78] = a2\n 43971: a1 = u64 [a5 + 0xf0]\n 43975: u64 [s1 + 0x48] = a1\n 43978: a3 = u64 [a5 + 0xe8]\n 43982: u64 [s1 + 0x40] = a3\n 43985: a4 = u64 [a5 + 0xe0]\n 43989: u64 [s1 + 0x88] = a4\n 43993: a0 = u64 [s1 + 0xb0]\n 43997: u64 [a5 + 0x98] = a0\n 44001: a0 = u64 [s1 + 0xa0]\n 44005: u64 [a5 + 0x90] = a0\n 44009: a0 = u64 [s1 + 0xa8]\n 44013: u64 [a5 + 0x88] = a0\n 44017: a0 = u64 [s1 + 0xb8]\n 44021: u64 [a5 + 0x80] = a0\n 44025: u64 [a5 + 0xb8] = a2\n 44029: u64 [a5 + 0xb0] = a1\n 44033: u64 [a5 + 0xa8] = a3\n 44037: a0 = s1 + 0x2c0\n 44041: a1 = s1 + 0x2a0\n 44045: a2 = s1 + 0x280\n 44049: u64 [a5 + 0xa0] = a4\n 44053: ra = 2040, jump @558\n      : @1681 [@dyn 1020] (gas: 7)\n 44059: a2 = u64 [s1 + 0x40]\n 44062: a0 = u64 [s1 + 0x78]\n 44065: a0 = a0 | a2\n 44068: a3 = u64 [s1 + 0x48]\n 44071: a1 = u64 [s1 + 0x88]\n 44075: a1 = a1 | a3\n 44078: t0 = 2042, jump @2313\n      : @1682 [@dyn 1021] (gas: 1)\n 44084: jump @1688 if a0 != 0\n      : @1683 (gas: 27)\n 44088: ra = a3\n 44090: a4 = s1 + 0x200\n 44094: a0 = u64 [a4 + 0xc8]\n 44098: a1 = u64 [a4 + 0xd8]\n 44102: u64 [s1 + 0x18] = a1\n 44105: t1 = u64 [s1 + 0x2c0]\n 44109: a3 = u64 [a4 + 0xd0]\n 44113: a4 = a0 ^ a2\n 44116: a5 = a0 <u a2\n 44119: t0 = u64 [s1 + 0x88]\n 44123: a1 = t1 <u t0\n 44126: a5 = a1 if a4 == 0\n 44129: a4 = a3 - ra\n 44132: t2 = a4 - a5\n 44135: a4 = a4 <u a5\n 44138: u64 [s1 + 0x10] = a4\n 44141: a3 = a3 <u ra\n 44144: a5 = u64 [s1 + 0x78]\n 44147: a4 = u64 [s1 + 0x18]\n 44150: a5 = a4 - a5\n 44153: a5 = a5 - a3\n 44156: a3 = u64 [s1 + 0x10]\n 44159: a5 = a5 - a3\n 44162: a0 = a0 - a2\n 44165: a0 = a0 - a1\n 44168: a1 = t1 - t0\n 44171: t0 = 2044, jump @2220\n      : @1684 [@dyn 1022] (gas: 1)\n 44177: jump @1688 if a0 != 0\n      : @1685 (gas: 27)\n 44181: u64 [s1 + 568] = 0\n 44185: a0 = u64 [s1 + 0x20]\n 44188: u64 [s1 + 0x220] = a0\n 44192: u64 [s1 + 600] = 0\n 44196: a0 = u64 [s1 + 0x80]\n 44200: u64 [s1 + 0x240] = a0\n 44204: a0 = u64 [s1 + 0x28]\n 44207: u64 [s1 + 0x228] = a0\n 44211: a0 = u64 [s1 + 0x98]\n 44215: u64 [s1 + 0x248] = a0\n 44219: a0 = u64 [0x200b8]\n 44224: a2 = u64 [0x200c0]\n 44229: a3 = u64 [0x200c8]\n 44234: a4 = u64 [0x200d0]\n 44239: u64 [s1 + 0x278] = a0\n 44243: u64 [s1 + 0x270] = a2\n 44247: u64 [s1 + 0x268] = a3\n 44251: u64 [s1 + 0x260] = a4\n 44255: a0 = u64 [s1 + 0x30]\n 44258: u64 [s1 + 0x230] = a0\n 44262: a2 = s1 + 0x260\n 44266: a3 = s1 + 0x240\n 44270: a4 = s1 + 0x220\n 44274: a0 = u64 [s1 + 0x38]\n 44277: u64 [s1 + 0x250] = a0\n 44281: a0 = u64 [s1 + 0x88]\n 44285: ra = 2046, jump @32\n      : @1686 [@dyn 1023] (gas: 30)\n 44292: a0 = u64 [s1 + 0xb0]\n 44296: a1 = s1 + 0x100\n 44300: u64 [a1 + 0xd8] = a0\n 44304: a0 = u64 [s1 + 0xa0]\n 44308: u64 [a1 + 0xd0] = a0\n 44312: a0 = u64 [s1 + 0xa8]\n 44316: u64 [a1 + 0xc8] = a0\n 44320: a0 = u64 [s1 + 0xb8]\n 44324: u64 [a1 + 0xc0] = a0\n 44328: a0 = u64 [s1 + 0x50]\n 44331: u64 [a1 + 0xf8] = a0\n 44335: a0 = u64 [s1 + 0x60]\n 44338: u64 [a1 + 0xf0] = a0\n 44342: a0 = u64 [s1 + 0x68]\n 44345: u64 [a1 + 0xe8] = a0\n 44349: a0 = u64 [s1 + 0x70]\n 44352: u64 [a1 + 0xe0] = a0\n 44356: a0 = u64 [s1 + 0x58]\n 44359: a4 = s1 + 0x200\n 44363: u64 [a4 + 0x18] = a0\n 44366: a0 = u64 [s1 + 0x90]\n 44370: u64 [a4 + 0x10] = a0\n 44373: a0 = u64 [s1 + 0x98]\n 44377: u64 [a4 + 0x8] = a0\n 44380: a0 = s1 + 0x200\n 44384: a1 = s1 + 0x1e0\n 44388: a2 = s1 + 0x1c0\n 44392: a3 = u64 [s1 + 0x80]\n 44396: u64 [a4] = a3\n 44398: ra = 2048, jump @2113\n      : @1687 [@dyn 1024] (gas: 7)\n 44404: sp = s0 + 0xfffffffffffffb60\n 44408: a0 = sp + 0x400\n 44412: ra = u64 [a0 + 0x98]\n 44416: s0 = u64 [a0 + 0x90]\n 44420: s1 = u64 [a0 + 0x88]\n 44424: sp = sp + 0x4a0\n 44428: ret\n      : @1688 (gas: 1)\n 44430: trap\n      : @1689 (gas: 8)\n 44431: u64 [s1 + 240] = 0\n 44435: u64 [s1 + 232] = 0\n 44439: u64 [s1 + 224] = 0\n 44443: a0 = 0x96c6fd1e00000000\n 44453: a1 = s1 + 0xe0\n 44457: u64 [s1 + 0xf8] = a0\n 44461: a0 = 0\n 44463: ra = 2050, jump @24\n      : @1690 [@dyn 1025] (gas: 7)\n 44470: u64 [s1 + 216] = 0\n 44474: u64 [s1 + 208] = 0\n 44478: u64 [s1 + 200] = 0\n 44482: a0 = 0x4\n 44485: a1 = s1 + 0xc0\n 44489: u64 [s1 + 192] = 0\n 44493: ra = 2052, jump @24\n      : @1691 [@dyn 1026] (gas: 2)\n 44500: a1 = i32 [0x20150]\n 44505: jump @1693 if a1 >u 63\n      : @1692 (gas: 3)\n 44509: u32 [0x20150] = 0x40\n 44515: a1 = 0x20160\n 44520: jump @1700\n      : @1693 (gas: 2)\n 44522: a1 = 0x20160\n 44527: jump @1700\n      : @1694 (gas: 8)\n 44529: u64 [s1 + 304] = 0\n 44533: u64 [s1 + 296] = 0\n 44537: u64 [s1 + 288] = 0\n 44541: a0 = 0xec442f0500000000\n 44551: a1 = s1 + 0x120\n 44555: u64 [s1 + 0x138] = a0\n 44559: a0 = 0\n 44561: ra = 2054, jump @24\n      : @1695 [@dyn 1027] (gas: 1)\n 44568: t0 = 2056, jump @2370\n      : @1696 [@dyn 1028] (gas: 4)\n 44574: a0 = 0x4\n 44577: a1 = s1 + 0x100\n 44581: u64 [s1 + 256] = 0\n 44585: ra = 2058, jump @24\n      : @1697 [@dyn 1029] (gas: 2)\n 44592: a1 = i32 [0x20150]\n 44597: jump @1699 if a1 >u 63\n      : @1698 (gas: 3)\n 44601: u32 [0x20150] = 0x40\n 44607: a1 = 0x20160\n 44612: jump @1700\n      : @1699 (gas: 2)\n 44614: a1 = 0x20160\n 44619: fallthrough\n      : @1700 (gas: 5)\n 44620: i32 a1 = a1 + 0\n 44622: a0 = 0x1\n 44625: a2 = 0x24\n 44628: ecalli 16 // 'seal_return'\n 44630: fallthrough\n      : @1701 (gas: 8)\n 44631: u64 [s1 + 432] = 0\n 44635: u64 [s1 + 424] = 0\n 44639: u64 [s1 + 416] = 0\n 44643: a0 = 0xe450d38c00000000\n 44653: a1 = s1 + 0x1a0\n 44657: u64 [s1 + 0x1b8] = a0\n 44661: a0 = 0\n 44663: ra = 2060, jump @24\n      : @1702 [@dyn 1030] (gas: 10)\n 44670: u64 [s1 + 408] = 0\n 44674: a0 = u64 [s1 + 0x38]\n 44677: u64 [s1 + 0x190] = a0\n 44681: a0 = u64 [s1 + 0x98]\n 44685: u64 [s1 + 0x188] = a0\n 44689: a0 = 0x4\n 44692: a1 = s1 + 0x180\n 44696: a2 = u64 [s1 + 0x80]\n 44700: u64 [s1 + 0x180] = a2\n 44704: ra = 2062, jump @24\n      : @1703 [@dyn 1031] (gas: 11)\n 44711: a0 = u64 [s1 + 0x48]\n 44714: u64 [s1 + 0x178] = a0\n 44718: a0 = u64 [s1 + 0x40]\n 44721: u64 [s1 + 0x170] = a0\n 44725: a0 = u64 [s1 + 0x78]\n 44728: u64 [s1 + 0x168] = a0\n 44732: a0 = 0x24\n 44735: a1 = s1 + 0x160\n 44739: a2 = u64 [s1 + 0x88]\n 44743: u64 [s1 + 0x160] = a2\n 44747: ra = 2064, jump @24\n      : @1704 [@dyn 1032] (gas: 12)\n 44754: a0 = u64 [s1 + 0xb0]\n 44758: a3 = s1 + 0x100\n 44762: u64 [a3 + 0x58] = a0\n 44765: a0 = u64 [s1 + 0xa0]\n 44769: u64 [a3 + 0x50] = a0\n 44772: a0 = u64 [s1 + 0xa8]\n 44776: u64 [a3 + 0x48] = a0\n 44779: a0 = 0x44\n 44782: a1 = s1 + 0x140\n 44786: a2 = u64 [s1 + 0xb8]\n 44790: u64 [a3 + 0x40] = a2\n 44793: ra = 2066, jump @24\n      : @1705 [@dyn 1033] (gas: 2)\n 44800: a1 = i32 [0x20150]\n 44805: jump @1707 if a1 >u 127\n      : @1706 (gas: 2)\n 44809: u32 [0x20150] = 0x80\n 44816: fallthrough\n      : @1707 (gas: 7)\n 44817: a1 = 0x20160\n 44822: i32 a1 = a1 + 0\n 44824: a0 = 0x1\n 44827: a2 = 0x64\n 44830: ra = 0x814\n 44834: ecalli 16 // 'seal_return'\n 44836: fallthrough\n      : @1708 [@dyn 1034] (gas: 33)\n 44837: sp = sp + 0xfffffffffffffe80\n 44841: u64 [sp + 0x178] = ra\n 44845: u64 [sp + 0x170] = s0\n 44849: u64 [sp + 0x168] = s1\n 44853: s0 = sp + 0x180\n 44857: sp = sp & 0xffffffffffffffe0\n 44860: a2 = u64 [a1]\n 44862: u64 [sp + 0x58] = a2\n 44865: a2 = u64 [a1 + 0x8]\n 44868: u64 [sp + 0x50] = a2\n 44871: a2 = u64 [a1 + 0x10]\n 44874: u64 [sp + 0x48] = a2\n 44877: a1 = u64 [a1 + 0x18]\n 44880: u64 [sp + 0x40] = a1\n 44883: u64 [sp + 0x28] = a0\n 44886: i32 a0 = sp + 0x140\n 44890: ecalli 1 // 'block_number'\n 44892: a0 = u64 [sp + 0x158]\n 44896: u64 [sp + 0x30] = a0\n 44899: a1 = u64 [sp + 0x150]\n 44903: u64 [sp + 0x38] = a1\n 44906: s1 = u64 [sp + 0x148]\n 44910: a2 = u64 [sp + 0x140]\n 44914: u64 [sp + 0x20] = a2\n 44917: u64 [sp + 0x118] = a0\n 44921: u64 [sp + 0x110] = a1\n 44925: u64 [sp + 0x108] = s1\n 44929: a0 = sp + 0x120\n 44933: a1 = sp + 0x100\n 44937: u64 [sp + 0x100] = a2\n 44941: ra = 0x816\n 44945: t0 = 0x884\n 44949: jump @2372\n      : @1709 [@dyn 1035] (gas: 20)\n 44952: a4 = u64 [sp + 0x40]\n 44955: a5 = u64 [sp + 0x30]\n 44958: a0 = a5 ^ a4\n 44961: a2 = u64 [sp + 0x50]\n 44964: a1 = s1 ^ a2\n 44967: u64 [sp + 0x18] = s1\n 44970: a2 = a2 <u s1\n 44973: s1 = u64 [sp + 0x20]\n 44976: a3 = u64 [sp + 0x58]\n 44979: a3 = a3 <u s1\n 44982: a3 = a2 if a1 != 0\n 44985: a1 = a4 <u a5\n 44988: a4 = u64 [sp + 0x48]\n 44991: a5 = u64 [sp + 0x38]\n 44994: a2 = a4 <u a5\n 44997: a2 = a1 if a0 != 0\n 45000: a1 = a5 ^ a4\n 45003: a0 = a0 | a1\n 45006: a3 = a2 if a0 != 0\n 45009: jump @1712 if a3 == 0\n      : @1710 (gas: 13)\n 45012: a0 = u64 [sp + 0x58]\n 45015: u64 [sp + 0x60] = a0\n 45018: a0 = u64 [sp + 0x50]\n 45021: u64 [sp + 0x68] = a0\n 45024: a0 = u64 [sp + 0x48]\n 45027: u64 [sp + 0x70] = a0\n 45030: a0 = sp + 0x80\n 45034: a1 = sp + 0x60\n 45037: s1 = u64 [sp + 0x40]\n 45040: u64 [sp + 0x78] = s1\n 45043: ra = 0x818\n 45047: t0 = 0x884\n 45051: jump @2372\n      : @1711 [@dyn 1036] (gas: 14)\n 45054: a0 = u64 [sp + 0x28]\n 45057: u64 [a0 + 0x18] = s1\n 45060: a1 = u64 [sp + 0x48]\n 45063: u64 [a0 + 0x10] = a1\n 45066: a1 = u64 [sp + 0x50]\n 45069: u64 [a0 + 0x8] = a1\n 45072: a1 = u64 [sp + 0x58]\n 45075: u64 [a0] = a1\n 45077: sp = s0 + 0xfffffffffffffe80\n 45081: ra = u64 [sp + 0x178]\n 45085: s0 = u64 [sp + 0x170]\n 45089: s1 = u64 [sp + 0x168]\n 45093: sp = sp + 0x180\n 45097: ret\n      : @1712 (gas: 8)\n 45099: u64 [sp + 240] = 0\n 45103: u64 [sp + 232] = 0\n 45107: u64 [sp + 224] = 0\n 45111: a0 = 0xecd3f81e00000000\n 45121: a1 = sp + 0xe0\n 45125: u64 [sp + 0xf8] = a0\n 45129: a0 = 0\n 45131: ra = 2074, jump @24\n      : @1713 [@dyn 1037] (gas: 11)\n 45138: a0 = u64 [sp + 0x40]\n 45141: u64 [sp + 0xd8] = a0\n 45145: a0 = u64 [sp + 0x48]\n 45148: u64 [sp + 0xd0] = a0\n 45152: a0 = u64 [sp + 0x50]\n 45155: u64 [sp + 0xc8] = a0\n 45159: a0 = 0x4\n 45162: a1 = sp + 0xc0\n 45166: a2 = u64 [sp + 0x58]\n 45169: u64 [sp + 0xc0] = a2\n 45173: ra = 2076, jump @24\n      : @1714 [@dyn 1038] (gas: 10)\n 45180: a0 = u64 [sp + 0x30]\n 45183: u64 [sp + 0xb8] = a0\n 45187: a0 = u64 [sp + 0x38]\n 45190: u64 [sp + 0xb0] = a0\n 45194: a0 = u64 [sp + 0x18]\n 45197: u64 [sp + 0xa8] = a0\n 45201: a0 = 0x24\n 45204: a1 = sp + 0xa0\n 45208: u64 [sp + 0xa0] = s1\n 45212: ra = 2078, jump @24\n      : @1715 [@dyn 1039] (gas: 2)\n 45219: a1 = i32 [0x20150]\n 45224: jump @1717 if a1 >u 95\n      : @1716 (gas: 2)\n 45228: u32 [0x20150] = 0x60\n 45234: fallthrough\n      : @1717 (gas: 7)\n 45235: a1 = 0x20160\n 45240: i32 a1 = a1 + 0\n 45242: a0 = 0x1\n 45245: a2 = 0x44\n 45248: ra = 0x820\n 45252: ecalli 16 // 'seal_return'\n 45254: fallthrough\n      : @1718 [@dyn 1040] (gas: 16)\n 45255: a2 = u64 [a1]\n 45257: t0 = u64 [a1 + 0x18]\n 45260: a3 = u64 [a1 + 0x8]\n 45263: a5 = u64 [a1 + 0x10]\n 45266: a4 = a2 + 0x1\n 45269: a2 = a4 <u 0x1\n 45272: a2 = a2 + a3\n 45275: a3 = a4 | a2\n 45278: a3 = a3 <u 0x1\n 45281: a3 = a3 + a5\n 45284: a5 = a3 <u a5\n 45287: a5 = a5 + t0\n 45290: t0 = a2 | a5\n 45293: a1 = a4 | a3\n 45296: a1 = a1 | t0\n 45299: jump @1720 if a1 == 0\n      : @1719 (gas: 5)\n 45302: u64 [a0] = a4\n 45304: u64 [a0 + 0x8] = a2\n 45307: u64 [a0 + 0x10] = a3\n 45310: u64 [a0 + 0x18] = a5\n 45313: ret\n      : @1720 (gas: 3)\n 45315: ra = 0x822\n 45319: t0 = 0x28e\n 45323: jump @2232\n      : @1721 [@dyn 1041] (gas: 1)\n 45326: t0 = 2084, jump @2259\n      : @1722 [@dyn 1042] (gas: 9)\n 45332: u64 [sp + 0x38] = a0\n 45335: u64 [sp + 0x30] = a2\n 45338: u64 [sp + 0x28] = a3\n 45341: u64 [sp + 0x20] = a1\n 45344: a0 = sp\n 45346: a1 = sp + 0x20\n 45349: ra = 0x826\n 45353: t0 = 0x6\n 45356: jump @2259\n      : @1723 [@dyn 1043] (gas: 18)\n 45359: a0 = u64 [sp + 0x10]\n 45362: a1 = u64 [sp + 0x8]\n 45365: a2 = u64 [sp + 0x18]\n 45368: a3 = u16 [sp + 0x6]\n 45371: a4 = a0 << 0x10\n 45374: a5 = a1 >> 0x30\n 45377: a4 = a4 | a5\n 45380: a1 = a1 << 0x10\n 45383: a1 = a1 | a3\n 45386: a3 = a2 << 0x10\n 45389: a0 = a0 >> 0x30\n 45392: a0 = a0 | a3\n 45395: a2 = a2 >> 0x30\n 45398: u64 [s1 + 0x18] = a2\n 45401: u64 [s1 + 0x10] = a0\n 45404: u64 [s1] = a1\n 45406: u64 [s1 + 0x8] = a4\n 45409: t0 = 2088, jump @2229\n      : @1724 [@dyn 1044] (gas: 1)\n 45415: ret\n      : @1725 (gas: 34)\n 45417: sp = sp + 0xfffffffffffffd40\n 45421: a2 = sp + 0x200\n 45425: u64 [a2 + 0xb8] = ra\n 45429: u64 [a2 + 0xb0] = s0\n 45433: u64 [a2 + 0xa8] = s1\n 45437: s0 = sp + 0x2c0\n 45441: sp = sp & 0xffffffffffffffe0\n 45444: s1 = sp\n 45446: a2 = u64 [a1 + 0x18]\n 45449: u64 [s1 + 0x10] = a2\n 45452: a2 = u64 [a1 + 0x10]\n 45455: u64 [s1 + 0x58] = a2\n 45458: a2 = u64 [a1 + 0x8]\n 45461: u64 [s1 + 0x60] = a2\n 45464: a1 = u64 [a1]\n 45466: u64 [s1 + 0x68] = a1\n 45469: a1 = u64 [a0 + 0x18]\n 45472: u64 [s1 + 0x8] = a1\n 45475: a2 = u64 [a0 + 0x10]\n 45478: a1 = u64 [a0]\n 45480: a3 = u64 [a0 + 0x8]\n 45483: u64 [s1] = a2\n 45485: a0 = a2 << 0x20\n 45488: a0 = a0 >> 0x20\n 45491: u64 [s1 + 600] = 0\n 45495: u64 [s1 + 0x70] = a3\n 45498: u64 [s1 + 0x248] = a3\n 45502: u64 [s1 + 0x78] = a1\n 45505: u64 [s1 + 0x240] = a1\n 45509: a1 = s1 + 0x240\n 45513: u64 [s1 + 0x50] = a0\n 45516: u64 [s1 + 0x250] = a0\n 45520: a0 = 0\n 45522: ra = 2090, jump @24\n      : @1726 [@dyn 1045] (gas: 7)\n 45529: u64 [s1 + 568] = 0\n 45533: u64 [s1 + 560] = 0\n 45537: u64 [s1 + 552] = 0\n 45541: a0 = 0x20\n 45544: a1 = s1 + 0x220\n 45548: u64 [s1 + 544] = 0x8\n 45553: ra = 2092, jump @24\n      : @1727 [@dyn 1046] (gas: 3)\n 45560: a1 = 0x20150\n 45565: a0 = i32 [0x20150]\n 45570: jump @1729 if a0 >u 63\n      : @1728 (gas: 2)\n 45574: u32 [0x20150] = 0x40\n 45580: fallthrough\n      : @1729 (gas: 17)\n 45581: a0 = 0xffffffff\n 45591: u64 [s1 + 0x30] = a0\n 45594: a0 = sp + 0xffffffffffffffe0\n 45597: a2 = a0 & 0xffffffffffffffe0\n 45600: u64 [s1 + 0x40] = a2\n 45603: sp = a2\n 45605: a0 = 0x20160\n 45610: i32 a0 = a0 + 0\n 45612: i32 a2 = a2 + 0\n 45614: u64 [s1 + 0x48] = a1\n 45617: a1 = 0x40\n 45620: u64 [s1 + 0x20] = a0\n 45623: ra = 0x82e\n 45627: ecalli 11 // 'hash_keccak_256'\n 45629: a3 = u64 [s1 + 0x40]\n 45632: t0 = 0x830\n 45636: jump @2213\n      : @1730 [@dyn 1047] (gas: 2)\n 45639: a3 = u64 [s1 + 0x40]\n 45642: t0 = 2096, jump @2213\n      : @1731 [@dyn 1048] (gas: 9)\n 45648: u64 [s1 + 0x278] = a3\n 45652: u64 [s1 + 0x270] = a2\n 45656: u64 [s1 + 0x268] = a1\n 45660: u64 [s1 + 0x260] = a0\n 45664: a0 = s1 + 0x200\n 45668: a1 = s1 + 0x260\n 45672: ra = 0x832\n 45676: t0 = 0x6\n 45679: jump @2259\n      : @1732 [@dyn 1049] (gas: 17)\n 45682: a1 = s1 + 0x200\n 45686: a0 = u64 [a1 + 0x10]\n 45689: u64 [s1 + 0x38] = a0\n 45692: a0 = u64 [a1 + 0x8]\n 45695: u64 [s1 + 0x40] = a0\n 45698: a0 = u64 [a1]\n 45700: u64 [s1 + 0x18] = a0\n 45703: u64 [s1 + 504] = 0\n 45707: a0 = u64 [s1 + 0x50]\n 45710: u64 [s1 + 0x1f0] = a0\n 45714: a0 = u64 [s1 + 0x70]\n 45717: u64 [s1 + 0x1e8] = a0\n 45721: a1 = s1 + 0x1e0\n 45725: a0 = u64 [s1 + 0x78]\n 45728: u64 [s1 + 0x1e0] = a0\n 45732: a0 = 0\n 45734: ra = 2100, jump @24\n      : @1733 [@dyn 1050] (gas: 7)\n 45741: u64 [s1 + 472] = 0\n 45745: u64 [s1 + 464] = 0\n 45749: u64 [s1 + 448] = 0x8\n 45754: a0 = 0x20\n 45757: a1 = s1 + 0x1c0\n 45761: u64 [s1 + 456] = 0\n 45765: ra = 2102, jump @24\n      : @1734 [@dyn 1051] (gas: 7)\n 45772: a1 = u64 [s1 + 0x48]\n 45775: a0 = sp + 0xffffffffffffffe0\n 45778: a0 = a0 & 0xffffffffffffffe0\n 45781: u64 [s1 + 0x28] = a0\n 45784: sp = a0\n 45786: a0 = i32 [a1]\n 45788: jump @1736 if a0 >u 63\n      : @1735 (gas: 2)\n 45792: u32 [a1 + 0] = 0x40\n 45795: fallthrough\n      : @1736 (gas: 22)\n 45796: a0 = u64 [s1 + 0x18]\n 45799: a0 = a0 & 0xffffffffffffffff\n 45802: u64 [s1 + 0x48] = a0\n 45805: a0 = u64 [s1 + 0x40]\n 45808: a0 = a0 & 0xffffffffffffffff\n 45811: u64 [s1 + 0x40] = a0\n 45814: a0 = u64 [s1 + 0x38]\n 45817: a1 = u64 [s1 + 0x30]\n 45820: a0 = a0 & a1\n 45823: u64 [s1 + 0x38] = a0\n 45826: a0 = sp + 0xffffffffffffffe0\n 45829: a0 = a0 & 0xffffffffffffffe0\n 45832: u64 [s1 + 0x18] = a0\n 45835: sp = a0\n 45837: i32 a2 = a0 + 0\n 45839: a1 = 0x40\n 45842: a0 = u64 [s1 + 0x20]\n 45845: ra = 0x838\n 45849: ecalli 11 // 'hash_keccak_256'\n 45851: a3 = u64 [s1 + 0x18]\n 45854: t0 = 0x83a\n 45858: jump @2213\n      : @1737 [@dyn 1052] (gas: 2)\n 45861: a3 = u64 [s1 + 0x18]\n 45864: t0 = 2106, jump @2213\n      : @1738 [@dyn 1053] (gas: 20)\n 45870: a4 = u64 [s1 + 0x28]\n 45873: u64 [a4 + 0x18] = a3\n 45876: u64 [a4 + 0x10] = a2\n 45879: u64 [a4 + 0x8] = a1\n 45882: u64 [a4] = a0\n 45884: a0 = u64 [s1 + 0x68]\n 45887: a0 = a0 & 0xffffffffffffffff\n 45890: u64 [s1 + 0x20] = a0\n 45893: a0 = u64 [s1 + 0x60]\n 45896: a0 = a0 & 0xffffffffffffffff\n 45899: u64 [s1 + 0x18] = a0\n 45902: a0 = u64 [s1 + 0x58]\n 45905: a1 = u64 [s1 + 0x30]\n 45908: a0 = a0 & a1\n 45911: u64 [s1 + 0x30] = a0\n 45914: a0 = s1 + 0x1a0\n 45918: a1 = a4\n 45920: ra = 0x83c\n 45924: t0 = 0x6\n 45927: jump @2259\n      : @1739 [@dyn 1054] (gas: 15)\n 45930: a0 = u32 [s1 + 0x1b4]\n 45934: a0 = a0 << 0x20\n 45937: a1 = u64 [s1 + 0x1b8]\n 45941: a2 = u64 [s1 + 0x30]\n 45944: a0 = a0 | a2\n 45947: a2 = u64 [s1 + 0x18]\n 45950: a3 = s1 + 0x200\n 45954: u64 [a3 + 0x88] = a2\n 45958: a2 = u64 [s1 + 0x20]\n 45961: u64 [a3 + 0x80] = a2\n 45965: u64 [a3 + 0x98] = a1\n 45969: u64 [a3 + 0x90] = a0\n 45973: a1 = s1 + 0x280\n 45977: a0 = u64 [s1 + 0x28]\n 45980: ra = 2110, jump @28\n      : @1740 [@dyn 1055] (gas: 60)\n 45987: u64 [s1 + 312] = 0\n 45991: a0 = u64 [s1 + 0x30]\n 45994: u64 [s1 + 0x130] = a0\n 45998: a0 = u64 [s1 + 0x18]\n 46001: u64 [s1 + 0x128] = a0\n 46005: a0 = u64 [s1 + 0x20]\n 46008: u64 [s1 + 0x120] = a0\n 46012: u64 [s1 + 344] = 0\n 46016: a0 = u64 [s1 + 0x38]\n 46019: u64 [s1 + 0x150] = a0\n 46023: a0 = u64 [s1 + 0x40]\n 46026: u64 [s1 + 0x148] = a0\n 46030: a0 = u64 [s1 + 0x48]\n 46033: u64 [s1 + 0x140] = a0\n 46037: u64 [s1 + 376] = 0\n 46041: a0 = u64 [s1 + 0x50]\n 46044: u64 [s1 + 0x170] = a0\n 46048: a0 = u64 [s1 + 0x70]\n 46051: u64 [s1 + 0x168] = a0\n 46055: a0 = u64 [0x200d8]\n 46060: a1 = u64 [0x200e0]\n 46065: a2 = u64 [0x200e8]\n 46070: a3 = u64 [s1 + 0x78]\n 46073: u64 [s1 + 0x160] = a3\n 46077: u64 [s1 + 0x198] = a0\n 46081: u64 [s1 + 0x190] = a1\n 46085: u64 [s1 + 0x188] = a2\n 46089: a0 = u64 [0x200f0]\n 46094: a2 = s1 + 0x180\n 46098: a3 = s1 + 0x160\n 46102: a4 = s1 + 0x140\n 46106: a5 = s1 + 0x120\n 46110: u64 [s1 + 0x180] = a0\n 46114: a0 = 0\n 46116: a1 = 0\n 46118: ra = 0x840\n 46122: sp = sp + 0xfffffffffffffee0\n 46126: u64 [sp + 0x118] = ra\n 46130: u64 [sp + 0x110] = s0\n 46134: u64 [sp + 0x108] = s1\n 46138: s0 = sp + 0x120\n 46142: sp = sp & 0xffffffffffffffe0\n 46145: s1 = u64 [a5]\n 46147: u64 [sp + 0x60] = s1\n 46150: s1 = u64 [a5 + 0x8]\n 46153: u64 [sp + 0x68] = s1\n 46156: s1 = u64 [a5 + 0x10]\n 46159: u64 [sp + 0x70] = s1\n 46162: a5 = u64 [a5 + 0x18]\n 46165: u64 [sp + 0x78] = a5\n 46168: a5 = u64 [a4]\n 46170: u64 [sp + 0x38] = a5\n 46173: a5 = u64 [a4 + 0x8]\n 46176: u64 [sp + 0x40] = a5\n 46179: a5 = u64 [a4 + 0x10]\n 46182: u64 [sp + 0x48] = a5\n 46185: a4 = u64 [a4 + 0x18]\n 46188: u64 [sp + 0x50] = a4\n 46191: t0 = 0x14\n 46194: jump @2293\n      : @1741 [@dyn 1056] (gas: 13)\n 46197: a0 = u64 [s1 + 0x8]\n 46200: u64 [s1 + 0xf8] = a0\n 46204: a0 = u64 [s1]\n 46206: u64 [s1 + 0xf0] = a0\n 46210: a0 = u64 [s1 + 0x70]\n 46213: u64 [s1 + 0xe8] = a0\n 46217: a0 = s1 + 0x100\n 46221: a1 = s1 + 0xe0\n 46225: a2 = u64 [s1 + 0x78]\n 46228: u64 [s1 + 0xe0] = a2\n 46232: ra = 0x842\n 46236: t0 = 0x7ce\n 46240: jump @2331\n      : @1742 [@dyn 1057] (gas: 30)\n 46243: a4 = s1 + 0x100\n 46247: a0 = u64 [a4]\n 46249: a1 = u64 [a4 + 0x8]\n 46252: a2 = u64 [a4 + 0x10]\n 46255: a3 = u64 [a4 + 0x18]\n 46258: u64 [s1 + 0x98] = a3\n 46262: u64 [s1 + 0x90] = a2\n 46266: u64 [s1 + 0x88] = a1\n 46270: u64 [s1 + 0x80] = a0\n 46274: a0 = u64 [s1 + 0x10]\n 46277: u64 [s1 + 0xb8] = a0\n 46281: a0 = u64 [s1 + 0x58]\n 46284: u64 [s1 + 0xb0] = a0\n 46288: a0 = u64 [s1 + 0x60]\n 46291: u64 [s1 + 0xa8] = a0\n 46295: a0 = u64 [s1 + 0x68]\n 46298: u64 [s1 + 0xa0] = a0\n 46302: a0 = u64 [s1 + 0x38]\n 46305: u64 [s1 + 0xd0] = a0\n 46309: a0 = u64 [s1 + 0x40]\n 46312: u64 [s1 + 0xc8] = a0\n 46316: a0 = u64 [s1 + 0x48]\n 46319: u64 [s1 + 0xc0] = a0\n 46323: a0 = s1 + 0xc0\n 46327: a1 = s1 + 0xa0\n 46331: a2 = s1 + 0x80\n 46335: u64 [s1 + 216] = 0\n 46339: ra = 0x844\n 46343: t0 = 0x8dc\n 46347: jump @2275\n      : @1743 [@dyn 1058] (gas: 7)\n 46350: sp = s0 + 0xfffffffffffffd40\n 46354: a0 = sp + 0x200\n 46358: ra = u64 [a0 + 0xb8]\n 46362: s0 = u64 [a0 + 0xb0]\n 46366: s1 = u64 [a0 + 0xa8]\n 46370: sp = sp + 0x2c0\n 46374: ret\n      : @1744 (gas: 25)\n 46376: sp = sp + 0xfffffffffffffee0\n 46380: u64 [sp + 0x118] = ra\n 46384: u64 [sp + 0x110] = s0\n 46388: u64 [sp + 0x108] = s1\n 46392: s0 = sp + 0x120\n 46396: sp = sp & 0xffffffffffffffe0\n 46399: s1 = sp\n 46401: u64 [s1 + 0x58] = a0\n 46404: a0 = u64 [a1 + 0x18]\n 46407: a2 = u64 [a1 + 0x10]\n 46410: a3 = u64 [a1 + 0x8]\n 46413: a1 = u64 [a1]\n 46415: u64 [s1 + 0x50] = a0\n 46418: u64 [s1 + 0xd8] = a0\n 46422: u64 [s1 + 0x48] = a2\n 46425: u64 [s1 + 0xd0] = a2\n 46429: u64 [s1 + 0x40] = a3\n 46432: u64 [s1 + 0xc8] = a3\n 46436: u64 [s1 + 0x38] = a1\n 46439: u64 [s1 + 0xc0] = a1\n 46443: a0 = s1 + 0xa0\n 46447: a1 = s1 + 0xc0\n 46451: ra = 0x846\n 46455: t0 = 0x6\n 46458: jump @2259\n      : @1745 [@dyn 1059] (gas: 8)\n 46461: a3 = u64 [s1 + 0xb8]\n 46465: a2 = u64 [s1 + 0xb0]\n 46469: a4 = u64 [s1 + 0xa8]\n 46473: a5 = u64 [s1 + 0xa0]\n 46477: a0 = a4 | a3\n 46480: a1 = a5 | a2\n 46483: a0 = a0 | a1\n 46486: jump @1753 if a0 == 0\n      : @1746 (gas: 15)\n 46490: u64 [s1 + 0x18] = a5\n 46493: u64 [s1 + 0x20] = a4\n 46496: u64 [s1 + 0x28] = a3\n 46499: u64 [s1 + 0x30] = a2\n 46502: a0 = u64 [s1 + 0x38]\n 46505: u64 [s1 + 0x80] = a0\n 46509: a0 = u64 [s1 + 0x40]\n 46512: u64 [s1 + 0x88] = a0\n 46516: a0 = u64 [s1 + 0x48]\n 46519: u64 [s1 + 0x90] = a0\n 46523: a1 = s1 + 0x80\n 46527: a0 = u64 [s1 + 0x50]\n 46530: u64 [s1 + 0x98] = a0\n 46534: a0 = 0\n 46536: ra = 2120, jump @24\n      : @1747 [@dyn 1060] (gas: 2)\n 46543: a1 = i32 [0x20150]\n 46548: jump @1749 if a1 >u 31\n      : @1748 (gas: 2)\n 46552: u32 [0x20150] = 0x20\n 46558: fallthrough\n      : @1749 (gas: 11)\n 46559: a0 = sp + 0xffffffffffffffe0\n 46562: a2 = a0 & 0xffffffffffffffe0\n 46565: u64 [s1 + 0x50] = a2\n 46568: sp = a2\n 46570: a0 = 0x20160\n 46575: i32 a0 = a0 + 0\n 46577: i32 a2 = a2 + 0\n 46579: a1 = 0x20\n 46582: ra = 0x84a\n 46586: ecalli 11 // 'hash_keccak_256'\n 46588: fallthrough\n      : @1750 [@dyn 1061] (gas: 27)\n 46589: a3 = u64 [s1 + 0x50]\n 46592: a0 = u64 [a3]\n 46594: a1 = u64 [a3 + 0x8]\n 46597: a2 = u64 [a3 + 0x18]\n 46600: a3 = u64 [a3 + 0x10]\n 46603: t0 = reverse a0\n 46605: a1 = reverse a1\n 46607: a0 = reverse a2\n 46609: a2 = reverse a3\n 46611: a4 = u64 [s1 + 0x20]\n 46614: a2 = a2 + a4\n 46617: a3 = u64 [s1 + 0x18]\n 46620: a0 = a0 + a3\n 46623: a3 = a0 <u a3\n 46626: a2 = a2 + a3\n 46629: a5 = a2 ^ a4\n 46632: a4 = a2 <u a4\n 46635: a4 = a3 if a5 == 0\n 46638: a5 = u64 [s1 + 0x30]\n 46641: a1 = a1 + a5\n 46644: a4 = a4 + a1\n 46647: t1 = a4 <u a1\n 46650: a3 = u64 [s1 + 0x28]\n 46653: t0 = t0 + a3\n 46656: a1 = a1 <u a5\n 46659: a1 = a1 + t0\n 46662: t0 = 2124, jump @2248\n      : @1751 [@dyn 1062] (gas: 9)\n 46668: u64 [s1 + 0xe0] = a0\n 46672: u64 [s1 + 0xe8] = a2\n 46676: u64 [s1 + 0xf0] = a4\n 46680: u64 [s1 + 0xf8] = a1\n 46684: a0 = s1 + 0x60\n 46687: a1 = s1 + 0xe0\n 46691: ra = 0x84e\n 46695: t0 = 0x6\n 46698: jump @2259\n      : @1752 [@dyn 1063] (gas: 14)\n 46701: a3 = u64 [s1 + 0x78]\n 46704: a1 = u64 [s1 + 0x70]\n 46707: a2 = u16 [s1 + 0x66]\n 46710: a4 = u64 [s1 + 0x68]\n 46713: a0 = a3 << 0x10\n 46716: a5 = a1 >> 0x30\n 46719: a0 = a0 | a5\n 46722: a1 = a1 << 0x10\n 46725: a5 = a4 >> 0x30\n 46728: a1 = a1 | a5\n 46731: a4 = a4 << 0x10\n 46734: a2 = a2 | a4\n 46737: a3 = a3 >> 0x30\n 46740: jump @1754\n      : @1753 (gas: 4)\n 46742: a2 = 0\n 46744: a1 = 0\n 46746: a3 = 0\n 46748: fallthrough\n      : @1754 (gas: 11)\n 46749: a4 = u64 [s1 + 0x58]\n 46752: u64 [a4] = a2\n 46754: u64 [a4 + 0x8] = a1\n 46757: u64 [a4 + 0x10] = a0\n 46760: u64 [a4 + 0x18] = a3\n 46763: sp = s0 + 0xfffffffffffffee0\n 46767: ra = u64 [sp + 0x118]\n 46771: s0 = u64 [sp + 0x110]\n 46775: s1 = u64 [sp + 0x108]\n 46779: sp = sp + 0x120\n 46783: ret\n      : @1755 [@dyn 1064] (gas: 27)\n 46785: a0 = u64 [sp + 0x100]\n 46789: u64 [sp + 0x38] = a0\n 46792: a0 = u64 [sp + 0x108]\n 46796: u64 [sp + 0x30] = a0\n 46799: a0 = u64 [sp + 0x110]\n 46803: u64 [sp + 0x28] = a0\n 46806: a0 = u64 [sp + 0x118]\n 46810: u64 [sp + 0x20] = a0\n 46813: t0 = u64 [sp + 0x120]\n 46817: t1 = u64 [sp + 0x128]\n 46821: a1 = u64 [sp + 0x130]\n 46825: a3 = u64 [sp + 0x138]\n 46829: a4 = u64 [sp + 0x140]\n 46833: a5 = u64 [sp + 0x148]\n 46837: a2 = u64 [sp + 0x150]\n 46841: a0 = u64 [sp + 0x158]\n 46845: u64 [sp + 0x58] = a0\n 46848: u64 [sp + 0x50] = a2\n 46851: u64 [sp + 0x48] = a5\n 46854: u64 [sp + 0x40] = a4\n 46857: u64 [sp + 0x78] = a3\n 46860: u64 [sp + 0x70] = a1\n 46863: u64 [sp + 0x68] = t1\n 46866: a0 = sp + 0x60\n 46869: a1 = sp + 0x40\n 46872: u64 [sp + 0x60] = t0\n 46875: ra = 2130, jump @2049\n      : @1756 [@dyn 1065] (gas: 14)\n 46881: a0 = u64 [sp + 0x20]\n 46884: u64 [s1 + 0x18] = a0\n 46887: a0 = u64 [sp + 0x28]\n 46890: u64 [s1 + 0x10] = a0\n 46893: a0 = u64 [sp + 0x30]\n 46896: u64 [s1 + 0x8] = a0\n 46899: a0 = u64 [sp + 0x38]\n 46902: u64 [s1] = a0\n 46904: sp = s0 + 0xfffffffffffffe80\n 46908: ra = u64 [sp + 0x178]\n 46912: s0 = u64 [sp + 0x170]\n 46916: s1 = u64 [sp + 0x168]\n 46920: sp = sp + 0x180\n 46924: ret\n      : @1757 [@dyn 1066] (gas: 4)\n 46926: u64 [s1 + 280] = 0\n 46930: u64 [s1 + 272] = 0\n 46934: a0 = 0x7\n 46937: t0 = 2134, jump @2289\n      : @1758 [@dyn 1067] (gas: 1)\n 46943: ra = 2136, jump @24\n      : @1759 [@dyn 1068] (gas: 3)\n 46950: a2 = 0x20150\n 46955: a0 = i32 [0x20150]\n 46960: jump @1761 if a0 >u 63\n      : @1760 (gas: 2)\n 46964: u32 [0x20150] = 0x40\n 46970: fallthrough\n      : @1761 (gas: 15)\n 46971: u64 [s1 + 0x20] = a2\n 46974: a0 = sp + 0xffffffffffffffe0\n 46977: a2 = a0 & 0xffffffffffffffe0\n 46980: u64 [s1 + 0x58] = a2\n 46983: sp = a2\n 46985: a0 = 0x20160\n 46990: i32 a0 = a0 + 0\n 46992: i32 a2 = a2 + 0\n 46994: a1 = 0x40\n 46997: u64 [s1 + 0x18] = a0\n 47000: ra = 0x85a\n 47004: ecalli 11 // 'hash_keccak_256'\n 47006: a3 = u64 [s1 + 0x58]\n 47009: t0 = 0x85c\n 47013: jump @2213\n      : @1762 [@dyn 1069] (gas: 2)\n 47016: a3 = u64 [s1 + 0x58]\n 47019: t0 = 2140, jump @2213\n      : @1763 [@dyn 1070] (gas: 9)\n 47025: u64 [s1 + 0x158] = a3\n 47029: u64 [s1 + 0x150] = a2\n 47033: u64 [s1 + 0x148] = a1\n 47037: u64 [s1 + 0x140] = a0\n 47041: a0 = s1 + 0xe0\n 47045: a1 = s1 + 0x140\n 47049: ra = 0x85e\n 47053: t0 = 0x6\n 47056: jump @2259\n      : @1764 [@dyn 1071] (gas: 24)\n 47059: a0 = u64 [s1 + 0xe0]\n 47063: u64 [s1 + 0x58] = a0\n 47066: a4 = u64 [s1 + 0xf8]\n 47070: u64 [s1 + 0x48] = a4\n 47073: a2 = u64 [s1 + 0xe8]\n 47077: u64 [s1 + 0x50] = a2\n 47080: a3 = u64 [s1 + 0xf0]\n 47084: u64 [s1 + 0x40] = a3\n 47087: a0 = a0 + 0x1\n 47090: a1 = a0 <u 0x1\n 47093: a1 = a1 + a2\n 47096: a2 = a0 | a1\n 47099: a2 = a2 <u 0x1\n 47102: a2 = a2 + a3\n 47105: a3 = a2 <u a3\n 47108: a3 = a3 + a4\n 47111: a4 = s1 + 0x100\n 47115: u64 [a4 + 0x60] = a0\n 47118: u64 [a4 + 0x68] = a1\n 47121: u64 [a4 + 0x70] = a2\n 47124: u64 [a4 + 0x78] = a3\n 47127: a0 = s1 + 0x140\n 47131: a1 = s1 + 0x160\n 47135: ra = 2144, jump @28\n      : @1765 [@dyn 1072] (gas: 16)\n 47142: a0 = u64 [s1 + 0x68]\n 47145: a1 = u64 [s1 + 0x48]\n 47148: a0 = a0 ^ a1\n 47151: a1 = u64 [s1 + 0x60]\n 47154: a2 = u64 [s1 + 0x50]\n 47157: a1 = a1 ^ a2\n 47160: a0 = a0 | a1\n 47163: a1 = u64 [s1 + 0x78]\n 47166: a2 = u64 [s1 + 0x40]\n 47169: a1 = a1 ^ a2\n 47172: a2 = u64 [s1 + 0x70]\n 47175: a3 = u64 [s1 + 0x58]\n 47178: a2 = a2 ^ a3\n 47181: a1 = a1 | a2\n 47184: a0 = a0 | a1\n 47187: jump @1767 if a0 != 0\n      : @1766 (gas: 6)\n 47190: sp = s0 + 0xfffffffffffffe60\n 47194: ra = u64 [sp + 0x198]\n 47198: s0 = u64 [sp + 0x190]\n 47202: s1 = u64 [sp + 0x188]\n 47206: sp = sp + 0x1a0\n 47210: ret\n      : @1767 (gas: 8)\n 47212: u64 [s1 + 208] = 0\n 47216: u64 [s1 + 200] = 0\n 47220: u64 [s1 + 192] = 0\n 47224: a0 = 0x752d88c000000000\n 47234: a1 = s1 + 0xc0\n 47238: u64 [s1 + 0xd8] = a0\n 47242: a0 = 0\n 47244: ra = 2146, jump @24\n      : @1768 [@dyn 1073] (gas: 10)\n 47251: u64 [s1 + 184] = 0\n 47255: a0 = u64 [s1 + 0x28]\n 47258: u64 [s1 + 0xb0] = a0\n 47262: a0 = u64 [s1 + 0x30]\n 47265: u64 [s1 + 0xa8] = a0\n 47269: a0 = 0x4\n 47272: a1 = s1 + 0xa0\n 47276: a2 = u64 [s1 + 0x38]\n 47279: u64 [s1 + 0xa0] = a2\n 47283: ra = 2148, jump @24\n      : @1769 [@dyn 1074] (gas: 11)\n 47290: a0 = u64 [s1 + 0x48]\n 47293: u64 [s1 + 0x98] = a0\n 47297: a0 = u64 [s1 + 0x40]\n 47300: u64 [s1 + 0x90] = a0\n 47304: a0 = u64 [s1 + 0x50]\n 47307: u64 [s1 + 0x88] = a0\n 47311: a0 = 0x24\n 47314: a1 = s1 + 0x80\n 47318: a2 = u64 [s1 + 0x58]\n 47321: u64 [s1 + 0x80] = a2\n 47325: ra = 2150, jump @24\n      : @1770 [@dyn 1075] (gas: 3)\n 47332: a0 = u64 [s1 + 0x20]\n 47335: a0 = i32 [a0]\n 47337: jump @1772 if a0 >u 95\n      : @1771 (gas: 3)\n 47341: a1 = u64 [s1 + 0x20]\n 47344: u32 [a1 + 0] = 0x60\n 47347: fallthrough\n      : @1772 (gas: 6)\n 47348: a0 = 0x1\n 47351: a2 = 0x44\n 47354: a1 = u64 [s1 + 0x18]\n 47357: ra = 0x868\n 47361: ecalli 16 // 'seal_return'\n 47363: fallthrough\n      : @1773 [@dyn 1076] (gas: 27)\n 47364: sp = sp + 0xfffffffffffffe40\n 47368: u64 [sp + 0x1b8] = ra\n 47372: u64 [sp + 0x1b0] = s0\n 47376: u64 [sp + 0x1a8] = s1\n 47380: s0 = sp + 0x1c0\n 47384: sp = sp & 0xffffffffffffffe0\n 47387: s1 = sp\n 47389: a3 = u64 [a1 + 0x18]\n 47392: u64 [s1 + 0x20] = a3\n 47395: ra = u64 [a1 + 0x10]\n 47398: t2 = u64 [a1 + 0x8]\n 47401: a1 = u64 [a1]\n 47403: t1 = u64 [a0 + 0x8]\n 47406: t0 = u32 [a0 + 0x10]\n 47409: a0 = u64 [a0]\n 47411: a4 = u64 [a2 + 0x18]\n 47414: a5 = u64 [a2 + 0x10]\n 47417: a3 = u64 [a2 + 0x8]\n 47420: a2 = u64 [a2]\n 47422: u64 [s1 + 0x178] = a4\n 47426: a4 = s1 + 0x100\n 47430: u64 [a4 + 0x70] = a5\n 47433: u64 [a4 + 0x68] = a3\n 47436: a3 = a0 | t0\n 47439: a3 = a3 | t1\n 47442: u64 [a4 + 0x60] = a2\n 47445: jump @1785 if a3 == 0\n      : @1774 (gas: 10)\n 47449: a3 = 0xffffffff\n 47459: u64 [s1 + 0x30] = t2\n 47462: a4 = t2 & 0xffffffffffffffff\n 47465: u64 [s1 + 0x38] = a1\n 47468: a2 = a1 & 0xffffffffffffffff\n 47471: u64 [s1 + 0x28] = ra\n 47474: a3 = ra & a3\n 47477: a2 = a2 | a3\n 47480: a2 = a2 | a4\n 47483: jump @1790 if a2 == 0\n      : @1775 (gas: 7)\n 47487: u64 [s1 + 344] = 0\n 47491: u64 [s1 + 0x140] = a0\n 47495: u64 [s1 + 0x148] = t1\n 47499: a1 = s1 + 0x140\n 47503: u64 [s1 + 0x150] = t0\n 47507: a0 = 0\n 47509: ra = 2154, jump @24\n      : @1776 [@dyn 1077] (gas: 7)\n 47516: u64 [s1 + 312] = 0\n 47520: u64 [s1 + 304] = 0\n 47524: u64 [s1 + 288] = 0x1\n 47529: a0 = 0x20\n 47532: a1 = s1 + 0x120\n 47536: u64 [s1 + 296] = 0\n 47540: ra = 2156, jump @24\n      : @1777 [@dyn 1078] (gas: 2)\n 47547: a1 = i32 [0x20150]\n 47552: jump @1779 if a1 >u 63\n      : @1778 (gas: 4)\n 47556: a1 = 0x40\n 47559: u32 [0x20150] = a1\n 47564: t0 = 0x86e\n 47568: jump @2282\n      : @1779 (gas: 1)\n 47571: t0 = 2158, jump @2282\n      : @1780 [@dyn 1079] (gas: 8)\n 47577: a0 = 0x20160\n 47582: i32 a0 = a0 + 0\n 47584: i32 a2 = a2 + 0\n 47586: a1 = 0x40\n 47589: ra = 0x870\n 47593: ecalli 11 // 'hash_keccak_256'\n 47595: t0 = 0x872\n 47599: jump @2300\n      : @1781 [@dyn 1080] (gas: 1)\n 47602: t0 = 2162, jump @2300\n      : @1782 [@dyn 1081] (gas: 17)\n 47608: u64 [s1 + 0xd8] = a3\n 47612: a3 = u64 [s1 + 0x28]\n 47615: u64 [s1 + 0xd0] = a3\n 47619: a3 = u64 [s1 + 0x30]\n 47622: u64 [s1 + 0xc8] = a3\n 47626: a3 = u64 [s1 + 0x38]\n 47629: u64 [s1 + 0xc0] = a3\n 47633: u64 [s1 + 0xf8] = a2\n 47637: u64 [s1 + 0xf0] = a1\n 47641: u64 [s1 + 0xe8] = a0\n 47645: a0 = s1 + 0x100\n 47649: a1 = s1 + 0xe0\n 47653: a2 = s1 + 0xc0\n 47657: u64 [s1 + 0xe0] = a4\n 47661: ra = 0x874\n 47665: t0 = 0x7c2\n 47669: jump @2373\n      : @1783 [@dyn 1082] (gas: 12)\n 47672: a4 = s1 + 0x100\n 47676: a0 = u64 [a4 + 0x18]\n 47679: a1 = u64 [a4 + 0x10]\n 47682: a2 = u64 [a4 + 0x8]\n 47685: a3 = u64 [a4]\n 47687: u64 [a4 + 0x98] = a0\n 47691: u64 [a4 + 0x90] = a1\n 47695: u64 [a4 + 0x88] = a2\n 47699: u64 [a4 + 0x80] = a3\n 47703: a0 = s1 + 0x180\n 47707: a1 = s1 + 0x160\n 47711: ra = 2166, jump @28\n      : @1784 [@dyn 1083] (gas: 6)\n 47718: sp = s0 + 0xfffffffffffffe40\n 47722: ra = u64 [sp + 0x1b8]\n 47726: s0 = u64 [sp + 0x1b0]\n 47730: s1 = u64 [sp + 0x1a8]\n 47734: sp = sp + 0x1c0\n 47738: ret\n      : @1785 (gas: 8)\n 47740: u64 [s1 + 112] = 0\n 47743: u64 [s1 + 104] = 0\n 47746: u64 [s1 + 96] = 0\n 47749: a0 = 0xe602df0500000000\n 47759: a1 = s1 + 0x60\n 47762: u64 [s1 + 0x78] = a0\n 47765: a0 = 0\n 47767: ra = 2168, jump @24\n      : @1786 [@dyn 1084] (gas: 7)\n 47774: u64 [s1 + 88] = 0\n 47777: u64 [s1 + 80] = 0\n 47780: u64 [s1 + 72] = 0\n 47783: a0 = 0x4\n 47786: a1 = s1 + 0x40\n 47789: u64 [s1 + 64] = 0\n 47792: ra = 2170, jump @24\n      : @1787 [@dyn 1085] (gas: 2)\n 47799: a1 = i32 [0x20150]\n 47804: jump @1789 if a1 >u 63\n      : @1788 (gas: 3)\n 47808: u32 [0x20150] = 0x40\n 47814: a1 = 0x20160\n 47819: jump @1796\n      : @1789 (gas: 2)\n 47821: a1 = 0x20160\n 47826: jump @1796\n      : @1790 (gas: 1)\n 47828: t0 = 2172, jump @2347\n      : @1791 [@dyn 1086] (gas: 5)\n 47834: a0 = 0x94280d6200000000\n 47844: a1 = s1 + 0xa0\n 47848: u64 [s1 + 0xb8] = a0\n 47852: a0 = 0\n 47854: ra = 2174, jump @24\n      : @1792 [@dyn 1087] (gas: 7)\n 47861: u64 [s1 + 152] = 0\n 47865: u64 [s1 + 144] = 0\n 47869: u64 [s1 + 136] = 0\n 47873: a0 = 0x4\n 47876: a1 = s1 + 0x80\n 47880: u64 [s1 + 128] = 0\n 47884: ra = 2176, jump @24\n      : @1793 [@dyn 1088] (gas: 2)\n 47891: a1 = i32 [0x20150]\n 47896: jump @1795 if a1 >u 63\n      : @1794 (gas: 3)\n 47900: u32 [0x20150] = 0x40\n 47906: a1 = 0x20160\n 47911: jump @1796\n      : @1795 (gas: 2)\n 47913: a1 = 0x20160\n 47918: fallthrough\n      : @1796 (gas: 7)\n 47919: i32 a1 = a1 + 0\n 47921: a0 = 0x1\n 47924: a2 = 0x24\n 47927: ra = 0x882\n 47931: ecalli 16 // 'seal_return'\n 47933: t0 = 0x884\n 47937: jump @2372\n      : @1797 [@dyn 1089] (gas: 1)\n 47940: t0 = 2180, jump @2372\n      : @1798 [@dyn 1090] (gas: 12)\n 47946: s1 = u64 [a1 + 0x10]\n 47949: a4 = u64 [a1 + 0x18]\n 47952: a5 = u64 [a1 + 0x8]\n 47955: a3 = u64 [a1]\n 47957: a1 = a5 | a4\n 47960: a2 = a3 | s1\n 47963: a2 = a2 | a1\n 47966: a2 = a2 >> 0x30\n 47969: a1 = a1 | s1\n 47972: a1 = a1 << 0x10\n 47975: a1 = a1 | a2\n 47978: jump @1801 if a1 != 0\n      : @1799 (gas: 5)\n 47981: u64 [a0] = a3\n 47983: u64 [a0 + 0x8] = a5\n 47986: u64 [a0 + 0x10] = s1\n 47989: u64 [a0 + 0x18] = a4\n 47992: t0 = 2182, jump @2309\n      : @1800 [@dyn 1091] (gas: 1)\n 47998: ret\n      : @1801 (gas: 1)\n 48000: t0 = 2184, jump @2323\n      : @1802 [@dyn 1092] (gas: 3)\n 48006: u64 [sp + 0x8] = a4\n 48009: u64 [sp + 0x10] = a5\n 48012: ra = 2186, jump @24\n      : @1803 [@dyn 1093] (gas: 7)\n 48019: u64 [sp + 88] = 0\n 48022: u64 [sp + 80] = 0\n 48025: u64 [sp + 64] = 0x30\n 48029: a0 = 0x4\n 48032: a1 = sp + 0x40\n 48035: u64 [sp + 72] = 0\n 48038: ra = 2188, jump @24\n      : @1804 [@dyn 1094] (gas: 4)\n 48045: a0 = u64 [sp + 0x8]\n 48048: u64 [sp + 0x38] = a0\n 48051: u64 [sp + 0x30] = s1\n 48054: t0 = 2190, jump @2360\n      : @1805 [@dyn 1095] (gas: 1)\n 48060: ra = 2192, jump @24\n      : @1806 [@dyn 1096] (gas: 2)\n 48067: a1 = i32 [0x20150]\n 48072: jump @1808 if a1 >u 95\n      : @1807 (gas: 2)\n 48076: u32 [0x20150] = 0x60\n 48082: fallthrough\n      : @1808 (gas: 7)\n 48083: a1 = 0x20160\n 48088: i32 a1 = a1 + 0\n 48090: a0 = 0x1\n 48093: a2 = 0x44\n 48096: ra = 0x892\n 48100: ecalli 16 // 'seal_return'\n 48102: fallthrough\n      : @1809 [@dyn 1097] (gas: 8)\n 48103: a2 = u64 [a1 + 0x18]\n 48106: a1 = u64 [a1 + 0x10]\n 48109: a3 = 0\n 48111: u64 [a0 + 24] = 0\n 48114: u64 [a0 + 16] = 0\n 48117: u64 [a0 + 0x8] = a2\n 48120: u64 [a0] = a1\n 48122: ret\n      : @1810 (gas: 16)\n 48124: sp = sp + 0xfffffffffffffef0\n 48128: u64 [sp + 0x108] = ra\n 48132: u64 [sp + 0x100] = s0\n 48136: u64 [sp + 0xf8] = s1\n 48140: s0 = sp + 0x110\n 48144: sp = sp & 0xfffffffffffffff0\n 48147: t1 = u64 [a2 + 0x10]\n 48150: a5 = u64 [a2 + 0x18]\n 48153: s1 = u64 [a2 + 0x8]\n 48156: a2 = u64 [a2]\n 48158: a4 = s1 | a5\n 48161: a3 = a2 | t1\n 48164: a3 = a3 | a4\n 48167: u64 [sp] = a0\n 48169: u64 [sp + 0xa8] = a3\n 48173: jump @1830 if a3 == 0\n      : @1811 (gas: 73)\n 48177: a0 = u64 [a1 + 0x18]\n 48180: ra = u64 [a1 + 0x10]\n 48183: t0 = u64 [a1 + 0x8]\n 48186: t2 = u64 [a1]\n 48188: u64 [sp + 0x60] = t2\n 48191: a1 = clz t1\n 48193: a1 = a1 + 0x40\n 48196: a4 = clz a5\n 48198: a4 = a1 if a5 == 0\n 48201: u64 [sp + 0x30] = a2\n 48204: a1 = clz a2\n 48206: a2 = a1 + 0x40\n 48209: a1 = clz s1\n 48211: u64 [sp + 0x38] = s1\n 48214: a1 = a2 if s1 == 0\n 48217: a2 = a1 + 0x80\n 48221: u64 [sp + 0x40] = a5\n 48224: u64 [sp + 0x48] = t1\n 48227: a3 = t1 | a5\n 48230: a4 = a2 if a3 == 0\n 48233: a2 = a2 <u a1\n 48236: a2 = 0 if a3 != 0\n 48238: a1 = clz ra\n 48240: a1 = a1 + 0x40\n 48243: a5 = clz a0\n 48245: a5 = a1 if a0 == 0\n 48248: a1 = clz t2\n 48250: a1 = a1 + 0x40\n 48253: a3 = clz t0\n 48255: a3 = a1 if t0 == 0\n 48258: a1 = a3 + 0x80\n 48262: s1 = ra | a0\n 48265: a5 = a1 if s1 == 0\n 48268: a1 = a1 <u a3\n 48271: a1 = 0 if s1 != 0\n 48273: t1 = a2 ^ a1\n 48276: s1 = a2 <u a1\n 48279: a3 = a4 <u a5\n 48282: s1 = a3 if t1 == 0\n 48285: a2 = a2 - a1\n 48288: t2 = s1 <u 0x1\n 48291: t2 = t2 + 0xffffffffffffffff\n 48294: a3 = a2 - a3\n 48297: t1 = -s1\n 48299: a1 = a4 - a5\n 48302: a2 = t1 >u 0\n 48304: a4 = t2 >u 0\n 48306: a4 = a2 if t2 == 0\n 48309: u64 [sp + 0xa0] = a1\n 48313: a2 = a1 <u 0x100\n 48317: a2 = a2 ^ 0x1\n 48320: a5 = a3 >u 0\n 48322: a2 = a5 if a3 != 0\n 48325: a2 = a4 if s1 != 0\n 48328: s1 = u64 [sp + 0x60]\n 48331: a4 = s1 | ra\n 48334: a5 = t0 | a0\n 48337: a4 = a4 | a5\n 48340: a1 = u64 [sp + 0xa8]\n 48344: a5 = a1 <u 0x1\n 48347: a4 = a4 <u 0x1\n 48350: a4 = a4 | a5\n 48353: a2 = a2 | a4\n 48356: u64 [sp + 0x68] = a0\n 48359: a1 = a0\n 48361: a1 = 0 if a2 != 0\n 48363: a4 = ra\n 48365: a4 = 0 if a2 != 0\n 48367: u64 [sp + 0x58] = t0\n 48370: a5 = t0\n 48372: a5 = 0 if a2 != 0\n 48374: s1 = 0 if a2 != 0\n 48376: jump @1828 if a2 != 0\n      : @1812 (gas: 7)\n 48380: a0 = u64 [sp + 0xa0]\n 48384: a2 = a0 ^ 0xff\n 48388: t0 = a2 | t1\n 48391: a2 = a3 | t2\n 48394: a2 = t0 | a2\n 48397: a0 = u64 [sp]\n 48399: jump @1829 if a2 == 0\n      : @1813 (gas: 18)\n 48403: a2 = u64 [sp + 0xa0]\n 48407: a1 = a2 + 0x1\n 48410: u64 [sp + 0xa8] = a1\n 48414: u64 [sp + 0x50] = ra\n 48417: a0 = a1 <u 0x1\n 48420: a0 = a0 + a3\n 48423: u64 [sp + 0x80] = a0\n 48427: a0 = a0 | a1\n 48430: a0 = a0 <u 0x1\n 48433: a0 = a0 + t1\n 48436: u64 [sp + 0x70] = a0\n 48439: a0 = a0 <u t1\n 48442: a0 = a0 + t2\n 48445: u64 [sp + 0x78] = a0\n 48448: t0 = 0x894\n 48452: s1 = 0xff - a2\n 48456: a2 = 0x80 - s1\n 48460: fallthrough\n      : @1814 [@dyn 1098] (gas: 4)\n 48461: u64 [sp + 0x28] = s1\n 48464: a0 = u64 [sp + 0x60]\n 48467: a1 = u64 [sp + 0x58]\n 48470: ra = 2198, jump @2374\n      : @1815 [@dyn 1099] (gas: 6)\n 48476: u64 [sp + 0x98] = a0\n 48480: u64 [sp + 0x90] = a1\n 48484: a0 = u64 [sp + 0x50]\n 48487: a1 = u64 [sp + 0x68]\n 48490: a2 = s1\n 48492: ra = 2200, jump @2379\n      : @1816 [@dyn 1100] (gas: 10)\n 48498: u64 [sp + 0x88] = a0\n 48502: a0 = u64 [sp + 0x90]\n 48506: a0 = a0 | a1\n 48509: u64 [sp + 0x90] = a0\n 48513: a1 = u64 [sp + 0xa0]\n 48517: a2 = 0x7f - a1\n 48520: a0 = u64 [sp + 0x60]\n 48523: s1 = u64 [sp + 0x58]\n 48526: a1 = s1\n 48528: ra = 2202, jump @2379\n      : @1817 [@dyn 1101] (gas: 18)\n 48534: a2 = u64 [sp + 0x28]\n 48537: a3 = a2 <u 0x80\n 48541: u64 [sp + 0xa0] = a3\n 48545: a4 = u64 [sp + 0x90]\n 48549: a1 = a4 if a3 != 0\n 48552: a4 = u64 [sp + 0x68]\n 48555: a1 = a4 if a2 == 0\n 48558: u64 [sp + 0x90] = a1\n 48562: a1 = u64 [sp + 0x98]\n 48566: a4 = u64 [sp + 0x88]\n 48570: a1 = a1 | a4\n 48573: a1 = a0 if a3 == 0\n 48576: a0 = u64 [sp + 0x50]\n 48579: a1 = a0 if a2 == 0\n 48582: u64 [sp + 0x98] = a1\n 48586: a0 = u64 [sp + 0x60]\n 48589: a1 = s1\n 48591: ra = 2204, jump @2379\n      : @1818 [@dyn 1102] (gas: 13)\n 48597: a5 = u64 [sp + 0x70]\n 48600: a2 = u64 [sp + 0x78]\n 48603: a3 = u64 [sp + 0x80]\n 48607: a3 = a3 | a2\n 48610: a2 = u64 [sp + 0xa8]\n 48614: a2 = a2 | a5\n 48617: a2 = a2 | a3\n 48620: a3 = u64 [sp + 0xa0]\n 48624: a1 = 0 if a3 == 0\n 48626: u64 [sp + 0x88] = a1\n 48630: a0 = 0 if a3 == 0\n 48632: u64 [sp + 0xa0] = a0\n 48636: jump @1826 if a2 == 0\n      : @1819 (gas: 5)\n 48640: s1 = u64 [sp + 0xa8]\n 48644: a2 = s1 + 0xffffffffffffff80\n 48647: a0 = u64 [sp + 0x50]\n 48650: a1 = u64 [sp + 0x68]\n 48653: ra = 2206, jump @2374\n      : @1820 [@dyn 1103] (gas: 6)\n 48659: u64 [sp + 0x28] = a0\n 48662: u64 [sp + 0x18] = a1\n 48665: a0 = u64 [sp + 0x60]\n 48668: a1 = u64 [sp + 0x58]\n 48671: a2 = s1\n 48673: ra = 2208, jump @2374\n      : @1821 [@dyn 1104] (gas: 6)\n 48679: u64 [sp + 0x10] = a0\n 48682: u64 [sp + 0x20] = a1\n 48685: a2 = 0x80 - s1\n 48689: a0 = u64 [sp + 0x50]\n 48692: a1 = u64 [sp + 0x68]\n 48695: ra = 2210, jump @2379\n      : @1822 [@dyn 1105] (gas: 20)\n 48701: a2 = u64 [sp + 0x20]\n 48704: a1 = a1 | a2\n 48707: a2 = s1 <u 0x80\n 48711: u64 [sp + 0x20] = a2\n 48714: a3 = u64 [sp + 0x18]\n 48717: a1 = a3 if a2 == 0\n 48720: a3 = u64 [sp + 0x58]\n 48723: a3 = a1 if s1 != 0\n 48726: u64 [sp + 0x58] = a3\n 48729: a1 = u64 [sp + 0x10]\n 48732: a0 = a0 | a1\n 48735: a1 = u64 [sp + 0x28]\n 48738: a0 = a1 if a2 == 0\n 48741: a1 = u64 [sp + 0x60]\n 48744: a1 = a0 if s1 != 0\n 48747: u64 [sp + 0x60] = a1\n 48750: a0 = u64 [sp + 0x50]\n 48753: a1 = u64 [sp + 0x68]\n 48756: a2 = s1\n 48758: ra = 2212, jump @2374\n      : @1823 [@dyn 1106] (gas: 24)\n 48764: t0 = u64 [sp + 0x58]\n 48767: t2 = 0\n 48769: a2 = u64 [sp + 0x20]\n 48772: a1 = 0 if a2 == 0\n 48774: a0 = 0 if a2 == 0\n 48776: u64 [sp + 0x68] = a0\n 48779: a3 = u64 [sp + 0x30]\n 48782: a0 = a3 <u 0x1\n 48785: a2 = u64 [sp + 0x38]\n 48788: a0 = a2 - a0\n 48791: u64 [sp + 0x20] = a0\n 48794: a0 = a3 | a2\n 48797: a0 = a0 <u 0x1\n 48800: a2 = u64 [sp + 0x48]\n 48803: a4 = a2 - a0\n 48806: u64 [sp + 0x18] = a4\n 48809: a0 = a2 <u a0\n 48812: a2 = u64 [sp + 0x40]\n 48815: a2 = a2 - a0\n 48818: u64 [sp + 0x10] = a2\n 48821: a3 = a3 + 0xffffffffffffffff\n 48824: u64 [sp + 0x8] = a3\n 48827: ra = u64 [sp + 0x60]\n 48830: fallthrough\n      : @1824 (gas: 103)\n 48831: u64 [sp + 40] = 0\n 48834: a4 = ra >> 0x3f\n 48837: a3 = t0 << 0x1\n 48840: s1 = t0\n 48842: t0 = a3 | a4\n 48845: a4 = ra << 0x1\n 48848: ra = u64 [sp + 0x90]\n 48852: a2 = ra >> 0x3f\n 48855: a2 = a2 | a4\n 48858: u64 [sp + 0x60] = a2\n 48861: a0 = u64 [sp + 0x20]\n 48864: t1 = a0 ^ t0\n 48867: a4 = a0 <u t0\n 48870: a0 = u64 [sp + 0x8]\n 48873: a5 = t2\n 48875: t2 = a0 <u a2\n 48878: t2 = a4 if t1 != 0\n 48881: a1 = a1 << 0x1\n 48884: a0 = u64 [sp + 0x68]\n 48887: a2 = a0 >> 0x3f\n 48890: a1 = a1 | a2\n 48893: u64 [sp + 0x58] = a1\n 48896: a2 = s1 >> 0x3f\n 48899: a0 = a0 << 0x1\n 48902: t1 = a0 | a2\n 48905: a0 = ra << 0x1\n 48908: a1 = u64 [sp + 0x98]\n 48912: a2 = a1 >> 0x3f\n 48915: a0 = a0 | a2\n 48918: a2 = a1 << 0x1\n 48921: a1 = u64 [sp + 0x88]\n 48925: a4 = a1 >> 0x3f\n 48928: a2 = a2 | a4\n 48931: a4 = a1 << 0x1\n 48934: s1 = u64 [sp + 0xa0]\n 48938: ra = s1 >> 0x3f\n 48941: a4 = a4 | ra\n 48944: s1 = s1 << 0x1\n 48947: a5 = a5 | s1\n 48950: u64 [sp + 0xa0] = a5\n 48954: a4 = a4 | 0\n 48956: u64 [sp + 0x88] = a4\n 48960: a1 = a2 | 0\n 48962: u64 [sp + 0x98] = a1\n 48966: a0 = a0 | 0\n 48968: u64 [sp + 0x90] = a0\n 48972: a2 = u64 [sp + 0x18]\n 48975: a0 = a2 - t1\n 48978: a0 = a0 <u t2\n 48981: a2 = a2 <u t1\n 48984: a4 = u64 [sp + 0x10]\n 48987: a3 = u64 [sp + 0x58]\n 48990: a4 = a4 - a3\n 48993: a4 = a4 - a2\n 48996: a4 = a4 - a0\n 48999: a4 = a4 >>a 0x3f\n 49002: a0 = u64 [sp + 0x30]\n 49005: a1 = a4 & a0\n 49008: u64 [sp + 0x50] = a1\n 49011: a5 = u64 [sp + 0x38]\n 49014: a5 = a5 & a4\n 49017: a0 = t0 ^ a5\n 49020: s1 = t0 <u a5\n 49023: t2 = u64 [sp + 0x60]\n 49026: ra = t2 <u a1\n 49029: s1 = ra if a0 == 0\n 49032: a2 = u64 [sp + 0x48]\n 49035: a2 = a2 & a4\n 49038: a1 = t1 - a2\n 49041: a0 = a1 - s1\n 49044: u64 [sp + 0x68] = a0\n 49047: a0 = a1 <u s1\n 49050: a2 = t1 <u a2\n 49053: s1 = u64 [sp + 0x40]\n 49056: s1 = s1 & a4\n 49059: a1 = a3 - s1\n 49062: a1 = a1 - a2\n 49065: a1 = a1 - a0\n 49068: a3 = t0 - a5\n 49071: t0 = a3 - ra\n 49074: a0 = u64 [sp + 0x50]\n 49077: ra = t2 - a0\n 49080: a5 = u64 [sp + 0xa8]\n 49084: s1 = u64 [sp + 0x80]\n 49088: a0 = a5 | s1\n 49091: a0 = a0 <u 0x1\n 49094: a3 = u64 [sp + 0x70]\n 49097: a2 = a3 <u a0\n 49100: a0 = a3 - a0\n 49103: a3 = a5 <u 0x1\n 49106: s1 = s1 - a3\n 49109: a3 = u64 [sp + 0x78]\n 49112: a3 = a3 - a2\n 49115: a5 = a5 + 0xffffffffffffffff\n 49118: u64 [sp + 0x80] = s1\n 49122: u64 [sp + 0x78] = a3\n 49125: a2 = s1 | a3\n 49128: u64 [sp + 0xa8] = a5\n 49132: a3 = a5 | a0\n 49135: a2 = a2 | a3\n 49138: t2 = a4 & 0x1\n 49141: u64 [sp + 0x70] = a0\n 49144: jump @1824 if a2 != 0\n      : @1825 (gas: 1)\n 49148: jump @1827\n      : @1826 (gas: 3)\n 49150: t2 = 0\n 49152: u64 [sp + 40] = 0\n 49155: fallthrough\n      : @1827 (gas: 21)\n 49156: a3 = u64 [sp + 0x98]\n 49160: a0 = a3 >> 0x3f\n 49163: a1 = u64 [sp + 0x90]\n 49167: a1 = a1 << 0x1\n 49170: a0 = a0 | a1\n 49173: a5 = u64 [sp + 0x88]\n 49177: a1 = a5 >> 0x3f\n 49180: a3 = a3 << 0x1\n 49183: a1 = a1 | a3\n 49186: a2 = u64 [sp + 0xa0]\n 49190: a3 = a2 >> 0x3f\n 49193: a5 = a5 << 0x1\n 49196: s1 = a2 << 0x1\n 49199: s1 = t2 | s1\n 49202: a2 = u64 [sp + 0x28]\n 49205: a3 = a3 | a2\n 49208: a5 = a5 | a3\n 49211: a4 = a2 | a1\n 49214: a1 = a2 | a0\n 49217: a0 = u64 [sp]\n 49219: jump @1829\n      : @1828 (gas: 2)\n 49221: a0 = u64 [sp]\n 49223: fallthrough\n      : @1829 (gas: 10)\n 49224: u64 [a0] = s1\n 49226: u64 [a0 + 0x8] = a5\n 49229: u64 [a0 + 0x10] = a4\n 49232: u64 [a0 + 0x18] = a1\n 49235: sp = s0 + 0xfffffffffffffef0\n 49239: ra = u64 [sp + 0x108]\n 49243: s0 = u64 [sp + 0x100]\n 49247: s1 = u64 [sp + 0xf8]\n 49251: sp = sp + 0x110\n 49255: ret\n      : @1830 (gas: 8)\n 49257: u64 [sp + 224] = 0\n 49261: u64 [sp + 216] = 0\n 49265: u64 [sp + 208] = 0\n 49269: a0 = 0x4e487b7100000000\n 49279: a1 = sp + 0xd0\n 49283: u64 [sp + 0xe8] = a0\n 49287: a0 = 0\n 49289: ra = 2214, jump @24\n      : @1831 [@dyn 1107] (gas: 7)\n 49296: u64 [sp + 200] = 0\n 49300: u64 [sp + 192] = 0\n 49304: u64 [sp + 176] = 0x12\n 49309: a0 = 0x4\n 49312: a1 = sp + 0xb0\n 49316: u64 [sp + 184] = 0\n 49320: ra = 2216, jump @24\n      : @1832 [@dyn 1108] (gas: 2)\n 49327: a1 = i32 [0x20150]\n 49332: jump @1834 if a1 >u 63\n      : @1833 (gas: 2)\n 49336: u32 [0x20150] = 0x40\n 49342: fallthrough\n      : @1834 (gas: 7)\n 49343: a1 = 0x20160\n 49348: i32 a1 = a1 + 0\n 49350: a0 = 0x1\n 49353: a2 = 0x24\n 49356: ra = 0x8aa\n 49360: ecalli 16 // 'seal_return'\n 49362: fallthrough\n      : @1835 [@dyn 1109] (gas: 21)\n 49363: sp = sp + 0xfffffffffffffcd0\n 49367: a2 = sp + 0x300\n 49371: u64 [a2 + 0x28] = ra\n 49374: u64 [a2 + 0x20] = s0\n 49377: u64 [a2 + 0x18] = s1\n 49380: s0 = sp + 0x330\n 49384: sp = sp & 0xfffffffffffffff0\n 49387: a3 = u64 [a1 + 0x18]\n 49390: a5 = u64 [a1 + 0x10]\n 49393: t0 = u64 [a1]\n 49395: a4 = u64 [a1 + 0x8]\n 49398: a1 = a3 >u 0\n 49400: s1 = a5 >u 0\n 49402: s1 = a1 if a3 != 0\n 49405: a1 = a4 >u 0\n 49407: a2 = t0 <u 0x2\n 49410: a2 = a2 ^ 0x1\n 49413: a2 = a1 if a4 != 0\n 49416: a1 = a5 | a3\n 49419: a2 = s1 if a1 != 0\n 49422: jump @1857 if a2 == 0\n      : @1836 (gas: 16)\n 49426: s1 = 0 if a1 == 0\n 49428: a1 = 0x1\n 49431: a1 = 0 if s1 == 0\n 49433: u64 [sp + 0x40] = a1\n 49436: a1 = s1 ^ 0x1\n 49439: u64 [sp + 0x30] = a1\n 49442: s1 = s1 << 0x7\n 49445: a2 = s1 ^ 0x80\n 49449: u64 [sp + 0x38] = a0\n 49452: a0 = a5\n 49454: a1 = a3\n 49456: u64 [sp + 0x68] = t0\n 49459: u64 [sp + 0x60] = a4\n 49462: u64 [sp + 0x58] = a5\n 49465: u64 [sp + 0x50] = a3\n 49468: ra = 2220, jump @2379\n      : @1837 [@dyn 1110] (gas: 6)\n 49474: u64 [sp + 0x28] = a0\n 49477: u64 [sp + 0x48] = a1\n 49480: a0 = u64 [sp + 0x68]\n 49483: a1 = u64 [sp + 0x60]\n 49486: a2 = s1\n 49488: ra = 2222, jump @2374\n      : @1838 [@dyn 1111] (gas: 8)\n 49494: u64 [sp + 0x20] = a1\n 49497: a1 = u64 [sp + 0x28]\n 49500: a0 = a0 | a1\n 49503: u64 [sp + 0x28] = a0\n 49506: a2 = s1 + 0xffffffffffffff80\n 49509: a0 = u64 [sp + 0x58]\n 49512: a1 = u64 [sp + 0x50]\n 49515: ra = 2224, jump @2374\n      : @1839 [@dyn 1112] (gas: 19)\n 49521: a3 = s1 <u 0x80\n 49525: u64 [sp + 0x18] = a3\n 49528: a2 = a0\n 49530: a0 = u64 [sp + 0x28]\n 49533: a2 = a0 if a3 != 0\n 49536: a0 = u64 [sp + 0x68]\n 49539: a2 = a0 if s1 == 0\n 49542: u64 [sp + 0x28] = a2\n 49545: a0 = u64 [sp + 0x48]\n 49548: a2 = u64 [sp + 0x20]\n 49551: a0 = a0 | a2\n 49554: a1 = a0 if a3 != 0\n 49557: a0 = u64 [sp + 0x60]\n 49560: a1 = a0 if s1 == 0\n 49563: u64 [sp + 0x48] = a1\n 49566: a0 = u64 [sp + 0x58]\n 49569: a1 = u64 [sp + 0x50]\n 49572: a2 = s1\n 49574: ra = 2226, jump @2374\n      : @1840 [@dyn 1113] (gas: 28)\n 49580: s1 = a0\n 49582: a0 = u64 [sp + 0x18]\n 49585: s1 = 0 if a0 == 0\n 49587: a1 = 0 if a0 == 0\n 49589: a0 = a1 >u 0\n 49591: a3 = s1 >u 0\n 49593: a3 = a0 if a1 != 0\n 49596: a0 = s1 | a1\n 49599: a4 = a1\n 49601: u64 [sp + 0x18] = a1\n 49604: a1 = u64 [sp + 0x48]\n 49607: a2 = a1 >u 0\n 49609: a2 = a3 if a0 != 0\n 49612: a0 = a2 << 0x5\n 49615: a1 = u64 [sp + 0x30]\n 49618: a1 = a1 << a0\n 49621: u64 [sp + 0x30] = a1\n 49624: a1 = u64 [sp + 0x40]\n 49627: a0 = a1 << a0\n 49630: u64 [sp + 0x20] = a0\n 49633: a2 = a2 << 0x6\n 49636: u64 [sp + 0x40] = a2\n 49639: a2 = a2 ^ 0x7f\n 49642: a0 = s1 >> 0x3f\n 49645: a1 = a4 << 0x1\n 49648: a1 = a1 | a0\n 49651: a0 = s1 << 0x1\n 49654: ra = 2228, jump @2379\n      : @1841 [@dyn 1114] (gas: 6)\n 49660: u64 [sp + 0x10] = a0\n 49663: u64 [sp + 0x8] = a1\n 49666: a0 = u64 [sp + 0x28]\n 49669: a1 = u64 [sp + 0x48]\n 49672: a2 = u64 [sp + 0x40]\n 49675: ra = 2230, jump @2374\n      : @1842 [@dyn 1115] (gas: 10)\n 49681: a2 = u64 [sp + 0x10]\n 49684: a0 = a0 | a2\n 49687: u64 [sp + 0x28] = a0\n 49690: a0 = u64 [sp + 0x8]\n 49693: a0 = a0 | a1\n 49696: u64 [sp + 0x10] = a0\n 49699: a0 = s1\n 49701: a1 = u64 [sp + 0x18]\n 49704: a2 = u64 [sp + 0x40]\n 49707: ra = 2232, jump @2374\n      : @1843 [@dyn 1116] (gas: 218)\n 49713: t1 = u64 [sp + 0x10]\n 49716: a2 = t1 | a1\n 49719: t0 = u64 [sp + 0x28]\n 49722: a3 = t0 | a0\n 49725: a3 = a3 | a2\n 49728: a3 = a3 >> 0x20\n 49731: a2 = a2 | a0\n 49734: a2 = a2 << 0x20\n 49737: a2 = a2 >> 0x20\n 49740: a2 = a2 | a3\n 49743: a2 = a2 >u 0\n 49745: a4 = a2 << 0x4\n 49748: a3 = u64 [sp + 0x20]\n 49751: a3 = a3 << a4\n 49754: u64 [sp + 0x40] = a3\n 49757: a3 = u64 [sp + 0x30]\n 49760: a3 = a3 << a4\n 49763: u64 [sp + 0x48] = a3\n 49766: a2 = a2 << 0x5\n 49769: t2 = t1 >> a2\n 49772: a3 = a2 ^ 0xffffffffffffffff\n 49775: a5 = a0 << 0x1\n 49778: a3 = a5 << a3\n 49781: ra = t2 | a3\n 49784: a0 = a0 >> a2\n 49787: s1 = a2 ^ 0x3f\n 49790: a5 = a1 << 0x1\n 49793: a5 = a5 << s1\n 49796: a5 = a5 | a0\n 49799: a4 = t0 >> a2\n 49802: a3 = t1 << 0x1\n 49805: a3 = a3 << s1\n 49808: a3 = a3 | a4\n 49811: s1 = a1 >> a2\n 49814: a1 = a3 | a5\n 49817: a2 = ra | s1\n 49820: a1 = a1 | a2\n 49823: a1 = a1 >> 0x10\n 49826: a2 = t2 | s1\n 49829: a0 = a0 | a2\n 49832: a0 = a0 << 0x30\n 49835: a0 = a0 | a1\n 49838: a1 = a0 >u 0\n 49840: a0 = a1 << 0x3\n 49843: a2 = u64 [sp + 0x48]\n 49846: a2 = a2 << a0\n 49849: u64 [sp + 0x48] = a2\n 49852: a2 = u64 [sp + 0x40]\n 49855: t2 = a2 << a0\n 49858: a0 = a1 << 0x4\n 49861: a1 = a5 >> a0\n 49864: a2 = a0 ^ 0x3f\n 49867: a4 = s1 << 0x1\n 49870: a4 = a4 << a2\n 49873: t1 = a1 | a4\n 49876: a3 = a3 >> a0\n 49879: a4 = ra << 0x1\n 49882: a4 = a4 << a2\n 49885: a4 = a4 | a3\n 49888: u64 [sp + 0x30] = a4\n 49891: a2 = ra >> a0\n 49894: a3 = a0 ^ 0xffffffffffffffff\n 49897: a5 = a5 << 0x1\n 49900: a3 = a5 << a3\n 49903: t0 = a2 | a3\n 49906: a1 = s1 >> a0\n 49909: a0 = t0 >u 0\n 49911: a3 = a4 <u 0x100\n 49915: a3 = a3 ^ 0x1\n 49918: a3 = a0 if t0 != 0\n 49921: a5 = t1 >u 0\n 49923: a0 = a1 >u 0\n 49925: a0 = a5 if a1 == 0\n 49928: a5 = t1 | a1\n 49931: a0 = a3 if a5 == 0\n 49934: a3 = a0 << 0x2\n 49937: a5 = a3 ^ 0xffffffffffffffff\n 49940: a4 = t2 >> 0x1\n 49943: a2 = a4 >> a5\n 49946: u64 [sp + 0x40] = a2\n 49949: a2 = u64 [sp + 0x48]\n 49952: a5 = a2 << a3\n 49955: ra = t2 << a3\n 49958: a3 = a0 << 0x3\n 49961: t2 = t1 >> a3\n 49964: a4 = a3 ^ 0x3f\n 49967: s1 = a1 << 0x1\n 49970: a0 = s1 << a4\n 49973: t2 = t2 | a0\n 49976: a0 = u64 [sp + 0x30]\n 49979: s1 = a0 >> a3\n 49982: a2 = t0 << 0x1\n 49985: a2 = a2 << a4\n 49988: s1 = s1 | a2\n 49991: u64 [sp + 0x30] = s1\n 49994: a2 = t0 >> a3\n 49997: a4 = a3 ^ 0xffffffffffffffff\n 50000: t1 = t1 << 0x1\n 50003: a4 = t1 << a4\n 50006: t1 = a2 | a4\n 50009: a4 = a1 >> a3\n 50012: a1 = t1 >u 0\n 50014: a2 = s1 <u 0x10\n 50017: a2 = a2 ^ 0x1\n 50020: a2 = a1 if t1 != 0\n 50023: a1 = t2 >u 0\n 50025: s1 = a4 >u 0\n 50027: s1 = a1 if a4 == 0\n 50030: a1 = t2 | a4\n 50033: s1 = a2 if a1 == 0\n 50036: a2 = s1 << 0x1\n 50039: a1 = a2 ^ 0x3f\n 50042: t0 = a5\n 50044: a5 = a5 >> 0x1\n 50047: a5 = a5 >> a1\n 50050: a0 = ra << a2\n 50053: a0 = a0 | a5\n 50056: u64 [sp + 0x48] = a0\n 50059: a0 = ra >> 0x1\n 50062: a5 = a2 ^ 0xffffffffffffffff\n 50065: a0 = a0 >> a5\n 50068: a3 = u64 [sp + 0x40]\n 50071: a5 = a3 << a2\n 50074: a5 = a5 | a0\n 50077: t0 = t0 << a2\n 50080: a0 = a3 >> 0x1\n 50083: ra = a0 >> a1\n 50086: s1 = s1 << 0x2\n 50089: a0 = s1 ^ 0x3f\n 50092: a3 = a4 << 0x1\n 50095: a3 = a3 << a0\n 50098: a1 = t2 >> s1\n 50101: a1 = a1 | a3\n 50104: a3 = t1 << 0x1\n 50107: a0 = a3 << a0\n 50110: a2 = u64 [sp + 0x30]\n 50113: a3 = a2 >> s1\n 50116: a0 = a0 | a3\n 50119: a3 = s1 ^ 0xffffffffffffffff\n 50122: t2 = t2 << 0x1\n 50125: a3 = t2 << a3\n 50128: a2 = t1 >> s1\n 50131: a2 = a2 | a3\n 50134: a3 = a4 >> s1\n 50137: a4 = a2 >u 0\n 50139: a0 = a0 <u 0x4\n 50142: a0 = a0 ^ 0x1\n 50145: a0 = a4 if a2 != 0\n 50148: a2 = a1 >u 0\n 50150: a4 = a3 >u 0\n 50152: a4 = a2 if a3 == 0\n 50155: a1 = a1 | a3\n 50158: a4 = a0 if a1 == 0\n 50161: a0 = ra << a4\n 50164: a1 = a4 ^ 0x3f\n 50167: a2 = a5 >> 0x1\n 50170: a3 = a2 >> a1\n 50173: a3 = a3 | a0\n 50176: a0 = a4 ^ 0xffffffffffffffff\n 50179: s1 = u64 [sp + 0x48]\n 50182: a2 = s1 >> 0x1\n 50185: a0 = a2 >> a0\n 50188: a2 = a5 << a4\n 50191: a2 = a2 | a0\n 50194: a0 = s1 << a4\n 50197: a5 = t0 >> 0x1\n 50200: a1 = a5 >> a1\n 50203: a5 = a0 | a1\n 50206: a1 = t0 << a4\n 50209: a0 = a5 << 0x1\n 50212: a4 = a0 + a5\n 50215: s1 = 0x3\n 50218: a0 = a1 mulhu s1\n 50221: a0 = a0 + a4\n 50224: a4 = a0 <u a4\n 50227: a5 = a5 mulhu s1\n 50230: a4 = a4 + a5\n 50233: a5 = a3 << 0x1\n 50236: a3 = a3 + a5\n 50239: a5 = a2 << 0x1\n 50242: a5 = a5 + a2\n 50245: a2 = a2 mulhu s1\n 50248: a5 = a5 + a4\n 50251: a4 = a5 <u a4\n 50254: a2 = a2 + a3\n 50257: a2 = a2 + a4\n 50260: a3 = a1 << 0x1\n 50263: a1 = a1 + a3\n 50266: a3 = a2 << 0x3f\n 50269: a4 = a5 >> 0x1\n 50272: a3 = a3 | a4\n 50275: u64 [sp + 0x30] = a3\n 50278: a5 = a5 << 0x3f\n 50281: s1 = a0 >> 0x1\n 50284: s1 = s1 | a5\n 50287: a0 = a0 << 0x3f\n 50290: a1 = a1 >> 0x1\n 50293: a1 = a1 | a0\n 50296: u64 [sp + 0x48] = a1\n 50299: a2 = a2 >> 0x1\n 50302: u64 [sp + 0x40] = a2\n 50305: a0 = u64 [sp + 0x68]\n 50308: a4 = sp + 0x200\n 50312: u64 [a4 + 0xd0] = a0\n 50316: a0 = u64 [sp + 0x60]\n 50319: u64 [a4 + 0xd8] = a0\n 50323: a0 = u64 [sp + 0x58]\n 50326: u64 [a4 + 0xe0] = a0\n 50330: a0 = u64 [sp + 0x50]\n 50333: u64 [a4 + 0xe8] = a0\n 50337: u64 [a4 + 0xb0] = a1\n 50341: u64 [a4 + 0xb8] = s1\n 50345: u64 [a4 + 0xc8] = a2\n 50349: a0 = sp + 0x2f0\n 50353: a1 = sp + 0x2d0\n 50357: a2 = sp + 0x2b0\n 50361: u64 [a4 + 0xc0] = a3\n 50365: ra = 2234, jump @1810\n      : @1844 [@dyn 1117] (gas: 5)\n 50371: a0 = u64 [sp + 0x300]\n 50375: a1 = u64 [sp + 0x2f0]\n 50379: a2 = u64 [sp + 0x308]\n 50383: a3 = u64 [sp + 0x2f8]\n 50387: t0 = 2236, jump @2215\n      : @1845 [@dyn 1118] (gas: 15)\n 50393: u64 [a3 + 0x88] = a0\n 50397: a0 = u64 [sp + 0x58]\n 50400: u64 [a3 + 0x80] = a0\n 50404: a0 = u64 [sp + 0x60]\n 50407: u64 [a3 + 0x78] = a0\n 50410: a0 = u64 [sp + 0x68]\n 50413: u64 [a3 + 0x70] = a0\n 50416: u64 [a3 + 0x50] = a1\n 50419: u64 [a3 + 0x58] = s1\n 50422: u64 [a3 + 0x68] = a2\n 50425: a0 = sp + 0x290\n 50429: a1 = sp + 0x270\n 50433: a2 = sp + 0x250\n 50437: u64 [a3 + 0x60] = a4\n 50440: ra = 2238, jump @1810\n      : @1846 [@dyn 1119] (gas: 5)\n 50446: a0 = u64 [sp + 0x2a0]\n 50450: a1 = u64 [sp + 0x290]\n 50454: a2 = u64 [sp + 0x2a8]\n 50458: a3 = u64 [sp + 0x298]\n 50462: t0 = 2240, jump @2215\n      : @1847 [@dyn 1120] (gas: 15)\n 50468: u64 [a3 + 0x28] = a0\n 50471: a0 = u64 [sp + 0x58]\n 50474: u64 [a3 + 0x20] = a0\n 50477: a0 = u64 [sp + 0x60]\n 50480: u64 [a3 + 0x18] = a0\n 50483: a0 = u64 [sp + 0x68]\n 50486: u64 [a3 + 0x10] = a0\n 50489: u64 [sp + 0x1f0] = a1\n 50493: u64 [sp + 0x1f8] = s1\n 50497: u64 [a3 + 0x8] = a2\n 50500: a0 = sp + 0x230\n 50504: a1 = sp + 0x210\n 50508: a2 = sp + 0x1f0\n 50512: u64 [a3] = a4\n 50514: ra = 2242, jump @1810\n      : @1848 [@dyn 1121] (gas: 6)\n 50520: a4 = sp + 0x200\n 50524: a0 = u64 [a4 + 0x40]\n 50527: a1 = u64 [a4 + 0x30]\n 50530: a2 = u64 [a4 + 0x48]\n 50533: a3 = u64 [a4 + 0x38]\n 50536: t0 = 2244, jump @2208\n      : @1849 [@dyn 1122] (gas: 15)\n 50542: u64 [sp + 0x1c8] = a0\n 50546: a0 = u64 [sp + 0x58]\n 50549: u64 [sp + 0x1c0] = a0\n 50553: a0 = u64 [sp + 0x60]\n 50556: u64 [sp + 0x1b8] = a0\n 50560: a0 = u64 [sp + 0x68]\n 50563: u64 [sp + 0x1b0] = a0\n 50567: u64 [sp + 0x190] = a1\n 50571: u64 [sp + 0x198] = s1\n 50575: u64 [sp + 0x1a8] = a2\n 50579: a0 = sp + 0x1d0\n 50583: a1 = sp + 0x1b0\n 50587: a2 = sp + 0x190\n 50591: u64 [sp + 0x1a0] = a4\n 50595: ra = 2246, jump @1810\n      : @1850 [@dyn 1123] (gas: 5)\n 50601: a0 = u64 [sp + 0x1e0]\n 50605: a1 = u64 [sp + 0x1d0]\n 50609: a2 = u64 [sp + 0x1e8]\n 50613: a3 = u64 [sp + 0x1d8]\n 50617: t0 = 2248, jump @2208\n      : @1851 [@dyn 1124] (gas: 15)\n 50623: u64 [sp + 0x168] = a0\n 50627: a0 = u64 [sp + 0x58]\n 50630: u64 [sp + 0x160] = a0\n 50634: a0 = u64 [sp + 0x60]\n 50637: u64 [sp + 0x158] = a0\n 50641: a0 = u64 [sp + 0x68]\n 50644: u64 [sp + 0x150] = a0\n 50648: u64 [sp + 0x130] = a1\n 50652: u64 [sp + 0x138] = s1\n 50656: u64 [sp + 0x148] = a2\n 50660: a0 = sp + 0x170\n 50664: a1 = sp + 0x150\n 50668: a2 = sp + 0x130\n 50672: u64 [sp + 0x140] = a4\n 50676: ra = 2250, jump @1810\n      : @1852 [@dyn 1125] (gas: 5)\n 50682: a0 = u64 [sp + 0x180]\n 50686: a1 = u64 [sp + 0x170]\n 50690: a2 = u64 [sp + 0x188]\n 50694: a3 = u64 [sp + 0x178]\n 50698: t0 = 2252, jump @2208\n      : @1853 [@dyn 1126] (gas: 15)\n 50704: u64 [sp + 0x108] = a0\n 50708: a0 = u64 [sp + 0x58]\n 50711: u64 [sp + 0x100] = a0\n 50715: a0 = u64 [sp + 0x60]\n 50718: u64 [sp + 0xf8] = a0\n 50722: a0 = u64 [sp + 0x68]\n 50725: u64 [sp + 0xf0] = a0\n 50729: u64 [sp + 0xd0] = a1\n 50733: u64 [sp + 0xd8] = s1\n 50737: u64 [sp + 0xe8] = a2\n 50741: a0 = sp + 0x110\n 50745: a1 = sp + 0xf0\n 50749: a2 = sp + 0xd0\n 50753: u64 [sp + 0xe0] = a4\n 50757: ra = 2254, jump @1810\n      : @1854 [@dyn 1127] (gas: 5)\n 50763: a0 = u64 [sp + 0x120]\n 50767: a1 = u64 [sp + 0x110]\n 50771: a2 = u64 [sp + 0x128]\n 50775: a3 = u64 [sp + 0x118]\n 50779: t0 = 2256, jump @2208\n      : @1855 [@dyn 1128] (gas: 15)\n 50785: u64 [sp + 0xa8] = a0\n 50789: a0 = u64 [sp + 0x58]\n 50792: u64 [sp + 0xa0] = a0\n 50796: a0 = u64 [sp + 0x60]\n 50799: u64 [sp + 0x98] = a0\n 50803: a0 = u64 [sp + 0x68]\n 50806: u64 [sp + 0x90] = a0\n 50810: u64 [sp + 0x70] = a1\n 50813: u64 [sp + 0x78] = s1\n 50816: u64 [sp + 0x88] = a2\n 50820: a0 = sp + 0xb0\n 50824: a1 = sp + 0x90\n 50828: a2 = sp + 0x70\n 50831: u64 [sp + 0x80] = a4\n 50835: ra = 2258, jump @1810\n      : @1856 [@dyn 1129] (gas: 29)\n 50841: a0 = u64 [sp + 0xc8]\n 50845: t0 = u64 [sp + 0xb0]\n 50849: a2 = u64 [sp + 0xc0]\n 50853: a3 = u64 [sp + 0xb8]\n 50857: a1 = u64 [sp + 0x40]\n 50860: a4 = a1 ^ a0\n 50863: a0 = a0 <u a1\n 50866: t1 = a1\n 50868: a1 = u64 [sp + 0x30]\n 50871: a5 = a2 <u a1\n 50874: a5 = a0 if a4 != 0\n 50877: a0 = a1 ^ a2\n 50880: a2 = a1\n 50882: t2 = a0 | a4\n 50885: a4 = s1 ^ a3\n 50888: a3 = a3 <u s1\n 50891: a0 = u64 [sp + 0x48]\n 50894: a1 = t0 <u a0\n 50897: a1 = a3 if a4 != 0\n 50900: a1 = a5 if t2 != 0\n 50903: t0 = a0 - a1\n 50906: a0 = a0 <u a1\n 50909: a4 = s1 - a0\n 50912: a0 = 0 if s1 != 0\n 50914: a5 = a2 - a0\n 50917: a0 = a2 <u a0\n 50920: a3 = t1 - a0\n 50923: a0 = u64 [sp + 0x38]\n 50926: fallthrough\n      : @1857 (gas: 11)\n 50927: u64 [a0] = t0\n 50929: u64 [a0 + 0x8] = a4\n 50932: u64 [a0 + 0x10] = a5\n 50935: u64 [a0 + 0x18] = a3\n 50938: sp = s0 + 0xfffffffffffffcd0\n 50942: a0 = sp + 0x300\n 50946: ra = u64 [a0 + 0x28]\n 50949: s0 = u64 [a0 + 0x20]\n 50952: s1 = u64 [a0 + 0x18]\n 50955: sp = sp + 0x330\n 50959: ret\n      : @1858 (gas: 34)\n 50961: sp = sp + 0xfffffffffffffea0\n 50965: u64 [sp + 0x158] = ra\n 50969: u64 [sp + 0x150] = s0\n 50973: u64 [sp + 0x148] = s1\n 50977: s0 = sp + 0x160\n 50981: sp = sp & 0xffffffffffffffe0\n 50984: s1 = sp\n 50986: u64 [s1 + 0x18] = a0\n 50989: t0 = u64 [a4 + 0x18]\n 50992: ra = u64 [a4 + 0x10]\n 50995: t2 = u64 [a4 + 0x8]\n 50998: a4 = u64 [a4]\n 51000: a0 = u64 [a3 + 0x18]\n 51003: u64 [s1 + 0x78] = a0\n 51006: a0 = u64 [a3 + 0x10]\n 51009: u64 [s1 + 0x90] = a0\n 51013: a0 = u64 [a3 + 0x8]\n 51016: u64 [s1 + 0x70] = a0\n 51019: a5 = u64 [a3]\n 51021: a0 = u64 [a2]\n 51023: a2 = u64 [a1 + 0x18]\n 51026: u64 [s1 + 0x60] = a2\n 51029: a2 = u64 [a1 + 0x10]\n 51032: u64 [s1 + 0x58] = a2\n 51035: a2 = u64 [a1 + 0x8]\n 51038: u64 [s1 + 0x50] = a2\n 51041: a1 = u64 [a1]\n 51043: u64 [s1 + 0x48] = a1\n 51046: a1 = 0xffffffffffff\n 51056: u64 [s1 + 0x40] = a1\n 51059: a0 = a0 << 0x10\n 51062: a0 = a0 >> 0x10\n 51065: u64 [s1 + 0x38] = a0\n 51068: fallthrough\n      : @1859 (gas: 6)\n 51069: a2 = a4\n 51071: a3 = t2\n 51073: a4 = t0\n 51075: t0 = u64 [s1 + 0x90]\n 51079: u64 [s1 + 0x68] = a5\n 51082: fallthrough\n      : @1860 (gas: 26)\n 51083: u64 [s1 + 0xb8] = ra\n 51087: t1 = a2\n 51089: a2 = a5\n 51091: t2 = a5 <u t1\n 51094: a1 = u64 [s1 + 0x70]\n 51097: a5 = a1 ^ a3\n 51100: a0 = a1 <u a3\n 51103: u64 [s1 + 0x98] = a5\n 51107: a0 = t2 if a5 == 0\n 51110: u64 [s1 + 0xb0] = a0\n 51114: t2 = u64 [s1 + 0x78]\n 51117: a0 = t0 <u ra\n 51120: u64 [s1 + 0xa8] = a0\n 51124: ra = a2\n 51126: a0 = t2 ^ a4\n 51129: a2 = t2 <u a4\n 51132: a5 = u64 [s1 + 0xa8]\n 51136: a2 = a5 if a0 == 0\n 51139: a5 = u64 [s1 + 0xb8]\n 51143: t0 = t0 ^ a5\n 51146: u64 [s1 + 0xa8] = a0\n 51150: u64 [s1 + 0xa0] = t0\n 51154: a0 = t0 | a0\n 51157: a5 = u64 [s1 + 0xb0]\n 51161: a2 = a5 if a0 == 0\n 51164: jump @1869 if a2 == 0\n      : @1861 (gas: 60)\n 51168: u64 [s1 + 0x30] = a4\n 51171: a0 = a4 & t2\n 51174: u64 [s1 + 0x88] = a0\n 51178: u64 [s1 + 0x28] = a3\n 51181: a1 = a1 & a3\n 51184: u64 [s1 + 0xb0] = a1\n 51188: t2 = t1 & ra\n 51191: u64 [s1 + 0x80] = t2\n 51195: u64 [s1 + 0x20] = t1\n 51198: a2 = t1 ^ ra\n 51201: a5 = u64 [s1 + 0x98]\n 51205: a0 = a5 >> 0x1\n 51208: t0 = u64 [s1 + 0xa0]\n 51212: a4 = t0 << 0x3f\n 51215: a0 = a0 | a4\n 51218: a2 = a2 >> 0x1\n 51221: a5 = a5 << 0x3f\n 51224: a2 = a2 | a5\n 51227: t2 = t2 + a2\n 51230: a3 = t2 <u a2\n 51233: a4 = u64 [s1 + 0xb0]\n 51237: a4 = a4 + a0\n 51240: a2 = a4 + a3\n 51243: a4 = a2 ^ a0\n 51246: a0 = a2 <u a0\n 51249: a0 = a3 if a4 == 0\n 51252: a1 = u64 [s1 + 0xb8]\n 51256: a3 = u64 [s1 + 0x90]\n 51260: ra = a1 & a3\n 51263: a3 = t0 >> 0x1\n 51266: a1 = u64 [s1 + 0xa8]\n 51270: a4 = a1 << 0x3f\n 51273: a3 = a3 | a4\n 51276: t1 = a1 >> 0x1\n 51279: a4 = a3 + ra\n 51282: a1 = a4 <u a3\n 51285: t0 = u64 [s1 + 0x88]\n 51289: a3 = t1 + t0\n 51292: a1 = a1 + a3\n 51295: a5 = a4 + a0\n 51298: a0 = a5 <u a4\n 51301: a4 = a1 + a0\n 51304: a1 = u64 [s1 + 0xb0]\n 51308: a0 = a1 ^ a2\n 51311: u64 [s1 + 0xa8] = a2\n 51315: a3 = a2 <u a1\n 51318: u64 [s1 + 0xb0] = t2\n 51322: a1 = u64 [s1 + 0x80]\n 51326: a2 = t2 <u a1\n 51329: a2 = a3 if a0 != 0\n 51332: a0 = a5 <u ra\n 51335: a1 = t0 ^ a4\n 51338: u64 [s1 + 0x98] = a4\n 51342: a3 = a4 <u t0\n 51345: a3 = a0 if a1 == 0\n 51348: u64 [s1 + 0xa0] = a5\n 51352: a0 = ra ^ a5\n 51355: a0 = a0 | a1\n 51358: a2 = a3 if a0 != 0\n 51361: jump @1870 if a2 != 0\n      : @1862 (gas: 12)\n 51365: a0 = u64 [s1 + 0x48]\n 51368: a2 = s1 + 0x100\n 51372: u64 [a2 + 0x20] = a0\n 51375: a0 = u64 [s1 + 0x50]\n 51378: u64 [a2 + 0x28] = a0\n 51381: a0 = u64 [s1 + 0x58]\n 51384: u64 [a2 + 0x30] = a0\n 51387: a1 = s1 + 0x120\n 51391: a0 = u64 [s1 + 0x60]\n 51394: u64 [a2 + 0x38] = a0\n 51397: a0 = 0\n 51399: ra = 2260, jump @24\n      : @1863 [@dyn 1130] (gas: 6)\n 51406: a0 = sp + 0xffffffffffffffe0\n 51409: a0 = a0 & 0xffffffffffffffe0\n 51412: u64 [s1 + 0x88] = a0\n 51416: sp = a0\n 51418: a1 = i32 [0x20150]\n 51423: jump @1865 if a1 >u 31\n      : @1864 (gas: 2)\n 51427: u32 [0x20150] = 0x20\n 51433: fallthrough\n      : @1865 (gas: 45)\n 51434: a0 = sp + 0xffffffffffffffe0\n 51437: a2 = a0 & 0xffffffffffffffe0\n 51440: u64 [s1 + 0x80] = a2\n 51444: sp = a2\n 51446: a0 = 0x20160\n 51451: i32 a0 = a0 + 0\n 51453: i32 a2 = a2 + 0\n 51455: a1 = 0x20\n 51458: ecalli 11 // 'hash_keccak_256'\n 51460: a2 = u64 [s1 + 0x80]\n 51464: a0 = u64 [a2 + 0x18]\n 51467: a1 = u64 [a2 + 0x10]\n 51470: t0 = u64 [a2 + 0x8]\n 51473: a3 = u64 [a2]\n 51475: a0 = reverse a0\n 51477: a1 = reverse a1\n 51479: a4 = u64 [s1 + 0xa8]\n 51483: a4 = a4 + a1\n 51486: t1 = u64 [s1 + 0xb0]\n 51490: t1 = t1 + a0\n 51493: a0 = t1 <u a0\n 51496: a4 = a4 + a0\n 51499: a2 = a4 ^ a1\n 51502: a1 = a4 <u a1\n 51505: a1 = a0 if a2 == 0\n 51508: a0 = reverse a3\n 51510: a2 = reverse t0\n 51512: a3 = u64 [s1 + 0xa0]\n 51516: a3 = a3 + a2\n 51519: a5 = u64 [s1 + 0x98]\n 51523: a0 = a0 + a5\n 51526: a2 = a3 <u a2\n 51529: a0 = a0 + a2\n 51532: a5 = a3 + a1\n 51535: a2 = a5 <u a3\n 51538: a0 = a0 + a2\n 51541: a1 = u64 [s1 + 0x88]\n 51545: u64 [a1] = t1\n 51547: u64 [a1 + 0x8] = a4\n 51550: u64 [a1 + 0x10] = a5\n 51553: u64 [a1 + 0x18] = a0\n 51556: a0 = s1 + 0x100\n 51560: ra = 0x8d6\n 51564: t0 = 0x6\n 51567: jump @2259\n      : @1866 [@dyn 1131] (gas: 11)\n 51570: a4 = u64 [s1 + 0x98]\n 51574: ra = u64 [s1 + 0xa0]\n 51578: a3 = u64 [s1 + 0xa8]\n 51582: a2 = u64 [s1 + 0xb0]\n 51586: a0 = u64 [s1 + 0x100]\n 51590: a1 = u64 [s1 + 0x40]\n 51593: a0 = a0 & a1\n 51596: t0 = u64 [s1 + 0x90]\n 51600: a1 = u64 [s1 + 0x38]\n 51603: a5 = u64 [s1 + 0x68]\n 51606: jump @1860 if a1 <u a0\n      : @1867 (gas: 7)\n 51610: u64 [s1 + 0xc0] = a2\n 51614: u64 [s1 + 0xc8] = a3\n 51618: u64 [s1 + 0xd0] = ra\n 51622: a0 = s1 + 0xe0\n 51626: a1 = s1 + 0xc0\n 51630: u64 [s1 + 0xd8] = a4\n 51634: ra = 2264, jump @1718\n      : @1868 [@dyn 1132] (gas: 12)\n 51640: a0 = u64 [s1 + 0xf8]\n 51644: u64 [s1 + 0x78] = a0\n 51647: a0 = u64 [s1 + 0xf0]\n 51651: u64 [s1 + 0x90] = a0\n 51655: a0 = u64 [s1 + 0xe8]\n 51659: u64 [s1 + 0x70] = a0\n 51662: a5 = u64 [s1 + 0xe0]\n 51666: t0 = u64 [s1 + 0x30]\n 51669: ra = u64 [s1 + 0xb8]\n 51673: t2 = u64 [s1 + 0x28]\n 51676: a4 = u64 [s1 + 0x20]\n 51679: jump @1859\n      : @1869 (gas: 12)\n 51682: a0 = u64 [s1 + 0x18]\n 51685: u64 [a0] = t1\n 51687: u64 [a0 + 0x8] = a3\n 51690: a1 = u64 [s1 + 0xb8]\n 51694: u64 [a0 + 0x10] = a1\n 51697: u64 [a0 + 0x18] = a4\n 51700: sp = s0 + 0xfffffffffffffea0\n 51704: ra = u64 [sp + 0x158]\n 51708: s0 = u64 [sp + 0x150]\n 51712: s1 = u64 [sp + 0x148]\n 51716: sp = sp + 0x160\n 51720: ret\n      : @1870 (gas: 3)\n 51722: ra = 0x8da\n 51726: t0 = 0x28e\n 51730: jump @2232\n      : @1871 [@dyn 1133] (gas: 1)\n 51733: t0 = 2268, jump @2275\n      : @1872 [@dyn 1134] (gas: 16)\n 51739: t0 = u64 [a0 + 0x10]\n 51742: a3 = u64 [a1 + 0x10]\n 51745: u64 [sp + 0xb8] = a4\n 51749: a4 = a4 ^ t2\n 51752: u64 [sp + 0xb0] = a5\n 51756: a5 = a5 ^ t1\n 51759: a4 = a4 | a5\n 51762: u64 [sp + 0xa0] = a3\n 51766: a5 = a3 << 0x20\n 51769: ra = a5 >> 0x20\n 51772: a5 = t0 << 0x20\n 51775: a5 = a5 >> 0x20\n 51778: u64 [sp + 0xc0] = a5\n 51782: a5 = a5 ^ ra\n 51785: a4 = a4 | a5\n 51788: jump @1908 if a4 == 0\n      : @1873 (gas: 12)\n 51792: a3 = u64 [a2 + 0x18]\n 51795: a5 = u64 [a2 + 0x10]\n 51798: a4 = u64 [a2]\n 51800: s1 = u64 [a2 + 0x8]\n 51803: u64 [sp + 0xa8] = a4\n 51807: u64 [sp + 0xd8] = a5\n 51811: a2 = a4 | a5\n 51814: u64 [sp + 0xd0] = a3\n 51818: u64 [sp + 0xc8] = s1\n 51822: a4 = s1 | a3\n 51825: a2 = a2 | a4\n 51828: jump @1908 if a2 == 0\n      : @1874 (gas: 15)\n 51832: a3 = u64 [a1 + 0x18]\n 51835: u64 [sp + 144] = 0xffff\n 51842: a1 = u64 [sp + 0xc0]\n 51846: a4 = u64 [sp + 0xb8]\n 51850: a1 = a1 | a4\n 51853: a5 = u64 [sp + 0xb0]\n 51857: a1 = a1 | a5\n 51860: u64 [sp + 0x58] = a2\n 51863: u64 [sp + 0x60] = a2\n 51866: u64 [sp + 0x68] = a2\n 51869: u64 [sp + 0x70] = a2\n 51872: u64 [sp + 0x88] = ra\n 51876: u64 [sp + 0x80] = t1\n 51880: u64 [sp + 0x78] = t2\n 51883: jump @1892 if a1 == 0\n      : @1875 (gas: 12)\n 51887: u64 [sp + 0x8] = a3\n 51890: a0 = u64 [a0 + 0x18]\n 51893: a2 = sp + 0x400\n 51897: u64 [a2 + 0x60] = a4\n 51900: u64 [a2 + 0x70] = t0\n 51903: u64 [a2 + 0x78] = a0\n 51906: a0 = sp + 0x480\n 51910: a1 = sp + 0x460\n 51914: u64 [a2 + 0x68] = a5\n 51917: ra = 0x8de\n 51921: t0 = 0x7b8\n 51925: jump @2257\n      : @1876 [@dyn 1135] (gas: 1)\n 51928: t0 = 2272, jump @2250\n      : @1877 [@dyn 1136] (gas: 3)\n 51934: ra = 0x8e2\n 51938: t0 = 0x2e4\n 51942: jump @2372\n      : @1878 [@dyn 1137] (gas: 1)\n 51945: t0 = 2276, jump @2264\n      : @1879 [@dyn 1138] (gas: 15)\n 51951: ra = 0x8e6\n 51955: sp = sp + 0xfffffffffffffe40\n 51959: u64 [sp + 0x1b8] = ra\n 51963: u64 [sp + 0x1b0] = s0\n 51967: u64 [sp + 0x1a8] = s1\n 51971: s0 = sp + 0x1c0\n 51975: sp = sp & 0xffffffffffffffe0\n 51978: a3 = u16 [a2 + 0x18]\n 51981: u64 [sp + 0x30] = a3\n 51984: a3 = u64 [a2 + 0x10]\n 51987: u64 [sp + 0x28] = a3\n 51990: a3 = u64 [a2]\n 51992: u64 [sp + 0x38] = a3\n 51995: t0 = 0x9d8\n 51999: jump @2311\n      : @1880 [@dyn 1139] (gas: 1)\n 52002: t0 = 2280, jump @2256\n      : @1881 [@dyn 1140] (gas: 1)\n 52008: ra = 2282, jump @22\n      : @1882 [@dyn 1141] (gas: 1)\n 52015: t0 = 2284, jump @2269\n      : @1883 [@dyn 1142] (gas: 14)\n 52021: t0 = a4 & a1\n 52024: a4 = u64 [sp + 0x98]\n 52028: a4 = a4 & a0\n 52031: u64 [sp + 0x30] = a4\n 52034: a4 = u64 [sp + 0x380]\n 52038: u64 [sp + 0x98] = a4\n 52042: a4 = u64 [sp + 0x38]\n 52045: ra = a4 & a0\n 52048: a4 = u64 [sp + 0x40]\n 52051: a0 = a0 & a4\n 52054: a4 = u64 [sp + 0x48]\n 52057: a4 = a4 & a1\n 52060: u64 [sp + 0x318] = t0\n 52064: t0 = 2286, jump @2247\n      : @1884 [@dyn 1143] (gas: 1)\n 52070: ra = 2288, jump @547\n      : @1885 [@dyn 1144] (gas: 6)\n 52077: ra = u64 [sp + 0x18]\n 52080: a2 = u64 [sp + 0x10]\n 52083: a0 = a2 | ra\n 52086: a3 = u64 [sp + 0x50]\n 52089: a1 = s1 | a3\n 52092: t0 = 2290, jump @2313\n      : @1886 [@dyn 1145] (gas: 1)\n 52098: jump @1910 if a0 != 0\n      : @1887 (gas: 1)\n 52102: t0 = 2292, jump @2337\n      : @1888 [@dyn 1146] (gas: 23)\n 52108: t0 = u64 [sp + 0x98]\n 52112: a1 = t2 <u t0\n 52115: a5 = a1 if a4 == 0\n 52118: t1 = u64 [sp + 0x50]\n 52121: a4 = a3 - t1\n 52124: s1 = a4 - a5\n 52127: a4 = a4 <u a5\n 52130: a3 = a3 <u t1\n 52133: a5 = u64 [sp + 0x48]\n 52136: a5 = a5 - ra\n 52139: a5 = a5 - a3\n 52142: a5 = a5 - a4\n 52145: a0 = a0 - a2\n 52148: a0 = a0 - a1\n 52151: a1 = t2 - t0\n 52154: a0 = a0 | a5\n 52157: a2 = a1 | s1\n 52160: a2 = a2 | a0\n 52163: a0 = a0 | s1\n 52166: a2 = a2 >> 0x20\n 52169: a0 = a0 << 0x20\n 52172: a0 = a0 | a2\n 52175: jump @1910 if a0 != 0\n      : @1889 (gas: 7)\n 52179: a5 = sp + 0x200\n 52183: u64 [a5 + 216] = 0\n 52187: a0 = u64 [sp + 0xb8]\n 52191: u64 [a5 + 0xc0] = a0\n 52195: a0 = u64 [sp + 0xb0]\n 52199: u64 [a5 + 0xc8] = a0\n 52203: t0 = 2294, jump @2326\n      : @1890 [@dyn 1147] (gas: 12)\n 52209: u64 [a5 + 0xf8] = a0\n 52213: u64 [a5 + 0xf0] = a2\n 52217: u64 [a5 + 0xe8] = a3\n 52221: u64 [a5 + 0xe0] = a4\n 52225: a2 = sp + 0x2e0\n 52229: a3 = sp + 0x2c0\n 52233: a0 = u64 [sp + 0xc0]\n 52237: u64 [a5 + 0xd0] = a0\n 52241: a0 = u64 [sp + 0x98]\n 52245: ra = 0x8f8\n 52249: t0 = 0xa\n 52252: jump @2373\n      : @1891 [@dyn 1148] (gas: 5)\n 52255: ra = u64 [sp + 0x88]\n 52259: t1 = u64 [sp + 0x80]\n 52263: t2 = u64 [sp + 0x78]\n 52266: a3 = u64 [sp + 0x8]\n 52269: fallthrough\n      : @1892 (gas: 3)\n 52270: a0 = t2 | ra\n 52273: a0 = a0 | t1\n 52276: jump @1908 if a0 == 0\n      : @1893 (gas: 1)\n 52280: t0 = 2298, jump @2354\n      : @1894 [@dyn 1149] (gas: 3)\n 52286: ra = 0x8fc\n 52290: t0 = 0x7b8\n 52294: jump @2257\n      : @1895 [@dyn 1150] (gas: 1)\n 52297: t0 = 2302, jump @2266\n      : @1896 [@dyn 1151] (gas: 3)\n 52303: ra = 0x900\n 52307: t0 = 0x2e4\n 52311: jump @2372\n      : @1897 [@dyn 1152] (gas: 1)\n 52314: t0 = 2306, jump @2271\n      : @1898 [@dyn 1153] (gas: 1)\n 52320: ra = 2308, jump @2096\n      : @1899 [@dyn 1154] (gas: 1)\n 52326: t0 = 2310, jump @2265\n      : @1900 [@dyn 1155] (gas: 1)\n 52332: ra = 2312, jump @22\n      : @1901 [@dyn 1156] (gas: 44)\n 52339: t0 = u64 [sp + 0x1b8]\n 52343: u64 [sp + 0x98] = t0\n 52347: s1 = s1 & 0xffffffffffffffff\n 52350: u64 [sp + 0xa8] = s1\n 52354: a1 = u64 [sp + 0xa0]\n 52358: t2 = a1 & 0xffffffffffffffff\n 52361: a1 = u64 [sp + 0xb0]\n 52365: t1 = a1 & 0xffffffffffffffff\n 52368: s1 = u64 [sp + 0xb8]\n 52372: s1 = s1 & 0xffffffffffffffff\n 52375: a1 = u64 [sp + 0xd8]\n 52379: ra = a1 & 0xffffffffffffffff\n 52382: a2 = u64 [sp + 0x1b0]\n 52386: u64 [sp + 0xb8] = a2\n 52390: a1 = u64 [sp + 0x1a8]\n 52394: u64 [sp + 0xb0] = a1\n 52398: a3 = u64 [sp + 0x1a0]\n 52402: u64 [sp + 0xd8] = a3\n 52406: a5 = u64 [sp + 0xc8]\n 52410: a5 = a5 & 0xffffffffffffffff\n 52413: a4 = u64 [sp + 0x90]\n 52417: a0 = u64 [sp + 0xc0]\n 52421: a0 = a0 & a4\n 52424: a3 = u64 [sp + 0xd0]\n 52428: a3 = a3 & a4\n 52431: u64 [sp + 0x138] = a0\n 52435: u64 [sp + 0x130] = t1\n 52439: u64 [sp + 0x128] = t2\n 52443: a0 = u64 [sp + 0xa8]\n 52447: u64 [sp + 0x120] = a0\n 52451: u64 [sp + 0x158] = a3\n 52455: u64 [sp + 0x150] = a5\n 52459: u64 [sp + 0x148] = ra\n 52463: u64 [sp + 0x140] = s1\n 52467: u64 [sp + 0x178] = t0\n 52471: u64 [sp + 0x170] = a2\n 52475: u64 [sp + 0x168] = a1\n 52479: a0 = sp + 0x180\n 52483: a1 = sp + 0x160\n 52487: a2 = sp + 0x140\n 52491: a3 = sp + 0x120\n 52495: s1 = u64 [sp + 0xd8]\n 52499: u64 [sp + 0x160] = s1\n 52503: ra = 2314, jump @547\n      : @1902 [@dyn 1157] (gas: 1)\n 52510: t0 = 2316, jump @2318\n      : @1903 [@dyn 1158] (gas: 1)\n 52516: jump @1910 if a0 != 0\n      : @1904 (gas: 22)\n 52520: a0 = u64 [sp + 0x188]\n 52524: a1 = u64 [sp + 0x198]\n 52528: u64 [sp + 0xd0] = a1\n 52532: t1 = u64 [sp + 0x180]\n 52536: a3 = u64 [sp + 0x190]\n 52540: a4 = a0 ^ a2\n 52543: a5 = a0 <u a2\n 52546: t0 = u64 [sp + 0xd8]\n 52550: a1 = t1 <u t0\n 52553: a5 = a1 if a4 == 0\n 52556: a4 = a3 - s1\n 52559: t2 = a4 - a5\n 52562: a4 = a4 <u a5\n 52565: a3 = a3 <u s1\n 52568: a5 = u64 [sp + 0xd0]\n 52572: a5 = a5 - ra\n 52575: a5 = a5 - a3\n 52578: a5 = a5 - a4\n 52581: a0 = a0 - a2\n 52584: a0 = a0 - a1\n 52587: a1 = t1 - t0\n 52590: t0 = 2318, jump @2220\n      : @1905 [@dyn 1159] (gas: 1)\n 52596: jump @1910 if a0 != 0\n      : @1906 (gas: 6)\n 52599: u64 [sp + 248] = 0\n 52603: a0 = u64 [sp + 0x78]\n 52606: u64 [sp + 0xe0] = a0\n 52610: a0 = u64 [sp + 0x80]\n 52614: u64 [sp + 0xe8] = a0\n 52618: t0 = 2320, jump @2326\n      : @1907 [@dyn 1160] (gas: 12)\n 52624: u64 [sp + 0x118] = a0\n 52628: u64 [sp + 0x110] = a2\n 52632: u64 [sp + 0x108] = a3\n 52636: u64 [sp + 0x100] = a4\n 52640: a2 = sp + 0x100\n 52644: a3 = sp + 0xe0\n 52648: a0 = u64 [sp + 0x88]\n 52652: u64 [sp + 0xf0] = a0\n 52656: a0 = u64 [sp + 0xd8]\n 52660: ra = 0x912\n 52664: t0 = 0xa\n 52667: jump @2373\n      : @1908 [@dyn 1161] (gas: 1)\n 52670: t0 = 2324, jump @2364\n      : @1909 [@dyn 1162] (gas: 1)\n 52676: ret\n      : @1910 (gas: 1)\n 52678: trap\n      : @1911 [@dyn 1163] (gas: 1)\n 52679: jump @1918 if a1 != 0\n      : @1912 (gas: 3)\n 52683: a0 = sp + 0x100\n 52687: a1 = 0x40\n 52690: ra = 2328, jump @22\n      : @1913 [@dyn 1164] (gas: 1)\n 52697: t0 = 2330, jump @2298\n      : @1914 [@dyn 1165] (gas: 6)\n 52703: u64 [sp + 192] = 0x5\n 52708: a0 = sp + 0xe0\n 52712: a1 = sp + 0xc0\n 52716: a2 = sp + 0xa0\n 52720: u64 [sp + 200] = 0\n 52724: ra = 2332, jump @1602\n      : @1915 [@dyn 1166] (gas: 1)\n 52730: t0 = 2334, jump @2290\n      : @1916 [@dyn 1167] (gas: 27)\n 52736: t0 = u64 [sp + 0x50]\n 52739: a4 = a3 - t0\n 52742: a3 = a3 <u t0\n 52745: a2 = u64 [sp + 0x48]\n 52748: s1 = u64 [sp + 0x30]\n 52751: s1 = s1 - a2\n 52754: s1 = s1 - a3\n 52757: a3 = a4 <u a5\n 52760: s1 = s1 - a3\n 52763: u64 [sp + 0x30] = s1\n 52766: a4 = a4 - a5\n 52769: a0 = a0 - t1\n 52772: a0 = a0 - a1\n 52775: a1 = t2 - ra\n 52778: u64 [sp + 0x60] = a1\n 52781: u64 [sp + 0x98] = a2\n 52785: s1 = t0\n 52787: u64 [sp + 0x90] = t0\n 52791: u64 [sp + 0x88] = t1\n 52795: u64 [sp + 0x80] = ra\n 52799: u64 [sp + 0x68] = a0\n 52802: u64 [sp + 0x70] = a4\n 52805: a0 = sp + 0x80\n 52809: a1 = sp + 0x60\n 52812: a2 = u64 [sp + 0x30]\n 52815: u64 [sp + 0x78] = a2\n 52818: ra = 2336, jump @149\n      : @1917 [@dyn 1168] (gas: 1)\n 52825: jump @1932\n      : @1918 (gas: 8)\n 52828: u64 [sp + 0x18] = s1\n 52831: u64 [sp + 0x20] = a5\n 52834: u64 [sp + 0x28] = a4\n 52837: u64 [sp + 0x30] = a3\n 52840: a0 = a3 & 0xff\n 52844: s1 = 0x1f\n 52847: u64 [sp + 0x10] = a0\n 52850: jump @1935 if s1 <u a0\n      : @1919 (gas: 4)\n 52854: a0 = sp + 0x1e0\n 52858: a1 = 0x40\n 52861: s1 = 0x40\n 52864: ra = 2338, jump @22\n      : @1920 [@dyn 1169] (gas: 1)\n 52871: t0 = 2340, jump @2274\n      : @1921 [@dyn 1170] (gas: 1)\n 52877: ra = 2342, jump @149\n      : @1922 [@dyn 1171] (gas: 1)\n 52884: t0 = 2344, jump @2341\n      : @1923 [@dyn 1172] (gas: 1)\n 52890: jump @1934 if a0 != 0\n      : @1924 (gas: 8)\n 52894: u64 [sp + 408] = 0\n 52898: u64 [sp + 400] = 0\n 52902: u64 [sp + 392] = 0\n 52906: a1 = sp + 0x180\n 52910: u64 [sp + 384] = 0x20\n 52915: s1 = u64 [sp + 0x58]\n 52918: a0 = s1\n 52920: ra = 2346, jump @24\n      : @1925 [@dyn 1173] (gas: 1)\n 52927: t0 = 2348, jump @2312\n      : @1926 [@dyn 1174] (gas: 1)\n 52933: jump @1934 if a1 == 0\n      : @1927 (gas: 7)\n 52936: a0 = i32 [0x2014c]\n 52941: u64 [sp] = a0\n 52943: s1 = u64 [sp + 0x58]\n 52946: i32 a0 = s1 + 0x20\n 52949: u64 [sp + 0x8] = a0\n 52952: a1 = 0x20\n 52955: ra = 2350, jump @37\n      : @1928 [@dyn 1175] (gas: 12)\n 52962: i32 a0 = a0 + 0\n 52964: a1 = 0x20\n 52967: a2 = u64 [sp]\n 52969: ecalli 3 // 'call_data_copy'\n 52971: u64 [sp + 376] = 0\n 52975: u64 [sp + 368] = 0\n 52979: u64 [sp + 360] = 0\n 52983: a1 = sp + 0x160\n 52987: a0 = u64 [sp + 0x10]\n 52990: u64 [sp + 0x160] = a0\n 52994: a0 = s1\n 52996: ra = 2352, jump @24\n      : @1929 [@dyn 1176] (gas: 1)\n 53003: t0 = 2354, jump @2369\n      : @1930 [@dyn 1177] (gas: 1)\n 53009: ra = 2356, jump @24\n      : @1931 [@dyn 1178] (gas: 3)\n 53016: s1 = u64 [sp + 0x50]\n 53019: t0 = 0x936\n 53023: jump @2277\n      : @1932 (gas: 1)\n 53026: t0 = 2358, jump @2277\n      : @1933 [@dyn 1179] (gas: 1)\n 53032: ret\n      : @1934 (gas: 1)\n 53034: trap\n      : @1935 (gas: 1)\n 53035: t0 = 2360, jump @2346\n      : @1936 [@dyn 1180] (gas: 1)\n 53041: ra = 2362, jump @24\n      : @1937 [@dyn 1181] (gas: 2)\n 53048: a1 = i32 [0x20150]\n 53053: jump @1939 if s1 <u a1\n      : @1938 (gas: 2)\n 53056: u32 [0x20150] = 0x20\n 53062: fallthrough\n      : @1939 (gas: 8)\n 53063: a1 = 0x20160\n 53068: i32 a1 = a1 + 0\n 53070: a0 = 0x1\n 53073: a2 = 0x4\n 53076: ra = 0x93c\n 53080: ecalli 16 // 'seal_return'\n 53082: t0 = 0x93e\n 53086: jump @2258\n      : @1940 [@dyn 1182] (gas: 1)\n 53089: t0 = 2366, jump @2258\n      : @1941 [@dyn 1183] (gas: 1)\n 53095: jump @1948 if a1 != 0\n      : @1942 (gas: 3)\n 53099: a0 = sp + 0x100\n 53103: a1 = 0x40\n 53106: ra = 2368, jump @22\n      : @1943 [@dyn 1184] (gas: 1)\n 53113: t0 = 2370, jump @2298\n      : @1944 [@dyn 1185] (gas: 6)\n 53119: u64 [sp + 192] = 0x6\n 53124: a0 = sp + 0xe0\n 53128: a1 = sp + 0xc0\n 53132: a2 = sp + 0xa0\n 53136: u64 [sp + 200] = 0\n 53140: ra = 2372, jump @1602\n      : @1945 [@dyn 1186] (gas: 1)\n 53146: t0 = 2374, jump @2290\n      : @1946 [@dyn 1187] (gas: 27)\n 53152: t0 = u64 [sp + 0x50]\n 53155: a4 = a3 - t0\n 53158: a3 = a3 <u t0\n 53161: a2 = u64 [sp + 0x48]\n 53164: s1 = u64 [sp + 0x30]\n 53167: s1 = s1 - a2\n 53170: s1 = s1 - a3\n 53173: a3 = a4 <u a5\n 53176: s1 = s1 - a3\n 53179: u64 [sp + 0x30] = s1\n 53182: a4 = a4 - a5\n 53185: a0 = a0 - t1\n 53188: a0 = a0 - a1\n 53191: a1 = t2 - ra\n 53194: u64 [sp + 0x60] = a1\n 53197: u64 [sp + 0x98] = a2\n 53201: s1 = t0\n 53203: u64 [sp + 0x90] = t0\n 53207: u64 [sp + 0x88] = t1\n 53211: u64 [sp + 0x80] = ra\n 53215: u64 [sp + 0x68] = a0\n 53218: u64 [sp + 0x70] = a4\n 53221: a0 = sp + 0x80\n 53225: a1 = sp + 0x60\n 53228: a2 = u64 [sp + 0x30]\n 53231: u64 [sp + 0x78] = a2\n 53234: ra = 2376, jump @149\n      : @1947 [@dyn 1188] (gas: 1)\n 53241: jump @1962\n      : @1948 (gas: 8)\n 53244: u64 [sp + 0x18] = s1\n 53247: u64 [sp + 0x20] = a5\n 53250: u64 [sp + 0x28] = a4\n 53253: u64 [sp + 0x30] = a3\n 53256: a0 = a3 & 0xff\n 53260: s1 = 0x1f\n 53263: u64 [sp + 0x10] = a0\n 53266: jump @1965 if s1 <u a0\n      : @1949 (gas: 4)\n 53270: a0 = sp + 0x1e0\n 53274: a1 = 0x40\n 53277: s1 = 0x40\n 53280: ra = 2378, jump @22\n      : @1950 [@dyn 1189] (gas: 1)\n 53287: t0 = 2380, jump @2274\n      : @1951 [@dyn 1190] (gas: 1)\n 53293: ra = 2382, jump @149\n      : @1952 [@dyn 1191] (gas: 1)\n 53300: t0 = 2384, jump @2341\n      : @1953 [@dyn 1192] (gas: 1)\n 53306: jump @1964 if a0 != 0\n      : @1954 (gas: 8)\n 53310: u64 [sp + 408] = 0\n 53314: u64 [sp + 400] = 0\n 53318: u64 [sp + 392] = 0\n 53322: a1 = sp + 0x180\n 53326: u64 [sp + 384] = 0x20\n 53331: s1 = u64 [sp + 0x58]\n 53334: a0 = s1\n 53336: ra = 2386, jump @24\n      : @1955 [@dyn 1193] (gas: 1)\n 53343: t0 = 2388, jump @2312\n      : @1956 [@dyn 1194] (gas: 1)\n 53349: jump @1964 if a1 == 0\n      : @1957 (gas: 7)\n 53352: a0 = i32 [0x2014c]\n 53357: u64 [sp] = a0\n 53359: s1 = u64 [sp + 0x58]\n 53362: i32 a0 = s1 + 0x20\n 53365: u64 [sp + 0x8] = a0\n 53368: a1 = 0x20\n 53371: ra = 2390, jump @37\n      : @1958 [@dyn 1195] (gas: 12)\n 53378: i32 a0 = a0 + 0\n 53380: a1 = 0x20\n 53383: a2 = u64 [sp]\n 53385: ecalli 3 // 'call_data_copy'\n 53387: u64 [sp + 376] = 0\n 53391: u64 [sp + 368] = 0\n 53395: u64 [sp + 360] = 0\n 53399: a1 = sp + 0x160\n 53403: a0 = u64 [sp + 0x10]\n 53406: u64 [sp + 0x160] = a0\n 53410: a0 = s1\n 53412: ra = 2392, jump @24\n      : @1959 [@dyn 1196] (gas: 1)\n 53419: t0 = 2394, jump @2369\n      : @1960 [@dyn 1197] (gas: 1)\n 53425: ra = 2396, jump @24\n      : @1961 [@dyn 1198] (gas: 3)\n 53432: s1 = u64 [sp + 0x50]\n 53435: t0 = 0x95e\n 53439: jump @2277\n      : @1962 (gas: 1)\n 53442: t0 = 2398, jump @2277\n      : @1963 [@dyn 1199] (gas: 1)\n 53448: ret\n      : @1964 (gas: 1)\n 53450: trap\n      : @1965 (gas: 1)\n 53451: t0 = 2400, jump @2346\n      : @1966 [@dyn 1200] (gas: 1)\n 53457: ra = 2402, jump @24\n      : @1967 [@dyn 1201] (gas: 2)\n 53464: a1 = i32 [0x20150]\n 53469: jump @1969 if s1 <u a1\n      : @1968 (gas: 2)\n 53472: u32 [0x20150] = 0x20\n 53478: fallthrough\n      : @1969 (gas: 7)\n 53479: a1 = 0x20160\n 53484: i32 a1 = a1 + 0\n 53486: a0 = 0x1\n 53489: a2 = 0x4\n 53492: ra = 0x964\n 53496: ecalli 16 // 'seal_return'\n 53498: fallthrough\n      : @1970 [@dyn 1202] (gas: 9)\n 53499: sp = sp + 0xfffffffffffffe00\n 53503: u64 [sp + 0x1f8] = ra\n 53507: u64 [sp + 0x1f0] = s0\n 53511: u64 [sp + 0x1e8] = s1\n 53515: s0 = sp + 0x200\n 53519: sp = sp & 0xffffffffffffffe0\n 53522: s1 = sp\n 53524: u64 [s1 + 0x28] = a0\n 53527: ra = 2406, jump @15\n      : @1971 [@dyn 1203] (gas: 17)\n 53534: a0 = 0x30180\n 53539: a1 = u64 [0x301c8]\n 53544: u64 [s1 + 0x58] = a1\n 53547: a1 = u64 [0x301c0]\n 53552: u64 [s1 + 0x50] = a1\n 53555: u64 [s1 + 0x38] = a0\n 53558: a0 = u32 [0x301d0]\n 53563: u64 [s1 + 0x48] = a0\n 53566: a0 = 0x30160\n 53571: u64 [s1 + 0x30] = a0\n 53574: i32 a0 = a0 + 0\n 53576: u64 [s1 + 0x20] = a0\n 53579: ra = 0x968\n 53583: ecalli 0 // 'address'\n 53584: a2 = u64 [s1 + 0x30]\n 53587: t0 = 0x96a\n 53591: jump @2338\n      : @1972 [@dyn 1204] (gas: 2)\n 53594: a2 = u64 [s1 + 0x30]\n 53597: t0 = 2410, jump @2338\n      : @1973 [@dyn 1205] (gas: 15)\n 53603: a3 = a3 | a4\n 53606: a0 = a0 << 0x20\n 53609: a2 = reverse a2\n 53611: a2 = a2 >> 0x20\n 53614: a0 = a0 | a2\n 53617: a1 = a1 >> 0x20\n 53620: a2 = u64 [s1 + 0x48]\n 53623: a1 = a1 ^ a2\n 53626: a2 = u64 [s1 + 0x50]\n 53629: a0 = a0 ^ a2\n 53632: a0 = a0 | a1\n 53635: a1 = u64 [s1 + 0x58]\n 53638: a1 = a1 ^ a3\n 53641: a0 = a0 | a1\n 53644: jump @1979 if a0 != 0\n      : @1974 (gas: 1)\n 53647: ra = 2412, jump @15\n      : @1975 [@dyn 1206] (gas: 12)\n 53654: a0 = u64 [s1 + 0x38]\n 53657: a1 = u64 [a0 + 0x20]\n 53660: u64 [s1 + 0x58] = a1\n 53663: a1 = u64 [a0 + 0x30]\n 53666: u64 [s1 + 0x50] = a1\n 53669: a1 = u64 [a0 + 0x28]\n 53672: u64 [s1 + 0x48] = a1\n 53675: a0 = u64 [a0 + 0x38]\n 53678: u64 [s1 + 0x40] = a0\n 53681: i32 a0 = s1 + 0x1a0\n 53685: ecalli 7 // 'chain_id'\n 53687: fallthrough\n      : @1976 (gas: 17)\n 53688: a4 = s1 + 0x100\n 53692: a0 = u64 [a4 + 0xb8]\n 53696: a1 = u64 [a4 + 0xa8]\n 53700: a2 = u64 [a4 + 0xa0]\n 53704: a3 = u64 [a4 + 0xb0]\n 53708: a4 = u64 [s1 + 0x40]\n 53711: a0 = a0 ^ a4\n 53714: a4 = u64 [s1 + 0x48]\n 53717: a1 = a1 ^ a4\n 53720: a0 = a0 | a1\n 53723: a1 = u64 [s1 + 0x50]\n 53726: a1 = a1 ^ a3\n 53729: a3 = u64 [s1 + 0x58]\n 53732: a2 = a2 ^ a3\n 53735: a1 = a1 | a2\n 53738: a0 = a0 | a1\n 53741: jump @1979 if a0 != 0\n      : @1977 (gas: 1)\n 53744: ra = 2414, jump @15\n      : @1978 [@dyn 1207] (gas: 6)\n 53751: a3 = u64 [s1 + 0x38]\n 53754: a0 = u64 [a3 + 0x18]\n 53757: a1 = u64 [a3 + 0x10]\n 53760: a2 = u64 [a3 + 0x8]\n 53763: a3 = u64 [a3]\n 53765: jump @2007\n      : @1979 (gas: 3)\n 53768: a0 = s1 + 0x180\n 53772: a1 = 0x40\n 53775: ra = 2416, jump @22\n      : @1980 [@dyn 1208] (gas: 25)\n 53782: a1 = s1 + 0x100\n 53786: a0 = u64 [a1 + 0x80]\n 53790: a3 = u64 [a1 + 0x98]\n 53794: a2 = u64 [a1 + 0x88]\n 53798: a5 = u64 [a1 + 0x90]\n 53802: a4 = a0 + 0x20\n 53805: u64 [s1 + 0x58] = a0\n 53808: a0 = a4 <u a0\n 53811: a1 = a2 + a0\n 53814: u64 [s1 + 0x50] = a2\n 53817: a2 = a1 <u a2\n 53820: a2 = a0 if a0 == 0\n 53823: a2 = a2 + a5\n 53826: u64 [s1 + 0x40] = a5\n 53829: a0 = a2 <u a5\n 53832: u64 [s1 + 0x48] = a3\n 53835: a0 = a0 + a3\n 53838: a3 = a4 | a2\n 53841: a0 = a0 | a1\n 53844: a3 = a3 | a0\n 53847: a3 = a3 >> 0x20\n 53850: a0 = a0 | a2\n 53853: a0 = a0 << 0x20\n 53856: a0 = a0 | a3\n 53859: jump @2008 if a0 != 0\n      : @1981 (gas: 13)\n 53863: a0 = u64 [0x20118]\n 53868: a3 = s1 + 0x100\n 53872: u64 [a3 + 0x78] = a0\n 53875: a0 = u64 [0x20120]\n 53880: a1 = u64 [0x20128]\n 53885: a2 = u64 [0x20130]\n 53890: u64 [a3 + 0x70] = a0\n 53893: u64 [a3 + 0x68] = a1\n 53896: a1 = s1 + 0x160\n 53900: u64 [a3 + 0x60] = a2\n 53903: u64 [s1 + 0x18] = a4\n 53906: a0 = a4\n 53908: ra = 2418, jump @24\n      : @1982 [@dyn 1209] (gas: 1)\n 53915: ra = 2420, jump @15\n      : @1983 [@dyn 1210] (gas: 3)\n 53922: a1 = u64 [s1 + 0x58]\n 53925: a0 = a1 + 0x40\n 53928: t0 = 2422, jump @2209\n      : @1984 [@dyn 1211] (gas: 1)\n 53934: jump @2008 if a1 != 0\n      : @1985 (gas: 12)\n 53938: a4 = u64 [s1 + 0x38]\n 53941: a2 = u64 [a4 + 0x60]\n 53944: a1 = u64 [a4 + 0x68]\n 53947: a3 = u64 [a4 + 0x70]\n 53950: a4 = u64 [a4 + 0x78]\n 53953: a5 = s1 + 0x100\n 53957: u64 [a5 + 0x58] = a4\n 53960: u64 [a5 + 0x50] = a3\n 53963: u64 [a5 + 0x48] = a1\n 53966: a1 = s1 + 0x140\n 53970: u64 [a5 + 0x40] = a2\n 53973: ra = 2424, jump @24\n      : @1986 [@dyn 1212] (gas: 1)\n 53980: ra = 2426, jump @15\n      : @1987 [@dyn 1213] (gas: 3)\n 53987: a1 = u64 [s1 + 0x58]\n 53990: a0 = a1 + 0x60\n 53993: t0 = 2428, jump @2209\n      : @1988 [@dyn 1214] (gas: 1)\n 53999: jump @2008 if a1 != 0\n      : @1989 (gas: 12)\n 54003: a4 = u64 [s1 + 0x38]\n 54006: a2 = u64 [a4 + 0x80]\n 54010: a1 = u64 [a4 + 0x88]\n 54014: a3 = u64 [a4 + 0x90]\n 54018: a4 = u64 [a4 + 0x98]\n 54022: a5 = s1 + 0x100\n 54026: u64 [a5 + 0x38] = a4\n 54029: u64 [a5 + 0x30] = a3\n 54032: u64 [a5 + 0x28] = a1\n 54035: a1 = s1 + 0x120\n 54039: u64 [a5 + 0x20] = a2\n 54042: ra = 2430, jump @24\n      : @1990 [@dyn 1215] (gas: 4)\n 54049: i32 a0 = s1 + 0x1c0\n 54053: ra = 0x980\n 54057: ecalli 7 // 'chain_id'\n 54059: fallthrough\n      : @1991 [@dyn 1216] (gas: 3)\n 54060: a1 = u64 [s1 + 0x58]\n 54063: a0 = a1 + 0x80\n 54067: t0 = 2434, jump @2209\n      : @1992 [@dyn 1217] (gas: 1)\n 54073: jump @2008 if a1 != 0\n      : @1993 (gas: 11)\n 54077: a5 = s1 + 0x100\n 54081: a2 = u64 [a5 + 0xc0]\n 54085: a1 = u64 [a5 + 0xc8]\n 54089: a3 = u64 [a5 + 0xd0]\n 54093: a4 = u64 [a5 + 0xd8]\n 54097: u64 [a5 + 0x18] = a4\n 54100: u64 [a5 + 0x10] = a3\n 54103: u64 [a5 + 0x8] = a1\n 54106: a1 = s1 + 0x100\n 54110: u64 [a5] = a2\n 54112: ra = 2436, jump @24\n      : @1994 [@dyn 1218] (gas: 4)\n 54119: a0 = u64 [s1 + 0x20]\n 54122: ra = 0x986\n 54126: ecalli 0 // 'address'\n 54127: fallthrough\n      : @1995 [@dyn 1219] (gas: 3)\n 54128: a1 = u64 [s1 + 0x58]\n 54131: a0 = a1 + 0xa0\n 54135: t0 = 2440, jump @2209\n      : @1996 [@dyn 1220] (gas: 1)\n 54141: jump @2008 if a1 != 0\n      : @1997 (gas: 2)\n 54145: a3 = u64 [s1 + 0x30]\n 54148: t0 = 2442, jump @2273\n      : @1998 [@dyn 1221] (gas: 6)\n 54154: u64 [s1 + 248] = 0\n 54158: u64 [s1 + 0xf0] = a3\n 54162: u64 [s1 + 0xe8] = a1\n 54166: a1 = s1 + 0xe0\n 54170: u64 [s1 + 0xe0] = a2\n 54174: ra = 2444, jump @24\n      : @1999 [@dyn 1222] (gas: 12)\n 54181: a0 = u64 [s1 + 0x58]\n 54184: a3 = u64 [s1 + 0x40]\n 54187: a0 = a0 | a3\n 54190: a1 = u64 [s1 + 0x50]\n 54193: a2 = u64 [s1 + 0x48]\n 54196: a1 = a1 | a2\n 54199: a0 = a0 | a1\n 54202: a0 = a0 >> 0x20\n 54205: a1 = a1 | a3\n 54208: a1 = a1 << 0x20\n 54211: a0 = a0 | a1\n 54214: jump @2008 if a0 != 0\n      : @2000 (gas: 7)\n 54218: u64 [s1 + 216] = 0\n 54222: u64 [s1 + 208] = 0\n 54226: u64 [s1 + 200] = 0\n 54230: a1 = s1 + 0xc0\n 54234: u64 [s1 + 192] = 0xa0\n 54240: a0 = u64 [s1 + 0x58]\n 54243: ra = 2446, jump @24\n      : @2001 [@dyn 1223] (gas: 15)\n 54250: u64 [s1 + 152] = 0\n 54254: u64 [s1 + 144] = 0\n 54258: u64 [s1 + 136] = 0\n 54262: u64 [s1 + 128] = 0xc0\n 54268: a0 = u64 [s1 + 0x48]\n 54271: u64 [s1 + 0xb8] = a0\n 54275: a0 = u64 [s1 + 0x40]\n 54278: u64 [s1 + 0xb0] = a0\n 54282: a0 = u64 [s1 + 0x50]\n 54285: u64 [s1 + 0xa8] = a0\n 54289: a0 = s1 + 0xa0\n 54293: a1 = s1 + 0x80\n 54297: a2 = u64 [s1 + 0x58]\n 54300: u64 [s1 + 0xa0] = a2\n 54304: ra = 2448, jump @149\n      : @2002 [@dyn 1224] (gas: 3)\n 54311: a0 = s1 + 0x60\n 54314: a1 = u64 [s1 + 0x58]\n 54317: ra = 2450, jump @22\n      : @2003 [@dyn 1225] (gas: 5)\n 54324: a0 = u64 [s1 + 0x78]\n 54327: a3 = u64 [s1 + 0x70]\n 54330: a2 = u64 [s1 + 0x68]\n 54333: a1 = u64 [s1 + 0x60]\n 54336: t0 = 2452, jump @2333\n      : @2004 [@dyn 1226] (gas: 1)\n 54342: jump @2008 if a0 != 0\n      : @2005 (gas: 3)\n 54345: a0 = u64 [s1 + 0x18]\n 54348: u64 [s1 + 0x58] = a1\n 54351: ra = 2454, jump @37\n      : @2006 [@dyn 1227] (gas: 18)\n 54358: a1 = sp + 0xffffffffffffffe0\n 54361: a2 = a1 & 0xffffffffffffffe0\n 54364: u64 [s1 + 0x50] = a2\n 54367: sp = a2\n 54369: i32 a0 = a0 + 0\n 54371: a1 = i32 [s1 + 0x58]\n 54374: i32 a2 = a2 + 0\n 54376: ecalli 11 // 'hash_keccak_256'\n 54378: a3 = u64 [s1 + 0x50]\n 54381: a0 = u64 [a3]\n 54383: a1 = u64 [a3 + 0x8]\n 54386: a2 = u64 [a3 + 0x10]\n 54389: a3 = u64 [a3 + 0x18]\n 54392: a0 = reverse a0\n 54394: a1 = reverse a1\n 54396: a2 = reverse a2\n 54398: a3 = reverse a3\n 54400: fallthrough\n      : @2007 (gas: 11)\n 54401: a4 = u64 [s1 + 0x28]\n 54404: u64 [a4] = a3\n 54406: u64 [a4 + 0x8] = a2\n 54409: u64 [a4 + 0x10] = a1\n 54412: u64 [a4 + 0x18] = a0\n 54415: sp = s0 + 0xfffffffffffffe00\n 54419: ra = u64 [sp + 0x1f8]\n 54423: s0 = u64 [sp + 0x1f0]\n 54427: s1 = u64 [sp + 0x1e8]\n 54431: sp = sp + 0x200\n 54435: ret\n      : @2008 (gas: 1)\n 54437: trap\n      : @2009 (gas: 26)\n 54438: sp = sp + 0xfffffffffffffde0\n 54442: a5 = sp + 0x200\n 54446: u64 [a5 + 0x18] = ra\n 54449: u64 [a5 + 0x10] = s0\n 54452: u64 [a5 + 0x8] = s1\n 54455: s0 = sp + 0x220\n 54459: sp = sp & 0xffffffffffffffe0\n 54462: t1 = u64 [a4 + 0x10]\n 54465: t0 = u64 [a4]\n 54467: ra = u64 [a4 + 0x8]\n 54470: a5 = u64 [0x20138]\n 54475: s1 = u64 [0x20140]\n 54480: t2 = u64 [a4 + 0x18]\n 54483: a4 = ra ^ a5\n 54486: a5 = ra <u a5\n 54489: u64 [sp + 0x90] = t0\n 54493: s1 = t0 <u s1\n 54496: s1 = a5 if a4 != 0\n 54499: a4 = 0x7fffffffffffffff\n 54509: a5 = t2 ^ a4\n 54512: t0 = t2 <u a4\n 54515: a4 = t1 <u 0xffffffffffffffff\n 54518: a4 = t0 if a5 != 0\n 54521: a5 = a5 | ~t1\n 54524: a4 = s1 if a5 == 0\n 54527: jump @2011 if a4 != 0\n      : @2010 (gas: 7)\n 54530: s1 = 0\n 54532: a1 = 0\n 54534: t0 = 0\n 54536: a2 = 0\n 54538: a5 = 0x3\n 54541: a3 = u64 [sp + 0x90]\n 54545: jump @2028\n      : @2011 (gas: 25)\n 54548: u64 [sp + 0x20] = ra\n 54551: u64 [sp + 0x28] = t2\n 54554: u64 [sp + 0x30] = t1\n 54557: u64 [sp + 0x18] = a0\n 54560: a0 = u64 [a3 + 0x18]\n 54563: u64 [sp + 0x50] = a0\n 54566: a0 = u64 [a3 + 0x10]\n 54569: u64 [sp + 0x48] = a0\n 54572: a0 = u64 [a3 + 0x8]\n 54575: u64 [sp + 0x40] = a0\n 54578: a0 = u64 [a3]\n 54580: u64 [sp + 0x38] = a0\n 54583: a0 = u64 [a2]\n 54585: u64 [sp + 0x58] = a0\n 54588: a0 = u64 [a1 + 0x18]\n 54591: u64 [sp + 0x80] = a0\n 54595: a0 = u64 [a1 + 0x10]\n 54598: u64 [sp + 0x78] = a0\n 54601: a0 = u64 [a1 + 0x8]\n 54604: u64 [sp + 0x68] = a0\n 54607: a0 = u64 [a1]\n 54609: u64 [sp + 0x60] = a0\n 54612: a0 = sp + 0x180\n 54616: a1 = 0x40\n 54619: ra = 2456, jump @22\n      : @2012 [@dyn 1228] (gas: 15)\n 54626: a2 = u64 [sp + 0x198]\n 54630: s1 = u64 [sp + 0x190]\n 54634: a0 = u64 [sp + 0x188]\n 54638: a1 = u64 [sp + 0x180]\n 54642: u64 [sp + 0x88] = a0\n 54646: u64 [sp + 0x70] = a2\n 54649: a0 = a0 | a2\n 54652: u64 [sp + 0x98] = a1\n 54656: a1 = a1 | s1\n 54659: a1 = a1 | a0\n 54662: a1 = a1 >> 0x20\n 54665: a0 = a0 | s1\n 54668: a0 = a0 << 0x20\n 54671: a0 = a0 | a1\n 54674: jump @2038 if a0 != 0\n      : @2013 (gas: 11)\n 54678: a0 = u64 [sp + 0x60]\n 54681: u64 [sp + 0x160] = a0\n 54685: a0 = u64 [sp + 0x68]\n 54688: u64 [sp + 0x168] = a0\n 54692: a0 = u64 [sp + 0x78]\n 54695: u64 [sp + 0x170] = a0\n 54699: a1 = sp + 0x160\n 54703: a0 = u64 [sp + 0x80]\n 54707: u64 [sp + 0x178] = a0\n 54711: a0 = u64 [sp + 0x98]\n 54715: ra = 2458, jump @24\n      : @2014 [@dyn 1229] (gas: 12)\n 54722: a2 = u64 [sp + 0x70]\n 54725: a2 = a2 | s1\n 54728: a0 = 0x100000000\n 54738: u64 [sp + 0x78] = a0\n 54741: a0 = 0xffffffe0\n 54751: a1 = u64 [sp + 0x98]\n 54755: a0 = a1 <u a0\n 54758: a1 = u64 [sp + 0x88]\n 54762: a0 = 0 if a1 != 0\n 54764: u64 [sp + 0x80] = a2\n 54768: a0 = 0 if a2 != 0\n 54770: jump @2038 if a0 == 0\n      : @2015 (gas: 9)\n 54774: a1 = u8 [sp + 0x58]\n 54777: s1 = u64 [sp + 0x98]\n 54781: i32 a0 = s1 + 0x20\n 54784: u64 [sp + 344] = 0\n 54788: u64 [sp + 336] = 0\n 54792: u64 [sp + 0x140] = a1\n 54796: a1 = sp + 0x140\n 54800: u64 [sp + 328] = 0\n 54804: ra = 2460, jump @24\n      : @2016 [@dyn 1230] (gas: 8)\n 54811: a0 = u64 [sp + 0x78]\n 54814: a0 = a0 + 0xffffffffffffffc0\n 54817: a0 = s1 <u a0\n 54820: a1 = u64 [sp + 0x88]\n 54824: a0 = 0 if a1 != 0\n 54826: a1 = u64 [sp + 0x80]\n 54830: a0 = 0 if a1 != 0\n 54832: jump @2038 if a0 == 0\n      : @2017 (gas: 12)\n 54836: s1 = u64 [sp + 0x98]\n 54840: i32 a0 = s1 + 0x40\n 54843: a1 = u64 [sp + 0x38]\n 54846: u64 [sp + 0x120] = a1\n 54850: a1 = u64 [sp + 0x40]\n 54853: u64 [sp + 0x128] = a1\n 54857: a1 = u64 [sp + 0x48]\n 54860: u64 [sp + 0x130] = a1\n 54864: a1 = sp + 0x120\n 54868: a2 = u64 [sp + 0x50]\n 54871: u64 [sp + 0x138] = a2\n 54875: ra = 2462, jump @24\n      : @2018 [@dyn 1231] (gas: 8)\n 54882: a0 = 0xffffffa0\n 54892: a0 = s1 <u a0\n 54895: a1 = u64 [sp + 0x88]\n 54899: a0 = 0 if a1 != 0\n 54901: a1 = u64 [sp + 0x80]\n 54905: a0 = 0 if a1 != 0\n 54907: a1 = u64 [sp + 0x90]\n 54911: jump @2038 if a0 == 0\n      : @2019 (gas: 11)\n 54915: a0 = u64 [sp + 0x98]\n 54919: i32 a0 = a0 + 0x60\n 54922: u64 [sp + 0x100] = a1\n 54926: a1 = u64 [sp + 0x20]\n 54929: u64 [sp + 0x108] = a1\n 54933: a1 = u64 [sp + 0x30]\n 54936: u64 [sp + 0x110] = a1\n 54940: a1 = sp + 0x100\n 54944: a2 = u64 [sp + 0x28]\n 54947: u64 [sp + 0x118] = a2\n 54951: ra = 2464, jump @24\n      : @2020 [@dyn 1232] (gas: 7)\n 54958: u64 [sp + 248] = 0\n 54962: u64 [sp + 240] = 0\n 54966: u64 [sp + 232] = 0\n 54970: a1 = sp + 0xe0\n 54974: u64 [sp + 224] = 0\n 54978: a0 = 0\n 54980: ra = 2466, jump @24\n      : @2021 [@dyn 1233] (gas: 12)\n 54987: ecalli 13 // 'ref_time_left'\n 54989: s1 = 0x30160\n 54994: u64 [0x30168] = 0\n 54999: u64 [0x30160] = 0\n 55004: u32 [0x30170] = 0x1000000\n 55013: u64 [sp + 440] = 0\n 55017: u64 [sp + 432] = 0\n 55021: u64 [sp + 424] = 0\n 55025: u64 [sp + 416] = 0\n 55029: a1 = 0x80\n 55033: a0 = u64 [sp + 0x98]\n 55037: ra = 2468, jump @37\n      : @2022 [@dyn 1234] (gas: 3)\n 55044: a3 = i32 [0x20150]\n 55049: a1 = a0\n 55051: jump @2024 if a3 >u 31\n      : @2023 (gas: 2)\n 55055: u32 [0x20150] = 0x20\n 55061: fallthrough\n      : @2024 (gas: 29)\n 55062: u32 [sp + 448] = 0x20\n 55067: u64 [sp + 504] = 0\n 55071: u64 [sp + 496] = 0\n 55075: u64 [sp + 488] = 0\n 55079: u64 [sp + 480] = 0\n 55083: s1 = s1 << 0x20\n 55086: s1 = s1 >> 0x20\n 55089: a0 = 0x1800000000\n 55099: a0 = a0 | s1\n 55102: a2 = sp + 0x1a0\n 55106: a2 = a2 << 0x20\n 55109: a2 = a2 >> 0x20\n 55112: a3 = sp + 0x1e0\n 55116: a3 = a3 << 0x20\n 55119: a3 = a3 | a2\n 55122: a1 = a1 << 0x20\n 55125: a1 = a1 >> 0x20\n 55128: a2 = 0x20160\n 55133: a4 = 0x8000000000\n 55143: a4 = a4 | a1\n 55146: a2 = a2 << 0x20\n 55149: a2 = a2 >> 0x20\n 55152: a1 = sp + 0x1c0\n 55156: a1 = a1 << 0x20\n 55159: a5 = a1 | a2\n 55162: a1 = 0xffffffffffffffff\n 55165: a2 = 0xffffffffffffffff\n 55168: ecalli 2 // 'call'\n 55170: fallthrough\n      : @2025 (gas: 1)\n 55171: jump @2029 if a0 != 0\n      : @2026 (gas: 3)\n 55175: a0 = sp + 0xa0\n 55179: a1 = 0\n 55181: ra = 2470, jump @22\n      : @2027 [@dyn 1235] (gas: 20)\n 55188: a2 = 0\n 55190: ra = 0\n 55192: t1 = 0\n 55194: t2 = 0\n 55196: a1 = u64 [sp + 0xb0]\n 55200: s1 = u64 [sp + 0xa8]\n 55204: a4 = u64 [sp + 0xa0]\n 55208: t0 = u64 [sp + 0xb8]\n 55212: a5 = a1 << 0x20\n 55215: a5 = a5 >> 0x20\n 55218: a3 = a4 | s1\n 55221: a3 = a3 | a5\n 55224: t0 = 0 if a3 == 0\n 55226: a1 = 0 if a3 == 0\n 55228: s1 = 0 if a3 == 0\n 55230: a4 = 0 if a3 == 0\n 55232: a5 = a3 <u 0x1\n 55235: a3 = 0\n 55237: a0 = u64 [sp + 0x18]\n 55240: fallthrough\n      : @2028 (gas: 19)\n 55241: u64 [a0 + 0x40] = a3\n 55244: u64 [a0 + 0x20] = a5\n 55247: u64 [a0] = a4\n 55249: u64 [a0 + 0x48] = ra\n 55252: u64 [a0 + 40] = 0\n 55255: u64 [a0 + 0x8] = s1\n 55258: u64 [a0 + 0x50] = t1\n 55261: u64 [a0 + 48] = 0\n 55264: u64 [a0 + 0x10] = a1\n 55267: u64 [a0 + 0x58] = t2\n 55270: u64 [a0 + 56] = 0\n 55273: u64 [a0 + 0x18] = t0\n 55276: sp = s0 + 0xfffffffffffffde0\n 55280: a0 = sp + 0x200\n 55284: ra = u64 [a0 + 0x18]\n 55287: s0 = u64 [a0 + 0x10]\n 55290: s1 = u64 [a0 + 0x8]\n 55293: sp = sp + 0x220\n 55297: ret\n      : @2029 (gas: 3)\n 55299: a0 = sp + 0xc0\n 55303: a1 = 0x40\n 55306: ra = 2472, jump @22\n      : @2030 [@dyn 1236] (gas: 9)\n 55313: a0 = u64 [sp + 0xd8]\n 55317: u64 [sp + 0x98] = a0\n 55321: a0 = u64 [sp + 0xd0]\n 55325: u64 [sp + 0x90] = a0\n 55329: a0 = u64 [sp + 0xc8]\n 55333: u64 [sp + 0x88] = a0\n 55337: s1 = u64 [sp + 0xc0]\n 55341: ecalli 15 // 'return_data_size'\n 55343: fallthrough\n      : @2031 (gas: 12)\n 55344: a1 = u64 [sp + 0x98]\n 55348: a2 = u64 [sp + 0x88]\n 55352: a1 = a1 | a2\n 55355: u64 [sp + 0x98] = s1\n 55359: a3 = u64 [sp + 0x90]\n 55363: a2 = s1 | a3\n 55366: a2 = a2 | a1\n 55369: a2 = a2 >> 0x20\n 55372: a1 = a1 | a3\n 55375: a1 = a1 << 0x20\n 55378: a1 = a1 | a2\n 55381: jump @2038 if a1 != 0\n      : @2032 (gas: 3)\n 55384: s1 = a0\n 55386: a0 = a0 >> 0x20\n 55389: jump @2038 if a0 != 0\n      : @2033 (gas: 5)\n 55392: i32 a0 = s1 + 0\n 55394: u64 [sp + 0x90] = a0\n 55398: a0 = u64 [sp + 0x98]\n 55402: a1 = s1\n 55404: ra = 2474, jump @37\n      : @2034 [@dyn 1237] (gas: 6)\n 55411: u32 [sp + 0x200] = s1\n 55415: i32 a0 = a0 + 0\n 55417: i32 a1 = sp + 0x200\n 55421: a2 = 0\n 55423: ecalli 14 // 'return_data_copy'\n 55425: fallthrough\n      : @2035 (gas: 3)\n 55426: a0 = i32 [sp + 0x200]\n 55430: a1 = u64 [sp + 0x90]\n 55434: jump @2038 if a0 <u a1\n      : @2036 (gas: 2)\n 55437: ecalli 15 // 'return_data_size'\n 55439: fallthrough\n      : @2037 (gas: 3)\n 55440: s1 = a0\n 55442: a0 = a0 >> 0x20\n 55445: jump @2039 if a0 == 0\n      : @2038 (gas: 1)\n 55448: trap\n      : @2039 (gas: 3)\n 55449: a0 = u64 [sp + 0x98]\n 55453: a1 = s1\n 55455: ra = 2476, jump @37\n      : @2040 [@dyn 1238] (gas: 6)\n 55462: i32 a1 = a0 + 0\n 55464: i32 a2 = s1 + 0\n 55466: a0 = 0x1\n 55469: ra = 0x9ae\n 55473: ecalli 16 // 'seal_return'\n 55475: fallthrough\n      : @2041 [@dyn 1239] (gas: 14)\n 55476: a1 = u64 [a0 + 0x18]\n 55479: a2 = u64 [a0 + 0x10]\n 55482: a3 = u64 [a0]\n 55484: a0 = u64 [a0 + 0x8]\n 55487: a4 = a1 >u 0\n 55489: a5 = a2 >u 0\n 55491: a5 = a4 if a1 != 0\n 55494: a4 = a0 >u 0\n 55496: a3 = a3 <u 0x4\n 55499: a3 = a3 ^ 0x1\n 55502: a3 = a4 if a0 != 0\n 55505: a1 = a1 | a2\n 55508: a3 = a5 if a1 != 0\n 55511: jump @2043 if a3 != 0\n      : @2042 (gas: 1)\n 55514: ret\n      : @2043 (gas: 1)\n 55516: t0 = 2480, jump @2232\n      : @2044 [@dyn 1240] (gas: 1)\n 55522: ra = 2482, jump @24\n      : @2045 [@dyn 1241] (gas: 7)\n 55529: u64 [sp + 24] = 0\n 55532: u64 [sp + 16] = 0\n 55535: u64 [sp + 0] = 0x21\n 55538: a0 = 0x4\n 55541: a1 = sp\n 55543: u64 [sp + 8] = 0\n 55546: ra = 2484, jump @24\n      : @2046 [@dyn 1242] (gas: 2)\n 55553: a1 = i32 [0x20150]\n 55558: jump @2048 if a1 >u 63\n      : @2047 (gas: 2)\n 55562: u32 [0x20150] = 0x40\n 55568: fallthrough\n      : @2048 (gas: 7)\n 55569: a1 = 0x20160\n 55574: i32 a1 = a1 + 0\n 55576: a0 = 0x1\n 55579: a2 = 0x24\n 55582: ra = 0x9b6\n 55586: ecalli 16 // 'seal_return'\n 55588: fallthrough\n      : @2049 [@dyn 1243] (gas: 27)\n 55589: sp = sp + 0xfffffffffffffe70\n 55593: u64 [sp + 0x188] = ra\n 55597: u64 [sp + 0x180] = s0\n 55601: u64 [sp + 0x178] = s1\n 55605: s0 = sp + 0x190\n 55609: sp = sp & 0xfffffffffffffff0\n 55612: a2 = u64 [a1 + 0x18]\n 55615: u64 [sp + 0x8] = a2\n 55618: a2 = u64 [a1 + 0x10]\n 55621: u64 [sp + 0x10] = a2\n 55624: a2 = u64 [a1 + 0x8]\n 55627: u64 [sp + 0x18] = a2\n 55630: a1 = u64 [a1]\n 55632: u64 [sp + 0x20] = a1\n 55635: a1 = u64 [a0]\n 55637: u64 [sp + 0x48] = a1\n 55640: a3 = u64 [a0 + 0x8]\n 55643: u64 [sp + 0x38] = a3\n 55646: a2 = u64 [a0 + 0x10]\n 55649: u64 [sp + 0x40] = a2\n 55652: s1 = u64 [a0 + 0x18]\n 55655: u64 [sp + 0x168] = s1\n 55659: u64 [sp + 0x160] = a2\n 55663: u64 [sp + 0x158] = a3\n 55667: a0 = sp + 0x150\n 55671: u64 [sp + 0x150] = a1\n 55675: ra = 2488, jump @2041\n      : @2050 [@dyn 1244] (gas: 9)\n 55681: u64 [sp + 0x30] = s1\n 55684: a1 = u64 [sp + 0x38]\n 55687: a1 = a1 | s1\n 55690: a2 = u64 [sp + 0x40]\n 55693: a0 = u64 [sp + 0x48]\n 55696: a0 = a0 | a2\n 55699: u64 [sp + 0x28] = a1\n 55702: a0 = a0 | a1\n 55705: jump @2057 if a0 == 0\n      : @2051 (gas: 10)\n 55709: a0 = u64 [sp + 0x48]\n 55712: u64 [sp + 0x130] = a0\n 55716: a0 = u64 [sp + 0x38]\n 55719: u64 [sp + 0x138] = a0\n 55723: s1 = u64 [sp + 0x40]\n 55726: u64 [sp + 0x140] = s1\n 55730: a0 = sp + 0x130\n 55734: a1 = u64 [sp + 0x30]\n 55737: u64 [sp + 0x148] = a1\n 55741: ra = 2490, jump @2041\n      : @2052 [@dyn 1245] (gas: 6)\n 55747: a0 = u64 [sp + 0x48]\n 55750: a0 = a0 ^ 0x1\n 55753: a0 = a0 | s1\n 55756: a1 = u64 [sp + 0x28]\n 55759: a0 = a0 | a1\n 55762: jump @2058 if a0 == 0\n      : @2053 (gas: 10)\n 55766: a0 = u64 [sp + 0x48]\n 55769: u64 [sp + 0x110] = a0\n 55773: a0 = u64 [sp + 0x38]\n 55776: u64 [sp + 0x118] = a0\n 55780: s1 = u64 [sp + 0x40]\n 55783: u64 [sp + 0x120] = s1\n 55787: a0 = sp + 0x110\n 55791: a1 = u64 [sp + 0x30]\n 55794: u64 [sp + 0x128] = a1\n 55798: ra = 2492, jump @2041\n      : @2054 [@dyn 1246] (gas: 6)\n 55804: a0 = u64 [sp + 0x48]\n 55807: a0 = a0 ^ 0x2\n 55810: a0 = a0 | s1\n 55813: a1 = u64 [sp + 0x28]\n 55816: a0 = a0 | a1\n 55819: jump @2062 if a0 == 0\n      : @2055 (gas: 10)\n 55823: a0 = u64 [sp + 0x48]\n 55826: u64 [sp + 0xf0] = a0\n 55830: a0 = u64 [sp + 0x38]\n 55833: u64 [sp + 0xf8] = a0\n 55837: s1 = u64 [sp + 0x40]\n 55840: u64 [sp + 0x100] = s1\n 55844: a0 = sp + 0xf0\n 55848: a1 = u64 [sp + 0x30]\n 55851: u64 [sp + 0x108] = a1\n 55855: ra = 2494, jump @2041\n      : @2056 [@dyn 1247] (gas: 6)\n 55861: a0 = u64 [sp + 0x48]\n 55864: a0 = a0 ^ 0x3\n 55867: a0 = a0 | s1\n 55870: a1 = u64 [sp + 0x28]\n 55873: a0 = a0 | a1\n 55876: jump @2067 if a0 == 0\n      : @2057 (gas: 6)\n 55880: sp = s0 + 0xfffffffffffffe70\n 55884: ra = u64 [sp + 0x188]\n 55888: s0 = u64 [sp + 0x180]\n 55892: s1 = u64 [sp + 0x178]\n 55896: sp = sp + 0x190\n 55900: ret\n      : @2058 (gas: 8)\n 55902: u64 [sp + 96] = 0\n 55905: u64 [sp + 88] = 0\n 55908: u64 [sp + 80] = 0\n 55911: a0 = 0xf645eedf00000000\n 55921: a1 = sp + 0x50\n 55924: u64 [sp + 0x68] = a0\n 55927: a0 = 0\n 55929: ra = 2496, jump @24\n      : @2059 [@dyn 1248] (gas: 2)\n 55936: a1 = i32 [0x20150]\n 55941: jump @2061 if a1 >u 31\n      : @2060 (gas: 2)\n 55945: u32 [0x20150] = 0x20\n 55951: fallthrough\n      : @2061 (gas: 6)\n 55952: a1 = 0x20160\n 55957: i32 a1 = a1 + 0\n 55959: a0 = 0x1\n 55962: a2 = 0x4\n 55965: ecalli 16 // 'seal_return'\n 55967: fallthrough\n      : @2062 (gas: 8)\n 55968: u64 [sp + 160] = 0\n 55972: u64 [sp + 152] = 0\n 55976: u64 [sp + 144] = 0\n 55980: a0 = 0xfce698f700000000\n 55990: a1 = sp + 0x90\n 55994: u64 [sp + 0xa8] = a0\n 55998: a0 = 0\n 56000: ra = 2498, jump @24\n      : @2063 [@dyn 1249] (gas: 11)\n 56007: a0 = u64 [sp + 0x8]\n 56010: u64 [sp + 0x88] = a0\n 56014: a0 = u64 [sp + 0x10]\n 56017: u64 [sp + 0x80] = a0\n 56021: a0 = u64 [sp + 0x18]\n 56024: u64 [sp + 0x78] = a0\n 56027: a0 = 0x4\n 56030: a1 = sp + 0x70\n 56033: a2 = u64 [sp + 0x20]\n 56036: u64 [sp + 0x70] = a2\n 56039: ra = 2500, jump @24\n      : @2064 [@dyn 1250] (gas: 2)\n 56046: a1 = i32 [0x20150]\n 56051: jump @2066 if a1 >u 63\n      : @2065 (gas: 3)\n 56055: u32 [0x20150] = 0x40\n 56061: a1 = 0x20160\n 56066: jump @2072\n      : @2066 (gas: 2)\n 56068: a1 = 0x20160\n 56073: jump @2072\n      : @2067 (gas: 8)\n 56075: u64 [sp + 224] = 0\n 56079: u64 [sp + 216] = 0\n 56083: u64 [sp + 208] = 0\n 56087: a0 = 0xd78bce0c00000000\n 56097: a1 = sp + 0xd0\n 56101: u64 [sp + 0xe8] = a0\n 56105: a0 = 0\n 56107: ra = 2502, jump @24\n      : @2068 [@dyn 1251] (gas: 11)\n 56114: a0 = u64 [sp + 0x8]\n 56117: u64 [sp + 0xc8] = a0\n 56121: a0 = u64 [sp + 0x10]\n 56124: u64 [sp + 0xc0] = a0\n 56128: a0 = u64 [sp + 0x18]\n 56131: u64 [sp + 0xb8] = a0\n 56135: a0 = 0x4\n 56138: a1 = sp + 0xb0\n 56142: a2 = u64 [sp + 0x20]\n 56145: u64 [sp + 0xb0] = a2\n 56149: ra = 2504, jump @24\n      : @2069 [@dyn 1252] (gas: 2)\n 56156: a1 = i32 [0x20150]\n 56161: jump @2071 if a1 >u 63\n      : @2070 (gas: 3)\n 56165: u32 [0x20150] = 0x40\n 56171: a1 = 0x20160\n 56176: jump @2072\n      : @2071 (gas: 2)\n 56178: a1 = 0x20160\n 56183: fallthrough\n      : @2072 (gas: 6)\n 56184: i32 a1 = a1 + 0\n 56186: a0 = 0x1\n 56189: a2 = 0x24\n 56192: ra = 0x9ca\n 56196: ecalli 16 // 'seal_return'\n 56198: fallthrough\n      : @2073 [@dyn 1253] (gas: 33)\n 56199: sp = sp + 0xfffffffffffffee0\n 56203: u64 [sp + 0x118] = ra\n 56207: u64 [sp + 0x110] = s0\n 56211: u64 [sp + 0x108] = s1\n 56215: s0 = sp + 0x120\n 56219: sp = sp & 0xffffffffffffffe0\n 56222: s1 = sp\n 56224: u64 [s1 + 0x38] = a0\n 56227: a0 = u64 [a2]\n 56229: u64 [s1 + 0x48] = a0\n 56232: a0 = u64 [a2 + 0x8]\n 56235: u64 [s1 + 0x40] = a0\n 56238: a0 = u64 [a2 + 0x10]\n 56241: u64 [s1 + 0x50] = a0\n 56244: a0 = u64 [a2 + 0x18]\n 56247: u64 [s1 + 0x58] = a0\n 56250: a0 = u64 [a1 + 0x18]\n 56253: a2 = u64 [a1 + 0x10]\n 56256: a3 = u64 [a1 + 0x8]\n 56259: a1 = u64 [a1]\n 56261: u64 [s1 + 0x30] = a0\n 56264: u64 [s1 + 0xf8] = a0\n 56268: u64 [s1 + 0x28] = a2\n 56271: u64 [s1 + 0xf0] = a2\n 56275: u64 [s1 + 0x20] = a3\n 56278: u64 [s1 + 0xe8] = a3\n 56282: u64 [s1 + 0x18] = a1\n 56285: u64 [s1 + 0xe0] = a1\n 56289: a0 = s1 + 0xc0\n 56293: a1 = s1 + 0xe0\n 56297: ra = 0x9cc\n 56301: t0 = 0x6\n 56304: jump @2259\n      : @2074 [@dyn 1254] (gas: 20)\n 56307: a0 = u64 [s1 + 0xd8]\n 56311: t0 = u64 [s1 + 0xc0]\n 56315: a2 = u64 [s1 + 0xd0]\n 56319: a3 = u64 [s1 + 0xc8]\n 56323: a1 = u64 [s1 + 0x58]\n 56326: a4 = a0 ^ a1\n 56329: a1 = a1 <u a0\n 56332: a0 = u64 [s1 + 0x50]\n 56335: a5 = a0 <u a2\n 56338: a5 = a1 if a4 != 0\n 56341: a1 = u64 [s1 + 0x40]\n 56344: t1 = a3 ^ a1\n 56347: a3 = a1 <u a3\n 56350: a1 = u64 [s1 + 0x48]\n 56353: a1 = a1 <u t0\n 56356: a1 = a3 if t1 != 0\n 56359: a0 = a0 ^ a2\n 56362: a0 = a0 | a4\n 56365: a1 = a5 if a0 != 0\n 56368: jump @2079 if a1 == 0\n      : @2075 (gas: 11)\n 56372: a0 = u64 [s1 + 0x18]\n 56375: u64 [s1 + 0x60] = a0\n 56378: a0 = u64 [s1 + 0x20]\n 56381: u64 [s1 + 0x68] = a0\n 56384: a0 = u64 [s1 + 0x28]\n 56387: u64 [s1 + 0x70] = a0\n 56390: a1 = s1 + 0x60\n 56393: a0 = u64 [s1 + 0x30]\n 56396: u64 [s1 + 0x78] = a0\n 56399: a0 = 0\n 56401: ra = 2510, jump @24\n      : @2076 [@dyn 1255] (gas: 2)\n 56408: a1 = i32 [0x20150]\n 56413: jump @2078 if a1 >u 31\n      : @2077 (gas: 2)\n 56417: u32 [0x20150] = 0x20\n 56423: fallthrough\n      : @2078 (gas: 52)\n 56424: a0 = sp + 0xffffffffffffffe0\n 56427: a2 = a0 & 0xffffffffffffffe0\n 56430: u64 [s1 + 0x30] = a2\n 56433: sp = a2\n 56435: a0 = 0x20160\n 56440: i32 a0 = a0 + 0\n 56442: i32 a2 = a2 + 0\n 56444: a1 = 0x20\n 56447: ecalli 11 // 'hash_keccak_256'\n 56449: a3 = u64 [s1 + 0x30]\n 56452: a0 = u64 [a3]\n 56454: a1 = u64 [a3 + 0x8]\n 56457: a2 = u64 [a3 + 0x18]\n 56460: a3 = u64 [a3 + 0x10]\n 56463: t0 = reverse a0\n 56465: a1 = reverse a1\n 56467: a2 = reverse a2\n 56469: a3 = reverse a3\n 56471: a4 = u64 [s1 + 0x40]\n 56474: a4 = a4 + a3\n 56477: t1 = u64 [s1 + 0x48]\n 56480: t1 = t1 + a2\n 56483: a2 = t1 <u a2\n 56486: a4 = a4 + a2\n 56489: a0 = a4 ^ a3\n 56492: a3 = a4 <u a3\n 56495: a3 = a2 if a0 == 0\n 56498: a0 = u64 [s1 + 0x50]\n 56501: a0 = a0 + a1\n 56504: a3 = a3 + a0\n 56507: a2 = a3 <u a0\n 56510: a5 = u64 [s1 + 0x58]\n 56513: t0 = t0 + a5\n 56516: a0 = a0 <u a1\n 56519: a0 = a0 + t0\n 56522: a0 = a0 + a2\n 56525: a1 = u64 [s1 + 0x38]\n 56528: a2 = 0\n 56530: u64 [a1 + 56] = 0\n 56533: u64 [a1 + 48] = 0\n 56536: u64 [a1 + 40] = 0\n 56539: u64 [a1 + 32] = 0\n 56542: u64 [a1] = t1\n 56544: u64 [a1 + 0x8] = a4\n 56547: u64 [a1 + 0x10] = a3\n 56550: u64 [a1 + 0x18] = a0\n 56553: sp = s0 + 0xfffffffffffffee0\n 56557: ra = u64 [sp + 0x118]\n 56561: s0 = u64 [sp + 0x110]\n 56565: s1 = u64 [sp + 0x108]\n 56569: sp = sp + 0x120\n 56573: ret\n      : @2079 (gas: 1)\n 56575: t0 = 2512, jump @2347\n      : @2080 [@dyn 1256] (gas: 5)\n 56581: a0 = 0x4e487b7100000000\n 56591: a1 = s1 + 0xa0\n 56595: u64 [s1 + 0xb8] = a0\n 56599: a0 = 0\n 56601: ra = 2514, jump @24\n      : @2081 [@dyn 1257] (gas: 7)\n 56608: u64 [s1 + 152] = 0\n 56612: u64 [s1 + 144] = 0\n 56616: u64 [s1 + 128] = 0x32\n 56621: a0 = 0x4\n 56624: a1 = s1 + 0x80\n 56628: u64 [s1 + 136] = 0\n 56632: ra = 2516, jump @24\n      : @2082 [@dyn 1258] (gas: 2)\n 56639: a1 = i32 [0x20150]\n 56644: jump @2084 if a1 >u 63\n      : @2083 (gas: 2)\n 56648: u32 [0x20150] = 0x40\n 56654: fallthrough\n      : @2084 (gas: 7)\n 56655: a1 = 0x20160\n 56660: i32 a1 = a1 + 0\n 56662: a0 = 0x1\n 56665: a2 = 0x24\n 56668: ra = 0x9d6\n 56672: ecalli 16 // 'seal_return'\n 56674: fallthrough\n      : @2085 [@dyn 1259] (gas: 14)\n 56675: a2 = u64 [a1 + 0x10]\n 56678: a3 = u64 [a1 + 0x18]\n 56681: a4 = u64 [a1 + 0x8]\n 56684: a1 = u64 [a1]\n 56686: a3 = a3 | a4\n 56689: a1 = a1 | a2\n 56692: a1 = a1 | a3\n 56695: a1 = a1 >u 0\n 56697: a2 = 0\n 56699: u64 [a0 + 24] = 0\n 56702: u64 [a0 + 16] = 0\n 56705: u64 [a0 + 8] = 0\n 56708: u64 [a0] = a1\n 56710: ret\n      : @2086 [@dyn 1260] (gas: 4)\n 56712: ra = 0x9da\n 56716: ecalli 1 // 'block_number'\n 56718: t0 = 0x9dc\n 56722: jump @2301\n      : @2087 [@dyn 1261] (gas: 1)\n 56725: t0 = 2524, jump @2301\n      : @2088 [@dyn 1262] (gas: 3)\n 56731: ra = 0x9de\n 56735: t0 = 0x884\n 56739: jump @2372\n      : @2089 [@dyn 1263] (gas: 1)\n 56742: t0 = 2528, jump @2365\n      : @2090 [@dyn 1264] (gas: 1)\n 56748: ra = 2530, jump @1744\n      : @2091 [@dyn 1265] (gas: 25)\n 56754: a1 = u64 [sp + 0x20]\n 56757: a2 = u64 [sp + 0x128]\n 56761: t0 = u64 [sp + 0x138]\n 56765: ra = u64 [sp + 0x120]\n 56769: a5 = u64 [sp + 0x130]\n 56773: a0 = a2 ^ a1\n 56776: a3 = a2 <u a1\n 56779: a4 = u64 [sp + 0x38]\n 56782: a4 = ra <u a4\n 56785: a3 = a4 if a0 == 0\n 56788: t2 = u64 [sp + 0x28]\n 56791: a0 = a5 - t2\n 56794: t1 = a0 - a3\n 56797: a0 = a0 <u a3\n 56800: a3 = a5 <u t2\n 56803: a5 = u64 [sp + 0x30]\n 56806: a5 = t0 - a5\n 56809: a3 = a5 - a3\n 56812: a3 = a3 - a0\n 56815: a0 = a3 ^ 0x10000\n 56820: a0 = t1 | a0\n 56823: a5 = a3 >> 0x10\n 56826: a5 = a5 <u 0x1\n 56829: a5 = 0 if a0 == 0\n 56831: jump @2095 if a5 == 0\n      : @2092 (gas: 16)\n 56835: a0 = a2 - a1\n 56838: a0 = a0 - a4\n 56841: a1 = u64 [sp + 0x38]\n 56844: a1 = ra - a1\n 56847: u64 [sp + 0x60] = a1\n 56850: a1 = u64 [sp]\n 56852: u64 [sp + 0x80] = a1\n 56856: a1 = u64 [sp + 0x40]\n 56859: u64 [sp + 0xa0] = a1\n 56863: u64 [sp + 0x68] = a0\n 56866: a0 = u64 [sp + 0x8]\n 56869: u64 [sp + 0x88] = a0\n 56873: a0 = u64 [sp + 0x48]\n 56876: u64 [sp + 0xa8] = a0\n 56880: u64 [sp + 0x70] = t1\n 56883: t0 = 2532, jump @2315\n      : @2093 [@dyn 1266] (gas: 3)\n 56889: ra = 0x9e6\n 56893: t0 = 0xa48\n 56897: jump @2212\n      : @2094 [@dyn 1267] (gas: 22)\n 56900: t0 = u64 [sp + 0xc8]\n 56904: t1 = u64 [sp + 0xc0]\n 56908: a2 = u64 [sp + 0xd8]\n 56912: a3 = u64 [sp + 0xd0]\n 56916: a4 = u64 [sp + 0xf0]\n 56920: a5 = u64 [sp + 0xf8]\n 56924: a0 = u64 [sp + 0xe0]\n 56928: a1 = u64 [sp + 0xe8]\n 56932: u64 [s1 + 0x30] = a4\n 56935: u64 [s1 + 0x38] = a5\n 56938: u64 [s1 + 0x20] = a0\n 56941: u64 [s1 + 0x28] = a1\n 56944: u64 [s1 + 0x10] = a3\n 56947: u64 [s1 + 0x18] = a2\n 56950: u64 [s1] = t1\n 56952: u64 [s1 + 0x8] = t0\n 56955: sp = s0 + 0xfffffffffffffe40\n 56959: ra = u64 [sp + 0x1b8]\n 56963: s0 = u64 [sp + 0x1b0]\n 56967: s1 = u64 [sp + 0x1a8]\n 56971: sp = sp + 0x1c0\n 56975: ret\n      : @2095 (gas: 3)\n 56977: ra = 0x9e8\n 56981: t0 = 0x28e\n 56985: jump @2232\n      : @2096 [@dyn 1268] (gas: 13)\n 56988: sp = sp + 0xfffffffffffffe40\n 56992: u64 [sp + 0x1b8] = ra\n 56996: u64 [sp + 0x1b0] = s0\n 57000: u64 [sp + 0x1a8] = s1\n 57004: s0 = sp + 0x1c0\n 57008: sp = sp & 0xffffffffffffffe0\n 57011: a3 = u16 [a2 + 0x18]\n 57014: u64 [sp + 0x38] = a3\n 57017: a3 = u64 [a2 + 0x10]\n 57020: u64 [sp + 0x30] = a3\n 57023: a3 = u64 [a2]\n 57025: u64 [sp + 0x28] = a3\n 57028: t0 = 2538, jump @2311\n      : @2097 [@dyn 1269] (gas: 4)\n 57034: ra = 0x9ec\n 57038: ecalli 1 // 'block_number'\n 57040: t0 = 0x9ee\n 57044: jump @2301\n      : @2098 [@dyn 1270] (gas: 1)\n 57047: t0 = 2542, jump @2301\n      : @2099 [@dyn 1271] (gas: 3)\n 57053: ra = 0x9f0\n 57057: t0 = 0x884\n 57061: jump @2372\n      : @2100 [@dyn 1272] (gas: 1)\n 57064: t0 = 2546, jump @2365\n      : @2101 [@dyn 1273] (gas: 1)\n 57070: ra = 2548, jump @1744\n      : @2102 [@dyn 1274] (gas: 28)\n 57076: a2 = u64 [sp + 0x128]\n 57080: a0 = u64 [sp + 0x120]\n 57084: t0 = u64 [sp + 0x138]\n 57088: a4 = u64 [sp + 0x130]\n 57092: a5 = u64 [sp + 0x20]\n 57095: a5 = a5 + a2\n 57098: t1 = u64 [sp + 0x28]\n 57101: t1 = t1 + a0\n 57104: a0 = t1 <u a0\n 57107: a5 = a5 + a0\n 57110: a3 = a5 ^ a2\n 57113: a2 = a5 <u a2\n 57116: a2 = a0 if a3 == 0\n 57119: a0 = u64 [sp + 0x30]\n 57122: a0 = a0 + a4\n 57125: a2 = a2 + a0\n 57128: a3 = a2 <u a0\n 57131: a1 = u64 [sp + 0x38]\n 57134: t0 = t0 + a1\n 57137: a0 = a0 <u a4\n 57140: a0 = a0 + t0\n 57143: a3 = a3 + a0\n 57146: a0 = a3 ^ 0x10000\n 57151: a0 = a0 | a2\n 57154: a4 = a3 >> 0x10\n 57157: a4 = a4 <u 0x1\n 57160: a4 = 0 if a0 == 0\n 57162: jump @2106 if a4 == 0\n      : @2103 (gas: 12)\n 57166: u64 [sp + 0x60] = t1\n 57169: a0 = u64 [sp]\n 57171: u64 [sp + 0x80] = a0\n 57175: a0 = u64 [sp + 0x40]\n 57178: u64 [sp + 0xa0] = a0\n 57182: u64 [sp + 0x68] = a5\n 57185: a0 = u64 [sp + 0x8]\n 57188: u64 [sp + 0x88] = a0\n 57192: a0 = u64 [sp + 0x48]\n 57195: u64 [sp + 0xa8] = a0\n 57199: u64 [sp + 0x70] = a2\n 57202: t0 = 2550, jump @2315\n      : @2104 [@dyn 1275] (gas: 3)\n 57208: ra = 0x9f8\n 57212: t0 = 0xa48\n 57216: jump @2212\n      : @2105 [@dyn 1276] (gas: 22)\n 57219: t0 = u64 [sp + 0xc8]\n 57223: t1 = u64 [sp + 0xc0]\n 57227: a2 = u64 [sp + 0xd8]\n 57231: a3 = u64 [sp + 0xd0]\n 57235: a4 = u64 [sp + 0xf0]\n 57239: a5 = u64 [sp + 0xf8]\n 57243: a0 = u64 [sp + 0xe0]\n 57247: a1 = u64 [sp + 0xe8]\n 57251: u64 [s1 + 0x30] = a4\n 57254: u64 [s1 + 0x38] = a5\n 57257: u64 [s1 + 0x20] = a0\n 57260: u64 [s1 + 0x28] = a1\n 57263: u64 [s1 + 0x10] = a3\n 57266: u64 [s1 + 0x18] = a2\n 57269: u64 [s1] = t1\n 57271: u64 [s1 + 0x8] = t0\n 57274: sp = s0 + 0xfffffffffffffe40\n 57278: ra = u64 [sp + 0x1b8]\n 57282: s0 = u64 [sp + 0x1b0]\n 57286: s1 = u64 [sp + 0x1a8]\n 57290: sp = sp + 0x1c0\n 57294: ret\n      : @2106 (gas: 3)\n 57296: ra = 0x9fa\n 57300: t0 = 0x28e\n 57304: jump @2232\n      : @2107 [@dyn 1277] (gas: 34)\n 57307: sp = sp + 0xfffffffffffffe60\n 57311: u64 [sp + 0x198] = ra\n 57315: u64 [sp + 0x190] = s0\n 57319: u64 [sp + 0x188] = s1\n 57323: s0 = sp + 0x1a0\n 57327: sp = sp & 0xffffffffffffffe0\n 57330: a2 = u16 [a1 + 0x18]\n 57333: u64 [sp + 0x30] = a2\n 57336: a2 = u64 [a1 + 0x10]\n 57339: u64 [sp + 0x28] = a2\n 57342: a2 = u64 [a1]\n 57344: u64 [sp + 0x38] = a2\n 57347: a1 = u64 [a1 + 0x8]\n 57350: u64 [sp + 0x20] = a1\n 57353: s1 = a0\n 57355: i32 a0 = sp + 0x160\n 57359: ecalli 1 // 'block_number'\n 57361: a0 = u64 [sp + 0x178]\n 57365: a1 = u64 [sp + 0x170]\n 57369: a2 = u64 [sp + 0x168]\n 57373: a3 = u64 [sp + 0x160]\n 57377: u64 [sp + 0x18] = a0\n 57380: u64 [sp + 0x138] = a0\n 57384: u64 [sp + 0x10] = a1\n 57387: u64 [sp + 0x130] = a1\n 57391: u64 [sp + 0x8] = a2\n 57394: u64 [sp + 0x128] = a2\n 57398: a0 = sp + 0x140\n 57402: a1 = sp + 0x120\n 57406: u64 [sp] = a3\n 57408: u64 [sp + 0x120] = a3\n 57412: ra = 0x9fc\n 57416: t0 = 0x884\n 57420: jump @2372\n      : @2108 [@dyn 1278] (gas: 7)\n 57423: u64 [sp + 248] = 0\n 57427: u64 [sp + 240] = 0\n 57431: u64 [sp + 232] = 0\n 57435: a0 = sp + 0x100\n 57439: a1 = sp + 0xe0\n 57443: u64 [sp + 224] = 0xa\n 57448: ra = 2558, jump @1744\n      : @2109 [@dyn 1279] (gas: 25)\n 57454: a2 = u64 [sp + 0x20]\n 57457: a3 = u64 [sp + 0x108]\n 57461: t0 = u64 [sp + 0x118]\n 57465: ra = u64 [sp + 0x100]\n 57469: a5 = u64 [sp + 0x110]\n 57473: a0 = a3 ^ a2\n 57476: a1 = a3 <u a2\n 57479: a4 = u64 [sp + 0x38]\n 57482: a4 = ra <u a4\n 57485: a1 = a4 if a0 == 0\n 57488: t2 = u64 [sp + 0x28]\n 57491: a0 = a5 - t2\n 57494: t1 = a0 - a1\n 57497: a0 = a0 <u a1\n 57500: a1 = a5 <u t2\n 57503: a5 = u64 [sp + 0x30]\n 57506: a5 = t0 - a5\n 57509: a1 = a5 - a1\n 57512: a1 = a1 - a0\n 57515: a0 = a1 ^ 0x10000\n 57520: a0 = t1 | a0\n 57523: a5 = a1 >> 0x10\n 57526: a5 = a5 <u 0x1\n 57529: a5 = 0 if a0 == 0\n 57531: jump @2112 if a5 == 0\n      : @2110 (gas: 27)\n 57535: a0 = a3 - a2\n 57538: a0 = a0 - a4\n 57541: a2 = u64 [sp + 0x38]\n 57544: a2 = ra - a2\n 57547: u64 [sp + 0x40] = a2\n 57550: a2 = u64 [sp]\n 57552: u64 [sp + 0x60] = a2\n 57555: u64 [sp + 152] = 0\n 57559: u64 [sp + 144] = 0\n 57563: u64 [sp + 136] = 0\n 57567: u64 [sp + 128] = 0xa\n 57572: u64 [sp + 0x48] = a0\n 57575: a0 = u64 [sp + 0x8]\n 57578: u64 [sp + 0x68] = a0\n 57581: u64 [sp + 0x50] = t1\n 57584: a0 = u64 [sp + 0x10]\n 57587: u64 [sp + 0x70] = a0\n 57590: u64 [sp + 0x58] = a1\n 57593: a0 = sp + 0xa0\n 57597: a1 = sp + 0x80\n 57601: a2 = sp + 0x60\n 57604: a3 = sp + 0x40\n 57607: a4 = u64 [sp + 0x18]\n 57610: u64 [sp + 0x78] = a4\n 57613: ra = 0xa00\n 57617: t0 = 0xa48\n 57621: jump @2212\n      : @2111 [@dyn 1280] (gas: 22)\n 57624: t0 = u64 [sp + 0xa8]\n 57628: t1 = u64 [sp + 0xa0]\n 57632: a2 = u64 [sp + 0xb8]\n 57636: a3 = u64 [sp + 0xb0]\n 57640: a4 = u64 [sp + 0xd0]\n 57644: a5 = u64 [sp + 0xd8]\n 57648: a0 = u64 [sp + 0xc0]\n 57652: a1 = u64 [sp + 0xc8]\n 57656: u64 [s1 + 0x30] = a4\n 57659: u64 [s1 + 0x38] = a5\n 57662: u64 [s1 + 0x20] = a0\n 57665: u64 [s1 + 0x28] = a1\n 57668: u64 [s1 + 0x10] = a3\n 57671: u64 [s1 + 0x18] = a2\n 57674: u64 [s1] = t1\n 57676: u64 [s1 + 0x8] = t0\n 57679: sp = s0 + 0xfffffffffffffe60\n 57683: ra = u64 [sp + 0x198]\n 57687: s0 = u64 [sp + 0x190]\n 57691: s1 = u64 [sp + 0x188]\n 57695: sp = sp + 0x1a0\n 57699: ret\n      : @2112 (gas: 3)\n 57701: ra = 0xa02\n 57705: t0 = 0x28e\n 57709: jump @2232\n      : @2113 [@dyn 1281] (gas: 25)\n 57712: sp = sp + 0xfffffffffffffbe0\n 57716: a3 = sp + 0x400\n 57720: u64 [a3 + 0x18] = ra\n 57723: u64 [a3 + 0x10] = s0\n 57726: u64 [a3 + 0x8] = s1\n 57729: s0 = sp + 0x420\n 57733: sp = sp & 0xffffffffffffffe0\n 57736: s1 = sp\n 57738: a3 = u64 [a2 + 0x18]\n 57741: u64 [s1 + 0x60] = a3\n 57744: a3 = u64 [a2 + 0x10]\n 57747: u64 [s1 + 0x68] = a3\n 57750: a3 = u64 [a2 + 0x8]\n 57753: u64 [s1 + 0x70] = a3\n 57756: a2 = u64 [a2]\n 57758: u64 [s1 + 0x78] = a2\n 57761: t0 = u64 [a1 + 0x10]\n 57764: t1 = u32 [a0 + 0x10]\n 57767: a3 = u64 [a0]\n 57769: a4 = u64 [a0 + 0x8]\n 57772: a2 = u64 [a1 + 0x8]\n 57775: a5 = u64 [a1]\n 57777: a0 = a3 | t1\n 57780: a0 = a0 | a4\n 57783: jump @2121 if a0 != 0\n      : @2114 (gas: 19)\n 57787: u64 [s1 + 0x48] = a2\n 57790: u64 [s1 + 0x50] = a5\n 57793: u64 [s1 + 0x58] = t0\n 57796: u64 [s1 + 0x28] = a4\n 57799: u64 [s1 + 0x30] = a3\n 57802: u64 [s1 + 0x38] = t1\n 57805: a0 = u64 [s1 + 0x78]\n 57808: u64 [s1 + 0x360] = a0\n 57812: a0 = u64 [s1 + 0x70]\n 57815: u64 [s1 + 0x368] = a0\n 57819: a0 = u64 [s1 + 0x68]\n 57822: u64 [s1 + 0x370] = a0\n 57826: a0 = s1 + 0x380\n 57830: a1 = s1 + 0x360\n 57834: a2 = u64 [s1 + 0x60]\n 57837: u64 [s1 + 0x378] = a2\n 57841: ra = 0xa04\n 57845: t0 = 0x2e4\n 57849: jump @2372\n      : @2115 [@dyn 1282] (gas: 19)\n 57852: i32 a0 = s1 + 0x3a0\n 57856: ecalli 1 // 'block_number'\n 57858: a0 = u64 [s1 + 0x3b8]\n 57862: a1 = u64 [s1 + 0x3b0]\n 57866: a2 = u64 [s1 + 0x3a8]\n 57870: a3 = u64 [s1 + 0x3a0]\n 57874: u64 [s1 + 0x40] = a0\n 57877: u64 [s1 + 0x338] = a0\n 57881: u64 [s1 + 0x20] = a1\n 57884: u64 [s1 + 0x330] = a1\n 57888: u64 [s1 + 0x18] = a2\n 57891: u64 [s1 + 0x328] = a2\n 57895: a0 = s1 + 0x340\n 57899: a1 = s1 + 0x320\n 57903: u64 [s1 + 0x10] = a3\n 57906: u64 [s1 + 0x320] = a3\n 57910: ra = 0xa06\n 57914: t0 = 0x884\n 57918: jump @2372\n      : @2116 [@dyn 1283] (gas: 1)\n 57921: t0 = 2568, jump @2368\n      : @2117 [@dyn 1284] (gas: 4)\n 57927: a0 = s1 + 0x300\n 57931: a1 = s1 + 0x2e0\n 57935: u64 [s1 + 736] = 0xa\n 57940: ra = 2570, jump @1744\n      : @2118 [@dyn 1285] (gas: 28)\n 57946: a2 = u64 [s1 + 0x308]\n 57950: a0 = u64 [s1 + 0x300]\n 57954: a3 = u64 [s1 + 0x310]\n 57958: a4 = u64 [s1 + 0x70]\n 57961: a4 = a4 + a2\n 57964: t0 = u64 [s1 + 0x78]\n 57967: t0 = t0 + a0\n 57970: a5 = t0 <u a0\n 57973: a0 = a4 + a5\n 57976: a4 = a0 ^ a2\n 57979: a2 = a0 <u a2\n 57982: a2 = a5 if a4 == 0\n 57985: a1 = u64 [s1 + 0x318]\n 57989: a5 = u64 [s1 + 0x68]\n 57992: a5 = a5 + a3\n 57995: a2 = a2 + a5\n 57998: a3 = a5 <u a3\n 58001: a5 = a2 <u a5\n 58004: a4 = u64 [s1 + 0x60]\n 58007: a4 = a4 + a1\n 58010: a3 = a3 + a4\n 58013: a3 = a3 + a5\n 58016: a4 = a3 ^ 0xffff\n 58021: a4 = a4 | ~a2\n 58024: a5 = a3 >> 0x10\n 58027: a5 = a5 >u 0\n 58029: a5 = 0 if a4 == 0\n 58031: jump @2144 if a5 != 0\n      : @2119 (gas: 24)\n 58035: u64 [s1 + 0x240] = t0\n 58039: a1 = u64 [s1 + 0x10]\n 58042: a5 = s1 + 0x200\n 58046: u64 [a5 + 0x60] = a1\n 58049: u64 [s1 + 664] = 0\n 58053: u64 [s1 + 656] = 0\n 58057: u64 [s1 + 648] = 0\n 58061: u64 [a5 + 128] = 0xa\n 58066: u64 [a5 + 0x48] = a0\n 58069: a0 = u64 [s1 + 0x18]\n 58072: u64 [a5 + 0x68] = a0\n 58075: u64 [a5 + 0x50] = a2\n 58078: a0 = u64 [s1 + 0x20]\n 58081: u64 [a5 + 0x70] = a0\n 58084: u64 [a5 + 0x58] = a3\n 58087: a0 = s1 + 0x2a0\n 58091: a1 = s1 + 0x280\n 58095: a2 = s1 + 0x260\n 58099: a3 = s1 + 0x240\n 58103: a4 = u64 [s1 + 0x40]\n 58106: u64 [a5 + 0x78] = a4\n 58109: ra = 0xa0c\n 58113: t0 = 0xa48\n 58117: jump @2212\n      : @2120 [@dyn 1286] (gas: 7)\n 58120: t1 = u64 [s1 + 0x38]\n 58123: a3 = u64 [s1 + 0x30]\n 58126: a4 = u64 [s1 + 0x28]\n 58129: t0 = u64 [s1 + 0x58]\n 58132: a5 = u64 [s1 + 0x50]\n 58135: a2 = u64 [s1 + 0x48]\n 58138: fallthrough\n      : @2121 (gas: 11)\n 58139: a1 = 0xffffffff\n 58149: a2 = a2 & 0xffffffffffffffff\n 58152: a0 = a5 & 0xffffffffffffffff\n 58155: u64 [s1 + 0x58] = a1\n 58158: a1 = t0 & a1\n 58161: u64 [s1 + 0x50] = a0\n 58164: u64 [s1 + 0x40] = a1\n 58167: a0 = a0 | a1\n 58170: u64 [s1 + 0x48] = a2\n 58173: a0 = a0 | a2\n 58176: jump @2125 if a0 != 0\n      : @2122 (gas: 17)\n 58179: a0 = u64 [s1 + 0x78]\n 58182: a5 = s1 + 0x200\n 58186: u64 [a5] = a0\n 58188: a0 = u64 [s1 + 0x70]\n 58191: u64 [a5 + 0x8] = a0\n 58194: a0 = u64 [s1 + 0x68]\n 58197: u64 [a5 + 0x10] = a0\n 58200: a0 = s1 + 0x220\n 58204: a1 = s1 + 0x200\n 58208: a2 = u64 [s1 + 0x60]\n 58211: u64 [a5 + 0x18] = a2\n 58214: u64 [s1 + 0x38] = t1\n 58217: u64 [s1 + 0x30] = a3\n 58220: u64 [s1 + 0x28] = a4\n 58223: ra = 0xa0e\n 58227: t0 = 0x2e4\n 58231: jump @2372\n      : @2123 [@dyn 1287] (gas: 12)\n 58234: a0 = u64 [s1 + 0x60]\n 58237: a3 = s1 + 0x100\n 58241: u64 [a3 + 0xb8] = a0\n 58245: a0 = u64 [s1 + 0x68]\n 58248: u64 [a3 + 0xb0] = a0\n 58252: a0 = u64 [s1 + 0x70]\n 58255: u64 [a3 + 0xa8] = a0\n 58259: a0 = s1 + 0x1c0\n 58263: a1 = s1 + 0x1a0\n 58267: a2 = u64 [s1 + 0x78]\n 58270: u64 [a3 + 0xa0] = a2\n 58274: ra = 2576, jump @2107\n      : @2124 [@dyn 1288] (gas: 4)\n 58280: a4 = u64 [s1 + 0x28]\n 58283: a3 = u64 [s1 + 0x30]\n 58286: t1 = u64 [s1 + 0x38]\n 58289: fallthrough\n      : @2125 (gas: 7)\n 58290: u64 [s1 + 408] = 0\n 58294: u64 [s1 + 0x180] = a3\n 58298: u64 [s1 + 0x188] = a4\n 58302: a1 = s1 + 0x180\n 58306: u64 [s1 + 0x190] = t1\n 58310: a0 = 0\n 58312: ra = 2578, jump @24\n      : @2126 [@dyn 1289] (gas: 7)\n 58319: u64 [s1 + 376] = 0\n 58323: u64 [s1 + 368] = 0\n 58327: u64 [s1 + 360] = 0\n 58331: a0 = 0x20\n 58334: a1 = s1 + 0x160\n 58338: u64 [s1 + 352] = 0x8\n 58343: ra = 2580, jump @24\n      : @2127 [@dyn 1290] (gas: 3)\n 58350: a1 = 0x20150\n 58355: a0 = i32 [0x20150]\n 58360: jump @2129 if a0 >u 63\n      : @2128 (gas: 3)\n 58364: u32 [0x20150] = 0x40\n 58370: t0 = 0xa16\n 58374: jump @2356\n      : @2129 (gas: 1)\n 58377: t0 = 2582, jump @2356\n      : @2130 [@dyn 1291] (gas: 10)\n 58383: a0 = 0x20160\n 58388: i32 a0 = a0 + 0\n 58390: i32 a2 = a2 + 0\n 58392: u64 [s1 + 0x38] = a1\n 58395: a1 = 0x40\n 58398: u64 [s1 + 0x30] = a0\n 58401: ra = 0xa18\n 58405: ecalli 11 // 'hash_keccak_256'\n 58407: t0 = 0xa1a\n 58411: jump @2317\n      : @2131 [@dyn 1292] (gas: 1)\n 58414: t0 = 2586, jump @2317\n      : @2132 [@dyn 1293] (gas: 10)\n 58420: a4 = s1 + 0x300\n 58424: u64 [a4 + 0xd8] = a3\n 58428: u64 [a4 + 0xd0] = a2\n 58432: u64 [a4 + 0xc8] = a1\n 58436: u64 [a4 + 0xc0] = a0\n 58440: a0 = s1 + 0x140\n 58444: a1 = s1 + 0x3c0\n 58448: ra = 0xa1c\n 58452: t0 = 0x6\n 58455: jump @2259\n      : @2133 [@dyn 1294] (gas: 16)\n 58458: a0 = u64 [s1 + 0x150]\n 58462: u64 [s1 + 0x28] = a0\n 58465: a0 = u64 [s1 + 0x148]\n 58469: u64 [s1 + 0x20] = a0\n 58472: a0 = u64 [s1 + 0x140]\n 58476: u64 [s1 + 0x18] = a0\n 58479: u64 [s1 + 312] = 0\n 58483: a0 = u64 [s1 + 0x40]\n 58486: u64 [s1 + 0x130] = a0\n 58490: a0 = u64 [s1 + 0x48]\n 58493: u64 [s1 + 0x128] = a0\n 58497: a1 = s1 + 0x120\n 58501: a0 = u64 [s1 + 0x50]\n 58504: u64 [s1 + 0x120] = a0\n 58508: a0 = 0\n 58510: ra = 2590, jump @24\n      : @2134 [@dyn 1295] (gas: 4)\n 58517: u64 [s1 + 280] = 0\n 58521: u64 [s1 + 272] = 0\n 58525: a0 = 0x8\n 58528: t0 = 2592, jump @2289\n      : @2135 [@dyn 1296] (gas: 1)\n 58534: ra = 2594, jump @24\n      : @2136 [@dyn 1297] (gas: 3)\n 58541: a1 = u64 [s1 + 0x38]\n 58544: a0 = i32 [a1]\n 58546: jump @2138 if a0 >u 63\n      : @2137 (gas: 2)\n 58550: u32 [a1 + 0] = 0x40\n 58553: fallthrough\n      : @2138 (gas: 8)\n 58554: a0 = u64 [s1 + 0x18]\n 58557: a0 = a0 & 0xffffffffffffffff\n 58560: u64 [s1 + 0x50] = a0\n 58563: a0 = u64 [s1 + 0x20]\n 58566: a0 = a0 & 0xffffffffffffffff\n 58569: u64 [s1 + 0x48] = a0\n 58572: a0 = u64 [s1 + 0x58]\n 58575: t0 = 2596, jump @2310\n      : @2139 [@dyn 1298] (gas: 4)\n 58581: ra = 0xa26\n 58585: ecalli 11 // 'hash_keccak_256'\n 58587: t0 = 0xa28\n 58591: jump @2249\n      : @2140 [@dyn 1299] (gas: 1)\n 58594: t0 = 2600, jump @2249\n      : @2141 [@dyn 1300] (gas: 10)\n 58600: a4 = s1 + 0x300\n 58604: u64 [a4 + 0xf8] = a3\n 58608: u64 [a4 + 0xf0] = a2\n 58612: u64 [a4 + 0xe8] = a1\n 58616: u64 [a4 + 0xe0] = a0\n 58620: a0 = s1 + 0xe0\n 58624: a1 = s1 + 0x3e0\n 58628: ra = 0xa2a\n 58632: t0 = 0x6\n 58635: jump @2259\n      : @2142 [@dyn 1301] (gas: 32)\n 58638: a0 = u64 [s1 + 0xe0]\n 58642: a1 = u64 [s1 + 0xe8]\n 58646: a2 = u64 [s1 + 0xf0]\n 58650: a0 = a0 & 0xffffffffffffffff\n 58653: a1 = a1 & 0xffffffffffffffff\n 58656: a3 = u64 [s1 + 0x58]\n 58659: a2 = a2 & a3\n 58662: a3 = u64 [s1 + 0x60]\n 58665: u64 [s1 + 0x98] = a3\n 58669: a3 = u64 [s1 + 0x68]\n 58672: u64 [s1 + 0x90] = a3\n 58676: a3 = u64 [s1 + 0x70]\n 58679: u64 [s1 + 0x88] = a3\n 58683: a3 = u64 [s1 + 0x78]\n 58686: u64 [s1 + 0x80] = a3\n 58690: u64 [s1 + 184] = 0\n 58694: u64 [s1 + 0xb0] = a2\n 58698: u64 [s1 + 0xa8] = a1\n 58702: u64 [s1 + 0xa0] = a0\n 58706: u64 [s1 + 216] = 0\n 58710: a0 = u64 [s1 + 0x40]\n 58713: u64 [s1 + 0xd0] = a0\n 58717: a0 = u64 [s1 + 0x48]\n 58720: u64 [s1 + 0xc8] = a0\n 58724: a0 = s1 + 0xc0\n 58728: a1 = s1 + 0xa0\n 58732: a2 = s1 + 0x80\n 58736: a3 = u64 [s1 + 0x50]\n 58739: u64 [s1 + 0xc0] = a3\n 58743: ra = 0xa2c\n 58747: t0 = 0x8dc\n 58751: jump @2275\n      : @2143 [@dyn 1302] (gas: 7)\n 58754: sp = s0 + 0xfffffffffffffbe0\n 58758: a0 = sp + 0x400\n 58762: ra = u64 [a0 + 0x18]\n 58765: s0 = u64 [a0 + 0x10]\n 58768: s1 = u64 [a0 + 0x8]\n 58771: sp = sp + 0x420\n 58775: ret\n      : @2144 (gas: 3)\n 58777: ra = 0xa2e\n 58781: t0 = 0x28e\n 58785: jump @2232\n      : @2145 [@dyn 1303] (gas: 34)\n 58788: sp = sp + 0xfffffffffffffd80\n 58792: a2 = sp + 0x200\n 58796: u64 [a2 + 0x78] = ra\n 58799: u64 [a2 + 0x70] = s0\n 58802: u64 [a2 + 0x68] = s1\n 58805: s0 = sp + 0x280\n 58809: sp = sp & 0xffffffffffffffe0\n 58812: s1 = sp\n 58814: a2 = u64 [a1 + 0x18]\n 58817: u64 [s1 + 0x60] = a2\n 58820: a2 = u64 [a1 + 0x10]\n 58823: u64 [s1 + 0x58] = a2\n 58826: a2 = u64 [a1 + 0x8]\n 58829: u64 [s1 + 0x68] = a2\n 58832: a1 = u64 [a1]\n 58834: u64 [s1 + 0x70] = a1\n 58837: a3 = u64 [a0 + 0x18]\n 58840: a2 = u64 [a0 + 0x10]\n 58843: a1 = u64 [a0 + 0x8]\n 58846: a0 = u64 [a0]\n 58848: u64 [s1 + 0x38] = a3\n 58851: a4 = s1 + 0x200\n 58855: u64 [a4 + 0x18] = a3\n 58858: u64 [s1 + 0x40] = a2\n 58861: u64 [a4 + 0x10] = a2\n 58864: u64 [s1 + 0x48] = a1\n 58867: u64 [a4 + 0x8] = a1\n 58870: u64 [s1 + 0x50] = a0\n 58873: u64 [a4] = a0\n 58875: a0 = s1 + 0x1e0\n 58879: a1 = s1 + 0x200\n 58883: ra = 0xa30\n 58887: t0 = 0x6\n 58890: jump @2259\n      : @2146 [@dyn 1304] (gas: 8)\n 58893: a0 = s1 + 0x100\n 58897: a4 = u64 [a0 + 0xf8]\n 58901: a3 = u64 [a0 + 0xf0]\n 58905: a2 = u64 [a0 + 0xe8]\n 58909: a0 = a3 | a4\n 58912: a1 = a2 <u 0x1\n 58915: a1 = 0 if a0 != 0\n 58917: jump @2159 if a1 == 0\n      : @2147 (gas: 21)\n 58921: a0 = u64 [s1 + 0x1e0]\n 58925: u64 [s1 + 0x30] = a0\n 58928: a0 = a0 + 0x1\n 58931: a1 = a0 <u 0x1\n 58934: a1 = a1 + a2\n 58937: u64 [s1 + 0x28] = a2\n 58940: a2 = a0 | a1\n 58943: a2 = a2 <u 0x1\n 58946: a2 = a2 + a3\n 58949: u64 [s1 + 0x20] = a3\n 58952: a3 = a2 <u a3\n 58955: a3 = a3 + a4\n 58958: a5 = s1 + 0x200\n 58962: u64 [a5 + 0x20] = a0\n 58965: u64 [a5 + 0x28] = a1\n 58968: u64 [a5 + 0x30] = a2\n 58971: u64 [a5 + 0x38] = a3\n 58974: a0 = s1 + 0x200\n 58978: a1 = s1 + 0x220\n 58982: u64 [s1 + 0x18] = a4\n 58985: ra = 2610, jump @28\n      : @2148 [@dyn 1305] (gas: 24)\n 58992: a0 = sp + 0xffffffffffffffe0\n 58995: a0 = a0 & 0xffffffffffffffe0\n 58998: u64 [s1 + 0x78] = a0\n 59001: sp = a0\n 59003: a0 = u64 [s1 + 0x18]\n 59006: u64 [s1 + 0x178] = a0\n 59010: a0 = u64 [s1 + 0x20]\n 59013: u64 [s1 + 0x170] = a0\n 59017: a0 = u64 [s1 + 0x28]\n 59020: u64 [s1 + 0x168] = a0\n 59024: a0 = u64 [s1 + 0x30]\n 59027: u64 [s1 + 0x160] = a0\n 59031: a0 = u64 [s1 + 0x38]\n 59034: u64 [s1 + 0x198] = a0\n 59038: a0 = u64 [s1 + 0x40]\n 59041: u64 [s1 + 0x190] = a0\n 59045: a0 = u64 [s1 + 0x48]\n 59048: u64 [s1 + 0x188] = a0\n 59052: a0 = s1 + 0x1a0\n 59056: a1 = s1 + 0x180\n 59060: a2 = s1 + 0x160\n 59064: a3 = u64 [s1 + 0x50]\n 59067: u64 [s1 + 0x180] = a3\n 59071: ra = 2612, jump @2073\n      : @2149 [@dyn 1306] (gas: 18)\n 59077: t0 = u64 [s1 + 0x1d0]\n 59081: t1 = u64 [s1 + 0x1c0]\n 59085: t2 = u64 [s1 + 0x1d8]\n 59089: a2 = s1 + 0x100\n 59093: a0 = u64 [a2 + 0xc8]\n 59097: a5 = u64 [a2 + 0xb0]\n 59101: a3 = u64 [a2 + 0xb8]\n 59105: a4 = u64 [a2 + 0xa0]\n 59109: a1 = u64 [a2 + 0xa8]\n 59113: a2 = u64 [s1 + 0x78]\n 59116: u64 [a2 + 0x10] = a5\n 59119: u64 [a2 + 0x18] = a3\n 59122: u64 [a2] = a4\n 59124: t2 = a0 | t2\n 59127: a0 = t1 | t0\n 59130: a0 = a0 | t2\n 59133: u64 [a2 + 0x8] = a1\n 59136: jump @2160 if a0 != 0\n      : @2150 (gas: 16)\n 59140: u64 [s1 + 0x38] = a3\n 59143: u64 [s1 + 0x40] = a1\n 59146: u64 [s1 + 0x48] = a5\n 59149: u64 [s1 + 0x50] = a4\n 59152: a1 = u64 [s1 + 0x70]\n 59155: a3 = u64 [s1 + 0x58]\n 59158: a0 = a1 | a3\n 59161: a2 = u64 [s1 + 0x68]\n 59164: a4 = u64 [s1 + 0x60]\n 59167: a2 = a2 | a4\n 59170: a0 = a0 | a2\n 59173: a0 = a0 >> 0x20\n 59176: a2 = a2 | a3\n 59179: a2 = a2 << 0x20\n 59182: a0 = a0 | a2\n 59185: jump @2158 if a0 != 0\n      : @2151 (gas: 2)\n 59189: a0 = s1 + 0x100\n 59193: ra = 2614, jump @22\n      : @2152 [@dyn 1307] (gas: 9)\n 59200: a0 = u64 [s1 + 0x100]\n 59204: a0 = a0 << 0x10\n 59207: a0 = a0 >> 0x10\n 59210: u64 [s1 + 0x30] = a0\n 59213: a0 = s1 + 0xe0\n 59217: a1 = u64 [s1 + 0x78]\n 59220: ra = 0xa38\n 59224: t0 = 0x6\n 59227: jump @2259\n      : @2153 [@dyn 1308] (gas: 15)\n 59230: a0 = u16 [s1 + 0xe6]\n 59234: a0 = a0 << 0x30\n 59237: a1 = u64 [s1 + 0xf8]\n 59241: a2 = u64 [s1 + 0xf0]\n 59245: a3 = u64 [s1 + 0xe8]\n 59249: a4 = u64 [s1 + 0x30]\n 59252: a0 = a0 | a4\n 59255: a4 = s1 + 0x200\n 59259: u64 [a4 + 0x58] = a1\n 59262: u64 [a4 + 0x50] = a2\n 59265: u64 [a4 + 0x48] = a3\n 59268: u64 [a4 + 0x40] = a0\n 59271: a1 = s1 + 0x240\n 59275: a0 = u64 [s1 + 0x78]\n 59278: ra = 2618, jump @28\n      : @2154 [@dyn 1309] (gas: 10)\n 59285: a2 = u64 [s1 + 0x70]\n 59288: a0 = u64 [s1 + 0x58]\n 59291: a1 = u64 [s1 + 0x60]\n 59294: a0 = a0 | a1\n 59297: a1 = 0xffffffe0\n 59307: a1 = a2 <u a1\n 59310: a3 = u64 [s1 + 0x68]\n 59313: a1 = 0 if a3 != 0\n 59315: a1 = 0 if a0 != 0\n 59317: jump @2158 if a1 == 0\n      : @2155 (gas: 3)\n 59320: i32 a1 = a2 + 0x20\n 59323: a0 = s1 + 0xc0\n 59327: ra = 2620, jump @22\n      : @2156 [@dyn 1310] (gas: 21)\n 59334: a0 = u64 [s1 + 0xc0]\n 59338: a1 = u64 [s1 + 0xc8]\n 59342: a2 = u64 [s1 + 0xd0]\n 59346: a3 = u16 [s1 + 0xd8]\n 59350: u64 [s1 + 0x98] = a3\n 59354: u64 [s1 + 0x90] = a2\n 59358: u64 [s1 + 0x88] = a1\n 59362: u64 [s1 + 0x80] = a0\n 59366: a0 = u64 [s1 + 0x38]\n 59369: u64 [s1 + 0xb8] = a0\n 59373: a0 = u64 [s1 + 0x48]\n 59376: u64 [s1 + 0xb0] = a0\n 59380: a0 = u64 [s1 + 0x40]\n 59383: u64 [s1 + 0xa8] = a0\n 59387: a0 = s1 + 0xa0\n 59391: a1 = s1 + 0x80\n 59395: a2 = u64 [s1 + 0x50]\n 59398: u64 [s1 + 0xa0] = a2\n 59402: ra = 0xa3e\n 59406: t0 = 0x3d2\n 59410: jump @2373\n      : @2157 [@dyn 1311] (gas: 7)\n 59413: sp = s0 + 0xfffffffffffffd80\n 59417: a0 = sp + 0x200\n 59421: ra = u64 [a0 + 0x78]\n 59424: s0 = u64 [a0 + 0x70]\n 59427: s1 = u64 [a0 + 0x68]\n 59430: sp = sp + 0x280\n 59434: ret\n      : @2158 (gas: 1)\n 59436: trap\n      : @2159 (gas: 3)\n 59437: ra = 0xa40\n 59441: t0 = 0x86\n 59445: jump @2232\n      : @2160 [@dyn 1312] (gas: 8)\n 59448: u64 [s1 + 336] = 0\n 59452: u64 [s1 + 328] = 0\n 59456: u64 [s1 + 320] = 0\n 59460: a0 = 0x4e487b7100000000\n 59470: a1 = s1 + 0x140\n 59474: u64 [s1 + 0x158] = a0\n 59478: a0 = 0\n 59480: ra = 2626, jump @24\n      : @2161 [@dyn 1313] (gas: 7)\n 59487: u64 [s1 + 312] = 0\n 59491: u64 [s1 + 304] = 0\n 59495: u64 [s1 + 296] = 0\n 59499: a0 = 0x4\n 59502: a1 = s1 + 0x120\n 59506: u64 [s1 + 288] = 0\n 59510: ra = 2628, jump @24\n      : @2162 [@dyn 1314] (gas: 2)\n 59517: a1 = i32 [0x20150]\n 59522: jump @2164 if a1 >u 63\n      : @2163 (gas: 2)\n 59526: u32 [0x20150] = 0x40\n 59532: fallthrough\n      : @2164 (gas: 8)\n 59533: a1 = 0x20160\n 59538: i32 a1 = a1 + 0\n 59540: a0 = 0x1\n 59543: a2 = 0x24\n 59546: ra = 0xa46\n 59550: ecalli 16 // 'seal_return'\n 59552: t0 = 0xa48\n 59556: jump @2212\n      : @2165 [@dyn 1315] (gas: 1)\n 59559: t0 = 2632, jump @2212\n      : @2166 [@dyn 1316] (gas: 3)\n 59565: ra = 0xa4a\n 59569: t0 = 0x6\n 59572: jump @2259\n      : @2167 [@dyn 1317] (gas: 1)\n 59575: t0 = 2636, jump @2336\n      : @2168 [@dyn 1318] (gas: 1)\n 59581: jump @2180 if a4 == 0\n      : @2169 (gas: 1)\n 59585: t0 = 2638, jump @2279\n      : @2170 [@dyn 1319] (gas: 1)\n 59591: ra = 2640, jump @764\n      : @2171 [@dyn 1320] (gas: 1)\n 59598: t0 = 2642, jump @2226\n      : @2172 [@dyn 1321] (gas: 1)\n 59604: ra = 2644, jump @768\n      : @2173 [@dyn 1322] (gas: 1)\n 59611: t0 = 2646, jump @2276\n      : @2174 [@dyn 1323] (gas: 3)\n 59617: ra = 0xa58\n 59621: t0 = 0x6\n 59624: jump @2259\n      : @2175 [@dyn 1324] (gas: 6)\n 59627: t1 = u64 [s1 + 0x2e0]\n 59631: a2 = 0xffffffffffff\n 59641: t0 = t1 & a2\n 59644: t2 = u64 [s1 + 0x78]\n 59647: a2 = t2 & a2\n 59650: jump @2197 if a2 <u t0\n      : @2176 (gas: 19)\n 59654: a0 = s1 + 0x200\n 59658: a3 = u64 [a0 + 0xf8]\n 59662: a1 = u64 [a0 + 0xf0]\n 59666: a5 = u64 [a0 + 0xe8]\n 59670: a0 = a3 << 0x10\n 59673: a4 = a1 >> 0x30\n 59676: a0 = a0 | a4\n 59679: u64 [s1 + 0x50] = a0\n 59682: a1 = a1 << 0x10\n 59685: a0 = a5 >> 0x30\n 59688: a0 = a0 | a1\n 59691: u64 [s1 + 0x48] = a0\n 59694: a5 = a5 << 0x10\n 59697: a0 = t1 >> 0x30\n 59700: a0 = a0 | a5\n 59703: u64 [s1 + 0x38] = a0\n 59706: a3 = a3 >> 0x30\n 59709: u64 [s1 + 0x40] = a3\n 59712: jump @2188 if t0 != a2\n      : @2177 (gas: 1)\n 59715: t0 = 2650, jump @2254\n      : @2178 [@dyn 1325] (gas: 3)\n 59721: ra = 0xa5c\n 59725: t0 = 0x3d2\n 59729: jump @2373\n      : @2179 [@dyn 1326] (gas: 1)\n 59732: jump @2195\n      : @2180 (gas: 4)\n 59735: a0 = s1 + 0x180\n 59739: ra = 0xa5e\n 59743: t0 = 0x98\n 59747: jump @2372\n      : @2181 [@dyn 1327] (gas: 1)\n 59750: t0 = 2656, jump @2223\n      : @2182 [@dyn 1328] (gas: 3)\n 59756: ra = 0xa62\n 59760: t0 = 0x3c6\n 59764: jump @2328\n      : @2183 [@dyn 1329] (gas: 1)\n 59767: t0 = 2660, jump @2225\n      : @2184 [@dyn 1330] (gas: 3)\n 59773: ra = 0xa66\n 59777: t0 = 0x3cc\n 59781: jump @2328\n      : @2185 [@dyn 1331] (gas: 1)\n 59784: t0 = 2664, jump @2262\n      : @2186 [@dyn 1332] (gas: 1)\n 59790: ra = 2666, jump @2145\n      : @2187 [@dyn 1333] (gas: 6)\n 59796: a5 = 0\n 59798: a3 = 0\n 59800: a2 = 0\n 59802: a4 = 0\n 59804: t0 = 0xa7a\n 59808: jump @2252\n      : @2188 (gas: 4)\n 59811: a0 = s1 + 0x2c0\n 59815: ra = 0xa6c\n 59819: t0 = 0x98\n 59823: jump @2372\n      : @2189 [@dyn 1334] (gas: 1)\n 59826: t0 = 2670, jump @2222\n      : @2190 [@dyn 1335] (gas: 3)\n 59832: ra = 0xa70\n 59836: t0 = 0x3c6\n 59840: jump @2328\n      : @2191 [@dyn 1336] (gas: 1)\n 59843: t0 = 2674, jump @2214\n      : @2192 [@dyn 1337] (gas: 3)\n 59849: ra = 0xa74\n 59853: t0 = 0x3cc\n 59857: jump @2328\n      : @2193 [@dyn 1338] (gas: 1)\n 59860: t0 = 2678, jump @2253\n      : @2194 [@dyn 1339] (gas: 1)\n 59866: ra = 2680, jump @2145\n      : @2195 [@dyn 1340] (gas: 5)\n 59872: a2 = u64 [s1 + 0x50]\n 59875: a3 = u64 [s1 + 0x48]\n 59878: a4 = u64 [s1 + 0x40]\n 59881: a5 = u64 [s1 + 0x38]\n 59884: t0 = 2682, jump @2252\n      : @2196 [@dyn 1341] (gas: 1)\n 59890: ret\n      : @2197 (gas: 1)\n 59892: t0 = 2684, jump @2292\n      : @2198 [@dyn 1342] (gas: 1)\n 59898: ra = 2686, jump @24\n      : @2199 [@dyn 1343] (gas: 2)\n 59905: a1 = i32 [0x20150]\n 59910: jump @2201 if a1 >u 31\n      : @2200 (gas: 2)\n 59914: u32 [0x20150] = 0x20\n 59920: fallthrough\n      : @2201 (gas: 8)\n 59921: a1 = 0x20160\n 59926: i32 a1 = a1 + 0\n 59928: a0 = 0x1\n 59931: a2 = 0x4\n 59934: ecalli 16 // 'seal_return'\n 59936: a0 = 0\n 59938: ra = 0xa80\n 59942: jump @43\n      : @2202 [export #0: 'call'] (gas: 2)\n 59946: a0 = 0\n 59948: ra = 2688, jump @43\n      : @2203 [@dyn 1344] [export #1: 'deploy'] (gas: 2)\n 59955: a0 = 0x1\n 59958: ra = 2690, jump @43\n      : @2204 [@dyn 1345] (gas: 1)\n 59965: t0 = 2692, jump @2367\n      : @2205 [@dyn 1346] (gas: 21)\n 59971: t0 = u64 [a1]\n 59973: t1 = u64 [a1 + 0x8]\n 59976: t2 = u64 [a1 + 0x10]\n 59979: a1 = u64 [a1 + 0x18]\n 59982: a3 = u64 [a2]\n 59984: a4 = u64 [a2 + 0x8]\n 59987: a5 = u64 [a2 + 0x10]\n 59990: a2 = u64 [a2 + 0x18]\n 59993: s1 = a0\n 59995: u64 [sp + 0x18] = a2\n 59998: u64 [sp + 0x10] = a5\n 60001: u64 [sp + 0x8] = a4\n 60004: u64 [sp] = a3\n 60006: u64 [sp + 0x38] = a1\n 60009: u64 [sp + 0x30] = t2\n 60012: u64 [sp + 0x28] = t1\n 60015: a0 = sp + 0x40\n 60018: a1 = sp + 0x20\n 60021: a2 = sp\n 60023: u64 [sp + 0x20] = t0\n 60026: ra = 2694, jump @768\n      : @2206 [@dyn 1347] (gas: 9)\n 60033: a0 = u64 [sp + 0x50]\n 60036: a1 = u64 [sp + 0x58]\n 60039: a2 = u64 [sp + 0x40]\n 60042: a3 = u64 [sp + 0x48]\n 60045: u64 [s1 + 0x10] = a0\n 60048: u64 [s1 + 0x18] = a1\n 60051: u64 [s1] = a2\n 60053: u64 [s1 + 0x8] = a3\n 60056: t0 = 2696, jump @2307\n      : @2207 [@dyn 1348] (gas: 1)\n 60062: ret\n      : @2208 (gas: 32)\n 60064: a4 = u64 [sp + 0x30]\n 60067: a0 = a0 + a4\n 60070: a4 = a0 <u a4\n 60073: a5 = u64 [sp + 0x40]\n 60076: a2 = a2 + a5\n 60079: a2 = a2 + a4\n 60082: a4 = u64 [sp + 0x48]\n 60085: a1 = a1 + a4\n 60088: a4 = a1 <u a4\n 60091: a3 = a3 + a4\n 60094: a3 = a3 + s1\n 60097: a5 = a3 ^ s1\n 60100: s1 = a3 <u s1\n 60103: s1 = a4 if a5 == 0\n 60106: s1 = s1 + a0\n 60109: a0 = s1 <u a0\n 60112: a0 = a0 + a2\n 60115: a2 = a0 << 0x3f\n 60118: a4 = s1 >> 0x1\n 60121: a4 = a4 | a2\n 60124: u64 [sp + 0x30] = a4\n 60127: a2 = a0 >> 0x1\n 60130: u64 [sp + 0x40] = a2\n 60133: s1 = s1 << 0x3f\n 60136: a0 = a3 >> 0x1\n 60139: s1 = s1 | a0\n 60142: a3 = a3 << 0x3f\n 60145: a1 = a1 >> 0x1\n 60148: a1 = a1 | a3\n 60151: u64 [sp + 0x48] = a1\n 60154: a0 = u64 [sp + 0x50]\n 60157: jump [t0]\n      : @2209 (gas: 18)\n 60159: a1 = a0 <u a1\n 60162: a3 = u64 [s1 + 0x50]\n 60165: a2 = a3 + a1\n 60168: a3 = a2 <u a3\n 60171: a3 = a1 if a1 == 0\n 60174: a1 = u64 [s1 + 0x40]\n 60177: a3 = a3 + a1\n 60180: a1 = a3 <u a1\n 60183: a4 = u64 [s1 + 0x48]\n 60186: a1 = a1 + a4\n 60189: a4 = a0 | a3\n 60192: a1 = a1 | a2\n 60195: a4 = a4 | a1\n 60198: a4 = a4 >> 0x20\n 60201: a1 = a1 | a3\n 60204: a1 = a1 << 0x20\n 60207: a1 = a1 | a4\n 60210: jump [t0]\n      : @2210 (gas: 18)\n 60212: a1 = a0 <u a1\n 60215: a3 = u64 [s1 + 0x70]\n 60218: a2 = a3 + a1\n 60221: a3 = a2 <u a3\n 60224: a3 = a1 if a1 == 0\n 60227: a1 = u64 [s1 + 0x60]\n 60230: a3 = a3 + a1\n 60233: a1 = a3 <u a1\n 60236: a4 = u64 [s1 + 0x68]\n 60239: a1 = a1 + a4\n 60242: a4 = a0 | a3\n 60245: a1 = a1 | a2\n 60248: a4 = a4 | a1\n 60251: a4 = a4 >> 0x20\n 60254: a1 = a1 | a3\n 60257: a1 = a1 << 0x20\n 60260: a1 = a1 | a4\n 60263: jump [t0]\n      : @2211 (gas: 9)\n 60265: a1 = a1 + a4\n 60268: a4 = a0 | a3\n 60271: a1 = a1 | a2\n 60274: a4 = a4 | a1\n 60277: a4 = a4 >> 0x20\n 60280: a1 = a1 | a3\n 60283: a1 = a1 << 0x20\n 60286: a1 = a1 | a4\n 60289: jump [t0]\n      : @2212 (gas: 40)\n 60291: sp = sp + 0xfffffffffffffc00\n 60295: a4 = sp + 0x300\n 60299: u64 [a4 + 0xf8] = ra\n 60303: u64 [a4 + 0xf0] = s0\n 60307: u64 [a4 + 0xe8] = s1\n 60311: s0 = sp + 0x400\n 60315: sp = sp & 0xffffffffffffffe0\n 60318: s1 = sp\n 60320: u64 [s1 + 0x70] = a0\n 60323: a0 = u64 [a3 + 0x18]\n 60326: u64 [s1 + 0xb8] = a0\n 60330: a0 = u64 [a3 + 0x10]\n 60333: u64 [s1 + 0xb0] = a0\n 60337: a0 = u64 [a3 + 0x8]\n 60340: u64 [s1 + 0xa8] = a0\n 60344: a0 = u64 [a3]\n 60346: u64 [s1 + 0xa0] = a0\n 60350: a0 = u64 [a2 + 0x18]\n 60353: u64 [s1 + 0x58] = a0\n 60356: a0 = u64 [a2 + 0x10]\n 60359: u64 [s1 + 0x60] = a0\n 60362: a0 = u64 [a2 + 0x8]\n 60365: u64 [s1 + 0x68] = a0\n 60368: a0 = u64 [a2]\n 60370: u64 [s1 + 0x78] = a0\n 60373: a4 = u64 [a1 + 0x18]\n 60376: a3 = u64 [a1 + 0x10]\n 60379: a2 = u64 [a1 + 0x8]\n 60382: a0 = u64 [a1]\n 60384: u64 [s1 + 0x80] = a4\n 60388: u64 [s1 + 0x3d8] = a4\n 60392: u64 [s1 + 0x88] = a3\n 60396: u64 [s1 + 0x3d0] = a3\n 60400: u64 [s1 + 0x90] = a2\n 60404: u64 [s1 + 0x3c8] = a2\n 60408: u64 [s1 + 0x98] = a0\n 60412: u64 [s1 + 0x3c0] = a0\n 60416: a0 = s1 + 0x3a0\n 60420: a1 = s1 + 0x3c0\n 60424: jump [t0]\n      : @2213 (gas: 9)\n 60426: a0 = u64 [a3 + 0x18]\n 60429: a1 = u64 [a3 + 0x10]\n 60432: a2 = u64 [a3 + 0x8]\n 60435: a3 = u64 [a3]\n 60437: a0 = reverse a0\n 60439: a1 = reverse a1\n 60441: a2 = reverse a2\n 60443: a3 = reverse a3\n 60445: jump [t0]\n      : @2214 (gas: 27)\n 60447: a1 = u64 [s1 + 0x28]\n 60450: a0 = a1 + 0x20\n 60453: a1 = a0 <u a1\n 60456: a3 = u64 [s1 + 0x20]\n 60459: a2 = a3 + a1\n 60462: a3 = a2 <u a3\n 60465: a3 = a1 if a1 == 0\n 60468: a1 = u64 [s1 + 0x18]\n 60471: a3 = a3 + a1\n 60474: a1 = a3 <u a1\n 60477: a4 = u64 [s1 + 0x30]\n 60480: a4 = a4 + a1\n 60483: a1 = u64 [s1 + 0xb8]\n 60487: u64 [s1 + 0x258] = a1\n 60491: a1 = u64 [s1 + 0xb0]\n 60495: u64 [s1 + 0x250] = a1\n 60499: a1 = u64 [s1 + 0xa8]\n 60503: u64 [s1 + 0x248] = a1\n 60507: a1 = u64 [s1 + 0xa0]\n 60511: u64 [s1 + 0x240] = a1\n 60515: u64 [s1 + 0x268] = a2\n 60519: u64 [s1 + 0x260] = a0\n 60523: u64 [s1 + 0x270] = a3\n 60527: a0 = s1 + 0x260\n 60531: a1 = s1 + 0x240\n 60535: u64 [s1 + 0x278] = a4\n 60539: jump [t0]\n      : @2215 (gas: 33)\n 60541: a4 = u64 [sp + 0x30]\n 60544: a0 = a0 + a4\n 60547: a4 = a0 <u a4\n 60550: a5 = u64 [sp + 0x40]\n 60553: a2 = a2 + a5\n 60556: a2 = a2 + a4\n 60559: a4 = u64 [sp + 0x48]\n 60562: a1 = a1 + a4\n 60565: a4 = a1 <u a4\n 60568: a3 = a3 + a4\n 60571: a3 = a3 + s1\n 60574: a5 = a3 ^ s1\n 60577: s1 = a3 <u s1\n 60580: s1 = a4 if a5 == 0\n 60583: s1 = s1 + a0\n 60586: a0 = s1 <u a0\n 60589: a0 = a0 + a2\n 60592: a2 = a0 << 0x3f\n 60595: a4 = s1 >> 0x1\n 60598: a4 = a4 | a2\n 60601: u64 [sp + 0x30] = a4\n 60604: a2 = a0 >> 0x1\n 60607: u64 [sp + 0x40] = a2\n 60610: s1 = s1 << 0x3f\n 60613: a0 = a3 >> 0x1\n 60616: s1 = s1 | a0\n 60619: a3 = a3 << 0x3f\n 60622: a1 = a1 >> 0x1\n 60625: a1 = a1 | a3\n 60628: u64 [sp + 0x48] = a1\n 60631: a0 = u64 [sp + 0x50]\n 60634: a3 = sp + 0x200\n 60638: jump [t0]\n      : @2216 (gas: 29)\n 60640: a4 = u64 [s1 + 0xb8]\n 60644: a2 = a4 <u 0x80\n 60648: a3 = u64 [s1 + 0x70]\n 60651: a1 = a3 if a2 != 0\n 60654: a5 = u64 [s1 + 0x78]\n 60657: a3 = u64 [s1 + 0x88]\n 60661: a3 = a3 | a5\n 60664: a3 = a0 if a2 == 0\n 60667: a1 = 0xffffffffffffffff if a4 == 0\n 60670: a3 = 0xffffffffffffffff if a4 == 0\n 60673: a4 = u64 [s1 + 0x80]\n 60677: a4 = 0 if a2 == 0\n 60679: a5 = 0 if a2 == 0\n 60681: a0 = u64 [s1 + 0x90]\n 60685: a0 = a0 & ~a3\n 60688: a2 = u64 [s1 + 0x98]\n 60692: a1 = a2 & ~a1\n 60695: a2 = u64 [s1 + 0xa8]\n 60699: a2 = a2 & ~a5\n 60702: a3 = u64 [s1 + 0xb0]\n 60706: a3 = a3 & ~a4\n 60709: a4 = s1 + 0x200\n 60713: u64 [a4 + 0xb8] = a3\n 60717: u64 [a4 + 0xb0] = a2\n 60721: u64 [a4 + 0xa8] = a1\n 60725: u64 [a4 + 0xa0] = a0\n 60729: a1 = s1 + 0x2a0\n 60733: a0 = u64 [s1 + 0xa0]\n 60737: jump [t0]\n      : @2217 (gas: 28)\n 60739: a0 = u64 [s1 + 0x2e0]\n 60743: a0 = a0 << 0x10\n 60746: a4 = a0 >> 0x10\n 60749: a0 = u64 [s1 + 0x38]\n 60752: u64 [s1 + 0xf8] = a0\n 60756: a0 = u64 [s1 + 0x40]\n 60759: u64 [s1 + 0xf0] = a0\n 60763: a0 = u64 [s1 + 0x48]\n 60766: u64 [s1 + 0xe8] = a0\n 60770: a0 = u64 [s1 + 0x50]\n 60773: u64 [s1 + 0xe0] = a0\n 60777: u64 [s1 + 280] = 0\n 60781: u64 [s1 + 272] = 0\n 60785: u64 [s1 + 264] = 0\n 60789: a0 = u64 [s1 + 0x60]\n 60792: u64 [s1 + 0x138] = a0\n 60796: a0 = u64 [s1 + 0x68]\n 60799: u64 [s1 + 0x130] = a0\n 60803: a0 = u64 [s1 + 0x70]\n 60806: u64 [s1 + 0x128] = a0\n 60810: a0 = u64 [s1 + 0x78]\n 60813: u64 [s1 + 0x120] = a0\n 60817: a0 = s1 + 0x140\n 60821: a1 = s1 + 0x120\n 60825: a2 = s1 + 0x100\n 60829: a3 = s1 + 0xe0\n 60833: u64 [s1 + 0x100] = a4\n 60837: jump [t0]\n      : @2218 (gas: 23)\n 60839: a0 = u64 [s1 + 0x1c0]\n 60843: a1 = u64 [s1 + 0x1c8]\n 60847: a2 = u64 [s1 + 0x1d0]\n 60851: a3 = u64 [s1 + 0x1d8]\n 60855: a4 = u64 [s1 + 0x8]\n 60858: u64 [s1 + 0x158] = a4\n 60862: a4 = u64 [s1 + 0x10]\n 60865: u64 [s1 + 0x150] = a4\n 60869: a4 = u64 [s1 + 0x18]\n 60872: u64 [s1 + 0x148] = a4\n 60876: a4 = u64 [s1 + 0x28]\n 60879: u64 [s1 + 0x140] = a4\n 60883: u64 [s1 + 0x178] = a3\n 60887: u64 [s1 + 0x170] = a2\n 60891: u64 [s1 + 0x168] = a1\n 60895: u64 [s1 + 0x160] = a0\n 60899: u64 [s1 + 408] = 0\n 60903: u64 [s1 + 400] = 0\n 60907: u64 [s1 + 392] = 0\n 60911: a0 = s1 + 0x180\n 60915: a1 = s1 + 0x160\n 60919: a2 = s1 + 0x140\n 60923: jump [t0]\n      : @2219 (gas: 24)\n 60925: a1 = u64 [s1 + 0xb8]\n 60929: a0 = a1 + 0x20\n 60932: a1 = a0 <u a1\n 60935: a2 = t2 + a1\n 60938: a3 = a2 <u t2\n 60941: a3 = a1 if a1 == 0\n 60944: a3 = a3 + t1\n 60947: a1 = a3 <u t1\n 60950: a4 = u64 [s1 + 0xb0]\n 60954: a4 = a4 + a1\n 60957: u64 [s1 + 0x160] = a5\n 60961: u64 [s1 + 0x140] = a0\n 60965: a0 = u64 [s1 + 0x28]\n 60968: u64 [s1 + 0x168] = a0\n 60972: a0 = u64 [s1 + 0x20]\n 60975: u64 [s1 + 0x170] = a0\n 60979: u64 [s1 + 0x148] = a2\n 60983: a0 = u64 [s1 + 0x18]\n 60986: u64 [s1 + 0x178] = a0\n 60990: u64 [s1 + 0x150] = a3\n 60994: a0 = s1 + 0x160\n 60998: a1 = s1 + 0x140\n 61002: u64 [s1 + 0x158] = a4\n 61006: jump [t0]\n      : @2220 (gas: 8)\n 61008: a0 = a0 | a5\n 61011: a3 = a1 | t2\n 61014: a3 = a3 | a0\n 61017: a0 = a0 | t2\n 61020: a3 = a3 >> 0x20\n 61023: a0 = a0 << 0x20\n 61026: a0 = a0 | a3\n 61029: jump [t0]\n      : @2221 (gas: 31)\n 61031: sp = sp + 0xfffffffffffffce0\n 61035: a3 = sp + 0x300\n 61039: u64 [a3 + 0x18] = ra\n 61042: u64 [a3 + 0x10] = s0\n 61045: u64 [a3 + 0x8] = s1\n 61048: s0 = sp + 0x320\n 61052: sp = sp & 0xffffffffffffffe0\n 61055: s1 = sp\n 61057: u64 [s1 + 0x58] = a0\n 61060: a0 = u64 [a2 + 0x18]\n 61063: u64 [s1 + 0x50] = a0\n 61066: a0 = u64 [a2 + 0x10]\n 61069: u64 [s1 + 0x48] = a0\n 61072: a0 = u64 [a2 + 0x8]\n 61075: u64 [s1 + 0x40] = a0\n 61078: a0 = u64 [a2]\n 61080: u64 [s1 + 0x38] = a0\n 61083: a4 = u64 [a1 + 0x18]\n 61086: a3 = u64 [a1 + 0x10]\n 61089: a2 = u64 [a1 + 0x8]\n 61092: a0 = u64 [a1]\n 61094: u64 [s1 + 0x60] = a4\n 61097: u64 [s1 + 0x278] = a4\n 61101: u64 [s1 + 0x68] = a3\n 61104: u64 [s1 + 0x270] = a3\n 61108: u64 [s1 + 0x70] = a2\n 61111: u64 [s1 + 0x268] = a2\n 61115: u64 [s1 + 0x78] = a0\n 61118: u64 [s1 + 0x260] = a0\n 61122: i32 a0 = s1 + 0x280\n 61126: jump [t0]\n      : @2222 (gas: 23)\n 61128: a4 = u64 [s1 + 0x2c0]\n 61132: u64 [s1 + 0x28] = a4\n 61135: a3 = u64 [s1 + 0x2c8]\n 61139: u64 [s1 + 0x20] = a3\n 61142: a2 = u64 [s1 + 0x2d0]\n 61146: u64 [s1 + 0x18] = a2\n 61149: a1 = u64 [s1 + 0x2d8]\n 61153: u64 [s1 + 0x30] = a1\n 61156: a0 = u64 [s1 + 0x58]\n 61159: u64 [s1 + 0x298] = a0\n 61163: a0 = u64 [s1 + 0x60]\n 61166: u64 [s1 + 0x290] = a0\n 61170: a0 = u64 [s1 + 0x68]\n 61173: u64 [s1 + 0x288] = a0\n 61177: a0 = u64 [s1 + 0x78]\n 61180: u64 [s1 + 0x280] = a0\n 61184: u64 [s1 + 0x2b8] = a1\n 61188: u64 [s1 + 0x2b0] = a2\n 61192: u64 [s1 + 0x2a8] = a3\n 61196: a0 = s1 + 0x2a0\n 61200: a1 = s1 + 0x280\n 61204: u64 [s1 + 0x2a0] = a4\n 61208: jump [t0]\n      : @2223 (gas: 23)\n 61210: a4 = u64 [s1 + 0x180]\n 61214: u64 [s1 + 0x48] = a4\n 61217: a3 = u64 [s1 + 0x188]\n 61221: u64 [s1 + 0x40] = a3\n 61224: a2 = u64 [s1 + 0x190]\n 61228: u64 [s1 + 0x38] = a2\n 61231: a1 = u64 [s1 + 0x198]\n 61235: u64 [s1 + 0x50] = a1\n 61238: a0 = u64 [s1 + 0x58]\n 61241: u64 [s1 + 0x158] = a0\n 61245: a0 = u64 [s1 + 0x60]\n 61248: u64 [s1 + 0x150] = a0\n 61252: a0 = u64 [s1 + 0x68]\n 61255: u64 [s1 + 0x148] = a0\n 61259: a0 = u64 [s1 + 0x78]\n 61262: u64 [s1 + 0x140] = a0\n 61266: u64 [s1 + 0x178] = a1\n 61270: u64 [s1 + 0x170] = a2\n 61274: u64 [s1 + 0x168] = a3\n 61278: a0 = s1 + 0x160\n 61282: a1 = s1 + 0x140\n 61286: u64 [s1 + 0x160] = a4\n 61290: jump [t0]\n      : @2224 (gas: 9)\n 61292: a0 = u64 [a3 + 0x18]\n 61295: a1 = u64 [a3 + 0x10]\n 61298: a2 = u64 [a3 + 0x8]\n 61301: a3 = u64 [a3]\n 61303: a4 = reverse a0\n 61305: a0 = reverse a1\n 61307: a1 = reverse a2\n 61309: a2 = reverse a3\n 61311: jump [t0]\n      : @2225 (gas: 28)\n 61313: a1 = u64 [s1 + 0x48]\n 61316: a0 = a1 + 0x20\n 61319: a1 = a0 <u a1\n 61322: a3 = u64 [s1 + 0x40]\n 61325: a2 = a3 + a1\n 61328: a3 = a2 <u a3\n 61331: a3 = a1 if a1 == 0\n 61334: a1 = u64 [s1 + 0x38]\n 61337: a3 = a3 + a1\n 61340: a1 = a3 <u a1\n 61343: a4 = u64 [s1 + 0x50]\n 61346: a4 = a4 + a1\n 61349: a1 = u64 [s1 + 0xb8]\n 61353: a5 = s1 + 0x100\n 61357: u64 [a5 + 0x18] = a1\n 61360: a1 = u64 [s1 + 0xb0]\n 61364: u64 [a5 + 0x10] = a1\n 61367: a1 = u64 [s1 + 0xa8]\n 61371: u64 [a5 + 0x8] = a1\n 61374: a1 = u64 [s1 + 0xa0]\n 61378: u64 [a5] = a1\n 61380: u64 [a5 + 0x28] = a2\n 61383: u64 [a5 + 0x20] = a0\n 61386: u64 [a5 + 0x30] = a3\n 61389: a0 = s1 + 0x120\n 61393: a1 = s1 + 0x100\n 61397: u64 [a5 + 0x38] = a4\n 61400: jump [t0]\n      : @2226 (gas: 20)\n 61402: a0 = u64 [s1 + 0x380]\n 61406: a1 = u64 [s1 + 0x388]\n 61410: a2 = u64 [s1 + 0x390]\n 61414: a3 = u64 [s1 + 0x398]\n 61418: u64 [s1 + 0x318] = a3\n 61422: u64 [s1 + 0x310] = a2\n 61426: u64 [s1 + 0x308] = a1\n 61430: u64 [s1 + 0x300] = a0\n 61434: a0 = u64 [s1 + 0x80]\n 61438: u64 [s1 + 0x338] = a0\n 61442: a0 = u64 [s1 + 0x88]\n 61446: u64 [s1 + 0x330] = a0\n 61450: a0 = u64 [s1 + 0x90]\n 61454: u64 [s1 + 0x328] = a0\n 61458: a0 = s1 + 0x340\n 61462: a1 = s1 + 0x320\n 61466: a2 = s1 + 0x300\n 61470: a3 = u64 [s1 + 0x98]\n 61474: u64 [s1 + 0x320] = a3\n 61478: jump [t0]\n      : @2227 (gas: 16)\n 61480: a0 = u64 [s1 + 0xf8]\n 61484: u64 [s1 + 0xb0] = a0\n 61488: a0 = u64 [s1 + 0xf0]\n 61492: u64 [s1 + 0xa8] = a0\n 61496: a0 = u64 [s1 + 0xe8]\n 61500: u64 [s1 + 0x98] = a0\n 61504: a0 = u64 [s1 + 0xe0]\n 61508: u64 [s1 + 0x90] = a0\n 61512: a0 = u64 [s1 + 0x28]\n 61515: a0 = a0 << 0x3b\n 61518: a1 = a0 >> 0x38\n 61521: u64 [s1 + 0xb8] = a1\n 61525: a2 = 0x80 - a1\n 61529: a0 = 0xffffffffffffffff\n 61532: a1 = 0xffffffffffffffff\n 61535: jump [t0]\n      : @2228 (gas: 14)\n 61537: a0 = u64 [sp + 0x18]\n 61540: a1 = u64 [sp + 0x10]\n 61543: a2 = u64 [sp + 0x8]\n 61546: a3 = u64 [sp]\n 61548: u64 [s1 + 0x18] = a0\n 61551: u64 [s1 + 0x10] = a1\n 61554: u64 [s1 + 0x8] = a2\n 61557: u64 [s1] = a3\n 61559: sp = s0 + 0xffffffffffffffc0\n 61562: ra = u64 [sp + 0x38]\n 61565: s0 = u64 [sp + 0x30]\n 61568: s1 = u64 [sp + 0x28]\n 61571: sp = sp + 0x40\n 61574: jump [t0]\n      : @2229 (gas: 6)\n 61576: sp = s0 + 0xffffffffffffffa0\n 61579: ra = u64 [sp + 0x58]\n 61582: s0 = u64 [sp + 0x50]\n 61585: s1 = u64 [sp + 0x48]\n 61588: sp = sp + 0x60\n 61591: jump [t0]\n      : @2230 (gas: 23)\n 61593: u64 [s1 + 184] = 0\n 61597: t2 = 0\n 61599: t1 = 0\n 61601: u64 [s1 + 176] = 0\n 61605: a5 = u64 [s1 + 0xa8]\n 61609: a0 = u64 [a5 + 0x18]\n 61612: a1 = u64 [s1 + 0x30]\n 61615: a2 = a1 + 0x20\n 61618: u64 [s1 + 0x50] = a2\n 61621: a1 = a2 <u a1\n 61624: a2 = u64 [s1 + 0x28]\n 61627: a3 = a2 + a1\n 61630: u64 [s1 + 0x48] = a3\n 61633: a4 = a3 <u a2\n 61636: a4 = a1 if a1 == 0\n 61639: a1 = u64 [a5 + 0x10]\n 61642: a2 = u64 [a5 + 0x8]\n 61645: a3 = u64 [a5]\n 61647: a0 = reverse a0\n 61649: a1 = reverse a1\n 61651: ra = reverse a2\n 61653: a2 = reverse a3\n 61655: jump [t0]\n      : @2231 (gas: 14)\n 61657: a0 = u64 [a2 + 0x8]\n 61660: a1 = i32 [a2 + 0x10]\n 61663: a2 = u64 [a2]\n 61665: a0 = reverse a0\n 61667: a3 = a0 << 0x20\n 61670: a1 = reverse a1\n 61672: a1 = a1 >> 0x20\n 61675: a3 = a3 | a1\n 61678: a0 = a0 >> 0x20\n 61681: a1 = reverse a2\n 61683: a2 = a1 << 0x20\n 61686: a0 = a0 | a2\n 61689: a1 = a1 >> 0x20\n 61692: jump [t0]\n      : @2232 (gas: 13)\n 61694: sp = sp + 0xffffffffffffffb0\n 61697: u64 [sp + 0x48] = ra\n 61700: u64 [sp + 0x40] = s0\n 61703: s0 = sp + 0x50\n 61706: sp = sp & 0xfffffffffffffff0\n 61709: u64 [sp + 48] = 0\n 61712: u64 [sp + 40] = 0\n 61715: u64 [sp + 32] = 0\n 61718: a0 = 0x4e487b7100000000\n 61728: a1 = sp + 0x20\n 61731: u64 [sp + 0x38] = a0\n 61734: a0 = 0\n 61736: jump [t0]\n      : @2233 (gas: 25)\n 61738: a0 = s1 + 0x100\n 61742: a2 = u64 [a0 + 0x38]\n 61745: u64 [s1 + 0xb8] = a2\n 61749: a1 = u64 [a0 + 0x30]\n 61752: u64 [s1 + 0xb0] = a1\n 61756: a3 = u64 [a0 + 0x28]\n 61759: u64 [s1 + 0xa8] = a3\n 61763: a4 = u64 [a0 + 0x20]\n 61766: u64 [s1 + 0xa0] = a4\n 61770: a0 = u64 [s1 + 0x18]\n 61773: u64 [s1 + 0xd8] = a0\n 61777: a0 = u64 [s1 + 0x20]\n 61780: u64 [s1 + 0xd0] = a0\n 61784: a0 = u64 [s1 + 0x28]\n 61787: u64 [s1 + 0xc8] = a0\n 61791: a0 = u64 [s1 + 0x30]\n 61794: u64 [s1 + 0xc0] = a0\n 61798: u64 [s1 + 0xf8] = a2\n 61802: u64 [s1 + 0xf0] = a1\n 61806: u64 [s1 + 0xe8] = a3\n 61810: a0 = s1 + 0x100\n 61814: a1 = s1 + 0xe0\n 61818: a2 = s1 + 0xc0\n 61822: u64 [s1 + 0xe0] = a4\n 61826: jump [t0]\n      : @2234 (gas: 10)\n 61828: a0 = a4 << 0x10\n 61831: a5 = a1 >> 0x30\n 61834: a0 = a0 | a5\n 61837: a1 = a1 << 0x10\n 61840: a5 = a3 >> 0x30\n 61843: a1 = a1 | a5\n 61846: a3 = a3 << 0x10\n 61849: a2 = a2 | a3\n 61852: a4 = a4 >> 0x30\n 61855: jump [t0]\n      : @2235 (gas: 24)\n 61857: sp = sp + 0xfffffffffffffce0\n 61861: a2 = sp + 0x300\n 61865: u64 [a2 + 0x18] = ra\n 61868: u64 [a2 + 0x10] = s0\n 61871: u64 [a2 + 0x8] = s1\n 61874: s0 = sp + 0x320\n 61878: sp = sp & 0xffffffffffffffe0\n 61881: s1 = sp\n 61883: a3 = u64 [a1 + 0x10]\n 61886: a2 = u64 [a1 + 0x18]\n 61889: a4 = u64 [a1 + 0x8]\n 61892: a1 = u64 [a1]\n 61894: u64 [s1 + 0x50] = a2\n 61897: u64 [s1 + 0x40] = a4\n 61900: a4 = a4 | a2\n 61903: a2 = a1 | a3\n 61906: a2 = a2 | a4\n 61909: a2 = a2 >> 0x20\n 61912: u64 [s1 + 0x48] = a3\n 61915: a3 = a3 | a4\n 61918: a3 = a3 << 0x20\n 61921: a2 = a2 | a3\n 61924: u64 [s1 + 0x20] = a0\n 61927: jump [t0]\n      : @2236 (gas: 8)\n 61929: u64 [s1 + 208] = 0\n 61933: u64 [s1 + 200] = 0\n 61937: u64 [s1 + 192] = 0\n 61941: a0 = 0x6dfcc65000000000\n 61951: a1 = s1 + 0xc0\n 61955: u64 [s1 + 0xd8] = a0\n 61959: a0 = 0\n 61961: jump [t0]\n      : @2237 (gas: 9)\n 61963: a4 = a3 + 0x160\n 61967: a3 = a4 <u a3\n 61970: a5 = a2 + a3\n 61973: a2 = a5 <u a2\n 61976: a2 = a3 if a3 == 0\n 61979: a2 = a2 + a1\n 61982: a1 = a2 <u a1\n 61985: a3 = a0 + a1\n 61988: jump [t0]\n      : @2238 (gas: 16)\n 61990: a1 = a1 + t1\n 61993: a3 = a0 | a2\n 61996: a3 = a3 <u 0x1\n 61999: a5 = a4 <u a3\n 62002: a1 = a1 - a5\n 62005: a4 = a4 - a3\n 62008: a3 = a0 <u 0x1\n 62011: a2 = a2 - a3\n 62014: a0 = a0 + 0xffffffffffffffff\n 62017: u64 [s1 + 0x2c0] = a0\n 62021: u64 [s1 + 0x2c8] = a2\n 62025: u64 [s1 + 0x2d0] = a4\n 62029: u64 [s1 + 0x2d8] = a1\n 62033: a0 = s1 + 0x200\n 62037: a1 = s1 + 0x2c0\n 62041: jump [t0]\n      : @2239 (gas: 15)\n 62043: u64 [s1 + 0x1c0] = a2\n 62047: a2 = u64 [s1 + 0x40]\n 62050: u64 [s1 + 0x188] = a2\n 62054: u64 [s1 + 0x1a8] = a1\n 62058: a1 = u64 [s1 + 0x48]\n 62061: u64 [s1 + 0x190] = a1\n 62065: u64 [s1 + 0x1b0] = a0\n 62069: a0 = u64 [s1 + 0x50]\n 62072: u64 [s1 + 0x198] = a0\n 62076: a0 = s1 + 0x1e0\n 62080: a1 = s1 + 0x1c0\n 62084: a2 = s1 + 0x1a0\n 62088: a3 = s1 + 0x180\n 62092: u64 [s1 + 0x1b8] = a4\n 62096: jump [t0]\n      : @2240 (gas: 8)\n 62098: a2 = a1 | a5\n 62101: a0 = a0 | a3\n 62104: a2 = a2 | a0\n 62107: a2 = a2 >> 0x20\n 62110: a0 = a0 | a5\n 62113: a0 = a0 << 0x20\n 62116: a0 = a0 | a2\n 62119: jump [t0]\n      : @2241 (gas: 20)\n 62121: a3 = u64 [s1 + 0x10]\n 62124: a0 = u64 [a3 + 0x18]\n 62127: a1 = u64 [a3 + 0x10]\n 62130: a2 = u64 [a3 + 0x8]\n 62133: a3 = u64 [a3]\n 62135: a0 = reverse a0\n 62137: a1 = reverse a1\n 62139: a2 = reverse a2\n 62141: a3 = reverse a3\n 62143: a4 = u64 [s1 + 0x18]\n 62146: u64 [a4 + 0x18] = a3\n 62149: u64 [a4 + 0x10] = a2\n 62152: u64 [a4 + 0x8] = a1\n 62155: u64 [a4] = a0\n 62157: sp = s0 + 0xffffffffffffff80\n 62160: ra = u64 [sp + 0x78]\n 62163: s0 = u64 [sp + 0x70]\n 62166: s1 = u64 [sp + 0x68]\n 62169: sp = sp + 0x80\n 62173: jump [t0]\n      : @2242 (gas: 17)\n 62175: a0 = u64 [a2 + 0x8]\n 62178: a1 = i32 [a2 + 0x10]\n 62181: a2 = u64 [a2]\n 62183: a0 = reverse a0\n 62185: a3 = a0 << 0x20\n 62188: a1 = reverse a1\n 62190: a1 = a1 >> 0x20\n 62193: a3 = a3 | a1\n 62196: a0 = a0 >> 0x20\n 62199: a1 = reverse a2\n 62201: a2 = a1 << 0x20\n 62204: a0 = a0 | a2\n 62207: a1 = a1 >> 0x20\n 62210: u64 [s1 + 440] = 0\n 62214: u64 [s1 + 0x1b0] = a1\n 62218: u64 [s1 + 0x1a8] = a0\n 62222: jump [t0]\n      : @2243 (gas: 8)\n 62224: a0 = a0 | a2\n 62227: a2 = s1 | a1\n 62230: a2 = a2 | a0\n 62233: a2 = a2 >> 0x20\n 62236: a0 = a0 | a1\n 62239: a0 = a0 << 0x20\n 62242: a0 = a0 | a2\n 62245: jump [t0]\n      : @2244 (gas: 8)\n 62247: a0 = a0 | a2\n 62250: a2 = a3 | a1\n 62253: a2 = a2 | a0\n 62256: a2 = a2 >> 0x20\n 62259: a0 = a0 | a1\n 62262: a0 = a0 << 0x20\n 62265: a0 = a0 | a2\n 62268: jump [t0]\n      : @2245 (gas: 15)\n 62270: t2 = u64 [s1 + 0xb8]\n 62274: t1 = u64 [s1 + 0xa0]\n 62278: ra = u64 [s1 + 0xa8]\n 62282: a1 = u64 [s1 + 0x50]\n 62285: a0 = a1 + t2\n 62288: a1 = a0 <u a1\n 62291: a4 = u64 [s1 + 0x48]\n 62294: a2 = a4 + t1\n 62297: a2 = a2 + a1\n 62300: a5 = a2 ^ a4\n 62303: a4 = a2 <u a4\n 62306: a4 = a1 if a5 == 0\n 62309: a5 = u64 [s1 + 0x40]\n 62312: a1 = a5 + ra\n 62315: jump [t0]\n      : @2246 (gas: 17)\n 62317: a3 = u64 [s1 + 0x18]\n 62320: a0 = u64 [a3 + 0x18]\n 62323: a1 = u64 [a3 + 0x10]\n 62326: a2 = u64 [a3 + 0x8]\n 62329: a3 = u64 [a3]\n 62331: a0 = reverse a0\n 62333: a1 = reverse a1\n 62335: a2 = reverse a2\n 62337: a3 = reverse a3\n 62339: a4 = s1 + 0x100\n 62343: u64 [a4 + 0x18] = a3\n 62346: u64 [a4 + 0x10] = a2\n 62349: u64 [a4 + 0x8] = a1\n 62352: u64 [a4] = a0\n 62354: a0 = s1 + 0x60\n 62357: a1 = s1 + 0x100\n 62361: jump [t0]\n      : @2247 (gas: 19)\n 62363: u64 [sp + 0x310] = t1\n 62367: u64 [sp + 0x308] = t2\n 62371: u64 [sp + 0x300] = s1\n 62375: u64 [sp + 0x338] = a4\n 62379: a4 = sp + 0x300\n 62383: u64 [a4 + 0x30] = a0\n 62386: u64 [a4 + 0x28] = ra\n 62389: a0 = u64 [sp + 0x30]\n 62392: u64 [a4 + 0x20] = a0\n 62395: u64 [a4 + 0x58] = a3\n 62398: u64 [a4 + 0x50] = a2\n 62401: u64 [a4 + 0x48] = a5\n 62404: a0 = sp + 0x360\n 62408: a1 = sp + 0x340\n 62412: a2 = sp + 0x320\n 62416: a3 = sp + 0x300\n 62420: s1 = u64 [sp + 0x98]\n 62424: u64 [a4 + 0x40] = s1\n 62427: jump [t0]\n      : @2248 (gas: 10)\n 62429: a1 = a1 + t1\n 62432: a3 = a0 | a2\n 62435: a3 = a3 <u 0x1\n 62438: a5 = a4 <u a3\n 62441: a1 = a1 - a5\n 62444: a4 = a4 - a3\n 62447: a3 = a0 <u 0x1\n 62450: a2 = a2 - a3\n 62453: a0 = a0 + 0xffffffffffffffff\n 62456: jump [t0]\n      : @2249 (gas: 10)\n 62458: a3 = u64 [s1 + 0x38]\n 62461: a0 = u64 [a3 + 0x18]\n 62464: a1 = u64 [a3 + 0x10]\n 62467: a2 = u64 [a3 + 0x8]\n 62470: a3 = u64 [a3]\n 62472: a0 = reverse a0\n 62474: a1 = reverse a1\n 62476: a2 = reverse a2\n 62478: a3 = reverse a3\n 62480: jump [t0]\n      : @2250 (gas: 20)\n 62482: a2 = sp + 0x400\n 62486: a0 = u64 [a2 + 0x80]\n 62490: u64 [sp + 0x98] = a0\n 62494: a0 = u64 [a2 + 0x88]\n 62498: u64 [sp + 0x50] = a0\n 62501: a0 = u64 [a2 + 0x90]\n 62505: u64 [sp + 0x48] = a0\n 62508: a0 = u64 [a2 + 0x98]\n 62512: u64 [sp + 0x40] = a0\n 62515: a0 = u64 [sp + 0xd0]\n 62519: u64 [a2 + 0x38] = a0\n 62522: a0 = u64 [sp + 0xd8]\n 62526: u64 [a2 + 0x30] = a0\n 62529: a0 = u64 [sp + 0xc8]\n 62533: u64 [a2 + 0x28] = a0\n 62536: a0 = sp + 0x440\n 62540: a1 = sp + 0x420\n 62544: s1 = u64 [sp + 0xa8]\n 62548: u64 [a2 + 0x20] = s1\n 62551: jump [t0]\n      : @2251 (gas: 9)\n 62553: sp = sp + 0xffffffffffffffc0\n 62556: u64 [sp + 0x38] = ra\n 62559: u64 [sp + 0x30] = s0\n 62562: u64 [sp + 0x28] = s1\n 62565: s0 = sp + 0x40\n 62568: sp = sp & 0xffffffffffffffe0\n 62571: s1 = a0\n 62573: i32 a0 = sp + 0\n 62575: jump [t0]\n      : @2252 (gas: 20)\n 62577: a0 = u64 [s1 + 0x70]\n 62580: a1 = u64 [s1 + 0xa0]\n 62584: u64 [a0 + 0x20] = a1\n 62587: u64 [a0] = a5\n 62589: a1 = u64 [s1 + 0xa8]\n 62593: u64 [a0 + 0x28] = a1\n 62596: u64 [a0 + 0x8] = a3\n 62599: a1 = u64 [s1 + 0xb0]\n 62603: u64 [a0 + 0x30] = a1\n 62606: u64 [a0 + 0x10] = a2\n 62609: a1 = u64 [s1 + 0xb8]\n 62613: u64 [a0 + 0x38] = a1\n 62616: u64 [a0 + 0x18] = a4\n 62619: sp = s0 + 0xfffffffffffffc00\n 62623: a0 = sp + 0x300\n 62627: ra = u64 [a0 + 0xf8]\n 62631: s0 = u64 [a0 + 0xf0]\n 62635: s1 = u64 [a0 + 0xe8]\n 62639: sp = sp + 0x400\n 62643: jump [t0]\n      : @2253 (gas: 20)\n 62645: a0 = u64 [s1 + 0x30]\n 62648: a3 = s1 + 0x200\n 62652: u64 [a3 + 0x18] = a0\n 62655: a0 = u64 [s1 + 0x18]\n 62658: u64 [a3 + 0x10] = a0\n 62661: a0 = u64 [s1 + 0x20]\n 62664: u64 [a3 + 0x8] = a0\n 62667: a0 = u64 [s1 + 0x28]\n 62670: u64 [a3] = a0\n 62672: a0 = u64 [s1 + 0x80]\n 62676: u64 [a3 + 0x38] = a0\n 62679: a0 = u64 [s1 + 0x88]\n 62683: u64 [a3 + 0x30] = a0\n 62686: a0 = u64 [s1 + 0x90]\n 62690: u64 [a3 + 0x28] = a0\n 62693: a0 = s1 + 0x220\n 62697: a1 = s1 + 0x200\n 62701: a2 = u64 [s1 + 0x98]\n 62705: u64 [a3 + 0x20] = a2\n 62708: jump [t0]\n      : @2254 (gas: 20)\n 62710: a0 = u64 [s1 + 0xa0]\n 62714: a3 = s1 + 0x100\n 62718: u64 [a3 + 0xc0] = a0\n 62722: a0 = u64 [s1 + 0x18]\n 62725: u64 [a3 + 0xe0] = a0\n 62729: a0 = u64 [s1 + 0xa8]\n 62733: u64 [a3 + 0xc8] = a0\n 62737: a0 = u64 [s1 + 0x20]\n 62740: u64 [a3 + 0xe8] = a0\n 62744: a0 = u64 [s1 + 0xb0]\n 62748: u64 [a3 + 0xd0] = a0\n 62752: a0 = u64 [s1 + 0x28]\n 62755: u64 [a3 + 0xf0] = a0\n 62759: a0 = u64 [s1 + 0xb8]\n 62763: u64 [a3 + 0xd8] = a0\n 62767: a0 = s1 + 0x1e0\n 62771: a1 = s1 + 0x1c0\n 62775: a2 = u64 [s1 + 0x30]\n 62778: u64 [a3 + 0xf8] = a2\n 62782: jump [t0]\n      : @2255 (gas: 14)\n 62784: sp = sp + 0xfffffffffffffd00\n 62788: a0 = sp + 0x200\n 62792: u64 [a0 + 0xf8] = ra\n 62796: u64 [a0 + 0xf0] = s0\n 62800: u64 [a0 + 0xe8] = s1\n 62804: s0 = sp + 0x300\n 62808: sp = sp & 0xffffffffffffffe0\n 62811: s1 = sp\n 62813: u64 [s1 + 696] = 0\n 62817: u64 [s1 + 688] = 0\n 62821: u64 [s1 + 680] = 0\n 62825: u64 [s1 + 672] = 0\n 62829: i32 a0 = s1 + 0x2a0\n 62833: jump [t0]\n      : @2256 (gas: 20)\n 62835: a1 = sp + 0x300\n 62839: a0 = u64 [a1 + 0xf8]\n 62843: u64 [sp + 0x48] = a0\n 62846: a0 = u64 [a1 + 0xf0]\n 62850: u64 [sp + 0x40] = a0\n 62853: a0 = u64 [a1 + 0xe8]\n 62857: u64 [sp + 0x38] = a0\n 62860: a0 = u64 [a1 + 0xe0]\n 62864: u64 [sp + 0x98] = a0\n 62868: a1 = sp + 0x400\n 62872: a0 = u64 [a1 + 0x18]\n 62875: u64 [sp + 0x30] = a0\n 62878: a0 = u64 [a1 + 0x10]\n 62881: u64 [sp + 0x28] = a0\n 62884: a0 = u64 [a1 + 0x8]\n 62887: u64 [sp + 0x20] = a0\n 62890: s1 = u64 [a1]\n 62892: a0 = sp + 0x380\n 62896: a1 = 0x40\n 62899: jump [t0]\n      : @2257 (gas: 18)\n 62901: sp = sp + 0xffffffffffffff80\n 62904: u64 [sp + 0x78] = ra\n 62907: u64 [sp + 0x70] = s0\n 62910: u64 [sp + 0x68] = s1\n 62913: s0 = sp + 0x80\n 62917: sp = sp & 0xffffffffffffffe0\n 62920: s1 = sp\n 62922: a2 = u64 [a1]\n 62924: a3 = u64 [a1 + 0x8]\n 62927: a1 = u32 [a1 + 0x10]\n 62930: u64 [s1 + 0x18] = a0\n 62933: u64 [s1 + 88] = 0\n 62936: u64 [s1 + 0x50] = a1\n 62939: u64 [s1 + 0x48] = a3\n 62942: a1 = s1 + 0x40\n 62945: u64 [s1 + 0x40] = a2\n 62948: a0 = 0\n 62950: jump [t0]\n      : @2258 (gas: 17)\n 62952: sp = sp + 0xfffffffffffffde0\n 62956: a2 = sp + 0x200\n 62960: u64 [a2 + 0x18] = ra\n 62963: u64 [a2 + 0x10] = s0\n 62966: u64 [a2 + 0x8] = s1\n 62969: s0 = sp + 0x220\n 62973: sp = sp & 0xfffffffffffffff0\n 62976: a5 = u64 [a1 + 0x18]\n 62979: a4 = u64 [a1 + 0x8]\n 62982: a3 = u64 [a1]\n 62984: s1 = u64 [a1 + 0x10]\n 62987: a1 = a4 | a5\n 62990: a2 = a3 ^ 0xff\n 62994: a2 = a2 | s1\n 62997: a1 = a1 | a2\n 63000: u64 [sp + 0x38] = a0\n 63003: jump [t0]\n      : @2259 (gas: 12)\n 63005: sp = sp + 0xffffffffffffffa0\n 63008: u64 [sp + 0x58] = ra\n 63011: u64 [sp + 0x50] = s0\n 63014: u64 [sp + 0x48] = s1\n 63017: s0 = sp + 0x60\n 63020: sp = sp & 0xffffffffffffffe0\n 63023: s1 = a0\n 63025: a0 = u64 [a1 + 0x18]\n 63028: a2 = u64 [a1 + 0x10]\n 63031: a3 = u64 [a1 + 0x8]\n 63034: a1 = u64 [a1]\n 63036: jump [t0]\n      : @2260 (gas: 5)\n 63038: a0 = sp + 0xffffffffffffffe0\n 63041: a2 = a0 & 0xffffffffffffffe0\n 63044: u64 [s1 + 0x10] = a2\n 63047: sp = a2\n 63049: jump [t0]\n      : @2261 (gas: 11)\n 63051: a2 = u64 [s1 + 0x1e0]\n 63055: a0 = u64 [s1 + 0x1e8]\n 63059: a1 = u64 [s1 + 0x1f0]\n 63063: a3 = u64 [s1 + 0x1f8]\n 63067: u64 [s1 + 0x1b8] = a3\n 63071: u64 [s1 + 0x1b0] = a1\n 63075: u64 [s1 + 0x1a8] = a0\n 63079: a0 = s1 + 0x1c0\n 63083: a1 = s1 + 0x1a0\n 63087: u64 [s1 + 0x1a0] = a2\n 63091: jump [t0]\n      : @2262 (gas: 19)\n 63093: a0 = u64 [s1 + 0x50]\n 63096: u64 [s1 + 0xd8] = a0\n 63100: a0 = u64 [s1 + 0x38]\n 63103: u64 [s1 + 0xd0] = a0\n 63107: a0 = u64 [s1 + 0x40]\n 63110: u64 [s1 + 0xc8] = a0\n 63114: a0 = u64 [s1 + 0x48]\n 63117: u64 [s1 + 0xc0] = a0\n 63121: a0 = u64 [s1 + 0x80]\n 63125: u64 [s1 + 0xf8] = a0\n 63129: a0 = u64 [s1 + 0x88]\n 63133: u64 [s1 + 0xf0] = a0\n 63137: a0 = u64 [s1 + 0x90]\n 63141: u64 [s1 + 0xe8] = a0\n 63145: a0 = s1 + 0xe0\n 63149: a1 = s1 + 0xc0\n 63153: a2 = u64 [s1 + 0x98]\n 63157: u64 [s1 + 0xe0] = a2\n 63161: jump [t0]\n      : @2263 (gas: 7)\n 63163: sp = s0 + 0xfffffffffffffce0\n 63167: a0 = sp + 0x300\n 63171: ra = u64 [a0 + 0x18]\n 63174: s0 = u64 [a0 + 0x10]\n 63177: s1 = u64 [a0 + 0x8]\n 63180: sp = sp + 0x320\n 63184: jump [t0]\n      : @2264 (gas: 20)\n 63186: a0 = u64 [sp + 0xd0]\n 63190: a4 = sp + 0x300\n 63194: u64 [a4 + 0xb8] = a0\n 63198: a0 = u64 [sp + 0xd8]\n 63202: u64 [a4 + 0xb0] = a0\n 63206: a0 = u64 [sp + 0xc8]\n 63210: u64 [a4 + 0xa8] = a0\n 63214: u64 [a4 + 0xa0] = s1\n 63218: a0 = u64 [sp + 0x40]\n 63221: u64 [a4 + 0xd8] = a0\n 63225: a0 = u64 [sp + 0x48]\n 63228: u64 [a4 + 0xd0] = a0\n 63232: a0 = u64 [sp + 0x50]\n 63235: u64 [a4 + 0xc8] = a0\n 63239: a0 = sp + 0x3e0\n 63243: a1 = sp + 0x3c0\n 63247: a2 = sp + 0x3a0\n 63251: a3 = u64 [sp + 0x98]\n 63255: u64 [a4 + 0xc0] = a3\n 63259: jump [t0]\n      : @2265 (gas: 19)\n 63261: a1 = sp + 0x200\n 63265: a0 = u64 [a1 + 0x18]\n 63268: u64 [sp + 0xd0] = a0\n 63272: a0 = u64 [a1 + 0x10]\n 63275: u64 [sp + 0xc8] = a0\n 63279: a0 = u64 [a1 + 0x8]\n 63282: u64 [sp + 0xd8] = a0\n 63286: a0 = u64 [a1]\n 63288: u64 [sp + 0xb8] = a0\n 63292: a0 = u64 [a1 + 0x38]\n 63295: u64 [sp + 0xc0] = a0\n 63299: a0 = u64 [a1 + 0x30]\n 63302: u64 [sp + 0xb0] = a0\n 63306: a0 = u64 [a1 + 0x28]\n 63309: u64 [sp + 0xa0] = a0\n 63313: s1 = u64 [a1 + 0x20]\n 63316: a0 = sp + 0x1a0\n 63320: a1 = 0x40\n 63323: jump [t0]\n      : @2266 (gas: 20)\n 63325: a2 = sp + 0x200\n 63329: a0 = u64 [a2 + 0xa0]\n 63333: u64 [sp + 0xc0] = a0\n 63337: a0 = u64 [a2 + 0xa8]\n 63341: u64 [sp + 0xb8] = a0\n 63345: a0 = u64 [a2 + 0xb0]\n 63349: u64 [sp + 0xb0] = a0\n 63353: a0 = u64 [a2 + 0xb8]\n 63357: u64 [sp + 0xa0] = a0\n 63361: a0 = u64 [sp + 0xd0]\n 63365: u64 [a2 + 0x58] = a0\n 63368: a0 = u64 [sp + 0xd8]\n 63372: u64 [a2 + 0x50] = a0\n 63375: a0 = u64 [sp + 0xc8]\n 63379: u64 [a2 + 0x48] = a0\n 63382: a0 = sp + 0x260\n 63386: a1 = sp + 0x240\n 63390: s1 = u64 [sp + 0xa8]\n 63394: u64 [a2 + 0x40] = s1\n 63397: jump [t0]\n      : @2267 (gas: 15)\n 63399: a0 = u64 [s1 + 0x8]\n 63402: a1 = i32 [s1 + 0x10]\n 63405: a2 = u64 [s1]\n 63407: a0 = reverse a0\n 63409: a3 = a0 << 0x20\n 63412: a1 = reverse a1\n 63414: a1 = a1 >> 0x20\n 63417: a3 = a3 | a1\n 63420: a0 = a0 >> 0x20\n 63423: a1 = reverse a2\n 63425: a2 = a1 << 0x20\n 63428: a0 = a0 | a2\n 63431: a1 = a1 >> 0x20\n 63434: a2 = u64 [sp]\n 63436: jump [t0]\n      : @2268 (gas: 9)\n 63438: a0 = a0 | a1\n 63441: a1 = a0 << 0x10\n 63444: a1 = a1 | a2\n 63447: a0 = a0 | a3\n 63450: a0 = a0 >> 0x30\n 63453: a0 = a0 | a1\n 63456: a3 = a3 << 0x10\n 63459: a0 = a0 | a3\n 63462: jump [t0]\n      : @2269 (gas: 15)\n 63464: a3 = u64 [sp + 0x398]\n 63468: u64 [sp + 0x18] = a3\n 63471: a2 = u64 [sp + 0x390]\n 63475: u64 [sp + 0x50] = a2\n 63478: a5 = u64 [sp + 0x388]\n 63482: u64 [sp + 0x10] = a5\n 63485: a0 = 0xffffffffffffffff\n 63488: s1 = s1 & a0\n 63491: a1 = u64 [sp + 0x20]\n 63494: t2 = a1 & a0\n 63497: a1 = u64 [sp + 0x28]\n 63500: t1 = a1 & a0\n 63503: a1 = u64 [sp + 0x90]\n 63507: a4 = u64 [sp + 0x30]\n 63510: jump [t0]\n      : @2270 (gas: 12)\n 63512: a0 = u64 [s1 + 0x298]\n 63516: u64 [s1 + 0x18] = a0\n 63519: a0 = u64 [s1 + 0x290]\n 63523: u64 [s1 + 0x20] = a0\n 63526: a0 = u64 [s1 + 0x288]\n 63530: u64 [s1 + 0x28] = a0\n 63533: a0 = u64 [s1 + 0x280]\n 63537: u64 [s1 + 0x30] = a0\n 63540: u64 [s1 + 728] = 0\n 63544: u64 [s1 + 720] = 0\n 63548: u64 [s1 + 712] = 0\n 63552: jump [t0]\n      : @2271 (gas: 19)\n 63554: a0 = u64 [sp + 0xd0]\n 63558: u64 [sp + 0x1d8] = a0\n 63562: a0 = u64 [sp + 0xd8]\n 63566: u64 [sp + 0x1d0] = a0\n 63570: a0 = u64 [sp + 0xc8]\n 63574: u64 [sp + 0x1c8] = a0\n 63578: u64 [sp + 0x1c0] = s1\n 63582: a0 = u64 [sp + 0xa0]\n 63586: u64 [sp + 0x1f8] = a0\n 63590: a0 = u64 [sp + 0xb0]\n 63594: u64 [sp + 0x1f0] = a0\n 63598: a0 = u64 [sp + 0xb8]\n 63602: u64 [sp + 0x1e8] = a0\n 63606: a0 = sp + 0x200\n 63610: a1 = sp + 0x1e0\n 63614: a2 = sp + 0x1c0\n 63618: a3 = u64 [sp + 0xc0]\n 63622: u64 [sp + 0x1e0] = a3\n 63626: jump [t0]\n      : @2272 (gas: 16)\n 63628: a4 = s1 + 0x200\n 63632: a0 = u64 [a4 + 0x78]\n 63635: a1 = u64 [a4 + 0x70]\n 63638: a2 = u64 [a4 + 0x68]\n 63641: a3 = u64 [a4 + 0x60]\n 63644: u64 [s1 + 0xb0] = a0\n 63648: u64 [a4 + 0x38] = a0\n 63651: u64 [s1 + 0xa8] = a1\n 63655: u64 [a4 + 0x30] = a1\n 63658: u64 [s1 + 0xa0] = a2\n 63662: u64 [a4 + 0x28] = a2\n 63665: a0 = s1 + 0x240\n 63669: a1 = s1 + 0x220\n 63673: u64 [s1 + 0xb8] = a3\n 63677: u64 [a4 + 0x20] = a3\n 63680: jump [t0]\n      : @2273 (gas: 14)\n 63682: a1 = u64 [a3 + 0x8]\n 63685: a2 = i32 [a3 + 0x10]\n 63688: a3 = u64 [a3]\n 63690: a1 = reverse a1\n 63692: a4 = a1 << 0x20\n 63695: a2 = reverse a2\n 63697: a2 = a2 >> 0x20\n 63700: a2 = a2 | a4\n 63703: a1 = a1 >> 0x20\n 63706: a3 = reverse a3\n 63708: a4 = a3 << 0x20\n 63711: a1 = a1 | a4\n 63714: a3 = a3 >> 0x20\n 63717: jump [t0]\n      : @2274 (gas: 19)\n 63719: a0 = u64 [sp + 0x1f8]\n 63723: a1 = u64 [sp + 0x1f0]\n 63727: u64 [sp + 0x50] = a1\n 63730: a2 = u64 [sp + 0x1e8]\n 63734: u64 [sp + 0x40] = a2\n 63737: a3 = u64 [sp + 0x1e0]\n 63741: u64 [sp + 0x58] = a3\n 63744: u64 [sp + 440] = 0\n 63748: u64 [sp + 432] = 0\n 63752: u64 [sp + 424] = 0\n 63756: u64 [sp + 0x1a0] = s1\n 63760: s1 = a0\n 63762: u64 [sp + 0x1d8] = a0\n 63766: u64 [sp + 0x1d0] = a1\n 63770: u64 [sp + 0x1c8] = a2\n 63774: a0 = sp + 0x1c0\n 63778: a1 = sp + 0x1a0\n 63782: u64 [sp + 0x1c0] = a3\n 63786: jump [t0]\n      : @2275 (gas: 12)\n 63788: sp = sp + 0xfffffffffffffb40\n 63792: a3 = sp + 0x400\n 63796: u64 [a3 + 0xb8] = ra\n 63800: u64 [a3 + 0xb0] = s0\n 63804: u64 [a3 + 0xa8] = s1\n 63808: s0 = sp + 0x4c0\n 63812: sp = sp & 0xfffffffffffffff0\n 63815: t1 = u64 [a1 + 0x8]\n 63818: t2 = u64 [a1]\n 63820: a4 = u64 [a0]\n 63822: a5 = u64 [a0 + 0x8]\n 63825: jump [t0]\n      : @2276 (gas: 16)\n 63827: a1 = s1 + 0x300\n 63831: a2 = u64 [a1 + 0x50]\n 63834: a0 = u64 [a1 + 0x58]\n 63837: a4 = u64 [a1 + 0x40]\n 63840: a3 = u64 [a1 + 0x48]\n 63843: a1 = u64 [s1 + 0x50]\n 63846: u64 [s1 + 0x28] = a2\n 63849: u64 [a1 + 0x10] = a2\n 63852: u64 [s1 + 0x30] = a0\n 63855: u64 [a1 + 0x18] = a0\n 63858: u64 [s1 + 0x18] = a4\n 63861: u64 [a1] = a4\n 63863: u64 [s1 + 0x20] = a3\n 63866: u64 [a1 + 0x8] = a3\n 63869: a0 = s1 + 0x2e0\n 63873: jump [t0]\n      : @2277 (gas: 15)\n 63875: a0 = u64 [sp + 0x38]\n 63878: a1 = u64 [sp + 0x58]\n 63881: u64 [a0] = a1\n 63883: a1 = u64 [sp + 0x40]\n 63886: u64 [a0 + 0x8] = a1\n 63889: u64 [a0 + 0x10] = s1\n 63892: a1 = u64 [sp + 0x48]\n 63895: u64 [a0 + 0x18] = a1\n 63898: sp = s0 + 0xfffffffffffffde0\n 63902: a0 = sp + 0x200\n 63906: ra = u64 [a0 + 0x18]\n 63909: s0 = u64 [a0 + 0x10]\n 63912: s1 = u64 [a0 + 0x8]\n 63915: sp = sp + 0x220\n 63919: jump [t0]\n      : @2278 (gas: 16)\n 63921: u64 [s1 + 0x18] = a5\n 63924: u64 [s1 + 0x20] = a4\n 63927: u64 [s1 + 0x28] = a3\n 63930: u64 [s1 + 0x30] = a2\n 63933: a0 = u64 [s1 + 0x78]\n 63936: a2 = s1 + 0x200\n 63940: u64 [a2 + 0x20] = a0\n 63943: a0 = u64 [s1 + 0x70]\n 63946: u64 [a2 + 0x28] = a0\n 63949: a0 = u64 [s1 + 0x68]\n 63952: u64 [a2 + 0x30] = a0\n 63955: a1 = s1 + 0x220\n 63959: a0 = u64 [s1 + 0x60]\n 63962: u64 [a2 + 0x38] = a0\n 63965: a0 = 0\n 63967: jump [t0]\n      : @2279 (gas: 11)\n 63969: a4 = sp + 0xffffffffffffffe0\n 63972: a4 = a4 & 0xffffffffffffffe0\n 63975: u64 [s1 + 0x50] = a4\n 63978: sp = a4\n 63980: u64 [s1 + 0x378] = a3\n 63984: u64 [s1 + 0x370] = a1\n 63988: u64 [s1 + 0x368] = a0\n 63992: a0 = s1 + 0x380\n 63996: a1 = s1 + 0x360\n 64000: u64 [s1 + 0x360] = a2\n 64004: jump [t0]\n      : @2280 (gas: 4)\n 64006: i32 a1 = a0 + 0\n 64008: a2 = 0x20\n 64011: a0 = 0\n 64013: jump [t0]\n      : @2281 (gas: 15)\n 64015: a5 = u64 [s1 + 0x30]\n 64018: t2 = 0\n 64020: t1 = 0\n 64022: u64 [s1 + 176] = 0\n 64026: a0 = u64 [s1 + 0x68]\n 64029: a1 = u64 [s1 + 0x60]\n 64032: a0 = a0 | a1\n 64035: a1 = u64 [s1 + 0x78]\n 64038: a2 = u64 [s1 + 0x70]\n 64041: a1 = a1 | a2\n 64044: a0 = a0 | a1\n 64047: a0 = a0 >u 0\n 64049: a0 = a0 << 0x5\n 64052: u64 [s1 + 0xb8] = a0\n 64056: jump [t0]\n      : @2282 (gas: 5)\n 64058: a0 = sp + 0xffffffffffffffe0\n 64061: a2 = a0 & 0xffffffffffffffe0\n 64064: u64 [s1 + 0x18] = a2\n 64067: sp = a2\n 64069: jump [t0]\n      : @2283 (gas: 8)\n 64071: a2 = 0\n 64073: u64 [s1 + 184] = 0\n 64077: u64 [s1 + 176] = 0\n 64081: u64 [s1 + 160] = 0x30\n 64086: a0 = 0x4\n 64089: a1 = s1 + 0xa0\n 64093: u64 [s1 + 168] = 0\n 64097: jump [t0]\n      : @2284 (gas: 11)\n 64099: a0 = u64 [sp]\n 64101: u64 [sp + 0x20] = a0\n 64104: a0 = u64 [sp + 0x8]\n 64107: u64 [sp + 0x28] = a0\n 64110: a0 = u64 [sp + 0x10]\n 64113: u64 [sp + 0x30] = a0\n 64116: a1 = sp + 0x20\n 64119: a0 = u64 [sp + 0x18]\n 64122: u64 [sp + 0x38] = a0\n 64125: a0 = s1\n 64127: jump [t0]\n      : @2285 (gas: 10)\n 64129: u64 [s1 + 0x78] = a0\n 64132: u64 [s1 + 0x80] = a1\n 64136: a0 = u64 [s1 + 0x70]\n 64139: a0 = a0 | a1\n 64142: u64 [s1 + 0x70] = a0\n 64145: a0 = u64 [s1 + 0xb8]\n 64149: a2 = a0 + 0xffffffffffffff80\n 64152: a0 = 0xffffffffffffffff\n 64155: a1 = 0xffffffffffffffff\n 64158: jump [t0]\n      : @2286 (gas: 4)\n 64160: u64 [s1 + 728] = 0\n 64164: u64 [s1 + 720] = 0\n 64168: u64 [s1 + 712] = 0\n 64172: jump [t0]\n      : @2287 (gas: 15)\n 64174: a5 = s1 + 0x200\n 64178: a2 = u64 [a5 + 0x58]\n 64181: a3 = u64 [a5 + 0x50]\n 64184: a1 = u64 [a5 + 0x48]\n 64187: a4 = u64 [a5 + 0x40]\n 64190: u64 [s1 + 0x60] = a4\n 64193: u64 [a5] = a4\n 64195: u64 [s1 + 0x70] = a1\n 64198: u64 [a5 + 0x8] = a1\n 64201: u64 [s1 + 0x68] = a3\n 64204: u64 [a5 + 0x10] = a3\n 64207: a1 = s1 + 0x200\n 64211: u64 [s1 + 0x78] = a2\n 64214: u64 [a5 + 0x18] = a2\n 64217: jump [t0]\n      : @2288 (gas: 11)\n 64219: a0 = u64 [s1 + 0x38]\n 64222: u64 [s1 + 0x200] = a0\n 64226: a0 = u64 [s1 + 0x40]\n 64229: u64 [s1 + 0x208] = a0\n 64233: a0 = u64 [s1 + 0x48]\n 64236: u64 [s1 + 0x210] = a0\n 64240: a0 = s1 + 0x220\n 64244: a1 = s1 + 0x200\n 64248: a2 = u64 [s1 + 0x50]\n 64251: u64 [s1 + 0x218] = a2\n 64255: jump [t0]\n      : @2289 (gas: 5)\n 64257: u64 [s1 + 0x100] = a0\n 64261: a0 = 0x20\n 64264: a1 = s1 + 0x100\n 64268: u64 [s1 + 264] = 0\n 64272: jump [t0]\n      : @2290 (gas: 12)\n 64274: a0 = u64 [sp + 0xe8]\n 64278: a1 = u64 [sp + 0xf8]\n 64282: u64 [sp + 0x30] = a1\n 64285: t2 = u64 [sp + 0xe0]\n 64289: a3 = u64 [sp + 0xf0]\n 64293: a4 = a0 ^ s1\n 64296: a5 = a0 <u s1\n 64299: t1 = s1\n 64301: ra = u64 [sp + 0x58]\n 64304: a1 = t2 <u ra\n 64307: a5 = a1 if a4 == 0\n 64310: jump [t0]\n      : @2291 (gas: 13)\n 64312: sp = sp + 0xfffffffffffffec0\n 64316: u64 [sp + 0x138] = ra\n 64320: u64 [sp + 0x130] = s0\n 64324: u64 [sp + 0x128] = s1\n 64328: s0 = sp + 0x140\n 64332: sp = sp & 0xffffffffffffffe0\n 64335: s1 = sp\n 64337: u64 [s1 + 248] = 0\n 64341: u64 [s1 + 240] = 0\n 64345: u64 [s1 + 232] = 0\n 64349: u64 [s1 + 224] = 0\n 64353: i32 a0 = s1 + 0xe0\n 64357: jump [t0]\n      : @2292 (gas: 8)\n 64359: u64 [s1 + 432] = 0\n 64363: u64 [s1 + 424] = 0\n 64367: u64 [s1 + 416] = 0\n 64371: a0 = 0x2520601d00000000\n 64381: a1 = s1 + 0x1a0\n 64385: u64 [s1 + 0x1b8] = a0\n 64389: a0 = 0\n 64391: jump [t0]\n      : @2293 (gas: 16)\n 64393: a4 = u64 [a3]\n 64395: u64 [sp + 0x18] = a4\n 64398: a4 = u64 [a3 + 0x8]\n 64401: u64 [sp + 0x20] = a4\n 64404: a4 = u64 [a3 + 0x10]\n 64407: u64 [sp + 0x28] = a4\n 64410: a3 = u64 [a3 + 0x18]\n 64413: u64 [sp + 0x30] = a3\n 64416: s1 = u64 [a2]\n 64418: a3 = u64 [a2 + 0x8]\n 64421: u64 [sp] = a3\n 64423: a3 = u64 [a2 + 0x10]\n 64426: u64 [sp + 0x8] = a3\n 64429: a2 = u64 [a2 + 0x18]\n 64432: u64 [sp + 0x10] = a2\n 64435: jump [t0]\n      : @2294 (gas: 12)\n 64437: a1 = a3 & 0xffffffffffffff00\n 64441: i32 a0 = a4 + 0x20\n 64444: a3 = u64 [s1 + 0xa0]\n 64448: a2 = s1 + 0x100\n 64452: u64 [a2 + 0x88] = a3\n 64456: u64 [a2 + 0x80] = a1\n 64460: a1 = u64 [s1 + 0xa8]\n 64464: u64 [a2 + 0x90] = a1\n 64468: a1 = s1 + 0x180\n 64472: a3 = u64 [s1 + 0xb0]\n 64476: u64 [a2 + 0x98] = a3\n 64480: jump [t0]\n      : @2295 (gas: 10)\n 64482: a0 = s1 + 0x200\n 64486: a5 = u64 [a0 + 0x58]\n 64489: a4 = u64 [a0 + 0x50]\n 64492: a2 = u64 [a0 + 0x40]\n 64495: a3 = u64 [a0 + 0x48]\n 64498: a0 = a4 | a5\n 64501: a1 = a2 <u 0x20\n 64504: a1 = 0 if a3 != 0\n 64506: a1 = 0 if a0 != 0\n 64508: jump [t0]\n      : @2296 (gas: 10)\n 64510: a0 = s1 + 0x200\n 64514: a4 = u64 [a0 + 0xd8]\n 64518: a5 = u64 [a0 + 0xd0]\n 64522: a3 = u64 [a0 + 0xc0]\n 64526: a2 = u64 [a0 + 0xc8]\n 64530: a0 = a5 | a4\n 64533: a1 = a3 <u 0x6\n 64536: a1 = 0 if a2 != 0\n 64538: a1 = 0 if a0 != 0\n 64540: jump [t0]\n      : @2297 (gas: 10)\n 64542: a0 = u64 [s1 + 0x1e0]\n 64546: u64 [s1 + 0x50] = a0\n 64549: a0 = u64 [s1 + 0x1e8]\n 64553: u64 [s1 + 0x48] = a0\n 64556: a0 = u64 [s1 + 0x1f0]\n 64560: u64 [s1 + 0x40] = a0\n 64563: a0 = u64 [s1 + 0x1f8]\n 64567: u64 [s1 + 0x38] = a0\n 64570: i32 a0 = s1 + 0x2e0\n 64574: jump [t0]\n      : @2298 (gas: 15)\n 64576: a0 = u64 [sp + 0x118]\n 64580: u64 [sp + 0x48] = a0\n 64583: a2 = u64 [sp + 0x110]\n 64587: u64 [sp + 0x50] = a2\n 64590: s1 = u64 [sp + 0x108]\n 64594: u64 [sp + 0x40] = s1\n 64597: a1 = u64 [sp + 0x100]\n 64601: u64 [sp + 0x58] = a1\n 64604: u64 [sp + 0xb8] = a0\n 64608: u64 [sp + 0xb0] = a2\n 64612: u64 [sp + 0xa8] = s1\n 64616: u64 [sp + 0xa0] = a1\n 64620: u64 [sp + 216] = 0\n 64624: u64 [sp + 208] = 0\n 64628: jump [t0]\n      : @2299 (gas: 11)\n 64630: u64 [s1 + 0x88] = a3\n 64634: u64 [a5] = a3\n 64636: u64 [a5 + 0x10] = a0\n 64639: a3 = t2\n 64641: u64 [a5 + 0x18] = t2\n 64644: u64 [s1 + 0x68] = a0\n 64647: t1 = u64 [s1 + 0x60]\n 64650: t2 = u64 [s1 + 0x90]\n 64654: u64 [s1 + 0xb8] = ra\n 64658: a5 = a1\n 64660: jump [t0]\n      : @2300 (gas: 11)\n 64662: a3 = u64 [s1 + 0x18]\n 64665: a0 = u64 [a3 + 0x18]\n 64668: a1 = u64 [a3 + 0x10]\n 64671: a2 = u64 [a3 + 0x8]\n 64674: a3 = u64 [a3]\n 64676: a4 = reverse a0\n 64678: a0 = reverse a1\n 64680: a1 = reverse a2\n 64682: a2 = reverse a3\n 64684: a3 = u64 [s1 + 0x20]\n 64687: jump [t0]\n      : @2301 (gas: 15)\n 64689: a0 = u64 [sp + 0x198]\n 64693: a1 = u64 [sp + 0x190]\n 64697: a2 = u64 [sp + 0x188]\n 64701: a3 = u64 [sp + 0x180]\n 64705: u64 [sp + 0x18] = a0\n 64708: u64 [sp + 0x158] = a0\n 64712: u64 [sp + 0x10] = a1\n 64715: u64 [sp + 0x150] = a1\n 64719: u64 [sp + 0x8] = a2\n 64722: u64 [sp + 0x148] = a2\n 64726: a0 = sp + 0x160\n 64730: a1 = sp + 0x140\n 64734: u64 [sp] = a3\n 64736: u64 [sp + 0x140] = a3\n 64740: jump [t0]\n      : @2302 (gas: 10)\n 64742: a0 = u64 [s1 + 0x20]\n 64745: a1 = u64 [s1 + 0x18]\n 64748: a0 = a0 | a1\n 64751: a1 = 0xffffffe0\n 64761: a4 = u64 [s1 + 0x30]\n 64764: a1 = a4 <u a1\n 64767: a2 = u64 [s1 + 0x28]\n 64770: a1 = 0 if a2 != 0\n 64772: a1 = 0 if a0 != 0\n 64774: jump [t0]\n      : @2303 (gas: 7)\n 64776: a0 = sp + 0xffffffffffffffe0\n 64779: a0 = a0 & 0xffffffffffffffe0\n 64782: u64 [s1 + 0xa0] = a0\n 64786: sp = a0\n 64788: u64 [s1 + 280] = 0\n 64792: u64 [s1 + 272] = 0\n 64796: jump [t0]\n      : @2304 (gas: 12)\n 64798: a3 = s1 + 0x100\n 64802: a2 = u64 [a3 + 0xd8]\n 64806: a1 = u64 [a3 + 0xd0]\n 64810: a5 = u64 [a3 + 0xc8]\n 64814: a4 = u64 [a3 + 0xc0]\n 64818: u64 [a3 + 0xa0] = a4\n 64822: u64 [a3 + 0xa8] = a5\n 64826: u64 [a3 + 0xb0] = a1\n 64830: a1 = s1 + 0x1a0\n 64834: u64 [a3 + 0xb8] = a2\n 64838: u64 [s1 + 0xb8] = t2\n 64842: jump [t0]\n      : @2305 (gas: 10)\n 64844: a0 = u64 [sp + 0x10]\n 64847: a1 = u64 [sp + 0x18]\n 64850: a2 = 0x100000000\n 64860: a2 = a2 ^ a0\n 64863: a2 = a2 | a1\n 64866: a3 = a0 >> 0x20\n 64869: a3 = a3 <u 0x1\n 64872: a3 = 0 if a1 != 0\n 64874: a3 = 0 if a2 == 0\n 64876: jump [t0]\n      : @2306 (gas: 8)\n 64878: u64 [s1 + 0x220] = a3\n 64882: u64 [s1 + 0x258] = a2\n 64886: u64 [s1 + 0x250] = a1\n 64890: u64 [s1 + 0x248] = a0\n 64894: a0 = s1 + 0x260\n 64898: a1 = s1 + 0x240\n 64902: a2 = s1 + 0x220\n 64906: jump [t0]\n      : @2307 (gas: 6)\n 64908: sp = s0 + 0xffffffffffffff80\n 64911: ra = u64 [sp + 0x78]\n 64914: s0 = u64 [sp + 0x70]\n 64917: s1 = u64 [sp + 0x68]\n 64920: sp = sp + 0x80\n 64924: jump [t0]\n      : @2308 (gas: 12)\n 64926: a4 = s1 + 0x200\n 64930: a2 = u64 [a4 + 0xa0]\n 64934: a0 = u64 [a4 + 0xa8]\n 64938: a1 = u64 [a4 + 0xb0]\n 64942: a3 = u64 [a4 + 0xb8]\n 64946: u64 [s1 + 0x98] = a3\n 64950: u64 [s1 + 0x90] = a1\n 64954: u64 [s1 + 0x88] = a0\n 64958: a0 = 0x24\n 64961: a1 = s1 + 0x80\n 64965: u64 [s1 + 0x80] = a2\n 64969: jump [t0]\n      : @2309 (gas: 6)\n 64971: sp = s0 + 0xffffffffffffff60\n 64975: ra = u64 [sp + 0x98]\n 64979: s0 = u64 [sp + 0x90]\n 64983: s1 = u64 [sp + 0x88]\n 64987: sp = sp + 0xa0\n 64991: jump [t0]\n      : @2310 (gas: 11)\n 64993: a1 = u64 [s1 + 0x28]\n 64996: a0 = a0 & a1\n 64999: u64 [s1 + 0x40] = a0\n 65002: a0 = sp + 0xffffffffffffffe0\n 65005: a0 = a0 & 0xffffffffffffffe0\n 65008: u64 [s1 + 0x38] = a0\n 65011: sp = a0\n 65013: i32 a2 = a0 + 0\n 65015: a1 = 0x40\n 65018: a0 = u64 [s1 + 0x30]\n 65021: jump [t0]\n      : @2311 (gas: 13)\n 65023: a2 = u64 [a2 + 0x8]\n 65026: u64 [sp + 0x20] = a2\n 65029: a2 = u64 [a1]\n 65031: u64 [sp + 0x40] = a2\n 65034: a2 = u64 [a1 + 0x8]\n 65037: u64 [sp + 0x48] = a2\n 65040: a2 = u64 [a1 + 0x10]\n 65043: u64 [sp + 0x50] = a2\n 65046: a1 = u64 [a1 + 0x18]\n 65049: u64 [sp + 0x58] = a1\n 65052: s1 = a0\n 65054: i32 a0 = sp + 0x180\n 65058: jump [t0]\n      : @2312 (gas: 9)\n 65060: a0 = u64 [sp + 0x48]\n 65063: a1 = u64 [sp + 0x50]\n 65066: a0 = a0 | a1\n 65069: a1 = 0xffffffe0\n 65079: a1 = s1 <u a1\n 65082: a2 = u64 [sp + 0x40]\n 65085: a1 = 0 if a2 != 0\n 65087: a1 = 0 if a0 != 0\n 65089: jump [t0]\n      : @2313 (gas: 6)\n 65091: a1 = a1 | a0\n 65094: a1 = a1 >> 0x20\n 65097: a0 = a0 | a3\n 65100: a0 = a0 << 0x20\n 65103: a0 = a0 | a1\n 65106: jump [t0]\n      : @2314 (gas: 8)\n 65108: t1 = u64 [s1 + 0x50]\n 65111: a1 = t1 + 0x1f\n 65114: a0 = a1 <u t1\n 65117: a5 = u64 [s1 + 0x58]\n 65120: a3 = a5 + a0\n 65123: a2 = a3 <u a5\n 65126: a2 = a0 if a0 == 0\n 65129: jump [t0]\n      : @2315 (gas: 14)\n 65131: a0 = u64 [sp + 0x10]\n 65134: u64 [sp + 0x90] = a0\n 65138: a0 = u64 [sp + 0x50]\n 65141: u64 [sp + 0xb0] = a0\n 65145: u64 [sp + 0x78] = a3\n 65148: a0 = u64 [sp + 0x18]\n 65151: u64 [sp + 0x98] = a0\n 65155: a0 = sp + 0xc0\n 65159: a1 = sp + 0xa0\n 65163: a2 = sp + 0x80\n 65167: a3 = sp + 0x60\n 65170: a4 = u64 [sp + 0x58]\n 65173: u64 [sp + 0xb8] = a4\n 65177: jump [t0]\n      : @2316 (gas: 12)\n 65179: a0 = u64 [s1 + 0xd8]\n 65183: a1 = u64 [s1 + 0xd0]\n 65187: a2 = u64 [s1 + 0xc8]\n 65191: a3 = u64 [s1 + 0xc0]\n 65195: a4 = s1 + 0x200\n 65199: u64 [a4 + 0x98] = a0\n 65203: u64 [a4 + 0x90] = a1\n 65207: u64 [a4 + 0x88] = a2\n 65211: u64 [a4 + 0x80] = a3\n 65215: a1 = s1 + 0x280\n 65219: a0 = u64 [s1 + 0xa0]\n 65223: jump [t0]\n      : @2317 (gas: 10)\n 65225: a3 = u64 [s1 + 0x28]\n 65228: a0 = u64 [a3 + 0x18]\n 65231: a1 = u64 [a3 + 0x10]\n 65234: a2 = u64 [a3 + 0x8]\n 65237: a3 = u64 [a3]\n 65239: a0 = reverse a0\n 65241: a1 = reverse a1\n 65243: a2 = reverse a2\n 65245: a3 = reverse a3\n 65247: jump [t0]\n      : @2318 (gas: 13)\n 65249: ra = u64 [sp + 0x98]\n 65253: a1 = s1\n 65255: s1 = u64 [sp + 0xb8]\n 65259: a0 = u64 [sp + 0xb0]\n 65263: a2 = a0\n 65265: a0 = a0 | ra\n 65268: a1 = a1 | s1\n 65271: a1 = a1 | a0\n 65274: a1 = a1 >> 0x20\n 65277: a0 = a0 | s1\n 65280: a0 = a0 << 0x20\n 65283: a0 = a0 | a1\n 65286: jump [t0]\n      : @2319 (gas: 7)\n 65288: u64 [s1 + 0x120] = a3\n 65292: u64 [s1 + 0x128] = a1\n 65296: u64 [s1 + 0x130] = a0\n 65300: a0 = s1 + 0x140\n 65304: a1 = s1 + 0x120\n 65308: u64 [s1 + 0x138] = a2\n 65312: jump [t0]\n      : @2320 (gas: 10)\n 65314: a0 = u64 [s1 + 0xc0]\n 65318: a1 = u64 [s1 + 0xc8]\n 65322: a2 = u32 [s1 + 0xd0]\n 65326: u64 [s1 + 184] = 0\n 65330: u64 [s1 + 0xb0] = a2\n 65334: u64 [s1 + 0xa8] = a1\n 65338: a1 = s1 + 0xa0\n 65342: u64 [s1 + 0xa0] = a0\n 65346: a0 = 0\n 65348: jump [t0]\n      : @2321 (gas: 7)\n 65350: u64 [s1 + 0x280] = a3\n 65354: u64 [s1 + 0x288] = a2\n 65358: u64 [s1 + 0x290] = a5\n 65362: a0 = s1 + 0x2a0\n 65366: a1 = s1 + 0x280\n 65370: u64 [s1 + 0x298] = a4\n 65374: jump [t0]\n      : @2322 (gas: 11)\n 65376: a4 = a4 + a1\n 65379: a1 = a4 <u a1\n 65382: a1 = a1 + a5\n 65385: a1 = a1 | a2\n 65388: a2 = a0 | a4\n 65391: a2 = a2 | a1\n 65394: a1 = a1 | a4\n 65397: a2 = a2 >> 0x20\n 65400: a1 = a1 << 0x20\n 65403: a1 = a1 | a2\n 65406: jump [t0]\n      : @2323 (gas: 9)\n 65408: u64 [sp + 112] = 0\n 65411: u64 [sp + 104] = 0\n 65414: u64 [sp + 96] = 0\n 65417: a0 = 0x6dfcc65000000000\n 65427: a1 = sp + 0x60\n 65430: u64 [sp + 0x78] = a0\n 65433: a0 = 0\n 65435: u64 [sp + 0x18] = a3\n 65438: jump [t0]\n      : @2324 (gas: 6)\n 65440: a2 = a2 + a4\n 65443: a2 = a2 + a1\n 65446: a3 = a2 ^ a4\n 65449: a4 = a2 <u a4\n 65452: a4 = a1 if a3 == 0\n 65455: jump [t0]\n      : @2325 (gas: 12)\n 65457: a0 = u64 [s1]\n 65459: u64 [s1 + 0x20] = a0\n 65462: a0 = u64 [s1 + 0x8]\n 65465: u64 [s1 + 0x28] = a0\n 65468: a0 = u64 [s1 + 0x10]\n 65471: u64 [s1 + 0x30] = a0\n 65474: a1 = s1 + 0x20\n 65477: a0 = u64 [s1 + 0x18]\n 65480: u64 [s1 + 0x38] = a0\n 65483: a0 = a3\n 65485: u64 [s1 + 0x18] = a3\n 65488: jump [t0]\n      : @2326 (gas: 5)\n 65490: a0 = u64 [0x200f8]\n 65495: a2 = u64 [0x20100]\n 65500: a3 = u64 [0x20108]\n 65505: a4 = u64 [0x20110]\n 65510: jump [t0]\n      : @2327 (gas: 5)\n 65512: a0 = u64 [0x20040]\n 65517: a2 = u64 [0x20048]\n 65522: a3 = u64 [0x20050]\n 65527: a4 = u64 [0x20058]\n 65532: jump [t0]\n      : @2328 (gas: 12)\n 65534: a2 = u64 [a0 + 0x10]\n 65537: a3 = u64 [a0 + 0x18]\n 65540: a4 = u64 [a0 + 0x8]\n 65543: a0 = u64 [a0]\n 65545: a3 = a3 | a4\n 65548: a4 = a0 | a2\n 65551: a4 = a4 | a3\n 65554: a4 = a4 >> 0x20\n 65557: a2 = a2 | a3\n 65560: a2 = a2 << 0x20\n 65563: a2 = a2 | a4\n 65566: jump [t0]\n      : @2329 (gas: 10)\n 65568: sp = sp + 0xffffffffffffffc0\n 65571: u64 [sp + 0x38] = ra\n 65574: u64 [sp + 0x30] = s0\n 65577: u64 [sp + 0x28] = s1\n 65580: s0 = sp + 0x40\n 65583: sp = sp & 0xffffffffffffffe0\n 65586: s1 = a0\n 65588: i32 a0 = sp + 0\n 65590: a1 = 0x24\n 65593: jump [t0]\n      : @2330 (gas: 12)\n 65595: a2 = u64 [sp]\n 65597: a3 = u64 [sp + 0x8]\n 65600: u64 [s1] = a2\n 65602: u64 [s1 + 0x8] = a3\n 65605: u64 [s1 + 0x10] = a0\n 65608: u64 [s1 + 0x18] = a1\n 65611: sp = s0 + 0xffffffffffffffc0\n 65614: ra = u64 [sp + 0x38]\n 65617: s0 = u64 [sp + 0x30]\n 65620: s1 = u64 [sp + 0x28]\n 65623: sp = sp + 0x40\n 65626: jump [t0]\n      : @2331 (gas: 8)\n 65628: sp = sp + 0xffffffffffffff40\n 65632: u64 [sp + 0xb8] = ra\n 65636: u64 [sp + 0xb0] = s0\n 65640: u64 [sp + 0xa8] = s1\n 65644: s0 = sp + 0xc0\n 65648: sp = sp & 0xffffffffffffffe0\n 65651: s1 = sp\n 65653: jump [t0]\n      : @2332 (gas: 12)\n 65655: a0 = u64 [s1 + 0x30]\n 65658: a1 = u64 [s1 + 0x18]\n 65661: a2 = u64 [s1 + 0x28]\n 65664: a2 = a2 | a1\n 65667: a3 = u64 [s1 + 0x20]\n 65670: a1 = a0 | a3\n 65673: a1 = a1 | a2\n 65676: a1 = a1 >> 0x20\n 65679: a2 = a2 | a3\n 65682: a2 = a2 << 0x20\n 65685: a1 = a1 | a2\n 65688: jump [t0]\n      : @2333 (gas: 8)\n 65690: a0 = a0 | a2\n 65693: a2 = a1 | a3\n 65696: a2 = a2 | a0\n 65699: a2 = a2 >> 0x20\n 65702: a0 = a0 | a3\n 65705: a0 = a0 << 0x20\n 65708: a0 = a0 | a2\n 65711: jump [t0]\n      : @2334 (gas: 5)\n 65713: u64 [s1 + 0x100] = a0\n 65717: a0 = s1 + 0x120\n 65721: a1 = s1 + 0x100\n 65725: u64 [s1 + 264] = 0\n 65729: jump [t0]\n      : @2335 (gas: 9)\n 65731: a0 = s1 + 0x200\n 65735: a3 = u64 [a0 + 0x58]\n 65738: a2 = u64 [a0 + 0x50]\n 65741: a4 = u64 [a0 + 0x48]\n 65744: a5 = u64 [a0 + 0x40]\n 65747: a0 = a4 | a3\n 65750: a1 = a5 | a2\n 65753: a0 = a0 | a1\n 65756: jump [t0]\n      : @2336 (gas: 9)\n 65758: a4 = s1 + 0x300\n 65762: a3 = u64 [a4 + 0xb8]\n 65766: a1 = u64 [a4 + 0xb0]\n 65770: a0 = u64 [a4 + 0xa8]\n 65774: a2 = u64 [a4 + 0xa0]\n 65778: a4 = a0 | a3\n 65781: a5 = a2 | a1\n 65784: a4 = a4 | a5\n 65787: jump [t0]\n      : @2337 (gas: 9)\n 65789: a4 = sp + 0x300\n 65793: a0 = u64 [a4 + 0x68]\n 65796: a1 = u64 [a4 + 0x78]\n 65799: u64 [sp + 0x48] = a1\n 65802: t2 = u64 [a4 + 0x60]\n 65805: a3 = u64 [a4 + 0x70]\n 65808: a4 = a0 ^ a2\n 65811: a5 = a0 <u a2\n 65814: jump [t0]\n      : @2338 (gas: 8)\n 65816: a0 = u64 [a2 + 0x8]\n 65819: a1 = u64 [a2]\n 65821: a2 = i32 [a2 + 0x10]\n 65824: a0 = reverse a0\n 65826: a3 = a0 >> 0x20\n 65829: a1 = reverse a1\n 65831: a4 = a1 << 0x20\n 65834: jump [t0]\n      : @2339 (gas: 7)\n 65836: a3 = u64 [s1 + 0x38]\n 65839: u64 [s1 + 0x180] = a3\n 65843: u64 [s1 + 0x1a0] = a2\n 65847: u64 [s1 + 472] = 0\n 65851: u64 [s1 + 464] = 0\n 65855: u64 [s1 + 456] = 0\n 65859: jump [t0]\n      : @2340 (gas: 9)\n 65861: a4 = s1 + 0x100\n 65865: a2 = u64 [a4 + 0xf8]\n 65869: a0 = u64 [a4 + 0xf0]\n 65873: a1 = u64 [a4 + 0xe8]\n 65877: a3 = u64 [a4 + 0xe0]\n 65881: a4 = a1 | a2\n 65884: a5 = a3 | a0\n 65887: a4 = a4 | a5\n 65890: jump [t0]\n      : @2341 (gas: 12)\n 65892: u64 [sp + 0x48] = s1\n 65895: a0 = u64 [sp + 0x40]\n 65898: a0 = a0 | s1\n 65901: a2 = u64 [sp + 0x50]\n 65904: a1 = u64 [sp + 0x58]\n 65907: a1 = a1 | a2\n 65910: a1 = a1 | a0\n 65913: a1 = a1 >> 0x20\n 65916: a0 = a0 | a2\n 65919: a0 = a0 << 0x20\n 65922: a0 = a0 | a1\n 65925: jump [t0]\n      : @2342 (gas: 8)\n 65927: a1 = sp + 0xffffffffffffffe0\n 65930: a2 = a1 & 0xffffffffffffffe0\n 65933: u64 [s1 + 0x130] = a2\n 65937: sp = a2\n 65939: i32 a0 = a0 + 0\n 65941: a1 = i32 [s1 + 0x138]\n 65945: i32 a2 = a2 + 0\n 65947: jump [t0]\n      : @2343 (gas: 9)\n 65949: sp = sp + 0xfffffffffffffc40\n 65953: a0 = sp + 0x300\n 65957: u64 [a0 + 0xb8] = ra\n 65961: u64 [a0 + 0xb0] = s0\n 65965: u64 [a0 + 0xa8] = s1\n 65969: s0 = sp + 0x3c0\n 65973: sp = sp & 0xffffffffffffffe0\n 65976: s1 = sp\n 65978: jump [t0]\n      : @2344 (gas: 11)\n 65980: a4 = s1 + 0x200\n 65984: a0 = u64 [a4 + 0x30]\n 65987: a1 = u64 [a4 + 0x38]\n 65990: a2 = u64 [a4 + 0x20]\n 65993: a3 = u64 [a4 + 0x28]\n 65996: a4 = u64 [s1 + 0x20]\n 65999: u64 [a4 + 0x10] = a0\n 66002: u64 [a4 + 0x18] = a1\n 66005: u64 [a4] = a2\n 66007: u64 [a4 + 0x8] = a3\n 66010: jump [t0]\n      : @2345 (gas: 9)\n 66012: a5 = s1 + 0x200\n 66016: u64 [a5 + 0xc0] = a4\n 66020: u64 [a5 + 0xe0] = a3\n 66024: u64 [a5 + 0xe8] = a2\n 66028: u64 [a5 + 0xf0] = a1\n 66032: u64 [a5 + 0xf8] = a0\n 66036: a0 = s1 + 0x2c0\n 66040: a1 = s1 + 0x2e0\n 66044: jump [t0]\n      : @2346 (gas: 8)\n 66046: u64 [sp + 304] = 0\n 66050: u64 [sp + 296] = 0\n 66054: u64 [sp + 288] = 0\n 66058: a0 = 0xb3512b0c00000000\n 66068: a1 = sp + 0x120\n 66072: u64 [sp + 0x138] = a0\n 66076: a0 = 0\n 66078: jump [t0]\n      : @2347 (gas: 4)\n 66080: u64 [s1 + 176] = 0\n 66084: u64 [s1 + 168] = 0\n 66088: u64 [s1 + 160] = 0\n 66092: jump [t0]\n      : @2348 (gas: 8)\n 66094: a0 = u64 [a4 + 0x30]\n 66097: a1 = u64 [a4 + 0x38]\n 66100: a2 = u64 [a4 + 0x28]\n 66103: a3 = u64 [a4 + 0x20]\n 66106: a1 = a1 | a2\n 66109: a0 = a0 | a3\n 66112: a0 = a0 | a1\n 66115: jump [t0]\n      : @2349 (gas: 4)\n 66117: a0 = a0 | a1\n 66120: a1 = 0xffffffe0\n 66130: a1 = s1 <u a1\n 66133: jump [t0]\n      : @2350 (gas: 6)\n 66135: sp = s0 + 0xffffffffffffff40\n 66139: ra = u64 [sp + 0xb8]\n 66143: s0 = u64 [sp + 0xb0]\n 66147: s1 = u64 [sp + 0xa8]\n 66151: sp = sp + 0xc0\n 66155: jump [t0]\n      : @2351 (gas: 8)\n 66157: u64 [a5 + 0x10] = t2\n 66160: a3 = a0\n 66162: u64 [a5 + 0x18] = a0\n 66165: u64 [s1 + 0x80] = t2\n 66169: u64 [s1 + 0xb8] = t1\n 66173: t2 = a1\n 66175: t1 = a4\n 66177: jump [t0]\n      : @2352 (gas: 9)\n 66179: a2 = a1 | a5\n 66182: a0 = a0 | a3\n 66185: a2 = a2 | a0\n 66188: a2 = a2 >> 0x20\n 66191: a0 = a0 | a5\n 66194: a0 = a0 << 0x20\n 66197: a0 = a0 | a2\n 66200: u64 [s1 + 0x60] = ra\n 66203: jump [t0]\n      : @2353 (gas: 6)\n 66205: a1 = a1 | a4\n 66208: a3 = 0xffffffe0\n 66218: a3 = a0 <u a3\n 66221: a3 = 0 if a2 != 0\n 66223: a3 = 0 if a1 != 0\n 66225: jump [t0]\n      : @2354 (gas: 9)\n 66227: a2 = sp + 0x200\n 66231: u64 [a2 + 0x80] = t2\n 66235: a0 = u64 [sp + 0xa0]\n 66239: u64 [a2 + 0x90] = a0\n 66243: u64 [a2 + 0x98] = a3\n 66247: a0 = sp + 0x2a0\n 66251: a1 = sp + 0x280\n 66255: u64 [a2 + 0x88] = t1\n 66259: jump [t0]\n      : @2355 (gas: 8)\n 66261: a0 = a0 + a4\n 66264: a2 = a2 + a1\n 66267: a5 = a2 <u a1\n 66270: a0 = a0 + a5\n 66273: t2 = u64 [s1 + 0x8]\n 66276: t2 = t2 + a2\n 66279: a2 = t2 <u a2\n 66282: jump [t0]\n      : @2356 (gas: 5)\n 66284: a0 = sp + 0xffffffffffffffe0\n 66287: a2 = a0 & 0xffffffffffffffe0\n 66290: u64 [s1 + 0x28] = a2\n 66293: sp = a2\n 66295: jump [t0]\n      : @2357 (gas: 6)\n 66297: a0 = a4 >u 0\n 66299: a1 = a3 <u 0x20\n 66302: a1 = a1 ^ 0x1\n 66305: a1 = a0 if a4 != 0\n 66308: a0 = a5 >u 0\n 66310: jump [t0]\n      : @2358 (gas: 4)\n 66312: u64 [s1 + 920] = 0\n 66316: u64 [s1 + 912] = 0\n 66320: u64 [s1 + 904] = 0\n 66324: jump [t0]\n      : @2359 (gas: 4)\n 66326: u64 [s1 + 504] = 0\n 66330: u64 [s1 + 496] = 0\n 66334: u64 [s1 + 488] = 0\n 66338: jump [t0]\n      : @2360 (gas: 7)\n 66340: a0 = u64 [sp + 0x10]\n 66343: u64 [sp + 0x28] = a0\n 66346: a0 = 0x24\n 66349: a1 = sp + 0x20\n 66352: a2 = u64 [sp + 0x18]\n 66355: u64 [sp + 0x20] = a2\n 66358: jump [t0]\n      : @2361 (gas: 7)\n 66360: a3 = a3 | a5\n 66363: a3 = a1 if a2 == 0\n 66366: a1 = 0xffffffffffffffff\n 66369: a0 = a1 if a4 == 0\n 66372: a3 = a1 if a4 == 0\n 66375: a5 = 0 if a2 == 0\n 66377: jump [t0]\n      : @2362 (gas: 8)\n 66379: a0 = u64 [a4 + 0xb0]\n 66383: a1 = u64 [a4 + 0xb8]\n 66387: a2 = u64 [a4 + 0xa8]\n 66391: a3 = u64 [a4 + 0xa0]\n 66395: a1 = a1 | a2\n 66398: a0 = a0 | a3\n 66401: a0 = a0 | a1\n 66404: jump [t0]\n      : @2363 (gas: 6)\n 66406: a0 = s1 + 0x1e0\n 66410: a1 = s1 + 0x1c0\n 66414: a2 = s1 + 0x1a0\n 66418: a3 = s1 + 0x180\n 66422: a4 = s1 + 0x160\n 66426: jump [t0]\n      : @2364 (gas: 7)\n 66428: sp = s0 + 0xfffffffffffffb40\n 66432: a0 = sp + 0x400\n 66436: ra = u64 [a0 + 0xb8]\n 66440: s0 = u64 [a0 + 0xb0]\n 66444: s1 = u64 [a0 + 0xa8]\n 66448: sp = sp + 0x4c0\n 66452: jump [t0]\n      : @2365 (gas: 11)\n 66454: a0 = u64 [sp + 0x58]\n 66457: u64 [sp + 0x118] = a0\n 66461: a0 = u64 [sp + 0x50]\n 66464: u64 [sp + 0x110] = a0\n 66468: a0 = u64 [sp + 0x48]\n 66471: u64 [sp + 0x108] = a0\n 66475: a0 = sp + 0x120\n 66479: a1 = sp + 0x100\n 66483: a2 = u64 [sp + 0x40]\n 66486: u64 [sp + 0x100] = a2\n 66490: jump [t0]\n      : @2366 (gas: 8)\n 66492: a0 = a0 + t1\n 66495: a2 = a3 <u a2\n 66498: a0 = a0 + a2\n 66501: a1 = a1 + a3\n 66504: a2 = a1 <u a3\n 66507: a0 = a0 + a2\n 66510: a2 = s1 + 0x300\n 66514: jump [t0]\n      : @2367 (gas: 7)\n 66516: sp = sp + 0xffffffffffffff80\n 66519: u64 [sp + 0x78] = ra\n 66522: u64 [sp + 0x70] = s0\n 66525: u64 [sp + 0x68] = s1\n 66528: s0 = sp + 0x80\n 66532: sp = sp & 0xfffffffffffffff0\n 66535: jump [t0]\n      : @2368 (gas: 4)\n 66537: u64 [s1 + 760] = 0\n 66541: u64 [s1 + 752] = 0\n 66545: u64 [s1 + 744] = 0\n 66549: jump [t0]\n      : @2369 (gas: 11)\n 66551: a0 = u64 [sp + 0x20]\n 66554: u64 [sp + 0x158] = a0\n 66558: a0 = u64 [sp + 0x18]\n 66561: u64 [sp + 0x150] = a0\n 66565: a0 = u64 [sp + 0x28]\n 66568: u64 [sp + 0x148] = a0\n 66572: a1 = sp + 0x140\n 66576: a0 = u64 [sp + 0x30]\n 66579: u64 [sp + 0x140] = a0\n 66583: a0 = u64 [sp + 0x8]\n 66586: jump [t0]\n      : @2370 (gas: 4)\n 66588: u64 [s1 + 280] = 0\n 66592: u64 [s1 + 272] = 0\n 66596: u64 [s1 + 264] = 0\n 66600: jump [t0]\n      : @2371 (gas: 6)\n 66602: sp = sp + 0xffffffffffffffd0\n 66605: u64 [sp + 0x28] = ra\n 66608: u64 [sp + 0x20] = s0\n 66611: s0 = sp + 0x30\n 66614: sp = sp & 0xfffffffffffffff0\n 66617: jump [t0]\n      : @2372 (gas: 7)\n 66619: sp = sp + 0xffffffffffffff60\n 66623: u64 [sp + 0x98] = ra\n 66627: u64 [sp + 0x90] = s0\n 66631: u64 [sp + 0x88] = s1\n 66635: s0 = sp + 0xa0\n 66639: sp = sp & 0xfffffffffffffff0\n 66642: jump [t0]\n      : @2373 (gas: 7)\n 66644: sp = sp + 0xffffffffffffff60\n 66648: u64 [sp + 0x98] = ra\n 66652: u64 [sp + 0x90] = s0\n 66656: u64 [sp + 0x88] = s1\n 66660: s0 = sp + 0xa0\n 66664: sp = sp & 0xffffffffffffffe0\n 66667: jump [t0]\n      : @2374 (gas: 2)\n 66669: a3 = a2 & 0x40\n 66672: jump @2378 if a3 != 0\n      : @2375 (gas: 1)\n 66675: jump @2377 if a2 == 0\n      : @2376 (gas: 6)\n 66678: i32 a3 = 0x40 - a2\n 66681: a3 = a1 << a3\n 66684: a1 = a1 >> a2\n 66687: a0 = a0 >> a2\n 66690: a0 = a0 | a3\n 66693: ret\n      : @2377 (gas: 1)\n 66695: ret\n      : @2378 (gas: 4)\n 66697: a0 = a2 + 0xffffffffffffffc0\n 66700: a0 = a1 >> a0\n 66703: a1 = 0\n 66705: ret\n      : @2379 (gas: 2)\n 66707: a3 = a2 & 0x40\n 66710: jump @2383 if a3 != 0\n      : @2380 (gas: 1)\n 66713: jump @2382 if a2 == 0\n      : @2381 (gas: 6)\n 66716: i32 a3 = 0x40 - a2\n 66719: a3 = a0 >> a3\n 66722: a0 = a0 << a2\n 66725: a1 = a1 << a2\n 66728: a1 = a1 | a3\n 66731: ret\n      : @2382 (gas: 1)\n 66733: ret\n      : @2383 (gas: 4)\n 66735: a1 = a2 + 0xffffffffffffffc0\n 66738: a1 = a0 << a1\n 66741: a0 = 0\n 66743: ret\n","bytecode":{"object":""},"deployedBytecode":{"object":""},"methodIdentifiers":{"CLOCK_MODE()":"4bf5d7e9","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","checkpoints(address,uint32)":"f1127ed8","clock()":"91ddadf4","decimals()":"313ce567","delegate(address)":"5c19a95c","delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":"c3cda520","delegates(address)":"587cde1e","eip712Domain()":"84b0196e","getPastTotalSupply(uint256)":"8e539e8c","getPastVotes(address,uint256)":"3a46b1a8","getVotes(address)":"9ab24eb0","name()":"06fdde03","nonces(address)":"7ecebe00","numCheckpoints(address)":"6fcfff45","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"irOptimized":"/// @use-src 0:\"@openzeppelin/contracts/governance/utils/IVotes.sol\", 1:\"@openzeppelin/contracts/governance/utils/Votes.sol\", 2:\"@openzeppelin/contracts/interfaces/IERC5267.sol\", 3:\"@openzeppelin/contracts/interfaces/IERC5805.sol\", 4:\"@openzeppelin/contracts/interfaces/IERC6372.sol\", 5:\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\", 6:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 7:\"@openzeppelin/contracts/token/ERC20/IERC20.sol\", 8:\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\", 9:\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 10:\"@openzeppelin/contracts/utils/Context.sol\", 11:\"@openzeppelin/contracts/utils/Nonces.sol\", 13:\"@openzeppelin/contracts/utils/ShortStrings.sol\", 14:\"@openzeppelin/contracts/utils/StorageSlot.sol\", 17:\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\", 20:\"@openzeppelin/contracts/utils/math/SafeCast.sol\", 22:\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\", 23:\"@openzeppelin/contracts/utils/types/Time.sol\", 24:\"contracts/PVMERC20Votes.sol\"\nobject \"PVMERC20Votes_9561\" {\n    code {\n        {\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            mstore(64, 352)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"PVMERC20Votes_9561\")\n            let argSize := sub(codesize(), programSize)\n            finalize_allocation_4603(argSize)\n            codecopy(352, programSize, argSize)\n            let _1 := add(352, argSize)\n            if slt(argSize, 160)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let offset := mload(352)\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let value0 := abi_decode_string_fromMemory(add(352, offset), _1)\n            let offset_1 := mload(384)\n            if gt(offset_1, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let value1 := abi_decode_string_fromMemory(add(352, offset_1), _1)\n            let value := mload(416)\n            let offset_2 := mload(448)\n            if gt(offset_2, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let value3 := abi_decode_string_fromMemory(add(352, offset_2), _1)\n            let offset_3 := mload(480)\n            if gt(offset_3, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            constructor_PVMERC20Votes(value0, value1, value, value3, abi_decode_string_fromMemory(add(352, offset_3), _1))\n            let _2 := mload(64)\n            let _3 := datasize(\"PVMERC20Votes_9561_deployed\")\n            codecopy(_2, dataoffset(\"PVMERC20Votes_9561_deployed\"), _3)\n            setimmutable(_2, \"3826\", mload(128))\n            setimmutable(_2, \"3828\", mload(160))\n            setimmutable(_2, \"3830\", mload(192))\n            setimmutable(_2, \"3832\", mload(224))\n            setimmutable(_2, \"3834\", mload(256))\n            setimmutable(_2, \"3837\", mload(288))\n            setimmutable(_2, \"3840\", mload(320))\n            return(_2, _3)\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation_4603(size)\n        {\n            let newFreePtr := add(352, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, 352)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory() -> memPtr\n        {\n            memPtr := mload(64)\n            finalize_allocation(memPtr, 64)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let length := mload(offset)\n            if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            let memPtr := mload(64)\n            finalize_allocation(memPtr, add(and(add(length, 0x1f), not(31)), 0x20))\n            mstore(memPtr, length)\n            if gt(add(add(offset, length), 0x20), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            mcopy(add(memPtr, 0x20), add(offset, 0x20), length)\n            mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            array := memPtr\n        }\n        /// @ast-id 9541 @src 24:355:625  \"constructor(...\"\n        function constructor_PVMERC20Votes(var_name_mpos, var_symbol_mpos, var_totalSupply, var_name2_mpos, var_version_mpos)\n        {\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let newLen := mload(var_name_mpos)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            clean_up_bytearray_end_slots_string_storage_4604(extract_byte_array_length(sload(/** @src 6:1648:1661  \"_name = name_\" */ 0x03)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ newLen)\n            let srcOffset := 0\n            srcOffset := 0x20\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage_4605()\n                let i := 0\n                for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                {\n                    sstore(dstPtr, mload(add(var_name_mpos, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 0x20)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(var_name_mpos, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 6:1648:1661  \"_name = name_\" */ 0x03, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 6:1648:1661  \"_name = name_\" */ 0x03, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := 0\n                if newLen\n                {\n                    value := mload(add(var_name_mpos, srcOffset))\n                }\n                sstore(/** @src 6:1648:1661  \"_name = name_\" */ 0x03, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n            copy_byte_array_to_storage_from_string_to_string(var_symbol_mpos)\n            /// @src 17:3493:3546  \"_name = name.toShortStringWithFallback(_nameFallback)\"\n            mstore(288, /** @src 17:3501:3546  \"name.toShortStringWithFallback(_nameFallback)\" */ fun_toShortStringWithFallback_4607(var_name2_mpos))\n            /// @src 17:3556:3618  \"_version = version.toShortStringWithFallback(_versionFallback)\"\n            mstore(320, /** @src 17:3567:3618  \"version.toShortStringWithFallback(_versionFallback)\" */ fun_toShortStringWithFallback(var_version_mpos))\n            /// @src 17:3628:3664  \"_hashedName = keccak256(bytes(name))\"\n            mstore(224, /** @src 17:3642:3664  \"keccak256(bytes(name))\" */ keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(/** @src 17:3642:3664  \"keccak256(bytes(name))\" */ var_name2_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20), mload(/** @src 17:3642:3664  \"keccak256(bytes(name))\" */ var_name2_mpos)))\n            /// @src 17:3674:3716  \"_hashedVersion = keccak256(bytes(version))\"\n            mstore(256, /** @src 17:3691:3716  \"keccak256(bytes(version))\" */ keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(/** @src 17:3691:3716  \"keccak256(bytes(version))\" */ var_version_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20), mload(/** @src 17:3691:3716  \"keccak256(bytes(version))\" */ var_version_mpos)))\n            /// @src 17:3727:3757  \"_cachedChainId = block.chainid\"\n            mstore(160, /** @src 17:3744:3757  \"block.chainid\" */ chainid())\n            /// @src 17:3767:3815  \"_cachedDomainSeparator = _buildDomainSeparator()\"\n            mstore(128, /** @src 17:3792:3815  \"_buildDomainSeparator()\" */ fun_buildDomainSeparator())\n            /// @src 17:3825:3852  \"_cachedThis = address(this)\"\n            mstore(192, /** @src 17:3847:3851  \"this\" */ address())\n            /// @src 24:606:617  \"totalSupply\"\n            fun_mint(/** @src 10:735:745  \"msg.sender\" */ caller(), /** @src 24:606:617  \"totalSupply\" */ var_totalSupply)\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function array_dataslot_string_storage_4605() -> data\n        {\n            mstore(0, /** @src 6:1648:1661  \"_name = name_\" */ 0x03)\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            data := keccak256(0, 0x20)\n        }\n        function array_dataslot_string_storage(ptr) -> data\n        {\n            mstore(0, ptr)\n            data := keccak256(0, 0x20)\n        }\n        function clean_up_bytearray_end_slots_string_storage_4604(len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 6:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _1 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _1) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ array)\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _1 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _1) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n        {\n            used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n        }\n        function copy_byte_array_to_storage_from_string_to_string(src)\n        {\n            let newLen := mload(src)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            clean_up_bytearray_end_slots_string_storage(/** @src 6:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_byte_array_length(sload(/** @src 6:1671:1688  \"_symbol = symbol_\" */ 0x04)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ newLen)\n            let srcOffset := 0\n            srcOffset := 0x20\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage(/** @src 6:1671:1688  \"_symbol = symbol_\" */ 0x04)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let i := 0\n                for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                {\n                    sstore(dstPtr, mload(add(src, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 0x20)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(src, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 6:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := 0\n                if newLen\n                {\n                    value := mload(add(src, srcOffset))\n                }\n                sstore(/** @src 6:1671:1688  \"_symbol = symbol_\" */ 0x04, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n        }\n        /// @ast-id 1168 @src 6:7439:7647  \"function _mint(address account, uint256 value) internal {...\"\n        function fun_mint(var_account, var_value)\n        {\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let _1 := and(/** @src 6:7509:7530  \"account == address(0)\" */ var_account, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n            /// @src 6:7509:7530  \"account == address(0)\"\n            let _2 := iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n            /// @src 6:7505:7596  \"if (account == address(0)) {...\"\n            if /** @src 6:7509:7530  \"account == address(0)\" */ _2\n            /// @src 6:7505:7596  \"if (account == address(0)) {...\"\n            {\n                /// @src 6:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                mstore(/** @src 6:7528:7529  \"0\" */ 0x00, /** @src 6:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 6:7553:7585  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 6:7528:7529  \"0\" */ 0x00)\n                /// @src 6:7553:7585  \"ERC20InvalidReceiver(address(0))\"\n                revert(/** @src 6:7528:7529  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n            }\n            let _3 := sload(/** @src 6:6214:6235  \"_totalSupply += value\" */ 0x02)\n            let sum := /** @src 6:7528:7529  \"0\" */ 0x00\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            sum := add(_3, var_value)\n            if gt(_3, sum) { panic_error_0x11() }\n            sstore(/** @src 6:6214:6235  \"_totalSupply += value\" */ 0x02, sum)\n            /// @src 6:6624:7049  \"if (to == address(0)) {...\"\n            _2 := /** @src 6:7528:7529  \"0\" */ 0x00\n            /// @src 6:7002:7015  \"_balances[to]\"\n            let dataSlot := /** @src 6:7528:7529  \"0\" */ 0x00\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            mstore(/** @src 6:7528:7529  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n            mstore(0x20, /** @src 6:7528:7529  \"0\" */ 0x00)\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            dataSlot := keccak256(/** @src 6:7528:7529  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)\n            sstore(/** @src 6:7002:7015  \"_balances[to]\" */ dataSlot, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(sload(/** @src 6:7002:7015  \"_balances[to]\" */ dataSlot), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ var_value))\n            /// @src 6:7064:7089  \"Transfer(from, to, value)\"\n            let _4 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n            /// @src 6:7064:7089  \"Transfer(from, to, value)\"\n            log3(_4, sub(abi_encode_uint256(_4, var_value), _4), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 6:7528:7529  \"0\" */ 0x00, /** @src 6:7064:7089  \"Transfer(from, to, value)\" */ _1)\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let _5 := sload(/** @src 6:6214:6235  \"_totalSupply += value\" */ 0x02)\n            /// @src 8:2185:2209  \"return type(uint208).max\"\n            let cleaned := /** @src 6:7528:7529  \"0\" */ 0x00\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            cleaned := /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)\n            /// @src 8:2612:2706  \"if (supply > cap) {...\"\n            if /** @src 8:2616:2628  \"supply > cap\" */ gt(_5, /** @src 8:2192:2209  \"type(uint208).max\" */ cleaned)\n            /// @src 8:2612:2706  \"if (supply > cap) {...\"\n            {\n                /// @src 8:2655:2691  \"ERC20ExceededSafeSupply(supply, cap)\"\n                mstore(/** @src 6:7528:7529  \"0\" */ 0x00, /** @src 8:2655:2691  \"ERC20ExceededSafeSupply(supply, cap)\" */ shl(225, 0x0e58ae93))\n                revert(/** @src 6:7528:7529  \"0\" */ 0x00, /** @src 8:2655:2691  \"ERC20ExceededSafeSupply(supply, cap)\" */ abi_encode_uint256_uint256_4657(_5, /** @src 8:2192:2209  \"type(uint208).max\" */ cleaned))\n            }\n            /// @src 8:2756:2761  \"value\"\n            fun_transferVotingUnits(var_account, var_value)\n        }\n        /// @ast-id 1872 @src 13:2887:3227  \"function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {...\"\n        function fun_toShortStringWithFallback_4607(var_value_mpos) -> var\n        {\n            /// @src 13:2983:2994  \"ShortString\"\n            var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n            /// @src 13:3010:3029  \"bytes(value).length\"\n            let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(/** @src 13:3010:3022  \"bytes(value)\" */ var_value_mpos)\n            /// @src 13:3006:3221  \"if (bytes(value).length < 32) {...\"\n            switch /** @src 13:3010:3034  \"bytes(value).length < 32\" */ lt(expr, /** @src 13:3032:3034  \"32\" */ 0x20)\n            case /** @src 13:3006:3221  \"if (bytes(value).length < 32) {...\" */ 0 {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(expr, sub(shl(64, 1), 1)) { panic_error_0x41() }\n                clean_up_bytearray_end_slots_string_storage(/** @src 17:3532:3545  \"_nameFallback\" */ 0x05, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_byte_array_length(sload(/** @src 17:3532:3545  \"_nameFallback\" */ 0x05)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr)\n                let srcOffset := 0\n                srcOffset := /** @src 13:3032:3034  \"32\" */ 0x20\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                switch gt(expr, 31)\n                case 1 {\n                    let loopEnd := and(expr, not(31))\n                    let dstPtr := array_dataslot_string_storage(/** @src 17:3532:3545  \"_nameFallback\" */ 0x05)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let i := 0\n                    for { }\n                    lt(i, loopEnd)\n                    {\n                        i := add(i, /** @src 13:3032:3034  \"32\" */ 0x20)\n                    }\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    {\n                        sstore(dstPtr, mload(add(var_value_mpos, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, /** @src 13:3032:3034  \"32\" */ 0x20)\n                    }\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    if lt(loopEnd, expr)\n                    {\n                        let lastValue := mload(add(var_value_mpos, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, expr), 248), not(0)))))\n                    }\n                    sstore(/** @src 17:3532:3545  \"_nameFallback\" */ 0x05, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(shl(1, expr), 1))\n                }\n                default {\n                    let value := 0\n                    if expr\n                    {\n                        value := mload(add(var_value_mpos, srcOffset))\n                    }\n                    sstore(/** @src 17:3532:3545  \"_nameFallback\" */ 0x05, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, expr))\n                }\n                /// @src 13:3168:3210  \"return ShortString.wrap(FALLBACK_SENTINEL)\"\n                var := /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ 0xff\n                /// @src 13:3168:3210  \"return ShortString.wrap(FALLBACK_SENTINEL)\"\n                leave\n            }\n            default /// @src 13:3006:3221  \"if (bytes(value).length < 32) {...\"\n            {\n                /// @src 13:3050:3077  \"return toShortString(value)\"\n                var := /** @src 13:3057:3077  \"toShortString(value)\" */ fun_toShortString(var_value_mpos)\n                /// @src 13:3050:3077  \"return toShortString(value)\"\n                leave\n            }\n        }\n        /// @ast-id 1872 @src 13:2887:3227  \"function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {...\"\n        function fun_toShortStringWithFallback(var_value_mpos) -> var\n        {\n            /// @src 13:2983:2994  \"ShortString\"\n            var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n            /// @src 13:3010:3029  \"bytes(value).length\"\n            let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(/** @src 13:3010:3022  \"bytes(value)\" */ var_value_mpos)\n            /// @src 13:3006:3221  \"if (bytes(value).length < 32) {...\"\n            switch /** @src 13:3010:3034  \"bytes(value).length < 32\" */ lt(expr, /** @src 13:3032:3034  \"32\" */ 0x20)\n            case /** @src 13:3006:3221  \"if (bytes(value).length < 32) {...\" */ 0 {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(expr, sub(shl(64, 1), 1)) { panic_error_0x41() }\n                clean_up_bytearray_end_slots_string_storage(/** @src 17:3601:3617  \"_versionFallback\" */ 0x06, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_byte_array_length(sload(/** @src 17:3601:3617  \"_versionFallback\" */ 0x06)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr)\n                let srcOffset := 0\n                srcOffset := /** @src 13:3032:3034  \"32\" */ 0x20\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                switch gt(expr, 31)\n                case 1 {\n                    let loopEnd := and(expr, not(31))\n                    let dstPtr := array_dataslot_string_storage(/** @src 17:3601:3617  \"_versionFallback\" */ 0x06)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let i := 0\n                    for { }\n                    lt(i, loopEnd)\n                    {\n                        i := add(i, /** @src 13:3032:3034  \"32\" */ 0x20)\n                    }\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    {\n                        sstore(dstPtr, mload(add(var_value_mpos, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, /** @src 13:3032:3034  \"32\" */ 0x20)\n                    }\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    if lt(loopEnd, expr)\n                    {\n                        let lastValue := mload(add(var_value_mpos, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, expr), 248), not(0)))))\n                    }\n                    sstore(/** @src 17:3601:3617  \"_versionFallback\" */ 0x06, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(shl(1, expr), 1))\n                }\n                default {\n                    let value := 0\n                    if expr\n                    {\n                        value := mload(add(var_value_mpos, srcOffset))\n                    }\n                    sstore(/** @src 17:3601:3617  \"_versionFallback\" */ 0x06, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, expr))\n                }\n                /// @src 13:3168:3210  \"return ShortString.wrap(FALLBACK_SENTINEL)\"\n                var := /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ 0xff\n                /// @src 13:3168:3210  \"return ShortString.wrap(FALLBACK_SENTINEL)\"\n                leave\n            }\n            default /// @src 13:3006:3221  \"if (bytes(value).length < 32) {...\"\n            {\n                /// @src 13:3050:3077  \"return toShortString(value)\"\n                var := /** @src 13:3057:3077  \"toShortString(value)\" */ fun_toShortString(var_value_mpos)\n                /// @src 13:3050:3077  \"return toShortString(value)\"\n                leave\n            }\n        }\n        /// @ast-id 3949 @src 17:4213:4392  \"function _buildDomainSeparator() private view returns (bytes32) {...\"\n        function fun_buildDomainSeparator() -> var\n        {\n            /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n            let _1 := mload(/** @src 17:4326:4337  \"_hashedName\" */ 224)\n            /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n            let _2 := mload(/** @src 17:4339:4353  \"_hashedVersion\" */ 256)\n            /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n            let expr_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n            /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n            let _3 := add(expr_mpos, 0x20)\n            /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n            mstore(_3, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\n            mstore(add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64), /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ _1)\n            mstore(add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 96), _2)\n            mstore(add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 128), /** @src 17:4355:4368  \"block.chainid\" */ chainid())\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            mstore(/** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 160), /** @src 17:4378:4382  \"this\" */ address())\n            /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n            mstore(expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 160)\n            /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n            finalize_allocation(expr_mpos, 192)\n            /// @src 17:4287:4385  \"return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)))\"\n            var := /** @src 17:4294:4385  \"keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)))\" */ keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _3, mload(/** @src 17:4294:4385  \"keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)))\" */ expr_mpos))\n        }\n        /// @ast-id 1774 @src 13:1708:1994  \"function toShortString(string memory str) internal pure returns (ShortString) {...\"\n        function fun_toShortString(var_str_mpos) -> var\n        {\n            /// @src 13:1836:1908  \"if (bstr.length > 31) {...\"\n            if /** @src 13:1840:1856  \"bstr.length > 31\" */ gt(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(/** @src 13:1840:1851  \"bstr.length\" */ var_str_mpos), /** @src 13:1854:1856  \"31\" */ 0x1f)\n            /// @src 13:1836:1908  \"if (bstr.length > 31) {...\"\n            {\n                /// @src 13:1879:1897  \"StringTooLong(str)\"\n                let _1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                /// @src 13:1879:1897  \"StringTooLong(str)\"\n                mstore(_1, shl(224, 0x305a27a9))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 13:1879:1897  \"StringTooLong(str)\" */ add(_1, 4), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32)\n                let length := mload(var_str_mpos)\n                mstore(add(/** @src 13:1879:1897  \"StringTooLong(str)\" */ _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36), length)\n                mcopy(add(/** @src 13:1879:1897  \"StringTooLong(str)\" */ _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68), add(var_str_mpos, 32), length)\n                mstore(add(add(/** @src 13:1879:1897  \"StringTooLong(str)\" */ _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ length), 68), /** @src -1:-1:-1 */ 0)\n                /// @src 13:1879:1897  \"StringTooLong(str)\"\n                revert(_1, add(sub(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(/** @src 13:1879:1897  \"StringTooLong(str)\" */ _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(add(length, /** @src 13:1854:1856  \"31\" */ 0x1f), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ not(31))), /** @src 13:1879:1897  \"StringTooLong(str)\" */ _1), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68))\n            }\n            /// @src 13:1957:1970  \"bytes32(bstr)\"\n            let value := /** @src -1:-1:-1 */ 0\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let length_1 := mload(var_str_mpos)\n            value := /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ mload(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(var_str_mpos, 0x20))\n            if lt(length_1, 0x20)\n            {\n                value := and(value, shl(shl(3, sub(0x20, length_1)), not(0)))\n            }\n            /// @src 13:1917:1987  \"return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length))\"\n            var := /** @src 13:1949:1985  \"uint256(bytes32(bstr)) | bstr.length\" */ or(value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ length_1)\n        }\n        function abi_encode_uint256_uint256_4657(value0, value1) -> tail\n        {\n            tail := 68\n            /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n            mstore(/** @src 8:2655:2691  \"ERC20ExceededSafeSupply(supply, cap)\" */ 4, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ value0)\n            mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ value1)\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function abi_encode_uint256_uint256(headStart, value0, value1) -> tail\n        {\n            tail := add(headStart, 64)\n            /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n            mstore(headStart, value0)\n            mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(headStart, 32), /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ value1)\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function mapping_index_access_mapping_address_uint256_of_address(key) -> dataSlot\n        {\n            mstore(0, and(key, sub(shl(160, 1), 1)))\n            mstore(0x20, /** @src 1:8010:8030  \"_delegateCheckpoints\" */ 0x09)\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            dataSlot := keccak256(0, 0x40)\n        }\n        function panic_error_0x11()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        function abi_encode_uint256(headStart, value0) -> tail\n        {\n            tail := add(headStart, 32)\n            /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n            mstore(headStart, value0)\n        }\n        /// @ast-id 438 @src 1:7276:7675  \"function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {...\"\n        function fun_transferVotingUnits(var_to, var_amount)\n        {\n            /// @src 1:7444:7470  \"SafeCast.toUint208(amount)\"\n            let expr := fun_toUint208(var_amount)\n            /// @src 1:7413:7471  \"_push(_totalCheckpoints, _add, SafeCast.toUint208(amount))\"\n            let var_oldValue := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n            /// @src 1:7413:7471  \"_push(_totalCheckpoints, _add, SafeCast.toUint208(amount))\"\n            let var_newValue := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            if /** @src 20:14374:14398  \"value > type(uint48).max\" */ gt(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            {\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, /** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ shl(228, 0x06dfcc65))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ 4, /** @src 20:14452:14454  \"48\" */ 0x30)\n                /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36, /** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                revert(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, 68)\n            }\n            /// @src 22:10406:10430  \"self._checkpoints.length\"\n            let expr_1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 1:7419:7436  \"_totalCheckpoints\" */ 0x0a)\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            let expr_2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            switch /** @src 22:10447:10455  \"pos == 0\" */ iszero(expr_1)\n            case /** @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(add(expr_1, not(0)), expr_1) { panic_error_0x11() }\n                /// @src 22:14441:14550  \"assembly {...\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, /** @src 1:7419:7436  \"_totalCheckpoints\" */ 0x0a)\n                /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                expr_2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ shr(48, sload(/** @src 22:14441:14550  \"assembly {...\" */ add(add(keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, /** @src 22:14441:14550  \"assembly {...\" */ 0x20), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr_1), not(0))))\n            }\n            default /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            {\n                expr_2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n            }\n            /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n            let expr_component, expr_component_1 := fun_insert(/** @src 1:7419:7436  \"_totalCheckpoints\" */ 0x0a, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ dispatch_internal_in_out(/** @src 1:7379:7397  \"from == address(0)\" */ 1, /** @src 1:9312:9326  \"store.latest()\" */ expr_2, /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ expr))\n            /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n            var_oldValue := expr_component\n            var_newValue := expr_component_1\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let _1 := and(/** @src 1:7495:7511  \"to == address(0)\" */ var_to, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n            /// @src 1:7491:7601  \"if (to == address(0)) {...\"\n            if /** @src 1:7495:7511  \"to == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n            /// @src 1:7491:7601  \"if (to == address(0)) {...\"\n            {\n                /// @src 1:7527:7590  \"_push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount))\"\n                let expr_component_2, expr_component_3 := fun_push_4682(/** @src 1:7563:7589  \"SafeCast.toUint208(amount)\" */ fun_toUint208(var_amount))\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            mstore(0, 0)\n            mstore(0x20, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            let value := and(sload(keccak256(0, 0x40)), sub(shl(160, 1), 1))\n            mstore(0, _1)\n            mstore(0x20, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n            /// @src 1:7661:7667  \"amount\"\n            fun_moveDelegateVotes(value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(sload(keccak256(0, 0x40)), sub(shl(160, 1), 1)), /** @src 1:7661:7667  \"amount\" */ var_amount)\n        }\n        /// @ast-id 5934 @src 20:4174:4392  \"function toUint208(uint256 value) internal pure returns (uint208) {...\"\n        function fun_toUint208(var_value) -> var\n        {\n            /// @src 20:4250:4355  \"if (value > type(uint208).max) {...\"\n            if /** @src 20:4254:4279  \"value > type(uint208).max\" */ gt(var_value, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1))\n            /// @src 20:4250:4355  \"if (value > type(uint208).max) {...\"\n            {\n                /// @src 20:4302:4344  \"SafeCastOverflowedUintDowncast(208, value)\"\n                mstore(0, /** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ shl(228, 0x06dfcc65))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 20:4302:4344  \"SafeCastOverflowedUintDowncast(208, value)\" */ 4, /** @src 20:4333:4336  \"208\" */ 0xd0)\n                /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ var_value)\n                /// @src 20:4302:4344  \"SafeCastOverflowedUintDowncast(208, value)\"\n                revert(0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n            }\n            /// @src 20:4364:4385  \"return uint208(value)\"\n            var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 20:4371:4385  \"uint208(value)\" */ var_value, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1))\n        }\n        /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n        function fun_push_4682(var_delta) -> var_oldValue, var_newValue\n        {\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            if /** @src 20:14374:14398  \"value > type(uint48).max\" */ gt(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            {\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ shl(228, 0x06dfcc65))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ 4, /** @src 20:14452:14454  \"48\" */ 0x30)\n                /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36, /** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n            }\n            /// @src 22:10406:10430  \"self._checkpoints.length\"\n            let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 1:7533:7550  \"_totalCheckpoints\" */ 0x0a)\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            let expr_1 := /** @src -1:-1:-1 */ 0\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            switch /** @src 22:10447:10455  \"pos == 0\" */ iszero(expr)\n            case /** @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(add(expr, not(0)), expr) { panic_error_0x11() }\n                /// @src 22:14441:14550  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:7533:7550  \"_totalCheckpoints\" */ 0x0a)\n                /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                expr_1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ shr(48, sload(/** @src 22:14441:14550  \"assembly {...\" */ add(add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ 0x20), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr), not(0))))\n            }\n            default /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            {\n                expr_1 := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n            let expr_component, expr_component_1 := fun_insert(/** @src 1:7533:7550  \"_totalCheckpoints\" */ 0x0a, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ dispatch_internal_in_out(/** @src 1:7552:7561  \"_subtract\" */ 2, /** @src 1:9312:9326  \"store.latest()\" */ expr_1, /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ var_delta))\n            /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n            var_oldValue := expr_component\n            var_newValue := expr_component_1\n        }\n        /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n        function fun__push(var_store_slot, var_delta) -> var_oldValue, var_newValue\n        {\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            if /** @src 20:14374:14398  \"value > type(uint48).max\" */ gt(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            {\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ shl(228, 0x06dfcc65))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ 4, /** @src 20:14452:14454  \"48\" */ 0x30)\n                /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36, /** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n            }\n            /// @src 22:10406:10430  \"self._checkpoints.length\"\n            let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 22:10406:10430  \"self._checkpoints.length\" */ var_store_slot)\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            let expr_1 := /** @src -1:-1:-1 */ 0\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            switch /** @src 22:10447:10455  \"pos == 0\" */ iszero(expr)\n            case /** @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(add(expr, not(0)), expr) { panic_error_0x11() }\n                /// @src 22:14441:14550  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ var_store_slot)\n                /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                expr_1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ shr(48, sload(/** @src 22:14441:14550  \"assembly {...\" */ add(add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ 0x20), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr), not(0))))\n            }\n            default /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            {\n                expr_1 := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n            let expr_component, expr_component_1 := fun_insert(var_store_slot, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ dispatch_internal_in_out(/** @src 1:8058:8067  \"_subtract\" */ 2, /** @src 1:9312:9326  \"store.latest()\" */ expr_1, /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ var_delta))\n            /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n            var_oldValue := expr_component\n            var_newValue := expr_component_1\n        }\n        /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n        function fun_push(var_store_slot, var_delta) -> var_oldValue, var_newValue\n        {\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            if /** @src 20:14374:14398  \"value > type(uint48).max\" */ gt(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n            /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n            {\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ shl(228, 0x06dfcc65))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ 4, /** @src 20:14452:14454  \"48\" */ 0x30)\n                /// @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"\n                mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36, /** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n            }\n            /// @src 22:10406:10430  \"self._checkpoints.length\"\n            let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 22:10406:10430  \"self._checkpoints.length\" */ var_store_slot)\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            let expr_1 := /** @src -1:-1:-1 */ 0\n            /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            switch /** @src 22:10447:10455  \"pos == 0\" */ iszero(expr)\n            case /** @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(add(expr, not(0)), expr) { panic_error_0x11() }\n                /// @src 22:14441:14550  \"assembly {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ var_store_slot)\n                /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                expr_1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ shr(48, sload(/** @src 22:14441:14550  \"assembly {...\" */ add(add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ 0x20), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr), not(0))))\n            }\n            default /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n            {\n                expr_1 := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n            let expr_component, expr_component_1 := fun_insert(var_store_slot, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 23:1020:1032  \"block.number\" */ number(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ dispatch_internal_in_out(/** @src 1:8382:8386  \"_add\" */ 1, /** @src 1:9312:9326  \"store.latest()\" */ expr_1, /** @src 1:9309:9334  \"op(store.latest(), delta)\" */ var_delta))\n            /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n            var_oldValue := expr_component\n            var_newValue := expr_component_1\n        }\n        /// @ast-id 516 @src 1:7761:8550  \"function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {...\"\n        function fun_moveDelegateVotes(var_from, var_to, var_amount)\n        {\n            /// @src 1:7862:7872  \"from != to\"\n            let _1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:7862:7872  \"from != to\" */ var_to, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n            /// @src 1:7862:7872  \"from != to\"\n            let _2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:7862:7872  \"from != to\" */ var_from, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n            /// @src 1:7862:7886  \"from != to && amount > 0\"\n            let expr := /** @src 1:7862:7872  \"from != to\" */ iszero(eq(_2, _1))\n            /// @src 1:7862:7886  \"from != to && amount > 0\"\n            if expr\n            {\n                expr := /** @src 1:7876:7886  \"amount > 0\" */ iszero(iszero(var_amount))\n            }\n            /// @src 1:7858:8544  \"if (from != to && amount > 0) {...\"\n            if expr\n            {\n                /// @src 1:7902:8217  \"if (from != address(0)) {...\"\n                if /** @src 1:7906:7924  \"from != address(0)\" */ iszero(iszero(_2))\n                /// @src 1:7902:8217  \"if (from != address(0)) {...\"\n                {\n                    /// @src 1:8010:8036  \"_delegateCheckpoints[from]\"\n                    let _3 := mapping_index_access_mapping_address_uint256_of_address(var_from)\n                    /// @src 1:7983:8133  \"_push(...\"\n                    let expr_474_component, expr_component := fun__push(_3, /** @src 1:8089:8115  \"SafeCast.toUint208(amount)\" */ fun_toUint208(var_amount))\n                    /// @src 1:8156:8202  \"DelegateVotesChanged(from, oldValue, newValue)\"\n                    let _4 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                    /// @src 1:8156:8202  \"DelegateVotesChanged(from, oldValue, newValue)\"\n                    log2(_4, sub(abi_encode_uint256_uint256(_4, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:7944:8133  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_474_component, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)), and(/** @src 1:7944:8133  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_component, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1))), /** @src 1:8156:8202  \"DelegateVotesChanged(from, oldValue, newValue)\" */ _4), 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724, _2)\n                }\n                /// @src 1:8230:8534  \"if (to != address(0)) {...\"\n                if /** @src 1:8234:8250  \"to != address(0)\" */ iszero(iszero(_1))\n                /// @src 1:8230:8534  \"if (to != address(0)) {...\"\n                {\n                    /// @src 1:8336:8360  \"_delegateCheckpoints[to]\"\n                    let _5 := mapping_index_access_mapping_address_uint256_of_address(var_to)\n                    /// @src 1:8309:8452  \"_push(...\"\n                    let expr_component_1, expr_503_component := fun_push(_5, /** @src 1:8408:8434  \"SafeCast.toUint208(amount)\" */ fun_toUint208(var_amount))\n                    /// @src 1:8475:8519  \"DelegateVotesChanged(to, oldValue, newValue)\"\n                    let _6 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                    /// @src 1:8475:8519  \"DelegateVotesChanged(to, oldValue, newValue)\"\n                    log2(_6, sub(abi_encode_uint256_uint256(_6, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:8270:8452  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_component_1, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)), and(/** @src 1:8270:8452  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_503_component, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1))), /** @src 1:8475:8519  \"DelegateVotesChanged(to, oldValue, newValue)\" */ _6), 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724, _1)\n                }\n            }\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function checked_sub_uint256(x) -> diff\n        {\n            diff := add(x, not(0))\n            if gt(diff, x) { panic_error_0x11() }\n        }\n        function extract_from_storage_value_offset_uint208(slot_value) -> value\n        { value := shr(48, slot_value) }\n        /// @ast-id 8704 @src 22:14291:14556  \"function _unsafeAccess(...\"\n        function fun_unsafeAccess(var_self_8694_slot, var_pos) -> var_result_slot\n        {\n            /// @src 22:14441:14550  \"assembly {...\"\n            mstore(0, var_self_8694_slot)\n            var_result_slot := add(keccak256(0, 0x20), var_pos)\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function cleanup_uint48(value) -> cleaned\n        {\n            cleaned := and(value, 0xffffffffffff)\n        }\n        function write_to_memory_uint48(memPtr, value)\n        {\n            mstore(memPtr, and(value, 0xffffffffffff))\n        }\n        function write_to_memory_uint208(memPtr, value)\n        {\n            mstore(memPtr, and(value, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)))\n        }\n        function update_storage_value_offset_uint208_to_uint208(slot, value)\n        {\n            let _1 := sload(slot)\n            sstore(slot, or(and(_1, 0xffffffffffff), and(shl(48, value), not(0xffffffffffff))))\n        }\n        function array_push_from_struct_Checkpoint208_to_array_struct_Checkpoint208_storage_dyn_ptr(array, value0)\n        {\n            let oldLen := sload(array)\n            if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n            let _1 := add(oldLen, 1)\n            sstore(array, _1)\n            if iszero(lt(oldLen, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x24)\n            }\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ array)\n            let slot := add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20), oldLen)\n            sstore(slot, or(and(sload(slot), not(0xffffffffffff)), and(mload(value0), 0xffffffffffff)))\n            update_storage_value_offset_uint208_to_uint208(slot, and(mload(add(value0, 0x20)), /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)))\n        }\n        /// @ast-id 8585 @src 22:11659:12581  \"function _insert(...\"\n        function fun_insert(var_self_slot, var_key, var_value) -> var_oldValue, var_newValue\n        {\n            /// @src 22:11840:11851  \"self.length\"\n            let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 22:11840:11851  \"self.length\" */ var_self_slot)\n            /// @src 22:11862:12575  \"if (pos > 0) {...\"\n            switch /** @src 22:11866:11873  \"pos > 0\" */ iszero(iszero(expr))\n            case /** @src 22:11862:12575  \"if (pos > 0) {...\" */ 0 {\n                /// @src 22:12491:12532  \"Checkpoint208({_key: key, _value: value})\"\n                let expr_8575_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ allocate_memory()\n                /// @src 22:12491:12532  \"Checkpoint208({_key: key, _value: value})\"\n                write_to_memory_uint48(expr_8575_mpos, var_key)\n                write_to_memory_uint208(add(expr_8575_mpos, 32), var_value)\n                /// @src 22:12481:12533  \"self.push(Checkpoint208({_key: key, _value: value}))\"\n                array_push_from_struct_Checkpoint208_to_array_struct_Checkpoint208_storage_dyn_ptr(var_self_slot, expr_8575_mpos)\n                /// @src 22:12547:12564  \"return (0, value)\"\n                var_oldValue := /** @src 22:11872:11873  \"0\" */ 0x00\n                /// @src 22:12547:12564  \"return (0, value)\"\n                var_newValue := var_value\n                leave\n            }\n            default /// @src 22:11862:12575  \"if (pos > 0) {...\"\n            {\n                /// @src 22:11918:11946  \"_unsafeAccess(self, pos - 1)\"\n                let expr_slot := fun_unsafeAccess(var_self_slot, /** @src 22:11938:11945  \"pos - 1\" */ checked_sub_uint256(expr))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := sload(/** @src 22:11977:11986  \"last._key\" */ expr_slot)\n                let _2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ cleanup_uint48(_1)\n                /// @src 22:12020:12031  \"last._value\"\n                let _3 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_from_storage_value_offset_uint208(_1)\n                /// @src 22:12105:12118  \"lastKey > key\"\n                let _4 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 22:12105:12118  \"lastKey > key\" */ var_key, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n                /// @src 22:12105:12118  \"lastKey > key\"\n                let _5 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 22:12105:12118  \"lastKey > key\" */ _2, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n                /// @src 22:12101:12190  \"if (lastKey > key) {...\"\n                if /** @src 22:12105:12118  \"lastKey > key\" */ gt(_5, _4)\n                /// @src 22:12101:12190  \"if (lastKey > key) {...\"\n                {\n                    /// @src 22:12145:12175  \"CheckpointUnorderedInsertion()\"\n                    mstore(/** @src 22:11872:11873  \"0\" */ 0x00, /** @src 22:12145:12175  \"CheckpointUnorderedInsertion()\" */ shl(224, 0x2520601d))\n                    revert(/** @src 22:11872:11873  \"0\" */ 0x00, /** @src 22:12145:12175  \"CheckpointUnorderedInsertion()\" */ 4)\n                }\n                /// @src 22:12249:12412  \"if (lastKey == key) {...\"\n                switch /** @src 22:12253:12267  \"lastKey == key\" */ eq(_5, _4)\n                case /** @src 22:12249:12412  \"if (lastKey == key) {...\" */ 0 {\n                    /// @src 22:12355:12396  \"Checkpoint208({_key: key, _value: value})\"\n                    let expr_8559_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ allocate_memory()\n                    /// @src 22:12355:12396  \"Checkpoint208({_key: key, _value: value})\"\n                    write_to_memory_uint48(expr_8559_mpos, var_key)\n                    write_to_memory_uint208(add(expr_8559_mpos, 32), var_value)\n                    /// @src 22:12345:12397  \"self.push(Checkpoint208({_key: key, _value: value}))\"\n                    array_push_from_struct_Checkpoint208_to_array_struct_Checkpoint208_storage_dyn_ptr(var_self_slot, expr_8559_mpos)\n                }\n                default /// @src 22:12249:12412  \"if (lastKey == key) {...\"\n                {\n                    /// @src 22:12287:12306  \"last._value = value\"\n                    update_storage_value_offset_uint208_to_uint208(expr_slot, var_value)\n                }\n                /// @src 22:12425:12450  \"return (lastValue, value)\"\n                var_oldValue := _3\n                var_newValue := var_value\n                leave\n            }\n        }\n        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n        function dispatch_internal_in_out(fun, in, in_1) -> out\n        {\n            switch fun\n            case 1 {\n                let sum := add(and(in, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)), and(in_1, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)))\n                if gt(sum, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)) { panic_error_0x11() }\n                out := sum\n            }\n            case 2 {\n                let diff := sub(and(in, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)), and(in_1, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)))\n                if gt(diff, /** @src 8:2192:2209  \"type(uint208).max\" */ sub(shl(208, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1), 1)) { panic_error_0x11() }\n                out := diff\n            }\n            default {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x51)\n                revert(0, 0x24)\n            }\n        }\n    }\n    /// @use-src 1:\"@openzeppelin/contracts/governance/utils/Votes.sol\", 6:\"@openzeppelin/contracts/token/ERC20/ERC20.sol\", 8:\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\", 10:\"@openzeppelin/contracts/utils/Context.sol\", 11:\"@openzeppelin/contracts/utils/Nonces.sol\", 13:\"@openzeppelin/contracts/utils/ShortStrings.sol\", 16:\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\", 17:\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\", 18:\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\", 19:\"@openzeppelin/contracts/utils/math/Math.sol\", 20:\"@openzeppelin/contracts/utils/math/SafeCast.sol\", 22:\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\", 23:\"@openzeppelin/contracts/utils/types/Time.sol\", 24:\"contracts/PVMERC20Votes.sol\"\n    object \"PVMERC20Votes_9561_deployed\" {\n        code {\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 { external_fun_name() }\n                    case 0x095ea7b3 { external_fun_approve() }\n                    case 0x18160ddd { external_fun_totalSupply() }\n                    case 0x23b872dd { external_fun_transferFrom() }\n                    case 0x313ce567 { external_fun_decimals() }\n                    case 0x3a46b1a8 { external_fun_getPastVotes() }\n                    case 0x4bf5d7e9 { external_fun_CLOCK_MODE() }\n                    case 0x587cde1e { external_fun_delegates() }\n                    case 0x5c19a95c { external_fun_delegate() }\n                    case 0x6fcfff45 { external_fun_numCheckpoints() }\n                    case 0x70a08231 { external_fun_balanceOf() }\n                    case 0x7ecebe00 { external_fun_nonces() }\n                    case 0x84b0196e { external_fun_eip712Domain() }\n                    case 0x8e539e8c {\n                        external_fun_getPastTotalSupply()\n                    }\n                    case 0x91ddadf4 { external_fun_clock() }\n                    case 0x95d89b41 { external_fun_symbol() }\n                    case 0x9ab24eb0 { external_fun_getVotes() }\n                    case 0xa9059cbb { external_fun_transfer() }\n                    case 0xc3cda520 { external_fun_delegateBySig() }\n                    case 0xdd62ed3e { external_fun_allowance() }\n                    case 0xf1127ed8 { external_fun_checkpoints() }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                mcopy(add(pos, 0x20), add(value, 0x20), length)\n                mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                tail := abi_encode_string_memory_ptr(value0, add(headStart, 32))\n            }\n            function external_fun_name()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPtr := mload(64)\n                let ret := 0\n                let slotValue := sload(/** @src 6:1837:1842  \"_name\" */ 0x03)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, 0x20), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), 0x20)\n                }\n                case 1 {\n                    mstore(0, /** @src 6:1837:1842  \"_name\" */ 0x03)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let dataPos := keccak256(0, 0x20)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(add(memPtr, i), 0x20), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(add(memPtr, i), 0x20)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_7510() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_uint256_7507() -> value\n            { value := calldataload(36) }\n            function abi_decode_uint256() -> value\n            { value := calldataload(68) }\n            function abi_encode_bool(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, /** @src 6:3638:3649  \"_allowances\" */ 0x01)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function external_fun_approve()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                value := calldataload(36)\n                /// @src 6:9790:9879  \"if (owner == address(0)) {...\"\n                if /** @src 6:9794:9813  \"owner == address(0)\" */ iszero(/** @src 10:735:745  \"msg.sender\" */ caller())\n                /// @src 6:9790:9879  \"if (owner == address(0)) {...\"\n                {\n                    /// @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\" */ 4, /** @src -1:-1:-1 */ 0)\n                    /// @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                let _1 := and(/** @src 6:9892:9913  \"spender == address(0)\" */ value0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 6:9888:9978  \"if (spender == address(0)) {...\"\n                if /** @src 6:9892:9913  \"spender == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                /// @src 6:9888:9978  \"if (spender == address(0)) {...\"\n                {\n                    /// @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\" */ 4, /** @src -1:-1:-1 */ 0)\n                    /// @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 10:735:745  \"msg.sender\" */ caller())\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(32, /** @src 6:8823:8827  \"true\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                sstore(/** @src 6:9987:10014  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_struct_Trace208_storage_of_address(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64), /** @src 6:9987:10014  \"_allowances[owner][spender]\" */ value0), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ value)\n                /// @src 6:10066:10097  \"Approval(owner, spender, value)\"\n                let _2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                /// @src 6:10066:10097  \"Approval(owner, spender, value)\"\n                log3(_2, sub(abi_encode_uint256(_2, value), _2), 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 10:735:745  \"msg.sender\" */ caller(), /** @src 6:10066:10097  \"Approval(owner, spender, value)\" */ _1)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                mstore(memPos, /** @src 6:8823:8827  \"true\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                return(memPos, 32)\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function external_fun_totalSupply()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let _1 := sload(/** @src 6:2908:2920  \"_totalSupply\" */ 0x02)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_transferFrom()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 96)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value1 := abi_decode_address_7510()\n                let value2 := abi_decode_uint256()\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(value0, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 6:3638:3649  \"_allowances\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := sload(/** @src 6:3638:3665  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_struct_Trace208_storage_of_address(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64), /** @src 10:735:745  \"msg.sender\" */ caller()))\n                /// @src 6:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                if /** @src 6:10561:10597  \"currentAllowance < type(uint256).max\" */ lt(_1, /** @src 6:10580:10597  \"type(uint256).max\" */ not(0))\n                /// @src 6:10557:10866  \"if (currentAllowance < type(uint256).max) {...\"\n                {\n                    /// @src 6:10613:10743  \"if (currentAllowance < value) {...\"\n                    if /** @src 6:10617:10641  \"currentAllowance < value\" */ lt(_1, value2)\n                    /// @src 6:10613:10743  \"if (currentAllowance < value) {...\"\n                    {\n                        /// @src 6:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 6:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ shl(225, 0x7dc7a0d9))\n                        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                        mstore(4, /** @src 10:735:745  \"msg.sender\" */ caller())\n                        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                        mstore(36, _1)\n                        mstore(68, value2)\n                        /// @src 6:10668:10728  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 100)\n                    }\n                    /// @src 6:10835:10840  \"false\"\n                    fun_approve(value0, /** @src 10:735:745  \"msg.sender\" */ caller(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(/** @src 6:10809:10833  \"currentAllowance - value\" */ _1, value2))\n                }\n                /// @src 6:4967:4972  \"value\"\n                fun_transfer(value0, value1, value2)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_bool(memPos), memPos))\n            }\n            function external_fun_decimals()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPos := mload(64)\n                mstore(memPos, /** @src 6:2761:2763  \"18\" */ 0x12)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                return(memPos, 32)\n            }\n            function external_fun_getPastVotes()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                value := calldataload(36)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(value0, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:4411:4431  \"_delegateCheckpoints\" */ 0x09)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64)\n                /// @src 1:4459:4488  \"_validateTimepoint(timepoint)\"\n                let _1 := fun_validateTimepoint(value)\n                /// @src 1:4411:4489  \"_delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint))\"\n                let var := /** @src -1:-1:-1 */ 0\n                /// @src 22:9703:9727  \"self._checkpoints.length\"\n                let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 22:9703:9727  \"self._checkpoints.length\" */ dataSlot)\n                /// @src 22:9738:9753  \"uint256 low = 0\"\n                let var_low := /** @src -1:-1:-1 */ 0\n                /// @src 22:9763:9781  \"uint256 high = len\"\n                let var_high := expr\n                /// @src 22:9792:10026  \"if (len > 5) {...\"\n                if /** @src 22:9796:9803  \"len > 5\" */ gt(expr, /** @src 22:9802:9803  \"5\" */ 0x05)\n                /// @src 22:9792:10026  \"if (len > 5) {...\"\n                {\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let diff := sub(expr, /** @src 22:9839:9853  \"Math.sqrt(len)\" */ fun_sqrt(expr))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    if gt(diff, expr) { panic_error_0x11() }\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ dataSlot)\n                    /// @src 22:9867:10016  \"if (key < _unsafeAccess(self._checkpoints, mid)._key) {...\"\n                    switch /** @src 22:9871:9919  \"key < _unsafeAccess(self._checkpoints, mid)._key\" */ lt(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 22:9871:9919  \"key < _unsafeAccess(self._checkpoints, mid)._key\" */ _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), and(sload(/** @src 22:14441:14550  \"assembly {...\" */ add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32), /** @src 22:14441:14550  \"assembly {...\" */ diff)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff))\n                    case /** @src 22:9867:10016  \"if (key < _unsafeAccess(self._checkpoints, mid)._key) {...\" */ 0 {\n                        /// @src 22:9988:10001  \"low = mid + 1\"\n                        var_low := /** @src 22:9994:10001  \"mid + 1\" */ checked_add_uint256(diff)\n                    }\n                    default /// @src 22:9867:10016  \"if (key < _unsafeAccess(self._checkpoints, mid)._key) {...\"\n                    {\n                        /// @src 22:9939:9949  \"high = mid\"\n                        var_high := diff\n                    }\n                }\n                /// @src 22:10050:10103  \"_upperBinaryLookup(self._checkpoints, key, low, high)\"\n                let expr_1 := fun_upperBinaryLookup(dataSlot, _1, var_low, var_high)\n                /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                let expr_2 := /** @src -1:-1:-1 */ 0\n                /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                switch /** @src 22:10121:10129  \"pos == 0\" */ iszero(expr_1)\n                case /** @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                    /// @src 22:10169:10176  \"pos - 1\"\n                    let _2 := checked_sub_uint256(expr_1)\n                    /// @src 22:10136:10177  \"_unsafeAccess(self._checkpoints, pos - 1)\"\n                    let var_result_slot := /** @src -1:-1:-1 */ 0\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 22:14441:14550  \"assembly {...\" */ dataSlot)\n                    var_result_slot := add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32), /** @src 22:14441:14550  \"assembly {...\" */ _2)\n                    /// @src 22:10136:10184  \"_unsafeAccess(self._checkpoints, pos - 1)._value\"\n                    let value_1 := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    value_1 := shr(48, sload(var_result_slot))\n                    /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                    expr_2 := value_1\n                }\n                default {\n                    expr_2 := /** @src -1:-1:-1 */ 0\n                }\n                /// @src 22:10114:10184  \"return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                var := expr_2\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                mstore(memPos, and(expr_2, sub(shl(208, 1), 1)))\n                return(memPos, 32)\n            }\n            function external_fun_CLOCK_MODE()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                /// @src 23:995:1033  \"return SafeCast.toUint48(block.number)\"\n                let var := /** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 1:3165:3258  \"if (clock() != Time.blockNumber()) {...\"\n                if /** @src 1:3169:3198  \"clock() != Time.blockNumber()\" */ iszero(eq(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:3169:3198  \"clock() != Time.blockNumber()\" */ var, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), and(/** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number()), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)))\n                /// @src 1:3165:3258  \"if (clock() != Time.blockNumber()) {...\"\n                {\n                    /// @src 1:3221:3247  \"ERC6372InconsistentClock()\"\n                    mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, /** @src 1:3221:3247  \"ERC6372InconsistentClock()\" */ shl(230, 0x01bfc1c5))\n                    revert(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, 4)\n                }\n                let size := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                _1 := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                size := 64\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, 64)\n                mstore(memPtr, 29)\n                mstore(add(memPtr, 32), \"mode=blocknumber&from=default\")\n                let memPos := mload(64)\n                let tail := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(memPos, 32)\n                tail := abi_encode_string_memory_ptr(memPtr, add(memPos, 32))\n                return(memPos, sub(tail, memPos))\n            }\n            function external_fun_delegates()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(abi_decode_address(), sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)), sub(shl(160, 1), 1))\n                let memPos := mload(0x40)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_delegate()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:5903:5912  \"delegatee\"\n                fun_delegate(/** @src 10:735:745  \"msg.sender\" */ caller(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ abi_decode_address())\n                return(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function external_fun_numCheckpoints()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(abi_decode_address(), sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:8741:8761  \"_delegateCheckpoints\" */ 0x09)\n                /// @src 22:11235:11266  \"return self._checkpoints.length\"\n                let var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40))\n                /// @src 20:15370:15473  \"if (value > type(uint32).max) {...\"\n                if /** @src 20:15374:15398  \"value > type(uint32).max\" */ gt(var, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffff)\n                /// @src 20:15370:15473  \"if (value > type(uint32).max) {...\"\n                {\n                    /// @src 20:15421:15462  \"SafeCastOverflowedUintDowncast(32, value)\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 20:15421:15462  \"SafeCastOverflowedUintDowncast(32, value)\" */ shl(228, 0x06dfcc65))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(4, 32)\n                    mstore(36, var)\n                    /// @src 20:15421:15462  \"SafeCastOverflowedUintDowncast(32, value)\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n                }\n                let memPos := mload(0x40)\n                let tail := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                tail := add(memPos, 32)\n                mstore(memPos, and(and(/** @src 20:15489:15502  \"uint32(value)\" */ var, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffff), 0xffffffff))\n                return(memPos, sub(tail, memPos))\n            }\n            function external_fun_balanceOf()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let ret := fun_balanceOf(abi_decode_address())\n                let memPos := mload(64)\n                mstore(memPos, ret)\n                return(memPos, 32)\n            }\n            function external_fun_nonces()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(abi_decode_address(), sub(shl(160, 1), 1)))\n                mstore(32, /** @src 11:624:631  \"_nonces\" */ 0x07)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40))\n                let memPos := mload(0x40)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_eip712Domain()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                /// @src 17:6191:6239  \"return _name.toStringWithFallback(_nameFallback)\"\n                let var_mpos := /** @src 17:6198:6239  \"_name.toStringWithFallback(_nameFallback)\" */ fun_toStringWithFallback(/** @src 17:6198:6203  \"_name\" */ loadimmutable(\"3837\"))\n                /// @src 17:6646:6700  \"return _version.toStringWithFallback(_versionFallback)\"\n                let var_mpos_1 := /** @src 17:6653:6700  \"_version.toStringWithFallback(_versionFallback)\" */ fun_toStringWithFallback_7523(/** @src 17:6653:6661  \"_version\" */ loadimmutable(\"3840\"))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let size := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let length := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                length := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                size := 0x20\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, size)\n                mstore(memPtr, 0)\n                let dataStart := add(memPtr, size)\n                calldatacopy(dataStart, calldatasize(), add(size, not(31)))\n                let memPos := mload(64)\n                mstore(memPos, shl(248, 15))\n                mstore(add(memPos, size), 224)\n                let tail := abi_encode_string_memory_ptr(var_mpos, add(memPos, 224))\n                mstore(add(memPos, 64), sub(tail, memPos))\n                let tail_1 := abi_encode_string_memory_ptr(var_mpos_1, tail)\n                mstore(add(memPos, 96), /** @src 17:5689:5702  \"block.chainid\" */ chainid())\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(add(memPos, 128), /** @src 17:5724:5728  \"this\" */ address())\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(add(memPos, 160), 0)\n                mstore(add(memPos, 192), sub(tail_1, memPos))\n                let pos := tail_1\n                let length_1 := mload(memPtr)\n                mstore(tail_1, length_1)\n                pos := add(tail_1, size)\n                let srcPtr := dataStart\n                let i := 0\n                for { } lt(i, length_1) { i := add(i, 1) }\n                {\n                    mstore(pos, mload(srcPtr))\n                    pos := add(pos, size)\n                    srcPtr := add(srcPtr, size)\n                }\n                return(memPos, sub(pos, memPos))\n            }\n            function external_fun_getPastTotalSupply()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                value := calldataload(4)\n                /// @src 1:5270:5299  \"_validateTimepoint(timepoint)\"\n                let _1 := fun_validateTimepoint(value)\n                /// @src 1:5234:5300  \"_totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint))\"\n                let var := /** @src -1:-1:-1 */ 0\n                /// @src 22:9703:9727  \"self._checkpoints.length\"\n                let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 1:5234:5251  \"_totalCheckpoints\" */ 0x0a)\n                /// @src 22:9738:9753  \"uint256 low = 0\"\n                let var_low := /** @src -1:-1:-1 */ 0\n                /// @src 22:9763:9781  \"uint256 high = len\"\n                let var_high := expr\n                /// @src 22:9792:10026  \"if (len > 5) {...\"\n                if /** @src 22:9796:9803  \"len > 5\" */ gt(expr, /** @src 22:9802:9803  \"5\" */ 0x05)\n                /// @src 22:9792:10026  \"if (len > 5) {...\"\n                {\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let diff := sub(expr, /** @src 22:9839:9853  \"Math.sqrt(len)\" */ fun_sqrt(expr))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    if gt(diff, expr) { panic_error_0x11() }\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:5234:5251  \"_totalCheckpoints\" */ 0x0a)\n                    /// @src 22:9867:10016  \"if (key < _unsafeAccess(self._checkpoints, mid)._key) {...\"\n                    switch /** @src 22:9871:9919  \"key < _unsafeAccess(self._checkpoints, mid)._key\" */ lt(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 22:9871:9919  \"key < _unsafeAccess(self._checkpoints, mid)._key\" */ _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff), and(sload(/** @src 22:14441:14550  \"assembly {...\" */ add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32), /** @src 22:14441:14550  \"assembly {...\" */ diff)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff))\n                    case /** @src 22:9867:10016  \"if (key < _unsafeAccess(self._checkpoints, mid)._key) {...\" */ 0 {\n                        /// @src 22:9988:10001  \"low = mid + 1\"\n                        var_low := /** @src 22:9994:10001  \"mid + 1\" */ checked_add_uint256(diff)\n                    }\n                    default /// @src 22:9867:10016  \"if (key < _unsafeAccess(self._checkpoints, mid)._key) {...\"\n                    {\n                        /// @src 22:9939:9949  \"high = mid\"\n                        var_high := diff\n                    }\n                }\n                /// @src 22:10050:10103  \"_upperBinaryLookup(self._checkpoints, key, low, high)\"\n                let expr_1 := fun_upperBinaryLookup(/** @src 1:5234:5251  \"_totalCheckpoints\" */ 0x0a, /** @src 22:10050:10103  \"_upperBinaryLookup(self._checkpoints, key, low, high)\" */ _1, var_low, var_high)\n                /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                let expr_2 := /** @src -1:-1:-1 */ 0\n                /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                switch /** @src 22:10121:10129  \"pos == 0\" */ iszero(expr_1)\n                case /** @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                    /// @src 22:10169:10176  \"pos - 1\"\n                    let _2 := checked_sub_uint256(expr_1)\n                    /// @src 22:10136:10177  \"_unsafeAccess(self._checkpoints, pos - 1)\"\n                    let var_result_slot := /** @src -1:-1:-1 */ 0\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:5234:5251  \"_totalCheckpoints\" */ 0x0a)\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    var_result_slot := add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32), /** @src 22:14441:14550  \"assembly {...\" */ _2)\n                    /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                    expr_2 := /** @src 22:10136:10184  \"_unsafeAccess(self._checkpoints, pos - 1)._value\" */ read_from_storage_split_offset_uint208(/** @src 22:10136:10177  \"_unsafeAccess(self._checkpoints, pos - 1)\" */ var_result_slot)\n                }\n                default /// @src 22:10121:10184  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                {\n                    expr_2 := /** @src -1:-1:-1 */ 0\n                }\n                /// @src 22:10114:10184  \"return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                var := expr_2\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                mstore(memPos, and(expr_2, sub(shl(208, 1), 1)))\n                return(memPos, 32)\n            }\n            function cleanup_uint48(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffff)\n            }\n            function external_fun_clock()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                /// @src 23:995:1033  \"return SafeCast.toUint48(block.number)\"\n                let var := /** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                mstore(memPos, and(var, 0xffffffffffff))\n                return(memPos, 32)\n            }\n            function external_fun_symbol()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPtr := mload(64)\n                let ret := 0\n                let slotValue := sload(4)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, 0x20), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), 0x20)\n                }\n                case 1 {\n                    mstore(0, 4)\n                    let dataPos := keccak256(0, 0x20)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(add(memPtr, i), 0x20), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(add(memPtr, i), 0x20)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n            }\n            function external_fun_getVotes()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(abi_decode_address(), sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:3868:3888  \"_delegateCheckpoints\" */ 0x09)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let cleaned := and(/** @src 1:3868:3906  \"_delegateCheckpoints[account].latest()\" */ fun_latest(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)), sub(shl(208, 1), 1))\n                let memPos := mload(0x40)\n                mstore(memPos, cleaned)\n                return(memPos, 32)\n            }\n            function external_fun_transfer()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                value := calldataload(36)\n                /// @src 6:3440:3445  \"value\"\n                fun_transfer(/** @src 10:735:745  \"msg.sender\" */ caller(), /** @src 6:3440:3445  \"value\" */ value0, value)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPos := mload(64)\n                mstore(memPos, /** @src 6:3463:3467  \"true\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                return(memPos, 32)\n            }\n            function abi_decode_bytes32() -> value\n            { value := calldataload(132) }\n            function abi_decode_bytes32_7536() -> value\n            { value := calldataload(164) }\n            function external_fun_delegateBySig()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 192)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value1 := abi_decode_uint256_7507()\n                let value2 := abi_decode_uint256()\n                let value := calldataload(100)\n                if iszero(eq(value, and(value, 0xff)))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value4 := abi_decode_bytes32()\n                let value5 := abi_decode_bytes32_7536()\n                /// @src 1:6181:6272  \"if (block.timestamp > expiry) {...\"\n                if /** @src 1:6185:6209  \"block.timestamp > expiry\" */ gt(/** @src 1:6185:6200  \"block.timestamp\" */ timestamp(), /** @src 1:6185:6209  \"block.timestamp > expiry\" */ value2)\n                /// @src 1:6181:6272  \"if (block.timestamp > expiry) {...\"\n                {\n                    /// @src 1:6232:6261  \"VotesExpiredSignature(expiry)\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:6232:6261  \"VotesExpiredSignature(expiry)\" */ shl(225, 0x2341d787))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(4, value2)\n                    /// @src 1:6232:6261  \"VotesExpiredSignature(expiry)\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                /// @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\"\n                let expr_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                /// @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\"\n                let _1 := add(expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32)\n                mstore(_1, /** @src 1:2063:2134  \"keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\")\" */ 0xe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 1:2063:2134  \"keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\")\" */ add(/** @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\" */ expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64), and(value0, sub(shl(160, 1), 1)))\n                mstore(/** @src 1:2063:2134  \"keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\")\" */ add(/** @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\" */ expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 96), value1)\n                mstore(/** @src 1:2063:2134  \"keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\")\" */ add(/** @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\" */ expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 128), value2)\n                /// @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\"\n                mstore(expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 128)\n                /// @src 1:6352:6409  \"abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\"\n                finalize_allocation(expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 160)\n                /// @src 1:6342:6410  \"keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))\"\n                let _2 := keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1, mload(/** @src 1:6342:6410  \"keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))\" */ expr_mpos))\n                /// @src 17:5153:5173  \"_domainSeparatorV4()\"\n                let _3 := fun_domainSeparatorV4()\n                /// @src 18:3993:4242  \"assembly (\\\"memory-safe\\\") {...\"\n                let usr$ptr := mload(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64)\n                /// @src 18:3993:4242  \"assembly (\\\"memory-safe\\\") {...\"\n                mstore(usr$ptr, \"\\x19\\x01\")\n                mstore(add(usr$ptr, 0x02), _3)\n                mstore(add(usr$ptr, 0x22), _2)\n                /// @src 1:6298:6466  \"ECDSA.recover(...\"\n                let expr := fun_recover(/** @src 18:3993:4242  \"assembly (\\\"memory-safe\\\") {...\" */ keccak256(usr$ptr, 0x42), /** @src 1:6298:6466  \"ECDSA.recover(...\" */ value, value4, value5)\n                /// @src 1:6501:6506  \"nonce\"\n                fun_useCheckedNonce(expr, value1)\n                /// @src 1:6535:6544  \"delegatee\"\n                fun_delegate(expr, value0)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                return(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function external_fun_allowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value1 := abi_decode_address_7510()\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(value0, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 6:3638:3649  \"_allowances\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := sload(/** @src 6:3638:3665  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_struct_Trace208_storage_of_address(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64), value1))\n                let memPos := mload(64)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function abi_encode_struct_Checkpoint208(headStart, value0) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(mload(value0), 0xffffffffffff))\n                mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(208, 1), 1)))\n            }\n            function external_fun_checkpoints()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value0 := abi_decode_address()\n                let value := calldataload(36)\n                if iszero(eq(value, and(value, 0xffffffff)))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                pop(allocate_and_zero_memory_struct_struct_Checkpoint208())\n                pop(allocate_and_zero_memory_struct_struct_Checkpoint208())\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(value0, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:9019:9039  \"_delegateCheckpoints\" */ 0x09)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64)\n                pop(allocate_and_zero_memory_struct_struct_Checkpoint208())\n                /// @src 22:11454:11476  \"self._checkpoints[pos]\"\n                let _1, _2 := storage_array_index_access_struct_Checkpoint208__dyn(dataSlot, value)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let memPtr := mload(64)\n                finalize_allocation_7540(memPtr)\n                let _3 := sload(_1)\n                mstore(memPtr, and(_3, 0xffffffffffff))\n                mstore(add(memPtr, 32), shr(48, _3))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_struct_Checkpoint208(memPos, memPtr), memPos))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                mstore(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(pos, 0x20), and(slotValue, not(255)))\n                    ret := add(add(pos, shl(5, iszero(iszero(length)))), 0x20)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ value)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(add(pos, i), 0x20), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(add(pos, i), 0x20)\n                }\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation_7540(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7554(key) -> dataSlot\n            {\n                mstore(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 6:5473:5474  \"0\" */ 0x00)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                dataSlot := keccak256(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)\n            }\n            function mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7596(key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:8010:8030  \"_delegateCheckpoints\" */ 0x09)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                dataSlot := keccak256(0, 0x40)\n            }\n            function mapping_index_access_mapping_address_struct_Trace208_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function allocate_memory() -> memPtr\n            {\n                memPtr := mload(64)\n                finalize_allocation(memPtr, 64)\n            }\n            /// @ast-id 914 @src 6:2985:3101  \"function balanceOf(address account) public view virtual returns (uint256) {...\"\n            function fun_balanceOf(var_account) -> var\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 6:3076:3085  \"_balances\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(var_account, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 6:3076:3085  \"_balances\" */ 0x00)\n                /// @src 6:3069:3094  \"return _balances[account]\"\n                var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(keccak256(/** @src 6:3076:3085  \"_balances\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40))\n            }\n            function allocate_and_zero_memory_struct_struct_Checkpoint208() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_7540(memPtr_1)\n                memPtr := memPtr_1\n                mstore(memPtr_1, /** @src -1:-1:-1 */ 0)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(add(memPtr_1, 32), /** @src -1:-1:-1 */ 0)\n            }\n            /// @ast-id 1058 @src 6:5374:5674  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := and(/** @src 6:5457:5475  \"from == address(0)\" */ var_from, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 6:5457:5475  \"from == address(0)\"\n                let _2 := iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                /// @src 6:5453:5539  \"if (from == address(0)) {...\"\n                if /** @src 6:5457:5475  \"from == address(0)\" */ _2\n                /// @src 6:5453:5539  \"if (from == address(0)) {...\"\n                {\n                    /// @src 6:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    mstore(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 6:5498:5528  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 6:5498:5528  \"ERC20InvalidSender(address(0))\" */ 4, /** @src 6:5473:5474  \"0\" */ 0x00)\n                    /// @src 6:5498:5528  \"ERC20InvalidSender(address(0))\"\n                    revert(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                let _3 := and(/** @src 6:5552:5568  \"to == address(0)\" */ var_to, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 6:5552:5568  \"to == address(0)\"\n                let _4 := iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _3)\n                /// @src 6:5548:5634  \"if (to == address(0)) {...\"\n                if /** @src 6:5552:5568  \"to == address(0)\" */ _4\n                /// @src 6:5548:5634  \"if (to == address(0)) {...\"\n                {\n                    /// @src 6:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 6:5591:5623  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 6:5591:5623  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 6:5473:5474  \"0\" */ 0x00)\n                    /// @src 6:5591:5623  \"ERC20InvalidReceiver(address(0))\"\n                    revert(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                /// @src 6:6074:6614  \"if (from == address(0)) {...\"\n                _2 := /** @src 6:5473:5474  \"0\" */ 0x00\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _5 := sload(/** @src 6:6288:6303  \"_balances[from]\" */ mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7554(var_from))\n                /// @src 6:6317:6432  \"if (fromBalance < value) {...\"\n                if /** @src 6:6321:6340  \"fromBalance < value\" */ lt(_5, var_value)\n                /// @src 6:6317:6432  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 6:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 6:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ shl(226, 0x391434e3))\n                    let tail := /** @src 6:5473:5474  \"0\" */ 0x00\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    tail := 100\n                    mstore(/** @src 6:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ 4, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                    mstore(36, /** @src 6:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ _5)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(68, /** @src 6:6367:6417  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ var_value)\n                    revert(/** @src 6:5473:5474  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 100)\n                }\n                sstore(/** @src 6:6552:6567  \"_balances[from]\" */ mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7554(var_from), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(/** @src 6:6570:6589  \"fromBalance - value\" */ _5, var_value))\n                /// @src 6:6624:7049  \"if (to == address(0)) {...\"\n                _4 := /** @src 6:5473:5474  \"0\" */ 0x00\n                /// @src 6:7002:7015  \"_balances[to]\"\n                let _6 := mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7554(var_to)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                sstore(_6, add(sload(/** @src 6:7002:7024  \"_balances[to] += value\" */ _6), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ var_value))\n                /// @src 6:7064:7089  \"Transfer(from, to, value)\"\n                let _7 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                /// @src 6:7064:7089  \"Transfer(from, to, value)\"\n                log3(_7, sub(abi_encode_uint256(_7, var_value), _7), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, _3)\n                /// @src 8:2756:2761  \"value\"\n                fun_transferVotingUnits(var_from, var_to, var_value)\n            }\n            /// @ast-id 199 @src 1:3415:3688  \"function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {...\"\n            function fun_validateTimepoint(var_timepoint) -> var\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := and(/** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number()), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n                /// @src 1:3546:3636  \"if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint)\"\n                if /** @src 1:3550:3579  \"timepoint >= currentTimepoint\" */ iszero(lt(var_timepoint, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1))\n                /// @src 1:3546:3636  \"if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint)\"\n                {\n                    /// @src 1:3588:3636  \"ERC5805FutureLookup(timepoint, currentTimepoint)\"\n                    mstore(0, shl(225, 0x7669fc0f))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 1:3588:3636  \"ERC5805FutureLookup(timepoint, currentTimepoint)\" */ 4, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ var_timepoint)\n                    mstore(36, _1)\n                    /// @src 1:3588:3636  \"ERC5805FutureLookup(timepoint, currentTimepoint)\"\n                    revert(0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n                }\n                /// @src 1:3646:3681  \"return SafeCast.toUint48(timepoint)\"\n                var := /** @src 1:3653:3681  \"SafeCast.toUint48(timepoint)\" */ fun_toUint48(var_timepoint)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function checked_sub_uint256(x) -> diff\n            {\n                diff := add(x, /** @src 6:10580:10597  \"type(uint256).max\" */ not(0))\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function checked_add_uint256(x) -> sum\n            {\n                sum := add(x, /** @src 22:10000:10001  \"1\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            function extract_from_storage_value_offset_uint208(slot_value) -> value\n            { value := shr(48, slot_value) }\n            function read_from_storage_split_offset_uint208(slot) -> value\n            { value := shr(48, sload(slot)) }\n            /// @ast-id 383 @src 1:6730:7042  \"function _delegate(address account, address delegatee) internal virtual {...\"\n            function fun_delegate(var_account, var_delegatee)\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := and(var_account, sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                mstore(0x20, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)), sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                mstore(0x20, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)\n                let _2 := and(var_delegatee, sub(shl(160, 1), 1))\n                sstore(dataSlot, or(and(sload(dataSlot), shl(160, 0xffffffffffffffffffffffff)), _2))\n                /// @src 1:6909:6957  \"DelegateChanged(account, oldDelegate, delegatee)\"\n                log4(/** @src -1:-1:-1 */ 0, 0, /** @src 1:6909:6957  \"DelegateChanged(account, oldDelegate, delegatee)\" */ 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f, _1, value, _2)\n                /// @src 1:7010:7034  \"_getVotingUnits(account)\"\n                fun_moveDelegateVotes(value, var_delegatee, /** @src 8:3137:3155  \"balanceOf(account)\" */ fun_balanceOf(/** @src 1:7010:7034  \"_getVotingUnits(account)\" */ var_account))\n            }\n            /// @ast-id 8410 @src 22:10311:10517  \"function latest(Trace208 storage self) internal view returns (uint208) {...\"\n            function fun_latest(var_self_8384_slot) -> var\n            {\n                /// @src 22:10406:10430  \"self._checkpoints.length\"\n                let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 22:10406:10430  \"self._checkpoints.length\" */ var_self_8384_slot)\n                /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                let expr_1 := /** @src 22:10406:10423  \"self._checkpoints\" */ 0\n                /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                switch /** @src 22:10447:10455  \"pos == 0\" */ iszero(expr)\n                case /** @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\" */ 0 {\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    if gt(add(expr, /** @src 6:10580:10597  \"type(uint256).max\" */ not(0)), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr) { panic_error_0x11() }\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    mstore(/** @src 22:10406:10423  \"self._checkpoints\" */ 0, /** @src 22:14441:14550  \"assembly {...\" */ var_self_8384_slot)\n                    /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                    expr_1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ shr(48, sload(/** @src 22:14441:14550  \"assembly {...\" */ add(add(keccak256(/** @src 22:10406:10423  \"self._checkpoints\" */ 0, /** @src 22:14441:14550  \"assembly {...\" */ 0x20), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ expr), /** @src 6:10580:10597  \"type(uint256).max\" */ not(0))))\n                }\n                default /// @src 22:10447:10510  \"pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                {\n                    expr_1 := /** @src 22:10406:10423  \"self._checkpoints\" */ 0\n                }\n                /// @src 22:10440:10510  \"return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value\"\n                var := expr_1\n            }\n            /// @ast-id 3755 @src 16:6887:7147  \"function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {...\"\n            function fun_recover(var_hash, var_v, var_r, var_s) -> var\n            {\n                /// @src 16:7051:7076  \"tryRecover(hash, v, r, s)\"\n                let expr_3745_component, expr_component, expr_component_1 := fun_tryRecover(var_hash, var_v, var_r, var_s)\n                /// @src 16:7105:7113  \"errorArg\"\n                fun_throwError(expr_component, expr_component_1)\n                /// @src 16:7124:7140  \"return recovered\"\n                var := expr_3745_component\n            }\n            /// @ast-id 1661 @src 11:1265:1487  \"function _useCheckedNonce(address owner, uint256 nonce) internal virtual {...\"\n            function fun_useCheckedNonce(var_owner, var_nonce)\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := and(var_owner, sub(shl(160, 1), 1))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                mstore(0x20, /** @src 11:1121:1128  \"_nonces\" */ 0x07)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)\n                let _2 := sload(/** @src 11:1121:1137  \"_nonces[owner]++\" */ dataSlot)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                sstore(dataSlot, add(/** @src 11:1121:1137  \"_nonces[owner]++\" */ _2, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1))\n                /// @src 11:1392:1481  \"if (nonce != current) {...\"\n                if /** @src 11:1396:1412  \"nonce != current\" */ iszero(eq(var_nonce, _2))\n                /// @src 11:1392:1481  \"if (nonce != current) {...\"\n                {\n                    /// @src 11:1435:1470  \"InvalidAccountNonce(owner, current)\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 11:1435:1470  \"InvalidAccountNonce(owner, current)\" */ shl(230, 0x01d4b623))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 11:1435:1470  \"InvalidAccountNonce(owner, current)\" */ 4, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                    mstore(36, _2)\n                    /// @src 11:1435:1470  \"InvalidAccountNonce(owner, current)\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n                }\n            }\n            /// @ast-id 1279 @src 6:9682:10114  \"function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {...\"\n            function fun_approve(var_owner, var_spender, var_value)\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := and(/** @src 6:9794:9813  \"owner == address(0)\" */ var_owner, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 6:9790:9879  \"if (owner == address(0)) {...\"\n                if /** @src 6:9794:9813  \"owner == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                /// @src 6:9790:9879  \"if (owner == address(0)) {...\"\n                {\n                    /// @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\" */ 4, /** @src -1:-1:-1 */ 0)\n                    /// @src 6:9836:9868  \"ERC20InvalidApprover(address(0))\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                /// @src 6:9888:9978  \"if (spender == address(0)) {...\"\n                if /** @src 6:9892:9913  \"spender == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 6:9892:9913  \"spender == address(0)\" */ var_spender, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1)))\n                /// @src 6:9888:9978  \"if (spender == address(0)) {...\"\n                {\n                    /// @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\" */ 4, /** @src -1:-1:-1 */ 0)\n                    /// @src 6:9936:9967  \"ERC20InvalidSpender(address(0))\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                mstore(0x20, /** @src 6:9987:9998  \"_allowances\" */ 0x01)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                sstore(/** @src 6:9987:10014  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_struct_Trace208_storage_of_address(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40), /** @src 6:9987:10014  \"_allowances[owner][spender]\" */ var_spender), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ var_value)\n            }\n            /// @ast-id 6494 @src 20:14296:14509  \"function toUint48(uint256 value) internal pure returns (uint48) {...\"\n            function fun_toUint48(var_value) -> var\n            {\n                /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n                if /** @src 20:14374:14398  \"value > type(uint48).max\" */ gt(var_value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n                /// @src 20:14370:14473  \"if (value > type(uint48).max) {...\"\n                {\n                    /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                    mstore(0, /** @src 20:15421:15462  \"SafeCastOverflowedUintDowncast(32, value)\" */ shl(228, 0x06dfcc65))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\" */ 4, /** @src 20:14452:14454  \"48\" */ 0x30)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(36, var_value)\n                    /// @src 20:14421:14462  \"SafeCastOverflowedUintDowncast(48, value)\"\n                    revert(0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n                }\n                /// @src 20:14482:14502  \"return uint48(value)\"\n                var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 20:14489:14502  \"uint48(value)\" */ var_value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n            }\n            function shift_right_uint256_uint8_7575(value) -> result\n            { result := shr(128, value) }\n            function shift_right_uint256_uint8_7577(value) -> result\n            { result := shr(64, value) }\n            function shift_right_uint256_uint8(value) -> result\n            { result := shr(32, value) }\n            function shift_right_uint256_uint8_7581(value) -> result\n            { result := shr(16, value) }\n            function shift_right_uint256_uint8_7583(value) -> result\n            { result := shr(8, value) }\n            function shift_right_uint256_uint8_7585(value) -> result\n            { result := shr(4, value) }\n            function shift_right_uint256_uint8_7588(value) -> result\n            { result := shr(1, value) }\n            function shift_left_uint256_uint8_7578(value) -> result\n            { result := shl(32, value) }\n            function shift_left_uint256_uint8_7580(value) -> result\n            { result := shl(16, value) }\n            function shift_left_uint256_uint8_7582(value) -> result\n            { result := shl(8, value) }\n            function shift_left_uint256_uint8(value) -> result\n            { result := shl(4, value) }\n            function shift_left_uint256_uint8_7586(value) -> result\n            { result := shl(2, value) }\n            function shift_left_uint256_uint8_7587(value) -> result\n            { result := shl(1, value) }\n            function wrapping_div_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := div(x, y)\n            }\n            /// @ast-id 5283 @src 19:20567:25748  \"function sqrt(uint256 a) internal pure returns (uint256) {...\"\n            function fun_sqrt(var_a) -> var\n            {\n                /// @src 19:20615:20622  \"uint256\"\n                var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n                /// @src 19:20724:20777  \"if (a <= 1) {...\"\n                if /** @src 19:20728:20734  \"a <= 1\" */ iszero(gt(var_a, /** @src 19:20733:20734  \"1\" */ 0x01))\n                /// @src 19:20724:20777  \"if (a <= 1) {...\"\n                {\n                    /// @src 19:20754:20762  \"return a\"\n                    var := var_a\n                    leave\n                }\n                /// @src 19:21704:21718  \"uint256 aa = a\"\n                let var_aa := var_a\n                /// @src 19:21732:21746  \"uint256 xn = 1\"\n                let var_xn := /** @src 19:20733:20734  \"1\" */ 0x01\n                /// @src 19:21761:21853  \"if (aa >= (1 << 128)) {...\"\n                if /** @src 19:21765:21781  \"aa >= (1 << 128)\" */ iszero(lt(var_a, /** @src 19:21772:21780  \"1 << 128\" */ shl(128, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 1)))\n                /// @src 19:21761:21853  \"if (aa >= (1 << 128)) {...\"\n                {\n                    /// @src 19:21801:21811  \"aa >>= 128\"\n                    var_aa := shift_right_uint256_uint8_7575(var_a)\n                    /// @src 19:21829:21838  \"xn <<= 64\"\n                    let result := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    result := 0x010000000000000000\n                    /// @src 19:21829:21838  \"xn <<= 64\"\n                    var_xn := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ result\n                }\n                /// @src 19:21866:21956  \"if (aa >= (1 << 64)) {...\"\n                if /** @src 19:21870:21885  \"aa >= (1 << 64)\" */ iszero(lt(var_aa, /** @src 19:21877:21884  \"1 << 64\" */ 0x010000000000000000))\n                /// @src 19:21866:21956  \"if (aa >= (1 << 64)) {...\"\n                {\n                    /// @src 19:21905:21914  \"aa >>= 64\"\n                    var_aa := shift_right_uint256_uint8_7577(var_aa)\n                    /// @src 19:21932:21941  \"xn <<= 32\"\n                    var_xn := shift_left_uint256_uint8_7578(var_xn)\n                }\n                /// @src 19:21969:22059  \"if (aa >= (1 << 32)) {...\"\n                if /** @src 19:21973:21988  \"aa >= (1 << 32)\" */ iszero(lt(var_aa, /** @src 19:21980:21987  \"1 << 32\" */ 0x0100000000))\n                /// @src 19:21969:22059  \"if (aa >= (1 << 32)) {...\"\n                {\n                    /// @src 19:22008:22017  \"aa >>= 32\"\n                    var_aa := shift_right_uint256_uint8(var_aa)\n                    /// @src 19:22035:22044  \"xn <<= 16\"\n                    var_xn := shift_left_uint256_uint8_7580(var_xn)\n                }\n                /// @src 19:22072:22161  \"if (aa >= (1 << 16)) {...\"\n                if /** @src 19:22076:22091  \"aa >= (1 << 16)\" */ iszero(lt(var_aa, /** @src 19:22083:22090  \"1 << 16\" */ 0x010000))\n                /// @src 19:22072:22161  \"if (aa >= (1 << 16)) {...\"\n                {\n                    /// @src 19:22111:22120  \"aa >>= 16\"\n                    var_aa := shift_right_uint256_uint8_7581(var_aa)\n                    /// @src 19:22138:22146  \"xn <<= 8\"\n                    var_xn := shift_left_uint256_uint8_7582(var_xn)\n                }\n                /// @src 19:22174:22261  \"if (aa >= (1 << 8)) {...\"\n                if /** @src 19:22178:22192  \"aa >= (1 << 8)\" */ iszero(lt(var_aa, /** @src 19:22185:22191  \"1 << 8\" */ 0x0100))\n                /// @src 19:22174:22261  \"if (aa >= (1 << 8)) {...\"\n                {\n                    /// @src 19:22212:22220  \"aa >>= 8\"\n                    var_aa := shift_right_uint256_uint8_7583(var_aa)\n                    /// @src 19:22238:22246  \"xn <<= 4\"\n                    var_xn := shift_left_uint256_uint8(var_xn)\n                }\n                /// @src 19:22274:22361  \"if (aa >= (1 << 4)) {...\"\n                if /** @src 19:22278:22292  \"aa >= (1 << 4)\" */ iszero(lt(var_aa, /** @src 19:22285:22291  \"1 << 4\" */ 0x10))\n                /// @src 19:22274:22361  \"if (aa >= (1 << 4)) {...\"\n                {\n                    /// @src 19:22312:22320  \"aa >>= 4\"\n                    var_aa := shift_right_uint256_uint8_7585(var_aa)\n                    /// @src 19:22338:22346  \"xn <<= 2\"\n                    var_xn := shift_left_uint256_uint8_7586(var_xn)\n                }\n                /// @src 19:22374:22435  \"if (aa >= (1 << 2)) {...\"\n                if /** @src 19:22378:22392  \"aa >= (1 << 2)\" */ iszero(lt(var_aa, /** @src 19:22385:22391  \"1 << 2\" */ 0x04))\n                /// @src 19:22374:22435  \"if (aa >= (1 << 2)) {...\"\n                {\n                    /// @src 19:22412:22420  \"xn <<= 1\"\n                    var_xn := shift_left_uint256_uint8_7587(var_xn)\n                }\n                /// @src 19:22860:22873  \"(3 * xn) >> 1\"\n                let expr := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mul(/** @src 19:22861:22862  \"3\" */ 0x03, /** @src 19:22861:22867  \"3 * xn\" */ var_xn))\n                /// @src 19:24765:24783  \"(xn + a / xn) >> 1\"\n                let expr_1 := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(expr, /** @src 19:24771:24777  \"a / xn\" */ wrapping_div_uint256(var_a, expr)))\n                /// @src 19:24874:24892  \"(xn + a / xn) >> 1\"\n                let expr_2 := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(expr_1, /** @src 19:24880:24886  \"a / xn\" */ wrapping_div_uint256(var_a, expr_1)))\n                /// @src 19:24985:25003  \"(xn + a / xn) >> 1\"\n                let expr_3 := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(expr_2, /** @src 19:24991:24997  \"a / xn\" */ wrapping_div_uint256(var_a, expr_2)))\n                /// @src 19:25094:25112  \"(xn + a / xn) >> 1\"\n                let expr_4 := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(expr_3, /** @src 19:25100:25106  \"a / xn\" */ wrapping_div_uint256(var_a, expr_3)))\n                /// @src 19:25204:25222  \"(xn + a / xn) >> 1\"\n                let expr_5 := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(expr_4, /** @src 19:25210:25216  \"a / xn\" */ wrapping_div_uint256(var_a, expr_4)))\n                /// @src 19:25314:25332  \"(xn + a / xn) >> 1\"\n                let expr_6 := shift_right_uint256_uint8_7588(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ add(expr_5, /** @src 19:25320:25326  \"a / xn\" */ wrapping_div_uint256(var_a, expr_5)))\n                /// @src 19:25691:25731  \"return xn - SafeCast.toUint(xn > a / xn)\"\n                var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(expr_6, /** @src 19:25703:25731  \"SafeCast.toUint(xn > a / xn)\" */ fun_toUint(/** @src 19:25719:25730  \"xn > a / xn\" */ gt(expr_6, /** @src 19:25724:25730  \"a / xn\" */ wrapping_div_uint256(var_a, expr_6))))\n            }\n            /// @ast-id 8704 @src 22:14291:14556  \"function _unsafeAccess(...\"\n            function fun_unsafeAccess(var_self_8694_slot, var_pos) -> var_result_slot\n            {\n                /// @src 22:14441:14550  \"assembly {...\"\n                mstore(0, var_self_8694_slot)\n                var_result_slot := add(keccak256(0, 0x20), var_pos)\n            }\n            /// @ast-id 8637 @src 22:12931:13364  \"function _upperBinaryLookup(...\"\n            function fun_upperBinaryLookup(var_self_8590_slot, var_key, var_low, var_high) -> var\n            {\n                /// @src 22:13107:13337  \"while (low < high) {...\"\n                for { }\n                /** @src 22:13114:13124  \"low < high\" */ lt(var_low, var_high)\n                /// @src 22:13107:13337  \"while (low < high) {...\"\n                { }\n                {\n                    /// @src 19:5967:5972  \"a & b\"\n                    let expr := and(var_low, var_high)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let sum := add(expr, shr(1, /** @src 19:5977:5982  \"a ^ b\" */ xor(var_low, var_high)))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    if gt(expr, sum) { panic_error_0x11() }\n                    /// @src 22:14441:14550  \"assembly {...\"\n                    mstore(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, /** @src 22:14441:14550  \"assembly {...\" */ var_self_8590_slot)\n                    let var_result_slot := add(keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0, /** @src 22:14441:14550  \"assembly {...\" */ 0x20), sum)\n                    /// @src 22:13195:13224  \"_unsafeAccess(self, mid)._key\"\n                    let value := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n                    value := and(sload(var_result_slot), 0xffffffffffff)\n                    /// @src 22:13191:13327  \"if (_unsafeAccess(self, mid)._key > key) {...\"\n                    switch /** @src 22:13195:13230  \"_unsafeAccess(self, mid)._key > key\" */ gt(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ value, and(/** @src 22:13195:13230  \"_unsafeAccess(self, mid)._key > key\" */ var_key, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff))\n                    case /** @src 22:13191:13327  \"if (_unsafeAccess(self, mid)._key > key) {...\" */ 0 {\n                        /// @src 22:13299:13312  \"low = mid + 1\"\n                        var_low := /** @src 22:13305:13312  \"mid + 1\" */ checked_add_uint256(sum)\n                    }\n                    default /// @src 22:13191:13327  \"if (_unsafeAccess(self, mid)._key > key) {...\"\n                    {\n                        /// @src 22:13250:13260  \"high = mid\"\n                        var_high := sum\n                    }\n                }\n                /// @src 22:13346:13357  \"return high\"\n                var := var_high\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function abi_encode_uint256_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, value0)\n                mstore(add(headStart, 32), value1)\n            }\n            /// @ast-id 516 @src 1:7761:8550  \"function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {...\"\n            function fun_moveDelegateVotes(var_from, var_to, var_amount)\n            {\n                /// @src 1:7862:7872  \"from != to\"\n                let _1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:7862:7872  \"from != to\" */ var_to, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:7862:7872  \"from != to\"\n                let _2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:7862:7872  \"from != to\" */ var_from, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:7862:7886  \"from != to && amount > 0\"\n                let expr := /** @src 1:7862:7872  \"from != to\" */ iszero(eq(_2, _1))\n                /// @src 1:7862:7886  \"from != to && amount > 0\"\n                if expr\n                {\n                    expr := /** @src 1:7876:7886  \"amount > 0\" */ iszero(iszero(var_amount))\n                }\n                /// @src 1:7858:8544  \"if (from != to && amount > 0) {...\"\n                if expr\n                {\n                    /// @src 1:7902:8217  \"if (from != address(0)) {...\"\n                    if /** @src 1:7906:7924  \"from != address(0)\" */ iszero(iszero(_2))\n                    /// @src 1:7902:8217  \"if (from != address(0)) {...\"\n                    {\n                        /// @src 1:8010:8036  \"_delegateCheckpoints[from]\"\n                        let _3 := mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7596(var_from)\n                        /// @src 1:7983:8133  \"_push(...\"\n                        let expr_474_component, expr_474_component_1 := fun_push(_3, /** @src 1:8089:8115  \"SafeCast.toUint208(amount)\" */ fun_toUint208(var_amount))\n                        /// @src 1:8156:8202  \"DelegateVotesChanged(from, oldValue, newValue)\"\n                        let _4 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                        /// @src 1:8156:8202  \"DelegateVotesChanged(from, oldValue, newValue)\"\n                        log2(_4, sub(abi_encode_uint256_uint256(_4, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:7944:8133  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_474_component, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(208, 1), 1)), and(/** @src 1:7944:8133  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_474_component_1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(208, 1), 1))), /** @src 1:8156:8202  \"DelegateVotesChanged(from, oldValue, newValue)\" */ _4), 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724, _2)\n                    }\n                    /// @src 1:8230:8534  \"if (to != address(0)) {...\"\n                    if /** @src 1:8234:8250  \"to != address(0)\" */ iszero(iszero(_1))\n                    /// @src 1:8230:8534  \"if (to != address(0)) {...\"\n                    {\n                        /// @src 1:8336:8360  \"_delegateCheckpoints[to]\"\n                        let _5 := mapping_index_access_mapping_address_struct_Trace208_storage_of_address_7596(var_to)\n                        /// @src 1:8309:8452  \"_push(...\"\n                        let expr_component, expr_503_component := fun__push(_5, /** @src 1:8408:8434  \"SafeCast.toUint208(amount)\" */ fun_toUint208(var_amount))\n                        /// @src 1:8475:8519  \"DelegateVotesChanged(to, oldValue, newValue)\"\n                        let _6 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                        /// @src 1:8475:8519  \"DelegateVotesChanged(to, oldValue, newValue)\"\n                        log2(_6, sub(abi_encode_uint256_uint256(_6, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 1:8270:8452  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_component, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(208, 1), 1)), and(/** @src 1:8270:8452  \"(uint256 oldValue, uint256 newValue) = _push(...\" */ expr_503_component, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(208, 1), 1))), /** @src 1:8475:8519  \"DelegateVotesChanged(to, oldValue, newValue)\" */ _6), 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724, _1)\n                    }\n                }\n            }\n            /// @ast-id 1899 @src 13:3368:3635  \"function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {...\"\n            function fun_toStringWithFallback(var_value) -> var_mpos\n            {\n                /// @src 13:3462:3475  \"string memory\"\n                var_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 96\n                /// @src 13:3487:3629  \"if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {...\"\n                switch /** @src 13:3491:3537  \"ShortString.unwrap(value) != FALLBACK_SENTINEL\" */ iszero(eq(var_value, /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ 0xff))\n                case /** @src 13:3487:3629  \"if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {...\" */ 0 {\n                    /// @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\"\n                    let memPtr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                    /// @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\"\n                    finalize_allocation(memPtr, sub(abi_encode_string_storage(/** @src 17:6225:6238  \"_nameFallback\" */ 0x05, /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ memPtr), memPtr))\n                    /// @src 13:3606:3618  \"return store\"\n                    var_mpos := memPtr\n                    leave\n                }\n                default /// @src 13:3487:3629  \"if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {...\"\n                {\n                    /// @src 13:2625:2665  \"uint256(ShortString.unwrap(sstr)) & 0xFF\"\n                    let expr := and(var_value, /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ 0xff)\n                    /// @src 13:2675:2744  \"if (result > 31) {...\"\n                    if /** @src 13:2679:2690  \"result > 31\" */ gt(expr, /** @src 13:2688:2690  \"31\" */ 0x1f)\n                    /// @src 13:2675:2744  \"if (result > 31) {...\"\n                    {\n                        /// @src 13:2713:2733  \"InvalidShortString()\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 13:2713:2733  \"InvalidShortString()\" */ shl(226, 0x2cd44ac3))\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 13:2713:2733  \"InvalidShortString()\" */ 4)\n                    }\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let size := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let _1 := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    _1 := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    size := 64\n                    let memPtr_1 := mload(64)\n                    finalize_allocation(memPtr_1, 64)\n                    mstore(memPtr_1, /** @src 13:2311:2313  \"32\" */ 0x20)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let dataStart := add(memPtr_1, /** @src 13:2311:2313  \"32\" */ 0x20)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    calldatacopy(dataStart, calldatasize(), add(64, not(31)))\n                    /// @src 13:2324:2430  \"assembly (\\\"memory-safe\\\") {...\"\n                    mstore(memPtr_1, expr)\n                    mstore(dataStart, var_value)\n                    /// @src 13:3553:3575  \"return toString(value)\"\n                    var_mpos := memPtr_1\n                    leave\n                }\n            }\n            /// @ast-id 1899 @src 13:3368:3635  \"function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {...\"\n            function fun_toStringWithFallback_7523(var_value) -> var_mpos\n            {\n                /// @src 13:3462:3475  \"string memory\"\n                var_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 96\n                /// @src 13:3487:3629  \"if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {...\"\n                switch /** @src 13:3491:3537  \"ShortString.unwrap(value) != FALLBACK_SENTINEL\" */ iszero(eq(var_value, /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ 0xff))\n                case /** @src 13:3487:3629  \"if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {...\" */ 0 {\n                    /// @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\"\n                    let memPtr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                    /// @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\"\n                    finalize_allocation(memPtr, sub(abi_encode_string_storage(/** @src 17:6683:6699  \"_versionFallback\" */ 0x06, /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ memPtr), memPtr))\n                    /// @src 13:3606:3618  \"return store\"\n                    var_mpos := memPtr\n                    leave\n                }\n                default /// @src 13:3487:3629  \"if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {...\"\n                {\n                    /// @src 13:2625:2665  \"uint256(ShortString.unwrap(sstr)) & 0xFF\"\n                    let expr := and(var_value, /** @src 13:1390:1456  \"0x00000000000000000000000000000000000000000000000000000000000000FF\" */ 0xff)\n                    /// @src 13:2675:2744  \"if (result > 31) {...\"\n                    if /** @src 13:2679:2690  \"result > 31\" */ gt(expr, /** @src 13:2688:2690  \"31\" */ 0x1f)\n                    /// @src 13:2675:2744  \"if (result > 31) {...\"\n                    {\n                        /// @src 13:2713:2733  \"InvalidShortString()\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 13:2713:2733  \"InvalidShortString()\" */ shl(226, 0x2cd44ac3))\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 13:2713:2733  \"InvalidShortString()\" */ 4)\n                    }\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let size := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let _1 := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    _1 := /** @src -1:-1:-1 */ 0\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    size := 64\n                    let memPtr_1 := mload(64)\n                    finalize_allocation(memPtr_1, 64)\n                    mstore(memPtr_1, /** @src 13:2311:2313  \"32\" */ 0x20)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let dataStart := add(memPtr_1, /** @src 13:2311:2313  \"32\" */ 0x20)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    calldatacopy(dataStart, calldatasize(), add(64, not(31)))\n                    /// @src 13:2324:2430  \"assembly (\\\"memory-safe\\\") {...\"\n                    mstore(memPtr_1, expr)\n                    mstore(dataStart, var_value)\n                    /// @src 13:3553:3575  \"return toString(value)\"\n                    var_mpos := memPtr_1\n                    leave\n                }\n            }\n            /// @ast-id 3928 @src 17:3945:4207  \"function _domainSeparatorV4() internal view returns (bytes32) {...\"\n            function fun_domainSeparatorV4() -> var\n            {\n                /// @src 17:3998:4005  \"bytes32\"\n                var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0\n                /// @src 17:4021:4084  \"address(this) == _cachedThis && block.chainid == _cachedChainId\"\n                let expr := /** @src 17:4021:4049  \"address(this) == _cachedThis\" */ eq(/** @src 17:4029:4033  \"this\" */ address(), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 17:4038:4049  \"_cachedThis\" */ loadimmutable(\"3830\"), /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1)))\n                /// @src 17:4021:4084  \"address(this) == _cachedThis && block.chainid == _cachedChainId\"\n                if expr\n                {\n                    expr := /** @src 17:4053:4084  \"block.chainid == _cachedChainId\" */ eq(/** @src 17:4053:4066  \"block.chainid\" */ chainid(), /** @src 17:4070:4084  \"_cachedChainId\" */ loadimmutable(\"3828\"))\n                }\n                /// @src 17:4017:4201  \"if (address(this) == _cachedThis && block.chainid == _cachedChainId) {...\"\n                switch expr\n                case 0 {\n                    /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n                    let expr_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                    /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n                    let _1 := add(expr_mpos, 0x20)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(_1, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 64), /** @src 17:4326:4337  \"_hashedName\" */ loadimmutable(\"3832\"))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 96), /** @src 17:4339:4353  \"_hashedVersion\" */ loadimmutable(\"3834\"))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 128), /** @src 17:4355:4368  \"block.chainid\" */ chainid())\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ add(/** @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\" */ expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 160), /** @src 17:4029:4033  \"this\" */ address())\n                    /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n                    mstore(expr_mpos, /** @src 17:2079:2174  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 160)\n                    /// @src 17:4304:4384  \"abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))\"\n                    finalize_allocation(expr_mpos, 192)\n                    /// @src 17:4160:4190  \"return _buildDomainSeparator()\"\n                    var := /** @src 17:4294:4385  \"keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)))\" */ keccak256(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1, mload(/** @src 17:4294:4385  \"keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)))\" */ expr_mpos))\n                    /// @src 17:4160:4190  \"return _buildDomainSeparator()\"\n                    leave\n                }\n                default /// @src 17:4017:4201  \"if (address(this) == _cachedThis && block.chainid == _cachedChainId) {...\"\n                {\n                    /// @src 17:4100:4129  \"return _cachedDomainSeparator\"\n                    var := /** @src 17:4107:4129  \"_cachedDomainSeparator\" */ loadimmutable(\"3826\")\n                    /// @src 17:4100:4129  \"return _cachedDomainSeparator\"\n                    leave\n                }\n            }\n            /// @ast-id 3719 @src 16:5203:6754  \"function tryRecover(...\"\n            function fun_tryRecover(var_hash, var_v, var_r, var_s) -> var_recovered, var_err, var_errArg\n            {\n                /// @src 16:6266:6430  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                if /** @src 16:6270:6349  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ gt(var_s, /** @src 16:6283:6349  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)\n                /// @src 16:6266:6430  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                {\n                    /// @src 16:6365:6419  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_recovered := /** @src 16:6381:6382  \"0\" */ 0x00\n                    /// @src 16:6365:6419  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_err := /** @src 16:6385:6415  \"RecoverError.InvalidSignatureS\" */ 3\n                    /// @src 16:6365:6419  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_errArg := var_s\n                    leave\n                }\n                /// @src 16:6541:6565  \"ecrecover(hash, v, r, s)\"\n                let _1 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ mload(64)\n                mstore(_1, var_hash)\n                mstore(add(_1, 32), and(var_v, 0xff))\n                mstore(add(_1, 64), var_r)\n                mstore(add(_1, 96), var_s)\n                /// @src 16:6541:6565  \"ecrecover(hash, v, r, s)\"\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 16:6541:6565  \"ecrecover(hash, v, r, s)\"\n                if iszero(staticcall(gas(), 1, _1, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 128, /** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 32))\n                /// @src 16:6541:6565  \"ecrecover(hash, v, r, s)\"\n                {\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, 0, returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 16:6541:6565  \"ecrecover(hash, v, r, s)\"\n                let _2 := mload(/** @src -1:-1:-1 */ 0)\n                /// @src 16:6575:6688  \"if (signer == address(0)) {...\"\n                if /** @src 16:6579:6599  \"signer == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 16:6579:6599  \"signer == address(0)\" */ _2, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1)))\n                /// @src 16:6575:6688  \"if (signer == address(0)) {...\"\n                {\n                    /// @src 16:6615:6677  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_recovered := /** @src -1:-1:-1 */ 0\n                    /// @src 16:6615:6677  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_err := /** @src 16:6541:6565  \"ecrecover(hash, v, r, s)\" */ 1\n                    /// @src 16:6615:6677  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_errArg := /** @src -1:-1:-1 */ 0\n                    /// @src 16:6615:6677  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    leave\n                }\n                /// @src 16:6698:6747  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var_recovered := _2\n                var_err := /** @src -1:-1:-1 */ 0\n                /// @src 16:6698:6747  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var_errArg := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function validator_assert_enum_RecoverError(value)\n            {\n                if iszero(lt(value, 4))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(0, 0x24)\n                }\n            }\n            /// @ast-id 3804 @src 16:7280:7812  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n            function fun_throwError(var_error, var_errorArg)\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                validator_assert_enum_RecoverError(var_error)\n                /// @src 16:7362:7806  \"if (error == RecoverError.NoError) {...\"\n                switch /** @src 16:7366:7395  \"error == RecoverError.NoError\" */ iszero(var_error)\n                case /** @src 16:7362:7806  \"if (error == RecoverError.NoError) {...\" */ 0 {\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    validator_assert_enum_RecoverError(var_error)\n                    /// @src 16:7458:7806  \"if (error == RecoverError.InvalidSignature) {...\"\n                    switch /** @src 16:7462:7500  \"error == RecoverError.InvalidSignature\" */ eq(var_error, /** @src 16:7471:7500  \"RecoverError.InvalidSignature\" */ 1)\n                    case /** @src 16:7458:7806  \"if (error == RecoverError.InvalidSignature) {...\" */ 0 {\n                        /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                        validator_assert_enum_RecoverError(var_error)\n                        /// @src 16:7563:7806  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        switch /** @src 16:7567:7611  \"error == RecoverError.InvalidSignatureLength\" */ eq(var_error, /** @src 16:7576:7611  \"RecoverError.InvalidSignatureLength\" */ 2)\n                        case /** @src 16:7563:7806  \"if (error == RecoverError.InvalidSignatureLength) {...\" */ 0 {\n                            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                            validator_assert_enum_RecoverError(var_error)\n                            /// @src 16:7697:7806  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            if /** @src 16:7701:7740  \"error == RecoverError.InvalidSignatureS\" */ eq(var_error, /** @src 16:7710:7740  \"RecoverError.InvalidSignatureS\" */ 3)\n                            /// @src 16:7697:7806  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            {\n                                /// @src 16:7763:7795  \"ECDSAInvalidSignatureS(errorArg)\"\n                                mstore(/** @src 16:7375:7395  \"RecoverError.NoError\" */ 0, /** @src 16:7763:7795  \"ECDSAInvalidSignatureS(errorArg)\" */ shl(226, 0x35e2f383))\n                                let tail := /** @src -1:-1:-1 */ 0\n                                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                                tail := 36\n                                mstore(/** @src 16:7634:7680  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ 4, /** @src 16:7763:7795  \"ECDSAInvalidSignatureS(errorArg)\" */ var_errorArg)\n                                revert(/** @src 16:7375:7395  \"RecoverError.NoError\" */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                            }\n                        }\n                        default /// @src 16:7563:7806  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        {\n                            /// @src 16:7634:7680  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            mstore(/** @src 16:7375:7395  \"RecoverError.NoError\" */ 0, /** @src 16:7634:7680  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ shl(224, 0xfce698f7))\n                            let tail_1 := /** @src -1:-1:-1 */ 0\n                            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                            tail_1 := 36\n                            mstore(/** @src 16:7634:7680  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ 4, var_errorArg)\n                            revert(/** @src 16:7375:7395  \"RecoverError.NoError\" */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 36)\n                        }\n                    }\n                    default /// @src 16:7458:7806  \"if (error == RecoverError.InvalidSignature) {...\"\n                    {\n                        /// @src 16:7523:7546  \"ECDSAInvalidSignature()\"\n                        mstore(/** @src 16:7375:7395  \"RecoverError.NoError\" */ 0, /** @src 16:7523:7546  \"ECDSAInvalidSignature()\" */ shl(224, 0xf645eedf))\n                        revert(/** @src 16:7375:7395  \"RecoverError.NoError\" */ 0, /** @src 16:7523:7546  \"ECDSAInvalidSignature()\" */ 4)\n                    }\n                }\n                default /// @src 16:7362:7806  \"if (error == RecoverError.NoError) {...\"\n                {\n                    /// @src 16:7411:7418  \"return;\"\n                    leave\n                }\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function storage_array_index_access_struct_Checkpoint208__dyn(array, index) -> slot, offset\n            {\n                if iszero(lt(index, sload(array)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ array)\n                slot := add(keccak256(/** @src -1:-1:-1 */ 0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x20), index)\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function write_to_memory_uint48(memPtr, value)\n            {\n                mstore(memPtr, and(value, 0xffffffffffff))\n            }\n            function write_to_memory_uint208(memPtr, value)\n            {\n                mstore(memPtr, and(value, sub(shl(208, 1), 1)))\n            }\n            /// @ast-id 7503 @src 20:34795:34940  \"function toUint(bool b) internal pure returns (uint256 u) {...\"\n            function fun_toUint(var_b) -> var_u\n            {\n                /// @src 20:34863:34934  \"assembly (\\\"memory-safe\\\") {...\"\n                var_u := iszero(iszero(var_b))\n            }\n            /// @ast-id 5934 @src 20:4174:4392  \"function toUint208(uint256 value) internal pure returns (uint208) {...\"\n            function fun_toUint208(var_value) -> var\n            {\n                /// @src 20:4250:4355  \"if (value > type(uint208).max) {...\"\n                if /** @src 20:4254:4279  \"value > type(uint208).max\" */ gt(var_value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(208, 1), 1))\n                /// @src 20:4250:4355  \"if (value > type(uint208).max) {...\"\n                {\n                    /// @src 20:4302:4344  \"SafeCastOverflowedUintDowncast(208, value)\"\n                    mstore(0, /** @src 20:15421:15462  \"SafeCastOverflowedUintDowncast(32, value)\" */ shl(228, 0x06dfcc65))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(/** @src 20:4302:4344  \"SafeCastOverflowedUintDowncast(208, value)\" */ 4, /** @src 20:4333:4336  \"208\" */ 0xd0)\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    mstore(36, var_value)\n                    /// @src 20:4302:4344  \"SafeCastOverflowedUintDowncast(208, value)\"\n                    revert(0, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 68)\n                }\n                /// @src 20:4364:4385  \"return uint208(value)\"\n                var := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 20:4371:4385  \"uint208(value)\" */ var_value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(208, 1), 1))\n            }\n            /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n            function fun_push(var_store_slot, var_delta) -> var_oldValue, var_newValue\n            {\n                /// @ast-id 588\n                let var_op_functionIdentifier := /** @src 1:8058:8067  \"_subtract\" */ 2\n                /// @src 1:9300:9307  \"clock()\"\n                let expr := /** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 1:9312:9326  \"store.latest()\"\n                let _1 := fun_latest(var_store_slot)\n                /// @src 1:9309:9334  \"op(store.latest(), delta)\"\n                let out := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                var_op_functionIdentifier := /** @src 1:8058:8067  \"_subtract\" */ 2\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let diff := sub(and(_1, sub(shl(208, 1), 1)), and(var_delta, sub(shl(208, 1), 1)))\n                if gt(diff, sub(shl(208, 1), 1)) { panic_error_0x11() }\n                out := diff\n                /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n                let expr_component, expr_component_1 := fun_insert(var_store_slot, expr, diff)\n                /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n                var_oldValue := expr_component\n                var_newValue := expr_component_1\n            }\n            /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n            function fun__push(var_store_slot, var_delta) -> var_oldValue, var_newValue\n            {\n                /// @ast-id 588\n                let var_op_functionIdentifier := /** @src 1:8382:8386  \"_add\" */ 1\n                /// @src 1:9300:9307  \"clock()\"\n                let expr := /** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 1:9312:9326  \"store.latest()\"\n                let _1 := fun_latest(var_store_slot)\n                /// @src 1:9309:9334  \"op(store.latest(), delta)\"\n                let out := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                var_op_functionIdentifier := /** @src 1:8382:8386  \"_add\" */ 1\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let sum := add(and(_1, sub(shl(208, 1), 1)), and(var_delta, sub(shl(208, 1), 1)))\n                if gt(sum, sub(shl(208, 1), 1)) { panic_error_0x11() }\n                out := sum\n                /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n                let expr_component, expr_component_1 := fun_insert(var_store_slot, expr, sum)\n                /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n                var_oldValue := expr_component\n                var_newValue := expr_component_1\n            }\n            /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n            function fun_push_7627(var_delta) -> var_oldValue, var_newValue\n            {\n                /// @ast-id 588\n                let var_op_functionIdentifier := /** @src 1:7552:7561  \"_subtract\" */ 2\n                /// @src 1:9300:9307  \"clock()\"\n                let expr := /** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number())\n                /// @src 1:9312:9326  \"store.latest()\"\n                let _1 := fun_latest(/** @src 1:7533:7550  \"_totalCheckpoints\" */ 0x0a)\n                /// @src 1:9309:9334  \"op(store.latest(), delta)\"\n                let out := /** @src -1:-1:-1 */ 0\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                var_op_functionIdentifier := /** @src 1:7552:7561  \"_subtract\" */ 2\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let diff := sub(and(_1, sub(shl(208, 1), 1)), and(var_delta, sub(shl(208, 1), 1)))\n                if gt(diff, sub(shl(208, 1), 1)) { panic_error_0x11() }\n                out := diff\n                /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n                let expr_component, expr_component_1 := fun_insert(/** @src 1:7533:7550  \"_totalCheckpoints\" */ 0x0a, /** @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\" */ expr, diff)\n                /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n                var_oldValue := expr_component\n                var_newValue := expr_component_1\n            }\n            /// @ast-id 438 @src 1:7276:7675  \"function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {...\"\n            function fun_transferVotingUnits(var_from, var_to, var_amount)\n            {\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _1 := and(/** @src 1:7379:7397  \"from == address(0)\" */ var_from, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:7375:7482  \"if (from == address(0)) {...\"\n                if /** @src 1:7379:7397  \"from == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                /// @src 1:7375:7482  \"if (from == address(0)) {...\"\n                {\n                    /// @src 1:7444:7470  \"SafeCast.toUint208(amount)\"\n                    let expr := fun_toUint208(var_amount)\n                    /// @src 1:7413:7471  \"_push(_totalCheckpoints, _add, SafeCast.toUint208(amount))\"\n                    let var_oldValue := /** @src 1:7395:7396  \"0\" */ 0x00\n                    /// @src 1:7413:7471  \"_push(_totalCheckpoints, _add, SafeCast.toUint208(amount))\"\n                    let var_newValue := /** @src 1:7395:7396  \"0\" */ 0x00\n                    /// @ast-id 588 @src 1:9069:9342  \"function _push(...\"\n                    let var_op_functionIdentifier := /** @src 1:7438:7442  \"_add\" */ 1\n                    /// @src 1:9300:9307  \"clock()\"\n                    let expr_1 := /** @src 23:1002:1033  \"SafeCast.toUint48(block.number)\" */ fun_toUint48(/** @src 23:1020:1032  \"block.number\" */ number())\n                    /// @src 1:9312:9326  \"store.latest()\"\n                    let _2 := fun_latest(/** @src 1:7419:7436  \"_totalCheckpoints\" */ 0x0a)\n                    /// @src 1:9309:9334  \"op(store.latest(), delta)\"\n                    let out := /** @src 1:7395:7396  \"0\" */ 0x00\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    var_op_functionIdentifier := /** @src 1:7438:7442  \"_add\" */ 1\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let sum := add(and(_2, sub(shl(208, 1), 1)), and(expr, sub(shl(208, 1), 1)))\n                    if gt(sum, sub(shl(208, 1), 1)) { panic_error_0x11() }\n                    out := sum\n                    /// @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\"\n                    let expr_component, expr_component_1 := fun_insert(/** @src 1:7419:7436  \"_totalCheckpoints\" */ 0x0a, /** @src 22:8311:8349  \"_insert(self._checkpoints, key, value)\" */ expr_1, sum)\n                    /// @src 1:9282:9335  \"return store.push(clock(), op(store.latest(), delta))\"\n                    var_oldValue := expr_component\n                    var_newValue := expr_component_1\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let _3 := and(/** @src 1:7495:7511  \"to == address(0)\" */ var_to, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sub(shl(160, 1), 1))\n                /// @src 1:7491:7601  \"if (to == address(0)) {...\"\n                if /** @src 1:7495:7511  \"to == address(0)\" */ iszero(/** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _3)\n                /// @src 1:7491:7601  \"if (to == address(0)) {...\"\n                {\n                    /// @src 1:7527:7590  \"_push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount))\"\n                    let expr_423_component, expr_423_component_1 := fun_push_7627(/** @src 1:7563:7589  \"SafeCast.toUint208(amount)\" */ fun_toUint208(var_amount))\n                }\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                mstore(/** @src 1:7395:7396  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _1)\n                mstore(0x20, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n                /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                let value := and(sload(keccak256(/** @src 1:7395:7396  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)), sub(shl(160, 1), 1))\n                mstore(/** @src 1:7395:7396  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ _3)\n                mstore(0x20, /** @src 1:5674:5684  \"_delegatee\" */ 0x08)\n                /// @src 1:7661:7667  \"amount\"\n                fun_moveDelegateVotes(value, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(sload(keccak256(/** @src 1:7395:7396  \"0\" */ 0x00, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0x40)), sub(shl(160, 1), 1)), /** @src 1:7661:7667  \"amount\" */ var_amount)\n            }\n            /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n            function update_storage_value_offset_uint208_to_uint208(slot, value)\n            {\n                let _1 := sload(slot)\n                sstore(slot, or(and(_1, 0xffffffffffff), and(shl(48, value), not(0xffffffffffff))))\n            }\n            function array_push_from_struct_Checkpoint208_to_array_struct_Checkpoint208_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Checkpoint208__dyn(array, oldLen)\n                if offset\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0)\n                    revert(0, 0x24)\n                }\n                sstore(slot, or(and(sload(slot), not(0xffffffffffff)), and(mload(value0), 0xffffffffffff)))\n                update_storage_value_offset_uint208_to_uint208(slot, and(mload(add(value0, 32)), sub(shl(208, 1), 1)))\n            }\n            /// @ast-id 8585 @src 22:11659:12581  \"function _insert(...\"\n            function fun_insert(var_self_slot, var_key, var_value) -> var_oldValue, var_newValue\n            {\n                /// @src 22:11840:11851  \"self.length\"\n                let expr := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ sload(/** @src 22:11840:11851  \"self.length\" */ var_self_slot)\n                /// @src 22:11862:12575  \"if (pos > 0) {...\"\n                switch /** @src 22:11866:11873  \"pos > 0\" */ iszero(iszero(expr))\n                case /** @src 22:11862:12575  \"if (pos > 0) {...\" */ 0 {\n                    /// @src 22:12491:12532  \"Checkpoint208({_key: key, _value: value})\"\n                    let expr_8575_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ allocate_memory()\n                    /// @src 22:12491:12532  \"Checkpoint208({_key: key, _value: value})\"\n                    write_to_memory_uint48(expr_8575_mpos, var_key)\n                    write_to_memory_uint208(add(expr_8575_mpos, 32), var_value)\n                    /// @src 22:12481:12533  \"self.push(Checkpoint208({_key: key, _value: value}))\"\n                    array_push_from_struct_Checkpoint208_to_array_struct_Checkpoint208_storage_dyn_ptr(var_self_slot, expr_8575_mpos)\n                    /// @src 22:12547:12564  \"return (0, value)\"\n                    var_oldValue := /** @src 22:11872:11873  \"0\" */ 0x00\n                    /// @src 22:12547:12564  \"return (0, value)\"\n                    var_newValue := var_value\n                    leave\n                }\n                default /// @src 22:11862:12575  \"if (pos > 0) {...\"\n                {\n                    /// @src 22:11918:11946  \"_unsafeAccess(self, pos - 1)\"\n                    let expr_slot := fun_unsafeAccess(var_self_slot, /** @src 22:11938:11945  \"pos - 1\" */ checked_sub_uint256(expr))\n                    /// @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\"\n                    let _1 := sload(/** @src 22:11977:11986  \"last._key\" */ expr_slot)\n                    let _2 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ cleanup_uint48(_1)\n                    /// @src 22:12020:12031  \"last._value\"\n                    let _3 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ extract_from_storage_value_offset_uint208(_1)\n                    /// @src 22:12105:12118  \"lastKey > key\"\n                    let _4 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 22:12105:12118  \"lastKey > key\" */ var_key, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n                    /// @src 22:12105:12118  \"lastKey > key\"\n                    let _5 := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ and(/** @src 22:12105:12118  \"lastKey > key\" */ _2, /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ 0xffffffffffff)\n                    /// @src 22:12101:12190  \"if (lastKey > key) {...\"\n                    if /** @src 22:12105:12118  \"lastKey > key\" */ gt(_5, _4)\n                    /// @src 22:12101:12190  \"if (lastKey > key) {...\"\n                    {\n                        /// @src 22:12145:12175  \"CheckpointUnorderedInsertion()\"\n                        mstore(/** @src 22:11872:11873  \"0\" */ 0x00, /** @src 22:12145:12175  \"CheckpointUnorderedInsertion()\" */ shl(224, 0x2520601d))\n                        revert(/** @src 22:11872:11873  \"0\" */ 0x00, /** @src 22:12145:12175  \"CheckpointUnorderedInsertion()\" */ 4)\n                    }\n                    /// @src 22:12249:12412  \"if (lastKey == key) {...\"\n                    switch /** @src 22:12253:12267  \"lastKey == key\" */ eq(_5, _4)\n                    case /** @src 22:12249:12412  \"if (lastKey == key) {...\" */ 0 {\n                        /// @src 22:12355:12396  \"Checkpoint208({_key: key, _value: value})\"\n                        let expr_8559_mpos := /** @src 24:312:788  \"contract PVMERC20Votes is ERC20Votes {...\" */ allocate_memory()\n                        /// @src 22:12355:12396  \"Checkpoint208({_key: key, _value: value})\"\n                        write_to_memory_uint48(expr_8559_mpos, var_key)\n                        write_to_memory_uint208(add(expr_8559_mpos, 32), var_value)\n                        /// @src 22:12345:12397  \"self.push(Checkpoint208({_key: key, _value: value}))\"\n                        array_push_from_struct_Checkpoint208_to_array_struct_Checkpoint208_storage_dyn_ptr(var_self_slot, expr_8559_mpos)\n                    }\n                    default /// @src 22:12249:12412  \"if (lastKey == key) {...\"\n                    {\n                        /// @src 22:12287:12306  \"last._value = value\"\n                        update_storage_value_offset_uint208_to_uint208(expr_slot, var_value)\n                    }\n                    /// @src 22:12425:12450  \"return (lastValue, value)\"\n                    var_oldValue := _3\n                    var_newValue := var_value\n                    leave\n                }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201df624668276e95d09a84bd330b9f66046f5eaa82610bd6198d88a8b016a40d964736f6c634300081c0033\"\n    }\n}\n","hash":"e2c332c1b27255db93adc0e6e30e509967d9cb4bbb915762f4ff120b335fbc49","factoryDependencies":{}}}}}}