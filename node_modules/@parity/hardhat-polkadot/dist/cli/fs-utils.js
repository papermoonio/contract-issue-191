"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllFilesMatching = getAllFilesMatching;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
/**
 * Returns an array of files (not dirs) that match a condition.
 *
 * @param absolutePathToDir A directory. If it doesn't exist `[]` is returned.
 * @param matches A function to filter files (not directories)
 * @returns An array of absolute paths. Each file has its true case, except
 *  for the initial absolutePathToDir part, which preserves the given casing.
 *  No order is guaranteed.
 */
async function getAllFilesMatching(absolutePathToDir, matches) {
    const dir = await readdir(absolutePathToDir);
    const results = await Promise.all(dir.map(async (file) => {
        const absolutePathToFile = path_1.default.join(absolutePathToDir, file);
        const stats = await promises_1.default.stat(absolutePathToFile);
        if (stats.isDirectory()) {
            const files = await getAllFilesMatching(absolutePathToFile, matches);
            return files.flat();
        }
        else if (matches === undefined || matches(absolutePathToFile)) {
            return absolutePathToFile;
        }
        else {
            return [];
        }
    }));
    return results.flat();
}
async function readdir(absolutePathToDir) {
    try {
        return await promises_1.default.readdir(absolutePathToDir);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (e) {
        if (e.code === "ENOENT") {
            return [];
        }
        if (e.code === "ENOTDIR") {
            throw new Error(absolutePathToDir, e);
        }
        throw new Error(e.message, e);
    }
}
//# sourceMappingURL=fs-utils.js.map