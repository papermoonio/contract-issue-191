"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runScript = runScript;
exports.runScriptWithHardhat = runScriptWithHardhat;
const execution_mode_1 = require("hardhat/internal/core/execution-mode");
const env_variables_1 = require("hardhat/internal/core/params/env-variables");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
async function runScript(config, scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {
    const { fork } = await Promise.resolve().then(() => __importStar(require("child_process")));
    const processExecArgv = withFixedInspectArg(process.execArgv);
    const nodeArgs = [
        ...processExecArgv,
        ...getTsNodeArgsIfNeeded(scriptPath, extraEnvVars.HARDHAT_TYPECHECK === "true"),
        ...extraNodeArgs,
    ];
    const { commandArgs, server, port } = await (0, utils_1.startServer)(config);
    await server.listen(commandArgs.nodeCommands, commandArgs.adapterCommands, false);
    await (0, utils_1.waitForNodeToBeReady)(port);
    const envVars = { ...process.env, ...extraEnvVars, polkadotNodePort: port.toString() };
    return new Promise((resolve, reject) => {
        const childProcess = fork(scriptPath, scriptArgs, {
            stdio: "inherit",
            execArgv: nodeArgs,
            env: envVars,
        });
        childProcess.once("close", async (status) => {
            await server.stop();
            resolve(status);
        });
        childProcess.once("error", async (error) => {
            await server.stop();
            reject(error);
        });
    });
}
async function runScriptWithHardhat(config, hardhatArguments, scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {
    return runScript(config, scriptPath, scriptArgs, [...extraNodeArgs, "--require", path_1.default.join(__dirname, "register")], {
        ...(0, env_variables_1.getEnvVariablesMap)(hardhatArguments),
        ...extraEnvVars,
    });
}
function withFixedInspectArg(argv) {
    const fixIfInspectArg = (arg) => {
        if (arg.toLowerCase().includes("--inspect-brk=")) {
            return "--inspect";
        }
        return arg;
    };
    return argv.map(fixIfInspectArg);
}
function getTsNodeArgsIfNeeded(scriptPath, shouldTypecheck) {
    if (process.execArgv.includes("ts-node/register")) {
        return [];
    }
    if ((0, execution_mode_1.isRunningHardhatCoreTests)()) {
        return ["--require", "ts-node/register/transpile-only"];
    }
    // If the script we are going to run is .ts we need ts-node
    if (/\.tsx?$/i.test(scriptPath)) {
        return ["--require", `ts-node/register${shouldTypecheck ? "" : "/transpile-only"}`];
    }
    return [];
}
//# sourceMappingURL=script-runner.js.map