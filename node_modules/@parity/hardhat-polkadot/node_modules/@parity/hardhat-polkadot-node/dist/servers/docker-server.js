"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerRpcServer = void 0;
const chalk_1 = __importDefault(require("chalk"));
const run_container_1 = require("run-container");
const dockerode_1 = __importDefault(require("dockerode"));
const constants_1 = require("../constants");
const ADAPTER_CONTAINER_NAME = "eth-rpc-adapter";
const NODE_CONTAINER_NAME = "substrate-node";
const NODE_RPC_URL_BASE_URL = process.env.CI ? "127.0.0.1" : "host.docker.internal";
class DockerRpcServer {
    adapterContainer = null;
    nodeContainer = null;
    docker;
    constructor() {
        this.docker = new dockerode_1.default({ socketPath: "/var/run/docker.sock" });
    }
    async pruneContainerByName(containerName) {
        const containers = await this.docker.listContainers({ all: true });
        for (const meta of containers) {
            if (meta.Names.some((name) => name.includes(containerName))) {
                await this.docker.getContainer(meta.Id).remove({ force: true });
            }
        }
    }
    async listen(nodeArgs = [], adapterArgs = [], blockProcess = true) {
        const adapterPortArg = adapterArgs.find((arg) => arg.startsWith("--port="));
        const adapterPort = adapterPortArg
            ? parseInt(adapterPortArg.split("=")[1], 10)
            : constants_1.ETH_RPC_ADAPTER_START_PORT;
        const nodePortArg = nodeArgs.find((arg) => arg.startsWith("--rpc-port="));
        const nodePort = nodePortArg ? parseInt(nodePortArg.split("=")[1], 10) : constants_1.NODE_START_PORT;
        // remove running containers
        await this.pruneContainerByName(ADAPTER_CONTAINER_NAME);
        await this.pruneContainerByName(NODE_CONTAINER_NAME);
        // start both containers
        this.nodeContainer = await (0, run_container_1.runSimple)({
            name: NODE_CONTAINER_NAME,
            image: "paritypr/substrate:8492-286a9fd2",
            autoRemove: true,
            ports: {
                [`${nodePort}/tcp`]: `${nodePort}`,
            },
            cmd: ["--dev", "--rpc-port", `${nodePort}`, "--unsafe-rpc-external"],
            verbose: true,
        });
        this.adapterContainer = await (0, run_container_1.run)({
            Image: "paritypr/eth-rpc:master-f331a447",
            name: ADAPTER_CONTAINER_NAME,
            HostConfig: {
                NetworkMode: process.env.CI ? "host" : undefined,
                AutoRemove: true,
                PortBindings: process.env.CI
                    ? undefined
                    : {
                        [`${adapterPort}/tcp`]: [{ HostPort: `${adapterPort}` }],
                    },
            },
            ExposedPorts: {
                [`${adapterPort}/tcp`]: {},
            },
            Cmd: [
                "--dev",
                "--rpc-port",
                `${adapterPort}`,
                "--node-rpc-url",
                `ws://${NODE_RPC_URL_BASE_URL}:${nodePort}`,
                "--unsafe-rpc-external",
                "--rpc-cors",
                "all",
            ],
            Tty: false,
            Env: [],
        });
        if (blockProcess) {
            console.info(chalk_1.default.green(`Starting the Eth RPC Adapter at 127.0.0.1:${adapterPort}`));
            // show docker logs in client console
            await Promise.all([
                (async () => {
                    const stream = await this.nodeContainer.attach({
                        stream: true,
                        stdout: true,
                        stderr: true,
                    });
                    this.nodeContainer.modem.demuxStream(stream, process.stdout, process.stderr);
                })(),
            ]);
            await Promise.all([this.adapterContainer.wait(), this.nodeContainer.wait()]);
        }
    }
    async stop() {
        const dockerProcesses = [];
        if (this.adapterContainer) {
            dockerProcesses.push(this.adapterContainer.remove({ force: true }));
        }
        if (this.nodeContainer) {
            dockerProcesses.push(this.nodeContainer.remove({ force: true }));
        }
        await Promise.all(dockerProcesses);
    }
}
exports.DockerRpcServer = DockerRpcServer;
//# sourceMappingURL=docker-server.js.map