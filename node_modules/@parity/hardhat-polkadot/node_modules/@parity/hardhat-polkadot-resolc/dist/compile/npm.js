"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileWithNpm = compileWithNpm;
exports.updateSolc = updateSolc;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const util_1 = require("util");
const semver_1 = __importDefault(require("semver"));
const resolc_1 = require("@parity/resolc");
const errors_1 = require("../errors");
const _exec = (0, util_1.promisify)(child_process_1.exec);
async function compileWithNpm(input, config) {
    const sources = (0, resolc_1.resolveInputs)(input.sources);
    if (config.settings?.optimizer?.enabled) {
        const optimizer = {
            enabled: true,
            mode: config.settings?.optimizer?.parameters,
            fallback_to_optimizing_for_size: config.settings?.optimizer?.fallbackOz,
            runs: config.settings?.optimizer?.runs,
        };
        const out = (0, resolc_1.compile)(sources, { optimizer });
        return out;
    }
    else if (config.settings?.optimizer?.enabled === false) {
        const optimizer = {
            enabled: false,
        };
        const out = (0, resolc_1.compile)(sources, { optimizer });
        return out;
    }
    else {
        const out = (0, resolc_1.compile)(sources);
        return out;
    }
}
function updateSolc(version) {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const packagePath = require(path_1.default.resolve("node_modules/solc/package.json"));
    if (semver_1.default.satisfies(packagePath.version, version)) {
        return;
    }
    try {
        (0, child_process_1.execSync)(`npm install --save-dev --save-exact solc@${version} --quiet`, {
            stdio: "inherit",
        });
    }
    catch (error) {
        throw new errors_1.ResolcPluginError(`Compilation failed during solc@${version} installtion: ${error.message}`);
    }
}
//# sourceMappingURL=npm.js.map