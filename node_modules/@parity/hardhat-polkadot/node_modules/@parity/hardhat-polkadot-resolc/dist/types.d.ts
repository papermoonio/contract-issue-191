import type { CompilerInput, SolcConfig } from "hardhat/types";
type EvmVersions = "homestead" | "tangerineWhistle" | "spuriousDragon" | "byzantium" | "constantinople" | "petersburg" | "istanbul" | "berlin" | "london" | "paris" | "shanghai" | "cancun";
type SuppresWarningsOpts = "ecrecover" | "sendtransfer" | "extcodesize" | "txorigin" | "blocktimestamp" | "blocknumber" | "blockhash";
export interface ResolcConfig {
    version: string;
    compilerSource?: "binary" | "npm";
    settings?: {
        basePath?: string;
        includePaths?: string[];
        allowPaths?: string;
        outputDir?: string;
        optimizer?: {
            enabled?: boolean;
            parameters?: "0" | "1" | "2" | "3" | "s" | "z";
            fallbackOz?: boolean;
            runs?: number;
        };
        solcPath?: string;
        evmVersion?: EvmVersions;
        forceEVMLA?: boolean;
        suppressWarnings?: SuppresWarningsOpts[];
        debugOutputDir?: string;
        compilerPath?: string;
        contractsToCompile?: string[];
        emitDourceDebugInfo?: boolean;
        disableSolcOptimizer?: boolean;
        batchSize?: number;
    };
}
export interface ReviveCompilerInput extends CompilerInput {
    suppressedWarnings?: string[];
    suppressedErrors?: string[];
}
export interface MissingLibrary {
    contractName: string;
    contractPath: string;
    missingLibraries: string[];
}
export interface SolcConfigData {
    compiler: SolcConfig;
    file?: string;
}
export interface ContractBatch {
    [key: string]: object | string;
}
export interface ContractSource {
    [key: string]: object;
}
export interface Sources {
    [key: string]: {
        id: number;
        ast: object;
    };
}
export interface CompiledOutput {
    contracts: ContractSource;
    sources: Sources;
    errors: string[];
    version: string;
    long_version: string;
    revive_version: string;
}
export {};
