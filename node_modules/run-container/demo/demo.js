"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const dockerode_1 = __importDefault(require("dockerode"));
const docker = new dockerode_1.default({ socketPath: "/var/run/docker.sock" });
const demoContainerName = "run-container-demo-pg";
async function go() {
    await maybePruneContainer({ name: demoContainerName });
    const container = await (0, __1.runSimple)({
        name: demoContainerName,
        autoRemove: true,
        verbose: true,
        image: "postgres",
        ports: {
            "5432": "4000",
        },
        env: {
            POSTGRES_PASSWORD: `demo`,
        },
    });
    await new Promise((res) => setTimeout(res, 1000));
    const stats = await container.inspect();
    console.log(stats);
    await container.remove({ force: true });
}
async function maybePruneContainer({ name }) {
    const containers = await docker.listContainers({ all: true });
    const existingContainerMeta = containers.find((container) => container.Names.some((containerName) => containerName.match(name)));
    if (existingContainerMeta) {
        const existingContainer = await docker.getContainer(existingContainerMeta.Id);
        await existingContainer.remove({ force: true });
    }
}
go();
//# sourceMappingURL=demo.js.map